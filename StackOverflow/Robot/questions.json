[
  {
    "Id": "508f718a-097c-425a-842a-1fed9b7d5f78",
    "QuestionId": 4660142,
    "Description": "What is a NullReferenceException, and how do I fix it?",
    "Votes": 1874,
    "Views": 1470264,
    "Tags": [
      "c#",
      ".net",
      "vb.net",
      "null",
      "nullreferenceexception"
    ],
    "Discussions": [
      "\nWhat is the cause?\nBottom Line\nYou are trying to use something that is null (or Nothing in VB.NET). This means you either set it to null, or you never set it to anything at all.\nLike anything else, null gets passed around. If it is null in method \u0022A\u0022, it could be that method \u0022B\u0022 passed a null to method \u0022A\u0022.\nnull can have different meanings:\n\nObject variables which are uninitialized and hence point to nothing. In this case, if you access properties or methods of such objects, it causes a NullReferenceException.\nThe developer is using null intentionally to indicate there is no meaningful value available. Note that C# has the concept of nullable datatypes for variables (like database tables can have nullable fields) - you can assign null to them to indicate there is no value stored in it, for example int? a = null; where the question mark indicates it is allowed to store null in variable a. You can check that either with if (a.HasValue) {...} or with if (a==null) {...}. Nullable variables, like a this example, allow to access the value via a.Value explicitly, or just as normal via a. Note that accessing it via a.Value throws an InvalidOperationException instead of a NullReferenceException if a is null - you should do the check beforehand, i.e. if you have another on-nullable variable int b; then you should do assignments like if (a.HasValue) { b = a.Value; } or shorter if (a != null) { b = a; }.\n\nThe rest of this article goes into more detail and shows mistakes that many programmers often make which can lead to a NullReferenceException.\nMore Specifically\nThe runtime throwing a NullReferenceException always means the same thing: you are trying to use a reference, and the reference is not initialized (or it was once initialized, but is no longer initialized).\nThis means the reference is null, and you cannot access members (such as methods) through a null reference. The simplest case:\nstring foo = null;\nfoo.ToUpper();\n\nThis will throw a NullReferenceException at the second line because you can\u0027t call the instance method ToUpper() on a string reference pointing to null.\nDebugging\nHow do you find the source of a NullReferenceException? Apart from looking at the exception itself, which will be thrown exactly at the location where it occurs, the general rules of debugging in Visual Studio apply: place strategic breakpoints and inspect your variables, either by hovering the mouse over their names, opening a (Quick)Watch window or using the various debugging panels like Locals and Autos.\nIf you want to find out where the reference is or isn\u0027t set, right-click its name and select \u0022Find All References\u0022. You can then place a breakpoint at every found location and run your program with the debugger attached. Every time the debugger breaks on such a breakpoint, you need to determine whether you expect the reference to be non-null, inspect the variable, and verify that it points to an instance when you expect it to.\nBy following the program flow this way, you can find the location where the instance should not be null, and why it isn\u0027t properly set.\nExamples\nSome common scenarios where the exception can be thrown:\nGeneric\nref1.ref2.ref3.member\n\nIf ref1 or ref2 or ref3 is null, then you\u0027ll get a NullReferenceException. If you want to solve the problem, then find out which one is null by rewriting the expression to its simpler equivalent:\nvar r1 = ref1;\nvar r2 = r1.ref2;\nvar r3 = r2.ref3;\nr3.member\n\nSpecifically, in HttpContext.Current.User.Identity.Name, the HttpContext.Current could be null, or the User property could be null, or the Identity property could be null.\nIndirect\npublic class Person \n{\n    public int Age { get; set; }\n}\npublic class Book \n{\n    public Person Author { get; set; }\n}\npublic class Example \n{\n    public void Foo() \n    {\n        Book b1 = new Book();\n        int authorAge = b1.Author.Age; // You never initialized the Author property.\n                                       // there is no Person to get an Age from.\n    }\n}\n\nIf you want to avoid the child (Person) null reference, you could initialize it in the parent (Book) object\u0027s constructor.\nNested Object Initializers\nThe same applies to nested object initializers:\nBook b1 = new Book \n{ \n   Author = { Age = 45 } \n};\n\nThis translates to:\nBook b1 = new Book();\nb1.Author.Age = 45;\n\nWhile the new keyword is used, it only creates a new instance of Book, but not a new instance of Person, so the Author the property is still null.\nNested Collection Initializers\npublic class Person \n{\n    public ICollection\u003CBook\u003E Books { get; set; }\n}\npublic class Book \n{\n    public string Title { get; set; }\n}\n\nThe nested collection Initializers behave the same:\nPerson p1 = new Person \n{\n    Books = {\n         new Book { Title = \u0022Title1\u0022 },\n         new Book { Title = \u0022Title2\u0022 },\n    }\n};\n\nThis translates to:\nPerson p1 = new Person();\np1.Books.Add(new Book { Title = \u0022Title1\u0022 });\np1.Books.Add(new Book { Title = \u0022Title2\u0022 });\n\nThe new Person only creates an instance of Person, but the Books collection is still null. The collection Initializer syntax does not create a collection\nfor p1.Books, it only translates to the p1.Books.Add(...) statements.\nArray\nint[] numbers = null;\nint n = numbers[0]; // numbers is null. There is no array to index.\n\nArray Elements\nPerson[] people = new Person[5];\npeople[0].Age = 20 // people[0] is null. The array was allocated but not\n                   // initialized. There is no Person to set the Age for.\n\nJagged Arrays\nlong[][] array = new long[1][];\narray[0][0] = 3; // is null because only the first dimension is yet initialized.\n                 // Use array[0] = new long[2]; first.\n\nCollection/List/Dictionary\nDictionary\u003Cstring, int\u003E agesForNames = null;\nint age = agesForNames[\u0022Bob\u0022]; // agesForNames is null.\n                               // There is no Dictionary to perform the lookup.\n\nRange Variable (Indirect/Deferred)\npublic class Person \n{\n    public string Name { get; set; }\n}\nvar people = new List\u003CPerson\u003E();\npeople.Add(null);\nvar names = from p in people select p.Name;\nstring firstName = names.First(); // Exception is thrown here, but actually occurs\n                                  // on the line above.  \u0022p\u0022 is null because the\n                                  // first element we added to the list is null.\n\nEvents (C#)\npublic class Demo\n{\n    public event EventHandler StateChanged;\n    \n    protected virtual void OnStateChanged(EventArgs e)\n    {        \n        StateChanged(this, e); // Exception is thrown here \n                               // if no event handlers have been attached\n                               // to StateChanged event\n    }\n}\n\n(Note: The VB.NET compiler inserts null checks for event usage, so it\u0027s not necessary to check events for Nothing in VB.NET.)\nBad Naming Conventions:\nIf you named fields differently from locals, you might have realized that you never initialized the field.\npublic class Form1\n{\n    private Customer customer;\n    \n    private void Form1_Load(object sender, EventArgs e) \n    {\n        Customer customer = new Customer();\n        customer.Name = \u0022John\u0022;\n    }\n    \n    private void Button_Click(object sender, EventArgs e)\n    {\n        MessageBox.Show(customer.Name);\n    }\n}\n\nThis can be solved by following the convention to prefix fields with an underscore:\n    private Customer _customer;\n\nASP.NET Page Life cycle:\npublic partial class Issues_Edit : System.Web.UI.Page\n{\n    protected TestIssue myIssue;\n\n    protected void Page_Load(object sender, EventArgs e)\n    {\n        if (!IsPostBack)\n        {\n             // Only called on first load, not when button clicked\n             myIssue = new TestIssue(); \n        }\n    }\n        \n    protected void SaveButton_Click(object sender, EventArgs e)\n    {\n        myIssue.Entry = \u0022NullReferenceException here!\u0022;\n    }\n}\n\nASP.NET Session Values\n// if the \u0022FirstName\u0022 session value has not yet been set,\n// then this line will throw a NullReferenceException\nstring firstName = Session[\u0022FirstName\u0022].ToString();\n\nASP.NET MVC empty view models\nIf the exception occurs when referencing a property of @Model in an ASP.NET MVC View, you need to understand that the Model gets set in your action method, when you return a view. When you return an empty model (or model property) from your controller, the exception occurs when the views access it:\n// Controller\npublic class Restaurant:Controller\n{\n    public ActionResult Search()\n    {\n        return View();  // Forgot the provide a Model here.\n    }\n}\n\n// Razor view \n@foreach (var restaurantSearch in Model.RestaurantSearch)  // Throws.\n{\n}\n    \n\u003Cp\u003E@Model.somePropertyName\u003C/p\u003E \u003C!-- Also throws --\u003E\n\nWPF Control Creation Order and Events\nWPF controls are created during the call to InitializeComponent in the order they appear in the visual tree.  A NullReferenceException will be raised in the case of early-created controls with event handlers, etc. , that fire during InitializeComponent which reference late-created controls.\nFor example:\n\u003CGrid\u003E\n    \u003C!-- Combobox declared first --\u003E\n    \u003CComboBox Name=\u0022comboBox1\u0022 \n              Margin=\u002210\u0022\n              SelectedIndex=\u00220\u0022 \n              SelectionChanged=\u0022comboBox1_SelectionChanged\u0022\u003E\n       \u003CComboBoxItem Content=\u0022Item 1\u0022 /\u003E\n       \u003CComboBoxItem Content=\u0022Item 2\u0022 /\u003E\n       \u003CComboBoxItem Content=\u0022Item 3\u0022 /\u003E\n    \u003C/ComboBox\u003E\n        \n    \u003C!-- Label declared later --\u003E\n    \u003CLabel Name=\u0022label1\u0022 \n           Content=\u0022Label\u0022\n           Margin=\u002210\u0022 /\u003E\n\u003C/Grid\u003E\n\nHere comboBox1 is created before label1. If comboBox1_SelectionChanged attempts to reference \u0060label1, it will not yet have been created.\nprivate void comboBox1_SelectionChanged(object sender, SelectionChangedEventArgs e)\n{\n    label1.Content = comboBox1.SelectedIndex.ToString(); // NullReference here!!\n}\n\nChanging the order of the declarations in the XAML (i.e., listing label1 before comboBox1, ignoring issues of design philosophy, would at least resolve the NullReferenceException here.\nCast with as\nvar myThing = someObject as Thing;\n\nThis doesn\u0027t throw an InvalidCastException but returns a null when the cast fails (and when someObject is itself null). So be aware of that.\nLINQ FirstOrDefault() and SingleOrDefault()\nThe plain versions First() and Single() throw exceptions when there is nothing. The \u0022OrDefault\u0022 versions return null in that case. So be aware of that.\nforeach\nforeach throws when you try to iterate null collection. Usually caused by unexpected null result from methods that return collections.\nList\u003Cint\u003E list = null;    \nforeach(var v in list) { } // exception\n\nMore realistic example - select nodes from XML document. Will throw if nodes are not found but initial debugging shows that all properties valid:\nforeach (var node in myData.MyXml.DocumentNode.SelectNodes(\u0022//Data\u0022))\n\n\nWays to Avoid\nExplicitly check for null and ignore null values.\nIf you expect the reference sometimes to be null, you can check for it being null before accessing instance members:\nvoid PrintName(Person p)\n{\n    if (p != null) \n    {\n        Console.WriteLine(p.Name);\n    }\n}\n\nExplicitly check for null and provide a default value.\nMethods call you expect to return an instance can return null, for example when the object being sought cannot be found. You can choose to return a default value when this is the case:\nstring GetCategory(Book b) \n{\n    if (b == null)\n        return \u0022Unknown\u0022;\n    return b.Category;\n}\n\nExplicitly check for null from method calls and throw a custom exception.\nYou can also throw a custom exception, only to catch it in the calling code:\nstring GetCategory(string bookTitle) \n{\n    var book = library.FindBook(bookTitle);  // This may return null\n    if (book == null)\n        throw new BookNotFoundException(bookTitle);  // Your custom exception\n    return book.Category;\n}\n\nUse Debug.Assert if a value should never be null, to catch the problem earlier than the exception occurs.\nWhen you know during development that a method maybe can, but never should return null, you can use Debug.Assert() to break as soon as possible when it does occur:\nstring GetTitle(int knownBookID) \n{\n    // You know this should never return null.\n    var book = library.GetBook(knownBookID);  \n\n    // Exception will occur on the next line instead of at the end of this method.\n    Debug.Assert(book != null, \u0022Library didn\u0027t return a book for known book ID.\u0022);\n\n    // Some other code\n\n    return book.Title; // Will never throw NullReferenceException in Debug mode.\n}\n\nThough this check will not end up in your release build, causing it to throw the NullReferenceException again when book == null at runtime in release mode.\nUse GetValueOrDefault() for nullable value types to provide a default value when they are null.\nDateTime? appointment = null;\nConsole.WriteLine(appointment.GetValueOrDefault(DateTime.Now));\n// Will display the default value provided (DateTime.Now), because appointment is null.\n\nappointment = new DateTime(2022, 10, 20);\nConsole.WriteLine(appointment.GetValueOrDefault(DateTime.Now));\n// Will display the appointment date, not the default\n\nUse the null coalescing operator: ?? [C#] or If() [VB].\nThe shorthand to providing a default value when a null is encountered:\nIService CreateService(ILogger log, Int32? frobPowerLevel)\n{\n   var serviceImpl = new MyService(log ?? NullLog.Instance);\n \n   // Note that the above \u0022GetValueOrDefault()\u0022 can also be rewritten to use\n   // the coalesce operator:\n   serviceImpl.FrobPowerLevel = frobPowerLevel ?? 5;\n}\n\nUse the null condition operator: ?. or ?[x] for arrays (available in C# 6 and VB.NET 14):\nThis is also sometimes called the safe navigation or Elvis (after its shape) operator. If the expression on the left side of the operator is null, then the right side will not be evaluated, and null is returned instead. That means cases like this:\nvar title = person.Title.ToUpper();\n\nIf the person does not have a title, this will throw an exception because it is trying to call ToUpper on a property with a null value.\nIn C# 5 and below, this can be guarded with:\nvar title = person.Title == null ? null : person.Title.ToUpper();\n\nNow the title variable will be null instead of throwing an exception. C# 6 introduces a shorter syntax for this:\nvar title = person.Title?.ToUpper();\n\nThis will result in the title variable being null, and the call to ToUpper is not made if person.Title is null.\nOf course, you still have to check title for null or use the null condition operator together with the null coalescing operator (??) to supply a default value:\n// regular null check\nint titleLength = 0;\nif (title != null)\n    titleLength = title.Length; // If title is null, this would throw NullReferenceException\n    \n// combining the \u0060?\u0060 and the \u0060??\u0060 operator\nint titleLength = title?.Length ?? 0;\n\nLikewise, for arrays you can use ?[i] as follows:\nint[] myIntArray = null;\nvar i = 5;\nint? elem = myIntArray?[i];\nif (!elem.HasValue) Console.WriteLine(\u0022No value\u0022);\n\nThis will do the following: If myIntArray is null, the expression returns null and you can safely check it. If it contains an array, it will do the same as:\nelem = myIntArray[i]; and returns the i\u003Csup\u003Eth\u003C/sup\u003E element.\nUse null context (available in C# 8):\nIntroduced in C# 8 there null context\u0027s and nullable reference types perform static analysis on variables and provides a compiler warning if a value can be potentially null or have been set to null. The nullable reference types allows types to be explicitly allowed to be null.\nThe nullable annotation context and nullable warning context can be set for a project using the Nullable element in your csproj file. This element configures how the compiler interprets the nullability of types and what warnings are generated. Valid settings are:\n\nenable: The nullable annotation context is enabled. The nullable warning context is enabled. Variables of a reference type, string for example, are non-nullable. All nullability warnings are enabled.\ndisable: The nullable annotation context is disabled. The nullable warning context is disabled. Variables of a reference type are oblivious, just like earlier versions of C#. All nullability warnings are disabled.\nsafeonly: The nullable annotation context is enabled. The nullable warning context is safeonly. Variables of a reference type are nonnullable. All safety nullability warnings are enabled.\nwarnings: The nullable annotation context is disabled. The nullable warning context is enabled. Variables of a reference type are oblivious. All nullability warnings are enabled.\nsafeonlywarnings: The nullable annotation context is disabled. The nullable warning context is safeonly.\nVariables of a reference type are oblivious. All safety nullability warnings are enabled.\n\nA nullable reference type is noted using the same syntax as nullable value types: a ? is appended to the type of the variable.\nSpecial techniques for debugging and fixing null derefs in iterators\nC# supports \u0022iterator blocks\u0022 (called \u0022generators\u0022 in some other popular languages).  Null dereference exceptions can be particularly tricky to debug in iterator blocks because of deferred execution:\npublic IEnumerable\u003CFrob\u003E GetFrobs(FrobFactory f, int count)\n{\n    for (int i = 0; i \u003C count; \u002B\u002Bi)\n    yield return f.MakeFrob();\n}\n...\nFrobFactory factory = whatever;\nIEnumerable\u003CFrobs\u003E frobs = GetFrobs();\n...\nforeach(Frob frob in frobs) { ... }\n\nIf whatever results in null then MakeFrob will throw.  Now, you might think that the right thing to do is this:\n// DON\u0027T DO THIS\npublic IEnumerable\u003CFrob\u003E GetFrobs(FrobFactory f, int count)\n{\n   if (f == null) \n      throw new ArgumentNullException(\u0022f\u0022, \u0022factory must not be null\u0022);\n   for (int i = 0; i \u003C count; \u002B\u002Bi)\n      yield return f.MakeFrob();\n}\n\nWhy is this wrong?  Because the iterator block does not actually run until the foreach!  The call to GetFrobs simply returns an object which when iterated will run the iterator block.\nBy writing a null check like this you prevent the null dereference, but you move the null argument exception to the point of the iteration, not to the point of the call, and that is very confusing to debug.\nThe correct fix is:\n// DO THIS\npublic IEnumerable\u003CFrob\u003E GetFrobs(FrobFactory f, int count)\n{\n   // No yields in a public method that throws!\n   if (f == null) \n       throw new ArgumentNullException(\u0022f\u0022, \u0022factory must not be null\u0022);\n   return GetFrobsForReal(f, count);\n}\nprivate IEnumerable\u003CFrob\u003E GetFrobsForReal(FrobFactory f, int count)\n{\n   // Yields in a private method\n   Debug.Assert(f != null);\n   for (int i = 0; i \u003C count; \u002B\u002Bi)\n        yield return f.MakeFrob();\n}\n\nThat is, make a private helper method that has the iterator block logic, and a public surface method that does the null check and returns the iterator.  Now when GetFrobs is called, the null check happens immediately, and then GetFrobsForReal executes when the sequence is iterated.\nIf you examine the reference source for LINQ to Objects you will see that this technique is used throughout. It is slightly more clunky to write, but it makes debugging nullity errors much easier.  Optimize your code for the convenience of the caller, not the convenience of the author.\nA note on null dereferences in unsafe code\nC# has an \u0022unsafe\u0022 mode which is, as the name implies, extremely dangerous because the normal safety mechanisms which provide memory safety and type safety are not enforced. You should not be writing unsafe code unless you have a thorough and deep understanding of how memory works.\nIn unsafe mode, you should be aware of two important facts:\n\ndereferencing a null pointer produces the same exception as dereferencing a null reference\ndereferencing an invalid non-null pointer can produce that exception in some circumstances\n\nTo understand why that is, it helps to understand how .NET produces null dereference exceptions in the first place. (These details apply to .NET running on Windows; other operating systems use similar mechanisms.)\nMemory is virtualized in Windows; each process gets a virtual memory space of many \u0022pages\u0022 of memory that are tracked by the operating system. Each page of memory has flags set on it which determine how it may be used: read from, written to, executed, and so on.  The lowest page is marked as \u0022produce an error if ever used in any way\u0022.\nBoth a null pointer and a null reference in C# are internally represented as the number zero, and so any attempt to dereference it into its corresponding memory storage causes the operating system to produce an error. The .NET runtime then detects this error and turns it into the null dereference exception.\nThat\u0027s why dereferencing both a null pointer and a null reference produces the same exception.\nWhat about the second point? Dereferencing any invalid pointer that falls in the lowest page of virtual memory causes the same operating system error, and thereby the same exception.\nWhy does this make sense?  Well, suppose we have a struct containing two ints, and an unmanaged pointer equal to null. If we attempt to dereference the second int in the struct, the CLR will not attempt to access the storage at location zero; it will access the storage at location four. But logically this is a null dereference because we are getting to that address via the null.\nIf you are working with unsafe code and you get a null dereference exception, just be aware that the offending pointer need not be null. It can be any location in the lowest page, and this exception will be produced.\n    ",
      "\nNullReference Exception \u2014 Visual Basic\nThe NullReference Exception for Visual Basic is no different from the one in C#. After all, they are both reporting the same exception defined in the .NET Framework which they both use. Causes unique to Visual Basic are rare (perhaps only one).\nThis answer will use Visual Basic terms, syntax, and context. The examples used come from a large number of past Stack\u00A0 Overflow questions. This is to maximize relevance by using the kinds of situations often seen in posts. A bit more explanation is also provided for those who might need it. An example similar to yours is very likely listed here.\nNote:\n\nThis is concept-based: there is no code for you to paste into your project. It is intended to help you understand what causes a NullReferenceException (NRE), how to find it, how to fix it, and how to avoid it. An NRE can be caused many ways so this is unlikely to be your sole encounter.\nThe examples (from Stack\u00A0 Overflow posts) do not always show the best way to do something in the first place.\nTypically, the simplest remedy is used.\n\nBasic Meaning\nThe message \u0022Object not set to an instance of Object\u0022 means you are trying to use an object which has not been initialized. This boils down to one of these:\n\nYour code declared an object variable, but it did not initialize it (create an instance or \u0027instantiate\u0027 it)\nSomething which your code assumed would initialize an object, did not\nPossibly, other code prematurely invalidated an object still in use\n\nFinding The Cause\nSince the problem is an object reference which is Nothing, the answer is to examine them to find out which one. Then determine why it is not initialized. Hold the mouse over the various variables and Visual Studio (VS) will show their values - the culprit will be Nothing.\n\nYou should also remove any Try/Catch blocks from the relevant code, especially ones where there is nothing in the Catch block. This will cause your code to crash when it tries to use an object which is Nothing. This is what you want because it will identify the exact location of the problem, and allow you to identify the object causing it.\nA MsgBox in the Catch which displays Error while... will be of little help. This method also leads to very bad Stack\u00A0 Overflow questions, because you can\u0027t describe the actual exception, the object involved or even the line of code where it happens.\nYou can also use the Locals Window (Debug -\u003E Windows -\u003E Locals) to examine your objects.\nOnce you know what and where the problem is, it is usually fairly easy to fix and faster than posting a new question.\nSee also:\n\nBreakpoints\nMSDN: How to: Use the Try/Catch Block to Catch Exceptions\nMSDN: Best Practices for Exceptions\n\nExamples and Remedies\nClass Objects / Creating an Instance\n\nDim reg As CashRegister\n...\nTextBox1.Text = reg.Amount         \u0027 NRE\n\nThe problem is that Dim does not create a CashRegister object; it only declares a variable named reg of that Type. Declaring an object variable and creating an instance are two different things.\nRemedy\nThe New operator can often be used to create the instance when you declare it:\nDim reg As New CashRegister        \u0027 [New] creates instance, invokes the constructor\n\n\u0027 Longer, more explicit form:\nDim reg As CashRegister = New CashRegister\n\nWhen it is only appropriate to create the instance later:\nPrivate reg As CashRegister         \u0027 Declare\n  ...\nreg = New CashRegister()            \u0027 Create instance\n\nNote: Do not use Dim again in a procedure, including the constructor (Sub New):\nPrivate reg As CashRegister\n\u0027...\n\nPublic Sub New()\n   \u0027...\n   Dim reg As New CashRegister\nEnd Sub\n\nThis will create a local variable, reg, which exists only in that context (sub). The reg variable with module level Scope which you will use everywhere else remains Nothing.\n\nMissing the New operator is the #1 cause of NullReference Exceptions seen in the Stack\u00A0 Overflow questions reviewed.\nVisual Basic tries to make the process clear repeatedly using New: Using the New Operator creates a new object and calls Sub New -- the constructor -- where your object can perform any other initialization.\n\nTo be clear, Dim (or Private) only declares a variable and its Type.   The Scope of the variable - whether it exists for the entire module/class or is local to a procedure - is determined by where it is declared. Private | Friend | Public defines the access level, not Scope.\nFor more information, see:\n\nNew Operator\nScope in Visual Basic\nAccess Levels in Visual Basic\nValue Types and Reference Types\n\n\nArrays\nArrays must also be instantiated:\nPrivate arr as String()\n\nThis array has only been declared, not created. There are several ways to initialize an array:\nPrivate arr as String() = New String(10){}\n\u0027 or\nPrivate arr() As String = New String(10){}\n\n\u0027 For a local array (in a procedure) and using \u0027Option Infer\u0027:\nDim arr = New String(10) {}\n\nNote: Beginning with VS 2010, when initializing a local array using a literal and Option Infer, the As \u003CType\u003E and New elements are optional:\nDim myDbl As Double() = {1.5, 2, 9.9, 18, 3.14}\nDim myDbl = New Double() {1.5, 2, 9.9, 18, 3.14}\nDim myDbl() = {1.5, 2, 9.9, 18, 3.14}\n\nThe data Type and array size are inferred from the data being assigned. Class/Module level declarations still require As \u003CType\u003E with Option Strict:\nPrivate myDoubles As Double() = {1.5, 2, 9.9, 18, 3.14}\n\nExample: Array of class objects\nDim arrFoo(5) As Foo\n\nFor i As Integer = 0 To arrFoo.Count - 1\n   arrFoo(i).Bar = i * 10       \u0027 Exception\nNext\n\nThe array has been created, but the Foo objects in it have not.\nRemedy\nFor i As Integer = 0 To arrFoo.Count - 1\n    arrFoo(i) = New Foo()         \u0027 Create Foo instance\n    arrFoo(i).Bar = i * 10\nNext\n\nUsing a List(Of T) will make it quite difficult to have an element without a valid object:\nDim FooList As New List(Of Foo)     \u0027 List created, but it is empty\nDim f As Foo                        \u0027 Temporary variable for the loop\n\nFor i As Integer = 0 To 5\n    f = New Foo()                    \u0027 Foo instance created\n    f.Bar =  i * 10\n    FooList.Add(f)                   \u0027 Foo object added to list\nNext\n\nFor more information, see:\n\nOption Infer Statement\nScope in Visual Basic\nArrays in Visual Basic\n\n\nLists and Collections\n.NET collections (of which there are many varieties - Lists, Dictionary, etc.) must also be instantiated or created.\nPrivate myList As List(Of String)\n..\nmyList.Add(\u0022ziggy\u0022)           \u0027 NullReference\n\nYou get the same exception for the same reason - myList was only declared, but no instance created. The remedy is the same:\nmyList = New List(Of String)\n\n\u0027 Or create an instance when declared:\nPrivate myList As New List(Of String)\n\nA common oversight is a class which uses a collection Type:\nPublic Class Foo\n    Private barList As List(Of Bar)\n\n    Friend Function BarCount As Integer\n        Return barList.Count\n    End Function\n\n    Friend Sub AddItem(newBar As Bar)\n        If barList.Contains(newBar) = False Then\n            barList.Add(newBar)\n        End If\n    End Function\n\nEither procedure will result in an NRE, because barList is only declared, not instantiated. Creating an instance of Foo will not also create an instance of the internal barList. It may have been the intent to do this in the constructor:\nPublic Sub New         \u0027 Constructor\n    \u0027 Stuff to do when a new Foo is created...\n    barList = New List(Of Bar)\nEnd Sub\n\nAs before, this is incorrect:\nPublic Sub New()\n    \u0027 Creates another barList local to this procedure\n     Dim barList As New List(Of Bar)\nEnd Sub\n\nFor more information, see List(Of T) Class.\n\nData Provider Objects\nWorking with databases presents many opportunities for a NullReference because there can be many objects (Command, Connection, Transaction, Dataset, DataTable, DataRows....) in use at once.  Note: It does not matter which data provider you are using -- MySQL, SQL Server, OleDB, etc. -- the concepts are the same.\nExample 1\nDim da As OleDbDataAdapter\nDim ds As DataSet\nDim MaxRows As Integer\n\ncon.Open()\nDim sql = \u0022SELECT * FROM tblfoobar_List\u0022\nda = New OleDbDataAdapter(sql, con)\nda.Fill(ds, \u0022foobar\u0022)\ncon.Close()\n\nMaxRows = ds.Tables(\u0022foobar\u0022).Rows.Count      \u0027 Error\n\nAs before, the ds Dataset object was declared, but an instance was never created. The DataAdapter will fill an existing DataSet, not create one. In this case, since ds is a local variable, the IDE warns you that this might happen:\n\nWhen declared as a module/class level variable, as appears to be the case with con, the compiler can\u0027t know if the object was created by an upstream procedure. Do not ignore warnings.\nRemedy\nDim ds As New DataSet\n\nExample 2\nds = New DataSet\nda = New OleDBDataAdapter(sql, con)\nda.Fill(ds, \u0022Employees\u0022)\n\ntxtID.Text = ds.Tables(\u0022Employee\u0022).Rows(0).Item(1)\ntxtID.Name = ds.Tables(\u0022Employee\u0022).Rows(0).Item(2)\n\nA typo is a problem here: Employees vs Employee. There was no DataTable named \u0022Employee\u0022 created, so a NullReferenceException results trying to access it. Another potential problem is assuming there will be Items which may not be so when the SQL includes a WHERE clause.\nRemedy\nSince this uses one table, using Tables(0) will avoid spelling errors.  Examining Rows.Count can also help:\nIf ds.Tables(0).Rows.Count \u003E 0 Then\n    txtID.Text = ds.Tables(0).Rows(0).Item(1)\n    txtID.Name = ds.Tables(0).Rows(0).Item(2)\nEnd If\n\nFill is a function returning the number of Rows affected which can also be tested:\nIf da.Fill(ds, \u0022Employees\u0022) \u003E 0 Then...\n\nExample 3\nDim da As New OleDb.OleDbDataAdapter(\u0022SELECT TICKET.TICKET_NO,\n        TICKET.CUSTOMER_ID, ... FROM TICKET_RESERVATION AS TICKET INNER JOIN\n        FLIGHT_DETAILS AS FLIGHT ... WHERE [TICKET.TICKET_NO]= ...\u0022, con)\nDim ds As New DataSet\nda.Fill(ds)\n\nIf ds.Tables(\u0022TICKET_RESERVATION\u0022).Rows.Count \u003E 0 Then\n\nThe DataAdapter will provide TableNames as shown in the previous example, but it does not parse names from the SQL or database table. As a result, ds.Tables(\u0022TICKET_RESERVATION\u0022) references a non-existent table.\nThe Remedy is the same, reference the table by index:\nIf ds.Tables(0).Rows.Count \u003E 0 Then\n\nSee also DataTable Class.\n\nObject Paths / Nested\nIf myFoo.Bar.Items IsNot Nothing Then\n   ...\n\nThe code is only testing Items while both myFoo and Bar may also be Nothing. The remedy is to test the entire chain or path of objects one at a time:\nIf (myFoo IsNot Nothing) AndAlso\n    (myFoo.Bar IsNot Nothing) AndAlso\n    (myFoo.Bar.Items IsNot Nothing) Then\n    ....\n\nAndAlso is important. Subsequent tests will not be performed once the first False condition is encountered. This allows the code to safely \u0027drill\u0027 into the object(s) one \u0027level\u0027 at a time, evaluating myFoo.Bar only after (and if) myFoo is determined to be valid. Object chains or paths can get quite long when coding complex objects:\nmyBase.myNodes(3).Layer.SubLayer.Foo.Files.Add(\u0022somefilename\u0022)\n\nIt is not possible to reference anything \u0027downstream\u0027 of a null object.  This also applies to controls:\nmyWebBrowser.Document.GetElementById(\u0022formfld1\u0022).InnerText = \u0022some value\u0022\n\nHere, myWebBrowser or Document could be Nothing or the formfld1 element may not exist.\n\nUI Controls\nDim cmd5 As New SqlCommand(\u0022select Cartons, Pieces, Foobar \u0022 _\n     \u0026 \u0022FROM Invoice where invoice_no = \u0027\u0022 \u0026 _\n     Me.ComboBox5.SelectedItem.ToString.Trim \u0026 \u0022\u0027 And category = \u0027\u0022 \u0026 _\n     Me.ListBox1.SelectedItem.ToString.Trim \u0026 \u0022\u0027 And item_name = \u0027\u0022 \u0026 _\n     Me.ComboBox2.SelectedValue.ToString.Trim \u0026 \u0022\u0027 And expiry_date = \u0027\u0022 \u0026 _\n     Me.expiry.Text \u0026 \u0022\u0027\u0022, con)\n\nAmong other things, this code does not anticipate that the user may not have selected something in one or more UI controls.  ListBox1.SelectedItem may well be Nothing, so ListBox1.SelectedItem.ToString will result in an NRE.\nRemedy\nValidate data before using it (also use Option Strict and SQL parameters):\nDim expiry As DateTime         \u0027 for text date validation\nIf (ComboBox5.SelectedItems.Count \u003E 0) AndAlso\n    (ListBox1.SelectedItems.Count \u003E 0) AndAlso\n    (ComboBox2.SelectedItems.Count \u003E 0) AndAlso\n    (DateTime.TryParse(expiry.Text, expiry) Then\n\n    \u0027... do stuff\nElse\n    MessageBox.Show(...error message...)\nEnd If\n\nAlternatively, you can use (ComboBox5.SelectedItem IsNot Nothing) AndAlso...\n\nVisual Basic Forms\nPublic Class Form1\n\n    Private NameBoxes = New TextBox(5) {Controls(\u0022TextBox1\u0022), _\n                   Controls(\u0022TextBox2\u0022), Controls(\u0022TextBox3\u0022), _\n                   Controls(\u0022TextBox4\u0022), Controls(\u0022TextBox5\u0022), _\n                   Controls(\u0022TextBox6\u0022)}\n\n    \u0027 same thing in a different format:\n    Private boxList As New List(Of TextBox) From {TextBox1, TextBox2, TextBox3 ...}\n\n    \u0027 Immediate NRE:\n    Private somevar As String = Me.Controls(\u0022TextBox1\u0022).Text\n\nThis is a fairly common way to get an NRE. In C#, depending on how it is coded, the IDE will report that Controls does not exist in the current context, or \u0022cannot reference non-static member\u0022. So, to some extent, this is a VB-only situation. It is also complex because it can result in a failure cascade.\nThe arrays and collections cannot be initialized this way. This initialization code will run before the constructor creates the Form or the Controls. As a result:\n\nLists and Collection will simply be empty\nThe Array will contain five elements of Nothing\nThe somevar assignment will result in an immediate NRE because Nothing doesn\u0027t have a .Text property\n\nReferencing array elements later will result in an NRE. If you do this in Form_Load, due to an odd bug, the IDE may not report the exception when it happens. The exception will pop up later when your code tries to use the array. This \u0022silent exception\u0022 is detailed in this post. For our purposes, the key is that when something catastrophic happens while creating a form (Sub New or Form Load event), exceptions may go unreported, the code exits the procedure and just displays the form.\nSince no other code in your Sub New or Form Load event will run after the NRE, a great many other things can be left uninitialized.\nSub Form_Load(..._\n   \u0027...\n   Dim name As String = NameBoxes(2).Text        \u0027 NRE\n   \u0027 ...\n   \u0027 More code (which will likely not be executed)\n   \u0027 ...\nEnd Sub\n\nNote this applies to any and all control and component references making these illegal where they are:\nPublic Class Form1\n\n    Private myFiles() As String = Me.OpenFileDialog1.FileName \u0026 ...\n    Private dbcon As String = OpenFileDialog1.FileName \u0026 \u0022;Jet Oledb...\u0022\n    Private studentName As String = TextBox13.Text\n\nPartial Remedy\nIt is curious that VB does not provide a warning, but the remedy is to declare the containers at the form level, but initialize them in form load event handler when the controls do exist. This can be done in Sub New as long as your code is after the InitializeComponent call:\n\u0027 Module level declaration\nPrivate NameBoxes as TextBox()\nPrivate studentName As String\n\n\u0027 Form Load, Form Shown or Sub New:\n\u0027\n\u0027 Using the OP\u0027s approach (illegal using OPTION STRICT)\nNameBoxes = New TextBox() {Me.Controls(\u0022TextBox1\u0022), Me.Controls(\u0022TestBox2\u0022), ...)\nstudentName = TextBox32.Text           \u0027 For simple control references\n\nThe array code may not be out of the woods yet. Any controls which are in a container control (like a GroupBox or Panel) will not be found in Me.Controls; they will be in the Controls collection of that Panel or GroupBox. Nor will a control be returned when the control name is misspelled (\u0022TeStBox2\u0022). In such cases, Nothing will again be stored in those array elements and an NRE will result when you attempt to reference it.\nThese should be easy to find now that you know what you are looking for:\n\n\u0022Button2\u0022 resides on a Panel\nRemedy\nRather than indirect references by name using the form\u0027s Controls collection, use the control reference:\n\u0027 Declaration\nPrivate NameBoxes As TextBox()\n\n\u0027 Initialization -  simple and easy to read, hard to botch:\nNameBoxes = New TextBox() {TextBox1, TextBox2, ...)\n\n\u0027 Initialize a List\nNamesList = New List(Of TextBox)({TextBox1, TextBox2, TextBox3...})\n\u0027 or\nNamesList = New List(Of TextBox)\nNamesList.AddRange({TextBox1, TextBox2, TextBox3...})\n\n\nFunction Returning Nothing\nPrivate bars As New List(Of Bars)        \u0027 Declared and created\n\nPublic Function BarList() As List(Of Bars)\n    bars.Clear\n    If someCondition Then\n        For n As Integer = 0 to someValue\n            bars.Add(GetBar(n))\n        Next n\n    Else\n        Exit Function\n    End If\n\n    Return bars\nEnd Function\n\nThis is a case where the IDE will warn you that \u0027not all paths return a value and a NullReferenceException may result\u0027. You can suppress the warning, by replacing Exit Function with Return Nothing, but that does not solve the problem. Anything which tries to use the return when someCondition = False will result in an NRE:\nbList = myFoo.BarList()\nFor Each b As Bar in bList      \u0027 EXCEPTION\n      ...\n\nRemedy\nReplace Exit Function in the function with Return bList. Returning an empty List is not the same as returning Nothing. If there is a chance that a returned object can be Nothing, test before using it:\n bList = myFoo.BarList()\n If bList IsNot Nothing Then...\n\n\nPoorly Implemented Try/Catch\nA badly implemented Try/Catch can hide where the problem is and result in new ones:\nDim dr As SqlDataReader\nTry\n    Dim lnk As LinkButton = TryCast(sender, LinkButton)\n    Dim gr As GridViewRow = DirectCast(lnk.NamingContainer, GridViewRow)\n    Dim eid As String = GridView1.DataKeys(gr.RowIndex).Value.ToString()\n    ViewState(\u0022username\u0022) = eid\n    sqlQry = \u0022select FirstName, Surname, DepartmentName, ExtensionName, jobTitle,\n             Pager, mailaddress, from employees1 where username=\u0027\u0022 \u0026 eid \u0026 \u0022\u0027\u0022\n    If connection.State \u003C\u003E ConnectionState.Open Then\n        connection.Open()\n    End If\n    command = New SqlCommand(sqlQry, connection)\n\n    \u0027More code fooing and barring\n\n    dr = command.ExecuteReader()\n    If dr.Read() Then\n        lblFirstName.Text = Convert.ToString(dr(\u0022FirstName\u0022))\n        ...\n    End If\n    mpe.Show()\nCatch\n\nFinally\n    command.Dispose()\n    dr.Close()             \u0027 \u003C-- NRE\n    connection.Close()\nEnd Try\n\nThis is a case of an object not being created as expected, but also demonstrates the counter usefulness of an empty Catch.\nThere is an extra comma in the SQL (after \u0027mailaddress\u0027) which results in an exception at .ExecuteReader. After the Catch does nothing, Finally tries to perform clean up, but since you cannot Close a null DataReader object, a brand new NullReferenceException results.\nAn empty Catch block is the devil\u0027s playground. This OP was baffled why he was getting an NRE in the Finally block. In other situations, an empty Catch may result in something else much further downstream going haywire and cause you to spend time looking at the wrong things in the wrong place for the problem. (The \u0022silent exception\u0022 described above provides the same entertainment value.)\nRemedy\nDon\u0027t use empty Try/Catch blocks - let the code crash so you can a) identify the cause b) identify the location and c) apply a proper remedy.  Try/Catch blocks are not intended to hide exceptions from the person uniquely qualified to fix them - the developer.\n\nDBNull is not the same as Nothing\nFor Each row As DataGridViewRow In dgvPlanning.Rows\n    If Not IsDBNull(row.Cells(0).Value) Then\n        ...\n\nThe IsDBNull function is used to test if a value equals System.DBNull:  From MSDN:\n\nThe System.DBNull value indicates that the Object represents missing or non-existent data. DBNull is not the same as Nothing, which indicates that a variable has not yet been initialized.\n\nRemedy\nIf row.Cells(0) IsNot Nothing Then ...\n\nAs before, you can test for Nothing, then for a specific value:\nIf (row.Cells(0) IsNot Nothing) AndAlso (IsDBNull(row.Cells(0).Value) = False) Then\n\nExample 2\nDim getFoo = (From f In dbContext.FooBars\n               Where f.something = something\n               Select f).FirstOrDefault\n\nIf Not IsDBNull(getFoo) Then\n    If IsDBNull(getFoo.user_id) Then\n        txtFirst.Text = getFoo.first_name\n    Else\n       ...\n\nFirstOrDefault returns the first item or the default value, which is Nothing for reference types and never DBNull:\nIf getFoo IsNot Nothing Then...\n\n\nControls\nDim chk As CheckBox\n\nchk = CType(Me.Controls(chkName), CheckBox)\nIf chk.Checked Then\n    Return chk\nEnd If\n\nIf a CheckBox with chkName can\u0027t be found (or exists in a GroupBox), then chk will be Nothing and be attempting to reference any property will result in an exception.\nRemedy\nIf (chk IsNot Nothing) AndAlso (chk.Checked) Then ...\n\nThe DataGridView\nThe DGV has a few quirks seen periodically:\ndgvBooks.DataSource = loan.Books\ndgvBooks.Columns(\u0022ISBN\u0022).Visible = True       \u0027 NullReferenceException\ndgvBooks.Columns(\u0022Title\u0022).DefaultCellStyle.Format = \u0022C\u0022\ndgvBooks.Columns(\u0022Author\u0022).DefaultCellStyle.Format = \u0022C\u0022\ndgvBooks.Columns(\u0022Price\u0022).DefaultCellStyle.Format = \u0022C\u0022\n\nIf dgvBooks has AutoGenerateColumns = True, it will create the columns, but it does not name them, so the above code fails when it references them by name.\nRemedy\nName the columns manually, or reference by index:\ndgvBooks.Columns(0).Visible = True\n\nExample 2 \u2014 Beware of the NewRow\nxlWorkSheet = xlWorkBook.Sheets(\u0022sheet1\u0022)\n\nFor i = 0 To myDGV.RowCount - 1\n    For j = 0 To myDGV.ColumnCount - 1\n        For k As Integer = 1 To myDGV.Columns.Count\n            xlWorkSheet.Cells(1, k) = myDGV.Columns(k - 1).HeaderText\n            xlWorkSheet.Cells(i \u002B 2, j \u002B 1) = myDGV(j, i).Value.ToString()\n        Next\n    Next\nNext\n\nWhen your DataGridView has AllowUserToAddRows as True (the default), the Cells in the blank/new row at the bottom will all contain Nothing.  Most attempts to use the contents (for example, ToString) will result in an NRE.\nRemedy\nUse a For/Each loop and test the IsNewRow property to determine if it is that last row. This works whether AllowUserToAddRows is true or not:\nFor Each r As DataGridViewRow in myDGV.Rows\n    If r.IsNewRow = False Then\n         \u0027 ok to use this row\n\nIf you do use a For n loop, modify the row count or use Exit For when IsNewRow is true.\n\nMy.Settings (StringCollection)\nUnder certain circumstances, trying to use an item from My.Settings which is a StringCollection can result in a NullReference the first time you use it. The solution is the same, but not as obvious. Consider:\nMy.Settings.FooBars.Add(\u0022ziggy\u0022)         \u0027 foobars is a string collection\n\nSince VB is managing Settings for you, it is reasonable to expect it to initialize the collection. It will, but only if you have previously added an initial entry to the collection (in the Settings editor). Since the collection is (apparently) initialized when an item is added, it remains Nothing when there are no items in the Settings editor to add.\nRemedy\nInitialize the settings collection in the form\u0027s Load event handler, if/when needed:\nIf My.Settings.FooBars Is Nothing Then\n    My.Settings.FooBars = New System.Collections.Specialized.StringCollection\nEnd If\n\nTypically, the Settings collection will only need to be initialized the first time the application runs. An alternate remedy is to add an initial value to your collection in Project -\u003E Settings | FooBars, save the project, then remove the fake value.\n\nKey Points\nYou probably forgot the New operator.\nor\nSomething you assumed would perform flawlessly to return an initialized object to your code, did not.\nDon\u0027t ignore compiler warnings (ever) and use Option Strict On (always).\n\nMSDN NullReference Exception\n    ",
      "\nAnother scenario is when you cast a null object into a value type. For example, the code below:\n\nobject o = null;\nDateTime d = (DateTime)o;\n\n\nIt will throw a NullReferenceException on the cast. It seems quite obvious in the above sample, but this can happen in more \u0022late-binding\u0022 intricate scenarios where the null object has been returned from some code you don\u0027t own, and the cast is for example generated by some automatic system.\n\nOne example of this is this simple ASP.NET binding fragment with the Calendar control:\n\n\u003Casp:Calendar runat=\u0022server\u0022 SelectedDate=\u0022\u003C%#Bind(\u0022Something\u0022)%\u003E\u0022 /\u003E\n\n\nHere, SelectedDate is in fact a property - of DateTime type - of the Calendar Web Control type, and the binding could perfectly return something null. The implicit ASP.NET Generator will create a piece of code that will be equivalent to the cast code above. And this will raise a NullReferenceException that is quite difficult to spot, because it lies in ASP.NET generated code which compiles fine...\n    ",
      "\nIt means that the variable in question is pointed at nothing. I could generate this like so:\n\nSqlConnection connection = null;\nconnection.Open();\n\n\nThat will throw the error because while I\u0027ve declared the variable \u0022connection\u0022, it\u0027s not pointed to anything. When I try to call the member \u0022Open\u0022, there\u0027s no reference for it to resolve, and it will throw the error.\n\nTo avoid this error:\n\n\nAlways initialize your objects before you try to do anything with them.\nIf you\u0027re not sure whether the object is null, check it with object == null.\n\n\nJetBrains\u0027 Resharper tool will identify every place in your code that has the possibility of a null reference error, allowing you to put in a null check. This error is the number one source of bugs, IMHO.\n    ",
      "\nIt means your code used an object reference variable that was set to null (i.e. it did not reference an actual object instance).\n\nTo prevent the error, objects that could be null should be tested for null before being used.\n\nif (myvar != null)\n{\n    // Go ahead and use myvar\n    myvar.property = ...\n}\nelse\n{\n    // Whoops! myvar is null and cannot be used without first\n    // assigning it to an instance reference\n    // Attempting to use myvar here will result in NullReferenceException\n}\n\n    ",
      "\nBe aware that regardless of the scenario, the cause is always the same in .NET:\n\nYou are trying to use a reference variable whose value is Nothing/null.  When the value is Nothing/null for the reference variable, that means it is not actually holding a reference to an instance of any object that exists on the heap.\nYou either never assigned something to the variable, never created an instance of the value assigned to the variable, or you set the variable equal to Nothing/null manually, or you called a function that set the variable to Nothing/null for you.\n\n    ",
      "\nUpdate C#8.0, 2019: Nullable reference types\n\nC#8.0 introduces nullable reference types and non-nullable reference types. So only nullable reference types must be checked to avoid a NullReferenceException.\n\n\n\nIf you have not initialized a reference type, and you want to set or read one of its properties, it will throw a NullReferenceException.\n\nExample:\n\nPerson p = null;\np.Name = \u0022Harry\u0022; // NullReferenceException occurs here.\n\n\nYou can simply avoid this by checking if the variable is not null:\n\nPerson p = null;\nif (p!=null)\n{\n    p.Name = \u0022Harry\u0022; // Not going to run to this point\n}\n\n\nTo fully understand why a NullReferenceException is thrown, it is important to know the difference between value types and [reference types][3].\n\nSo, if you\u0027re dealing with value types, NullReferenceExceptions can not occur. Though you need to keep alert when dealing with reference types!\n\nOnly reference types, as the name is suggesting, can hold references or point literally to nothing (or \u0027null\u0027). Whereas value types always contain a value.\n\nReference types (these ones must be checked):\n\n\ndynamic\nobject\nstring\n\n\nValue types (you can simply ignore these ones):\n\n\nNumeric types\nIntegral types\nFloating-point types\ndecimal\nbool\nUser defined structs\n\n    ",
      "\nAn example of this exception being thrown is: When you are trying to check something, that is null.\n\nFor example:\n\nstring testString = null; //Because it doesn\u0027t have a value (i.e. it\u0027s null; \u0022Length\u0022 cannot do what it needs to do)\n\nif (testString.Length == 0) // Throws a nullreferenceexception\n{\n    //Do something\n} \n\n\nThe .NET runtime will throw a NullReferenceException when you attempt to perform an action on something which hasn\u0027t been instantiated i.e. the code above.\n\nIn comparison to an ArgumentNullException which is typically thrown as a defensive measure if a method expects that what is being passed to it is not null.\n\nMore information is in C# NullReferenceException and Null Parameter. \n    ",
      "\nAnother case where NullReferenceExceptions can happen is the (incorrect) use of the as operator:\n\nclass Book {\n    public string Name { get; set; }\n}\nclass Car { }\n\nCar mycar = new Car();\nBook mybook = mycar as Book;   // Incompatible conversion --\u003E mybook = null\n\nConsole.WriteLine(mybook.Name);   // NullReferenceException\n\n\nHere, Book and Car are incompatible types; a Car cannot be converted/cast to a Book.  When this cast fails, as returns null.  Using mybook after this causes a NullReferenceException.\n\nIn general, you should use a cast or as, as follows:\n\nIf you are expecting the type conversion to always succeed (ie. you know what the object should be ahead of time), then you should use a cast:\n\nComicBook cb = (ComicBook)specificBook;\n\n\nIf you are unsure of the type, but you want to try to use it as a specific type, then use as:\n\nComicBook cb = specificBook as ComicBook;\nif (cb != null) {\n   // ...\n}\n\n    ",
      "\nYou are using the object that contains the null value reference. So it\u0027s giving a null exception. In the example the string value is null and when checking its length, the exception occurred.\nExample:\nstring value = null;\nif (value.Length == 0) // \u003C-- Causes exception\n{\n    Console.WriteLine(value); // \u003C-- Never reached\n}\n\nThe exception error is:\n\nUnhandled Exception:\nSystem.NullReferenceException: Object reference not set to an instance\nof an object. at Program.Main()\n\n    ",
      "\nWhile what causes a NullReferenceExceptions and approaches to avoid/fix such an exception have been addressed in other answers, what many programmers haven\u0027t learned yet is how to independently debug such exceptions during development.\n\nIn Visual Studio this is usually easy thanks to the Visual Studio Debugger.\n\n\n\nFirst, make sure that the correct error is going to be caught - see\nHow do I allow breaking on \u0027System.NullReferenceException\u0027 in VS2010? Note1\n\nThen either Start with Debugging (F5) or Attach [the VS Debugger] to Running Process. On occasion it may be useful to use Debugger.Break, which will prompt to launch the debugger.\n\nNow, when the NullReferenceException is thrown (or unhandled) the debugger will stop (remember the rule set above?) on the line on which the exception occurred. Sometimes the error will be easy to spot.\n\nFor instance,\nin the following line the only code that can cause the exception is if myString evaluates to null. This can be verified by looking at the Watch Window or running expressions in the Immediate Window.\n\nvar x = myString.Trim();\n\n\nIn more advanced cases, such as the following, you\u0027ll need to use one of the techniques above (Watch or Immediate Windows) to inspect the expressions to determine if str1 was null or if str2 was null.\n\nvar x = str1.Trim() \u002B str2.Trim();\n\n\nOnce where the exception is throw has been located, it\u0027s usually trivial to reason backwards to find out where the null value was [incorrectly] introduced --\n\nTake the time required to understand the cause of the exception. Inspect for null expressions. Inspect the previous expressions which could have resulted in such null expressions. Add breakpoints and step through the program as appropriate. Use the debugger.\n\n\n\n1  If Break on Throws is too aggressive and the debugger stops on an NPE in the .NET or 3rd-party library, Break on User-Unhandled can be used to limit the exceptions caught. Additionally, VS2012 introduces Just My Code which I recommend enabling as well.\n\n\n  If you are debugging with Just My Code enabled, the behavior is slightly different. With Just My Code enabled, the debugger ignores first-chance common language runtime (CLR) exceptions that are thrown outside of My Code and do not pass through My Code\n\n    ",
      "\nSimon Mourier gave this example:\n\nobject o = null;\nDateTime d = (DateTime)o;  // NullReferenceException\n\n\nwhere an unboxing conversion (cast) from object (or from one of the classes System.ValueType or System.Enum, or from an interface type) to a value type (other than Nullable\u003C\u003E) in itself gives the NullReferenceException.\n\nIn the other direction, a boxing conversion from a Nullable\u003C\u003E which has HasValue equal to false to a reference type, can give a null reference which can then later lead to a NullReferenceException. The classic example is:\n\nDateTime? d = null;\nvar s = d.ToString();  // OK, no exception (no boxing), returns \u0022\u0022\nvar t = d.GetType();   // Bang! d is boxed, NullReferenceException\n\n\nSometimes the boxing happens in another way. For example with this non-generic extension method:\n\npublic static void MyExtension(this object x)\n{\n  x.ToString();\n}\n\n\nthe following code will be problematic:\n\nDateTime? d = null;\nd.MyExtension();  // Leads to boxing, NullReferenceException occurs inside the body of the called method, not here.\n\n\nThese cases arise because of the special rules the runtime uses when boxing Nullable\u003C\u003E instances.\n    ",
      "\nAdding a case when the class name for entity used in entity framework is same as class name for a web form code-behind file.\n\nSuppose you have a web form Contact.aspx whose codebehind class is Contact and you have an entity name Contact.\n\nThen following code will throw a NullReferenceException when you call context.SaveChanges()\n\nContact contact = new Contact { Name = \u0022Abhinav\u0022};\nvar context = new DataContext();\ncontext.Contacts.Add(contact);\ncontext.SaveChanges(); // NullReferenceException at this line\n\n\nFor the sake of completeness DataContext class\n\npublic class DataContext : DbContext \n{\n    public DbSet\u003CContact\u003E Contacts {get; set;}\n}\n\n\nand Contact entity class. Sometimes entity classes are partial classes so that you can extend them in other files too.\n\npublic partial class Contact \n{\n    public string Name {get; set;}\n}\n\n\nThe error occurs when both the entity and codebehind class are in same namespace.\nTo fix this, rename the entity class or the codebehind class for Contact.aspx.\n\nReason\nI am still not sure about the reason. But whenever any of the entity class will extend System.Web.UI.Page this error occurs.\n\nFor discussion have a look at NullReferenceException in DbContext.saveChanges()\n    ",
      "\nAnother general case where one might receive this exception involves mocking classes during unit testing. Regardless of the mocking framework being used, you must ensure that all appropriate levels of the class hierarchy are properly mocked. In particular, all properties of HttpContext which are referenced by the code under test must be mocked.\n\nSee \u0022NullReferenceException thrown when testing custom AuthorizationAttribute\u0022 for a somewhat verbose example.\n    ",
      "\nI have a different perspective to answering this. This sort of answers \u0022what else can I do to avoid it?\u0022\n\nWhen working across different layers, for example in an MVC application, a controller needs services to call business operations. In such scenarios Dependency Injection Container can be used to initialize the services to avoid the NullReferenceException. So that means you don\u0027t need to worry about checking for null and just call the services from the controller as though they will always to available (and initialized) as either a singleton or a prototype.\n\npublic class MyController\n{\n    private ServiceA serviceA;\n    private ServiceB serviceB;\n\n    public MyController(ServiceA serviceA, ServiceB serviceB)\n    {\n        this.serviceA = serviceA;\n        this.serviceB = serviceB;\n    }\n\n    public void MyMethod()\n    {\n        // We don\u0027t need to check null because the dependency injection container \n        // injects it, provided you took care of bootstrapping it.\n        var someObject = serviceA.DoThis();\n    }\n}\n\n    ",
      "\nOn the matter of \u0022what should I do about it\u0022, there can be many answers.\nA more \u0022formal\u0022 way of preventing such error conditions while developing is applying design by contract in your code. This means you need to set class invariants, and/or even function/method preconditions and postconditions on your system, while developing.\nIn short, class invariants ensure that there will be some constraints in your class that will not get violated in normal use (and therefore, the class will not get in an inconsistent state). Preconditions mean that data given as input to a function/method must follow some constraints set and never violate them, and postconditions mean that a function/method output must follow the set constraints again without ever violating them.\nContract conditions should never be violated during execution of a bug-free program, therefore design by contract is checked in practice in debug mode, while being disabled in releases, to maximize the developed system performance.\nThis way, you can avoid NullReferenceException cases that are results of violation of the constraints set. For example, if you use an object property X in a class and later try to invoke one of its methods and X has a null value, then this will lead to NullReferenceException:\npublic X { get; set; }\n\npublic void InvokeX()\n{\n    X.DoSomething(); // if X value is null, you will get a NullReferenceException\n}\n\nBut if you set \u0022property X must never have a null value\u0022 as method precondition, then you can prevent the scenario described before:\n//Using code contracts:\n[ContractInvariantMethod]\nprotected void ObjectInvariant() \n{\n    Contract.Invariant(X != null);\n    //...\n}\n\nFor this cause, Code Contracts project exists for .NET applications.\nAlternatively, design by contract can be applied using assertions.\nUPDATE: It is worth mentioning that the term was coined by Bertrand Meyer in connection with his design of the Eiffel programming language.\n    ",
      "\nA NullReferenceException is thrown when we are trying to access Properties of a null object or when a string value becomes empty and we are trying to access string methods.\n\nFor example: \n\n\nWhen a string method of an empty string accessed:\n\nstring str = string.Empty;\nstr.ToLower(); // throw null reference exception\n\nWhen a property of a null object accessed:\n\nPublic Class Person {\n    public string Name { get; set; }\n}\nPerson objPerson;\nobjPerson.Name  /// throw Null refernce Exception \n\n\n    ",
      "\nTL;DR: Try using Html.Partial instead of Renderpage\n\n\n\nI was getting Object reference not set to an instance of an object when I tried to render a View within a View by sending it a Model, like this:\n\n@{\n    MyEntity M = new MyEntity();\n}\n@RenderPage(\u0022_MyOtherView.cshtml\u0022, M); // error in _MyOtherView, the Model was Null\n\n\nDebugging showed the model was Null inside MyOtherView. Until I changed it to:\n\n@{\n    MyEntity M = new MyEntity();\n}\n@Html.Partial(\u0022_MyOtherView.cshtml\u0022, M);\n\n\nAnd it worked.\n\nFurthermore, the reason I didn\u0027t have Html.Partial to begin with was because Visual Studio sometimes throws error-looking squiggly lines under Html.Partial if it\u0027s inside a differently constructed foreach loop, even though it\u0027s not really an error:\n\n@inherits System.Web.Mvc.WebViewPage\n@{\n    ViewBag.Title = \u0022Entity Index\u0022;\n    List\u003CMyEntity\u003E MyEntities = new List\u003CMyEntity\u003E();\n    MyEntities.Add(new MyEntity());\n    MyEntities.Add(new MyEntity());\n    MyEntities.Add(new MyEntity());\n}\n\u003Cdiv\u003E\n    @{\n        foreach(var M in MyEntities)\n        {\n            // Squiggly lines below. Hovering says: cannot convert method group \u0027partial\u0027 to non-delegate type Object, did you intend to envoke the Method?\n            @Html.Partial(\u0022MyOtherView.cshtml\u0022);\n        }\n    }\n\u003C/div\u003E\n\n\nBut I was able to run the application with no problems with this \u0022error\u0022. I was able to get rid of the error by changing the structure of the foreach loop to look like this:\n\n@foreach(var M in MyEntities){\n    ...\n}\n\n\nAlthough I have a feeling it was because Visual Studio was misreading the ampersands and brackets.\n    ",
      "\nWhat can you do about it?\n\nThere is a lot of good answers here explaining what a null reference is and how to debug it. But there is very little on how to prevent the issue or at least make it easier to catch.\n\nCheck arguments\n\nFor example, methods can check the different arguments to see if they are null and throw an ArgumentNullException, an exception obviously created for this exact purpose. \n\nThe constructor for the ArgumentNullException even takes the name of the parameter and a message as arguments so you can tell the developer exactly what the problem is.\n\npublic void DoSomething(MyObject obj) {\n    if(obj == null) \n    {\n        throw new ArgumentNullException(\u0022obj\u0022, \u0022Need a reference to obj.\u0022);\n    }\n}\n\n\nUse Tools\n\nThere are also several libraries that can help. \u0022Resharper\u0022 for example can provide you with warnings while you are writing code, especially if you use their attribute: NotNullAttribute\n\nThere\u0027s \u0022Microsoft Code Contracts\u0022 where you use syntax like Contract.Requires(obj != null) which gives you runtime and compile checking: Introducing Code Contracts.\n\nThere\u0027s also \u0022PostSharp\u0022 which will allow you to just use attributes like this: \n\npublic void DoSometing([NotNull] obj)\n\n\nBy doing that and making PostSharp part of your build process obj will be checked for null at runtime. See: PostSharp null check\n\nPlain Code Solution\n\nOr you can always code your own approach using plain old code. For example here is a struct that you can use to catch null references. It\u0027s modeled after the same concept as Nullable\u003CT\u003E:\n\n[System.Diagnostics.DebuggerNonUserCode]\npublic struct NotNull\u003CT\u003E where T: class\n{\n    private T _value;\n\n    public T Value\n    {\n        get\n        {\n            if (_value == null)\n            {\n                throw new Exception(\u0022null value not allowed\u0022);\n            }\n\n            return _value;\n        }\n        set\n        {\n            if (value == null)\n            {\n                throw new Exception(\u0022null value not allowed.\u0022);\n            }\n\n            _value = value;\n        }\n    }\n\n    public static implicit operator T(NotNull\u003CT\u003E notNullValue)\n    {\n        return notNullValue.Value;\n    }\n\n    public static implicit operator NotNull\u003CT\u003E(T value)\n    {\n        return new NotNull\u003CT\u003E { Value = value };\n    }\n}\n\n\nYou would use very similar to the same way you would use Nullable\u003CT\u003E, except with the goal of accomplishing exactly the opposite - to not allow null. Here are some examples:\n\nNotNull\u003CPerson\u003E person = null; // throws exception\nNotNull\u003CPerson\u003E person = new Person(); // OK\nNotNull\u003CPerson\u003E person = GetPerson(); // throws exception if GetPerson() returns null\n\n\nNotNull\u003CT\u003E is implicitly cast to and from T so you can use it just about anywhere you need it. For example, you can pass a Person object to a method that takes a NotNull\u003CPerson\u003E:\n\nPerson person = new Person { Name = \u0022John\u0022 };\nWriteName(person);\n\npublic static void WriteName(NotNull\u003CPerson\u003E person)\n{\n    Console.WriteLine(person.Value.Name);\n}\n\n\nAs you can see above as with nullable you would access the underlying value through the Value property. Alternatively, you can use an explicit or implicit cast, you can see an example with the return value below:\n\nPerson person = GetPerson();\n\npublic static NotNull\u003CPerson\u003E GetPerson()\n{\n    return new Person { Name = \u0022John\u0022 };\n}\n\n\nOr you can even use it when the method just returns T (in this case Person) by doing a cast. For example, the following code would just like the code above:\n\nPerson person = (NotNull\u003CPerson\u003E)GetPerson();\n\npublic static Person GetPerson()\n{\n    return new Person { Name = \u0022John\u0022 };\n}\n\n\nCombine with Extension\n\nCombine NotNull\u003CT\u003E with an extension method and you can cover even more situations. Here is an example of what the extension method can look like:\n\n[System.Diagnostics.DebuggerNonUserCode]\npublic static class NotNullExtension\n{\n    public static T NotNull\u003CT\u003E(this T @this) where T: class\n    {\n        if (@this == null)\n        {\n            throw new Exception(\u0022null value not allowed\u0022);\n        }\n\n        return @this;\n    }\n}\n\n\nAnd here is an example of how it could be used:\n\nvar person = GetPerson().NotNull();\n\n\nGitHub\n\nFor your reference I made the code above available on GitHub, you can find it at:\n\nhttps://github.com/luisperezphd/NotNull\n\nRelated Language Feature\n\nC# 6.0 introduced the \u0022null-conditional operator\u0022 that helps with this a little. With this feature, you can reference nested objects and if any one of them is null the whole expression returns null.\n\nThis reduces the number of null checks you have to do in some cases. The syntax is to put a question mark before each dot. Take the following code for example:\n\nvar address = country?.State?.County?.City;\n\n\nImagine that country is an object of type Country that has a property called State and so on. If country, State, County, or City is null then address will benull. Therefore you only have to check whetheraddressisnull\u0060.\n\nIt\u0027s a great feature, but it gives you less information. It doesn\u0027t make it obvious which of the 4 is null.\n\nBuilt-in like Nullable?\n\nC# has a nice shorthand for Nullable\u003CT\u003E, you can make something nullable by putting a question mark after the type like so int?. \n\nIt would be nice if C# had something like the NotNull\u003CT\u003E struct above and had a similar shorthand, maybe the exclamation point (!) so that you could write something like: public void WriteName(Person! person).\n    ",
      "\nYou can fix NullReferenceException in a clean way using Null-conditional Operators in c#6 and write less code to handle null checks.\n\nIt\u0027s used to test for null before performing a member access (?.) or index (?[) operation.\n\nExample\n\n  var name = p?.Spouse?.FirstName;\n\n\nis equivalent to:\n\n    if (p != null)\n    {\n        if (p.Spouse != null)\n        {\n            name = p.Spouse.FirstName;\n        }\n    }\n\n\nThe result is that the name will be null when p is null or when p.Spouse is null. \n\nOtherwise, the variable name will be assigned the value of the p.Spouse.FirstName. \n\nFor More details : Null-conditional Operators \n    ",
      "\nInterestingly, none of the answers on this page mention the two edge cases, hope no one minds if I add them:\nEdge case #1: concurrent access to a Dictionary\nGeneric dictionaries in .NET are not thread-safe and they sometimes might throw a NullReference or even (more frequent) a KeyNotFoundException when you try to access a key from two concurrent threads. The exception is quite misleading in this case.\nEdge case #2: unsafe code\nIf a NullReferenceException is thrown by unsafe code, you might look at your pointer variables, and check them for IntPtr.Zero or something. Which is the same thing (\u0022null pointer exception\u0022), but in unsafe code, variables are often cast to value-types/arrays, etc., and you bang your head against the wall, wondering how a value-type can throw this exception.\n(Another reason for non-using unsafe code unless you need it, by the way)\nEdge case #3: Visual Studio multi monitor setup with secondary monitor(s) that has different DPI setting than the primary monitor\nThis edge case is software-specific and pertains to Visual Studio 2019 IDE (and possibly earlier versions).\nMethod to reproduce the problem: drag any component from the Toolbox to a Windows form on a non-primary monitor with different DPI setting than the primary monitor, and you get a pop-up with \u201CObject reference not set to an instance of an object.\u201D According to this thread this issue has been known for quite some time and at the time of writing it still hasn\u0027t been fixed.\n    ",
      "\nThe error line \u0022Object reference not set to an instance of an object.\n\u0022 states that you have not assigned instance object to a object reference and still you are accessing properies/methods of that object. \n\nfor example: let say you have a class called myClass and it contains one property prop1. \n\npublic Class myClass\n{\n   public int prop1 {get;set;}\n}\n\n\nNow you are accessing this prop1 in some other class just like below:\n\npublic class Demo\n{\n     public void testMethod()\n     {\n        myClass ref = null;\n        ref.prop1 = 1;  //This line throws error\n     }\n}\n\n\nabove line throws error because reference of class myClass is declared but not instantiated or an instance of object is not assigned to referecne of that class. \n\nTo fix this you have to instantiate (assign object to reference of that class).\n\npublic class Demo\n{\n     public void testMethod()\n     {\n        myClass ref = null;\n        ref = new myClass();\n        ref.prop1 = 1;  \n     }\n}\n\n    ",
      "\nNullReferenceException or Object reference not set to an instance of an object occurs when an object of the class you are trying to use is not instantiated.\nFor example:\n\nAssume that you have a class named Student.\n\npublic class Student\n{\n    private string FirstName;\n    private string LastName;\n    public string GetFullName()\n    {\n        return FirstName \u002B LastName;\n    }\n}\n\n\nNow, consider another class where you are trying to retrieve the student\u0027s full name.\n\npublic class StudentInfo\n{      \n    public string GetStudentName()\n    {\n        Student s;\n        string fullname = s.GetFullName();\n        return fullname;\n    }        \n}\n\n\nAs seen in the above code, the statement \nStudent s - only declares the variable of type Student, note that the Student class is not instantiated at this point.\nHence, when the statement s.GetFullName() gets executed, it will throw the NullReferenceException.  \n    ",
      "\nWell, in simple terms:\n\nYou are trying to access an object that isn\u0027t created or currently not in memory.\n\nSo how to tackle this:\n\n\nDebug and let the debugger break... It will directly take you to the variable that is broken... Now your task is to simply fix this.. Using the new keyword in the appropriate place.\nIf it is caused on some database commands because the object isn\u0027t present then all you need to do is do a null check and handle it:\n\nif (i == null) {\n    // Handle this\n}\n\nThe hardest one .. if the GC collected the object already... This generally occurs if you are trying to find an object using strings... That is, finding it by name of the object then it may happen that the GC might already cleaned it up... This is hard to find and will become quite a problem... A better way to tackle this is do null checks wherever necessary during the development process. This will save you a lot of time.\n\n\nBy finding by name I mean some framework allow you to FIndObjects using strings and the code might look like this: FindObject(\u0022ObjectName\u0022);\n    ",
      "\nLiterally the easiest way to fix a NullReferenceExeption has two ways.\nIf you have a GameObject for example with a script attached and a variable named rb (rigidbody) this variable will start null when you start your game.\nThis is why you get a NullReferenceExeption because the computer does not have data stored in that variable.  \n\nI\u0027ll be using a RigidBody variable as an example.\nWe can add data really easily actually in a few ways:  \n\n\nAdd a RigidBody to your object with AddComponent \u003E Physics \u003E Rigidbody\nThen go into your script and type rb = GetComponent\u003CRigidbody\u003E();\nThis line of code works best under your Start() or Awake() functions.  \nYou can add a component programmatically and assign the variable at the same time with one line of code: rb = AddComponent\u003CRigidBody\u003E();  \n\n\nFurther Notes: If you want unity to add a component to your object and you might have forgotten to add one, you can type [RequireComponent(typeof(RigidBody))] above your class declaration (the space below all of your usings).\nEnjoy and have fun making games!\n    ",
      "\nIf we consider common scenarios where this exception can be thrown, accessing properties withing object at the top.\n\nEx: \n\nstring postalcode=Customer.Address.PostalCode; \n//if customer or address is null , this will through exeption\n\n\nin here , if address is null , then you will get NullReferenceException.\n\nSo, as a practice we should always use null check, before accessing properties in such objects (specially in generic)\n\nstring postalcode=Customer?.Address?.PostalCode;\n//if customer or address is null , this will return null, without through a exception\n\n    ",
      "\nThis is basically is a Null reference exception. As Microsoft states-\n\n\n  A NullReferenceException exception is thrown when you try to access a\n  member of a type whose value is null.\n\n\nWhat does that mean?\n\nThat means if any member which doesn\u2019t hold any value and we are making that member to perform certain task then the system will undoubtedly toss a message and say-\n\n\u201CHey wait, that member has no values so it can\u2019t perform the task which you are handing it over.\u201D\n\nThe exception itself says that something is being referred but whose value is not being set. So this denotes that it only occurs while using reference types as Value types are non-nullable.\n\nNullReferenceException won\u0027t occur if we are using Value type members.\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        string str = null;\n        Console.WriteLine(str.Length);\n        Console.ReadLine();\n    }\n}\n\n\nThe above code shows simple string which is assigned with a null value.\n\nNow, when I try to print the length of the string str, I do get An unhandled exception of type \u2018System.NullReferenceException\u2019 occurred message because member str is pointing to null and there can\u2019t be any length of null.\n\n\u2018NullReferenceException\u2019 also occurs when we forget to instantiate a reference type. \n\nSuppose I have a class and member method in it. I have not instantiated my class but only named my class. Now if I try to use the method, the compiler will throw an error or issue a warning (depending on the compiler).\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        MyClass1 obj;\n        obj.foo();  //Use of unassigned local variable \u0027obj\u0027\n    }\n}\n\npublic class MyClass1\n{\n    internal void foo()\n    {\n        Console.WriteLine(\u0022hello from foo\u0022);\n\n    }\n}\n\n\nCompiler for the above code raises an error that variable obj is unassigned which signifies that our variable has null values or nothing. Compiler for the above code raises an error that variable obj is unassigned which signifies that our variable has null values or nothing.\n\nWhy it occurs?\n\n\nNullReferenceException arises due to our fault for not checking the object\u2019s value. We often leave the object values unchecked in the code development.\nIt also arises when we forget to instantiate our objects. Using methods, properties, collections etc. which can return or set null values can also be the cause of this exception.\n\n\nHow can it be avoided?\n\nThere are various ways and methods to avoid this renowned exception:\n\n\nExplicit Checking: We should adhere to the tradition of checking the objects, properties, methods, arrays, and collections whether they are null. This can be simply implemented using conditional statements like if-else if-else etc.\nException handling: One of the important ways of managing this exception. Using simple try-catch-finally blocks we can control this exception and also maintain a log of it. This can be very useful when your application is on production stage.\nNull operators: Null Coalescing operator and null conditional operators can also be used in handy while setting values to objects, variables, properties and fields.\nDebugger: For developers, we have the big weapon of Debugging with us. If have we face NullReferenceException during the development face we can use the debugger to get to the source of the exception.\nIn-built method: System methods such as GetValueOrDefault(),IsNullOrWhiteSpace() and IsNullorEmpty()  checks for nulls and assign the default value if there is a null value.\n\n\nThere are many good answers already here. You can also check more detailed description with examples on my blog.\n\nHope this helps too!\n    ",
      "\nIf one is getting this message during saving or compiling the build, just close all the files and then open any file to compile and save. \n\nFor me the reason was that I had rename the file and old file was still open. \n    ",
      "\n                \n                Maybe this is a dumb comment but wouldnt the first and best way to avoid this problem be to initialize the object?   For me if this error occurs it is usually because I forgot to initialize something like the array element. I think it is far less common to define the object as null and then reference it. Maybe give the way to solve each problem adjacent to the description.   Still a good post.\n                \n\u2013\u00A0JPK\n                May 20 \u002714 at 6:39\n            ",
      "\n                \n                What if there is no object, but rather the return value from a method or property?\n                \n\u2013\u00A0John Saunders\n                May 20 \u002714 at 6:41\n            ",
      "\n                \n                The book/author example is a little weird.... How does that even compile?  How does intellisense even work?  What is this I\u0027m not good with computar...\n                \n\u2013\u00A0user1228\n                Sep 8 \u002714 at 18:26\n            ",
      "\n                \n                @Will: does my last edit help? If not, then please be more explicit about what you see as a problem.\n                \n\u2013\u00A0John Saunders\n                Sep 8 \u002714 at 18:41\n            ",
      "\n                \n                @JohnSaunders Oh, no, sorry, I meant the object initializer version of that.  new Book { Author = { Age = 45 } }; How does the inner initialization even... I can\u0027t think of a situation where inner init would ever work, yet it compiles and intellisense works...  Unless for structs?\n                \n\u2013\u00A0user1228\n                Sep 8 \u002714 at 18:44\n                        \n                            \n                        \n            ",
      "\n                \n                Great catch. One-liner way to avoid: DateTime x = (DateTime) o as DateTime? ?? defaultValue;\n                \n\u2013\u00A0Serge Shultz\n                Jun 29 \u002715 at 11:07\n            ",
      "\n                \n                JetBrains\u0027 Resharper tool will identify every place in your code that has the possibility of a null reference error. This is incorrect. I have a solution without that detection, yet the code occasionally results to the exception. I suspect it\u0027s occasionally undetectable - by them at least - when multithreading is involved, but I can\u0027t comment further because I didn\u0027t identify the location of my bug yet.\n                \n\u2013\u00A0j riv\n                Jan 21 \u002718 at 7:42\n                        \n                            \n                        \n            ",
      "\n                \n                But how to solve it when the NullReferenceException comes in usign HttpContext.Current.Responce.Clear(). It is not getting solved by any of the above solution. because while creating its object object of HttpContext then a error comes \u0022Overload resolution failed because no accessible \u0027New\u0027 accepts this Number of arguments.\n                \n\u2013\u00A0Sunny Sandeep\n                Feb 2 \u002718 at 11:14\n                        \n                            \n                        \n            ",
      "\n                \n                -1: since the question is \u0022What is a NullReferenceException\u0022, value types are not relevant.\n                \n\u2013\u00A0John Saunders\n                May 16 \u002713 at 22:00\n            ",
      "\n                \n                @John Saunders: I disagree. As a software developer it is really important to be able to distinguish between value and reference types. else people will end up checking if integers are null.\n                \n\u2013\u00A0Fabian Bigler\n                May 16 \u002713 at 22:28\n                        \n                            \n                        \n            ",
      "\n                \n                True, just not in the context of this question.\n                \n\u2013\u00A0John Saunders\n                May 16 \u002713 at 22:44\n            ",
      "\n                \n                Thanks for the hint. I improved it a bit and added an example at the top. I still think mentioning Reference \u0026 Value Types is useful.\n                \n\u2013\u00A0Fabian Bigler\n                May 16 \u002713 at 23:02\n            ",
      "\n                \n                I think you haven\u0027t added anything that wasn\u0027t in the other answers, since the question pre-supposes a reference type.\n                \n\u2013\u00A0John Saunders\n                May 18 \u002713 at 23:24\n            ",
      "\n                \n                This can happen a lot when unboxing a variable. I find it happens often in event handlers after I changed the type of the UI element but forget to update the code-behind.\n                \n\u2013\u00A0Brendan\n                Feb 19 \u002714 at 0:24\n                        \n                            \n                        \n            ",
      "\n                \n                How profound! I never considered the \u0027null\u0027 constant a reference value. So this is how C# abstracts a \u0022NullPointer\u0022 huh ? B/c as I recall in C\u002B\u002B, a NPE can be caused by dereferencing an uninitialized pointer (ie, ref type in c#) whose default value happens to be an address that is not allocated to that process (many cases this would be 0, especially in later versions of C\u002B\u002B that did auto-initialization, which belongs to the OS - f with it and die beeotch (or just catch the sigkill the OS attacks your process with)).\n                \n\u2013\u00A0samis\n                Jul 31 \u002713 at 18:55\n                        \n                            \n                        \n            ",
      "\n                \n                -1: this only handles a single scenario - that of uninitialized dependencies. This is a minority scenario for NullReferenceException. Most cases are simple misunderstanding of how objects work. Next most frequent are other situations where the developer assumed that the object would be initialized automatically.\n                \n\u2013\u00A0John Saunders\n                Mar 7 \u002714 at 0:06\n            ",
      "\n                \n                Dependency injection is not generally used in order to avoid NullReferenceException. I don\u0027t believe that you have found a general scenario here. In any case, if you edit your answer to be more in the style of stackoverflow.com/a/15232518/76337, then I will remove the downvote.\n                \n\u2013\u00A0John Saunders\n                Mar 7 \u002714 at 0:30\n            ",
      "\n                \n                I thought to add this as no one mentioned this, and as far as it exists as an approach, my intention was to enrich the topic.\n                \n\u2013\u00A0Nick L.\n                Dec 26 \u002714 at 1:03\n                        \n                            \n                        \n            ",
      "\n                \n                Thank you for enriching the topic. I have given my opinion of your addition. Now others can do the same.\n                \n\u2013\u00A0John Saunders\n                Dec 26 \u002714 at 1:05\n            ",
      "\n                \n                I thought this was a worthwhile addition to the topic given that this is a highly viewed thread.  I\u0027ve heard of code contracts before and this was a good reminder to consider using them.\n                \n\u2013\u00A0VoteCoffee\n                Jan 8 \u002715 at 2:03\n            ",
      "\n                \n                This is incorrect. String.Empty.ToLower() will not throw a null reference exception. It represents an actual string, albeit an empty one (i.e. \u0022\u0022). Since this has an object to call ToLower() on, it would not make sense to throw a null reference exception there.\n                \n\u2013\u00A0Kjartan\n                Jul 24 \u002715 at 6:00\n                        \n                            \n                        \n            ",
      "\n                \n                You wanted Html.Partial, not @Html.Partial\n                \n\u2013\u00A0John Saunders\n                Jul 24 \u002715 at 13:55\n            ",
      "\n                \n                Also, please show which line threw the exception,  and why.\n                \n\u2013\u00A0John Saunders\n                Jul 24 \u002715 at 13:56\n            ",
      "\n                \n                The error occurred in MyOtherView.cshtml, which I did not include here, because the Model was not being properly sent in (it was Null), so I knew the error was with how I was sending the Model in.\n                \n\u2013\u00A0Travis Heeter\n                Jul 27 \u002715 at 11:44\n            ",
      "\n                \n                Never throw NullReferenceException\n                \n\u2013\u00A0John Saunders\n                Mar 6 \u002716 at 20:35\n            ",
      "\n                \n                @JohnSaunders dare I ask why? (Seriously though why?)\n                \n\u2013\u00A0Luis Perez\n                Mar 7 \u002716 at 15:29\n            ",
      "\n                \n                NullReferenceException is meant to be thrown by the CLR. It means that a reference to a null has occurred. It does not mean that a reference to a null would occur except that you cleverly checked first.\n                \n\u2013\u00A0John Saunders\n                Mar 7 \u002716 at 15:43\n            ",
      "\n                \n                I see your point about how that would be confusing. I\u0027ve updated it to a regular exception for this example and a custom exception in GitHub.\n                \n\u2013\u00A0Luis Perez\n                Mar 7 \u002716 at 18:41\n                        \n                            \n                        \n            ",
      "\n                \n                Great answer for such a basic question.    It\u0027s not so bad when it is your code that is failing.  It\u0027s horrible when it\u0027s coming from deep inside some a commercial third party library you are relying on, and the customer support keeps insisting that it has to be your code that is causing the problem.  And your not entirely sure it\u0027s not and the whole project is ground to halt..   I actually think this might make an appropriate epitaph for my tombstone: \u0022Object reference not set to an instance of an object.\u0022\n                \n\u2013\u00A0Darrel Lee\n                May 3 \u002716 at 4:01\n            ",
      "\n                \n                Your dictionary example is not an edge case. If the object is not thread safe, then using it from multiple threads produces random  results. Your unsafe code example differs from null in which way?\n                \n\u2013\u00A0John Saunders\n                Mar 24 \u002717 at 2:03\n            ",
      "\n                \n                If you have a reference to an object, then the GC never cleans it up\n                \n\u2013\u00A0John Saunders\n                Dec 24 \u002715 at 7:51\n            ",
      "\n                \n                if you use things like FindObject(\u0022Name of Object\u0022) there is no way GC will know before hand that you are going to refernece that object .. this is what is was trying to explaing .. these occur at runtime\n                \n\u2013\u00A0Akash Gutha\n                Dec 24 \u002715 at 8:11\n            ",
      "\n                \n                There are some frameworks that Provide this functionality in C# such as Unity . the question has nothing related to BCl. Search the Internet before Criticizing there are a ton of functions like them and for ur kind information i even use it daily. Now please tell me how does the answer doesn\u0027t make anysense.\n                \n\u2013\u00A0Akash Gutha\n                Dec 24 \u002715 at 12:35\n            ",
      "\n                \n                docs.unity3d.com/ScriptReference/\u2026  check the link and correct urself mr.expert :p\n                \n\u2013\u00A0Akash Gutha\n                Dec 24 \u002715 at 12:54\n            ",
      "\n                \n                The examples I saw in your link assign the results of GameObject.Find to a member field. That\u0027s a reference and the GC will not collect it until the containing object is collected.\n                \n\u2013\u00A0John Saunders\n                May 25 \u002716 at 18:00\n            ",
      "\n                \n                You basically copied half of that blog post and added nothing new that existing answers don\u0027t address.\n                \n\u2013\u00A0CodeCaster\n                Jul 18 \u002717 at 14:41\n            ",
      "\n                \n                @codecaster Is it said copying when you rewrite a summary from your own blog. I know there is nothing new in my answer and nothing new that previous answers dont have but I wish to contribute in more sophisticated way and let others understand the way I understood. Will be glad even if it helps a single person. In good faith.\n                \n\u2013\u00A0Wasim\n                Jul 18 \u002717 at 18:01\n            ",
      "\n                \n                If you encounter this error by using @Html.TextBoxFor(... ), To fix: 1) Instantiate your ViewModel, and pass it to the View(),   ex     Public ActionResult Index()      {           var model = new Person_viewmodel();           return View(model);       }\n                \n\u2013\u00A0nrs\n                Aug 3 at 15:04\n                        \n                            \n                        \n            "
    ]
  },
  {
    "Id": "1ef05839-8c97-437b-9b36-031316a5006c",
    "QuestionId": 20940979,
    "Description": "What is an IndexOutOfRangeException / ArgumentOutOfRangeException and how do I fix it?",
    "Votes": 197,
    "Views": 190141,
    "Tags": [
      "c#",
      ".net",
      "indexoutofrangeexception"
    ],
    "Discussions": [
      "\nWhat Is It?\n\nThis exception means that you\u0027re trying to access a collection item by index, using an invalid index. An index is invalid when it\u0027s lower than the collection\u0027s lower bound or greater than or equal to the number of elements it contains.\n\nWhen It Is Thrown\n\nGiven an array declared as:\n\nbyte[] array = new byte[4];\n\n\nYou can access this array from 0 to 3, values outside this range will cause IndexOutOfRangeException to be thrown. Remember this when you create and access an array. \n\nArray Length\nIn C#, usually, arrays are 0-based. It means that first element has index 0 and last element has index Length - 1 (where Length is total number of items in the array) so this code doesn\u0027t work:\n\narray[array.Length] = 0;\n\n\nMoreover please note that if you have a multidimensional array then you can\u0027t use Array.Length for both dimension, you have to use Array.GetLength():\n\nint[,] data = new int[10, 5];\nfor (int i=0; i \u003C data.GetLength(0); \u002B\u002Bi) {\n    for (int j=0; j \u003C data.GetLength(1); \u002B\u002Bj) {\n        data[i, j] = 1;\n    }\n}\n\n\nUpper Bound Is Not Inclusive\nIn the following example we create a raw bidimensional array of Color. Each item represents a pixel, indices are from (0, 0) to (imageWidth - 1, imageHeight - 1).\n\nColor[,] pixels = new Color[imageWidth, imageHeight];\nfor (int x = 0; x \u003C= imageWidth; \u002B\u002Bx) {\n    for (int y = 0; y \u003C= imageHeight; \u002B\u002By) {\n        pixels[x, y] = backgroundColor;\n    }\n}\n\n\nThis code will then fail because array is 0-based and last (bottom-right) pixel in the image is pixels[imageWidth - 1, imageHeight - 1]:\n\npixels[imageWidth, imageHeight] = Color.Black;\n\n\nIn another scenario you may get ArgumentOutOfRangeException for this code (for example if you\u0027re using GetPixel method on a Bitmap class).\n\nArrays Do Not Grow\nAn array is fast. Very fast in linear search compared to every other collection. It is because items are contiguous in memory so memory address can be calculated (and increment is just an addition). No need to follow a node list, simple math! You pay this with a limitation: they can\u0027t grow, if you need more elements you need to reallocate that array (this may take a relatively long time if old items must be copied to a new block). You resize them with Array.Resize\u003CT\u003E(), this example adds a new entry to an existing array:\n\nArray.Resize(ref array, array.Length \u002B 1);\n\n\nDon\u0027t forget that valid indices are from 0 to Length - 1. If you simply try to assign an item at Length you\u0027ll get IndexOutOfRangeException (this behavior may confuse you if you think they may increase with a syntax similar to Insert method of other collections).\n\nSpecial Arrays With Custom Lower Bound\nFirst item in arrays has always index 0. This is not always true because you can create an array with a custom lower bound:\n\nvar array = Array.CreateInstance(typeof(byte), new int[] { 4 }, new int[] { 1 });\n\n\nIn that example, array indices are valid from 1 to 4. Of course, upper bound cannot be changed. \n\nWrong Arguments\nIf you access an array using unvalidated arguments (from user input or from function user) you may get this error:\n\nprivate static string[] RomanNumbers =\n    new string[] { \u0022I\u0022, \u0022II\u0022, \u0022III\u0022, \u0022IV\u0022, \u0022V\u0022 };\n\npublic static string Romanize(int number)\n{\n    return RomanNumbers[number];\n}\n\n\nUnexpected Results\nThis exception may be thrown for another reason too: by convention, many search functions will return -1 (nullables has been introduced with .NET 2.0 and anyway it\u0027s also a well-known convention in use from many years) if they didn\u0027t find anything. Let\u0027s imagine you have an array of objects comparable with a string. You may think to write this code:\n\n// Items comparable with a string\nConsole.WriteLine(\u0022First item equals to \u0027Debug\u0027 is \u0027{0}\u0027.\u0022,\n    myArray[Array.IndexOf(myArray, \u0022Debug\u0022)]);\n\n// Arbitrary objects\nConsole.WriteLine(\u0022First item equals to \u0027Debug\u0027 is \u0027{0}\u0027.\u0022,\n    myArray[Array.FindIndex(myArray, x =\u003E x.Type == \u0022Debug\u0022)]);\n\n\nThis will fail if no items in myArray will satisfy search condition because Array.IndexOf() will return -1 and then array access will throw. \n\nNext example is a naive example to calculate occurrences of a given set of numbers (knowing maximum number and returning an array where item at index 0 represents number 0, items at index 1 represents number 1 and so on):\n\nstatic int[] CountOccurences(int maximum, IEnumerable\u003Cint\u003E numbers) {\n    int[] result = new int[maximum \u002B 1]; // Includes 0\n\n    foreach (int number in numbers)\n        \u002B\u002Bresult[number];\n\n    return result;\n}\n\n\nOf course, it\u0027s a pretty terrible implementation but what I want to show is that it\u0027ll fail for negative numbers and numbers above maximum.\n\nHow it applies to List\u003CT\u003E?\n\nSame cases as array - range of valid indexes - 0 (List\u0027s indexes always start with 0) to list.Count - accessing elements outside of this range will cause the exception.\n\nNote that List\u003CT\u003E throws ArgumentOutOfRangeException for the same cases where arrays use IndexOutOfRangeException.\n\nUnlike arrays, List\u003CT\u003E starts empty - so trying to access items of just created list lead to this exception.\n\nvar list = new List\u003Cint\u003E();\n\n\nCommon case is to populate list with indexing (similar to Dictionary\u003Cint, T\u003E) will cause exception:\n\nlist[0] = 42; // exception\nlist.Add(42); // correct\n\n\nIDataReader and Columns\nImagine you\u0027re trying to read data from a database with this code:\n\nusing (var connection = CreateConnection()) {\n    using (var command = connection.CreateCommand()) {\n        command.CommandText = \u0022SELECT MyColumn1, MyColumn2 FROM MyTable\u0022;\n\n        using (var reader = command.ExecuteReader()) {\n            while (reader.Read()) {\n                ProcessData(reader.GetString(2)); // Throws!\n            }\n        }\n    }\n}\n\n\nGetString() will throw IndexOutOfRangeException because you\u0027re dataset has only two columns but you\u0027re trying to get a value from 3rd one (indices are always 0-based).\n\nPlease note that this behavior is shared with most IDataReader implementations (SqlDataReader, OleDbDataReader and so on).   \n\nYou can get the same exception also if you use the IDataReader overload of the indexer operator that takes a column name and pass an invalid column name.\nSuppose for example that you have retrieved a column named Column1 but then you try to retrieve the value of that field with\n\n var data = dr[\u0022Colum1\u0022];  // Missing the n in Column1.\n\n\nThis happens because the indexer operator is implemented trying to retrieve the index of a Colum1 field that doesn\u0027t exist. The GetOrdinal method will throw this exception when its internal helper code returns a -1 as the index of \u0022Colum1\u0022.\n\nOthers\nThere is another (documented) case when this exception is thrown: if, in DataView, data column name being supplied to the DataViewSort property is not valid.\n\nHow to Avoid\n\nIn this example, let me assume, for simplicity, that arrays are always monodimensional and 0-based. If you want to be strict (or you\u0027re developing a library), you may need to replace 0 with GetLowerBound(0) and .Length with GetUpperBound(0) (of course if you have parameters of type System.Array, it doesn\u0027t apply for T[]). Please note that in this case, upper bound is inclusive then this code:\n\nfor (int i=0; i \u003C array.Length; \u002B\u002Bi) { }\n\n\nShould be rewritten like this:\n\nfor (int i=array.GetLowerBound(0); i \u003C= array.GetUpperBound(0); \u002B\u002Bi) { }\n\n\nPlease note that this is not allowed (it\u0027ll throw InvalidCastException), that\u0027s why if your parameters are T[] you\u0027re safe about custom lower bound arrays:\n\nvoid foo\u003CT\u003E(T[] array) { }\n\nvoid test() {\n    // This will throw InvalidCastException, cannot convert Int32[] to Int32[*]\n    foo((int)Array.CreateInstance(typeof(int), new int[] { 1 }, new int[] { 1 }));\n}\n\n\nValidate Parameters\nIf index comes from a parameter you should always validate them (throwing appropriate ArgumentException or ArgumentOutOfRangeException). In the next example, wrong parameters may cause IndexOutOfRangeException, users of this function may expect this because they\u0027re passing an array but it\u0027s not always so obvious. I\u0027d suggest to always validate parameters for public functions:\n\nstatic void SetRange\u003CT\u003E(T[] array, int from, int length, Func\u003Ci, T\u003E function)\n{\n    if (from \u003C 0 || from\u003E= array.Length)\n        throw new ArgumentOutOfRangeException(\u0022from\u0022);\n\n    if (length \u003C 0)\n        throw new ArgumentOutOfRangeException(\u0022length\u0022);\n\n    if (from \u002B length \u003E array.Length)\n        throw new ArgumentException(\u0022...\u0022);\n\n    for (int i=from; i \u003C from \u002B length; \u002B\u002Bi)\n        array[i] = function(i);\n}\n\n\nIf function is private you may simply replace if logic with Debug.Assert():\n\nDebug.Assert(from \u003E= 0 \u0026\u0026 from \u003C array.Length);\n\n\nCheck Object State\nArray index may not come directly from a parameter. It may be part of object state. In general is always a good practice to validate object state (by itself and with function parameters, if needed). You can use Debug.Assert(), throw a proper exception (more descriptive about the problem) or handle that like in this example:\n\nclass Table {\n    public int SelectedIndex { get; set; }\n    public Row[] Rows { get; set; }\n\n    public Row SelectedRow {\n        get {\n            if (Rows == null)\n                throw new InvalidOperationException(\u0022...\u0022);\n\n            // No or wrong selection, here we just return null for\n            // this case (it may be the reason we use this property\n            // instead of direct access)\n            if (SelectedIndex \u003C 0 || SelectedIndex \u003E= Rows.Length)\n                return null;\n\n            return Rows[SelectedIndex];\n        }\n}\n\n\nValidate Return Values\nIn one of previous examples we directly used Array.IndexOf() return value. If we know it may fail then it\u0027s better to handle that case:\n\nint index = myArray[Array.IndexOf(myArray, \u0022Debug\u0022);\nif (index != -1) { } else { }\n\n\nHow to Debug\n\nIn my opinion, most of the questions, here on SO, about this error can be simply avoided. The time you spend to write a proper question (with a small working example and a small explanation) could easily much more than the time you\u0027ll need to debug your code. First of all, read this Eric Lippert\u0027s blog post about debugging of small programs, I won\u0027t repeat his words here but it\u0027s absolutely a must read.\n\nYou have source code, you have exception message with a stack trace. Go there, pick right line number and you\u0027ll see:\n\narray[index] = newValue;\n\n\nYou found your error, check how index increases. Is it right? Check how array is allocated, is coherent with how index increases? Is it right according to your specifications? If you answer yes to all these questions, then you\u0027ll find good help here on StackOverflow but please first check for that by yourself. You\u0027ll save your own time!\n\nA good start point is to always use assertions and to validate inputs. You may even want to use code contracts. When something went wrong and you can\u0027t figure out what happens with a quick look at your code then you have to resort to an old friend: debugger. Just run your application in debug inside Visual Studio (or your favorite IDE), you\u0027ll see exactly which line throws this exception, which array is involved and which index you\u0027re trying to use. Really, 99% of the times you\u0027ll solve it by yourself in a few minutes.\n\nIf this happens in production then you\u0027d better to add assertions in incriminated code, probably we won\u0027t see in your code what you can\u0027t see by yourself (but you can always bet).\n\nThe VB.NET side of the story\n\nEverything that we have said in the C# answer is valid for VB.NET with the obvious syntax differences but there is an important point to consider when you deal with VB.NET arrays.\n\nIn VB.NET, arrays are declared setting the maximum valid index value for the array. It is not the count of the elements that we want to store in the array.\n\n\u0027 declares an array with space for 5 integer \n\u0027 4 is the maximum valid index starting from 0 to 4\nDim myArray(4) as Integer\n\n\nSo this loop will fill the array with 5 integers without causing any IndexOutOfRangeException\n\nFor i As Integer = 0 To 4\n    myArray(i) = i\nNext\n\n\nThe VB.NET rule\n\nThis exception means that you\u0027re trying to access a collection item by index, using an invalid index. An index is invalid when it\u0027s lower than the collection\u0027s lower bound or greater than equal to the number of elements it contains. the maximum allowed index defined in the array declaration\n    ",
      "\nSimple explanation about what a Index out of bound exception is:\n\nJust think one train is there its compartments are D1,D2,D3.\nOne passenger came to enter the train and he have the ticket for D4.\nnow what will happen. the passenger want to enter a compartment that does not exist so obviously problem will arise. \n\nSame scenario: whenever we try to access an array list, etc. we can only access the existing indexes in the array. array[0] and array[1] are existing. If we try to access array[3], it\u0027s not there actually, so an index out of bound exception will arise.\n    ",
      "\nTo easily understand the problem, imagine we wrote this code:\n\nstatic void Main(string[] args)\n{\n    string[] test = new string[3];\n    test[0]= \u0022hello1\u0022;\n    test[1]= \u0022hello2\u0022;\n    test[2]= \u0022hello3\u0022;\n\n    for (int i = 0; i \u003C= 3; i\u002B\u002B)\n    {\n        Console.WriteLine(test[i].ToString());\n    }\n}\n\n\nResult will be:\n\nhello1\nhello2\nhello3\n\nUnhandled Exception: System.IndexOutOfRangeException: Index was outside the bounds of the array.\n\n\nSize of array is 3 (indices 0, 1 and 2), but the for-loop loops 4 times (0, 1, 2 and 3). So when it tries to access outside the bounds with (3) it throws the exception.\n    ",
      "\nA side from the very long complete accepted answer there is an important point to make about IndexOutOfRangeException compared with many other exception types, and that is:  \n\nOften there is complex program state that maybe difficult to have control over at a particular point in code e.g a DB connection goes down so data for an input cannot be retrieved etc... This kind of issue often results in an Exception of some kind that has to bubble up to a higher level because where it occurs has no way of dealing with it at that point.  \n\nIndexOutOfRangeException is generally different in that it in most cases it is pretty trivial to check for at the point where the exception is being raised.  Generally this kind of exception get thrown by some code that could very easily deal with the issue at the place it is occurring - just by checking the actual length of the array.  You don\u0027t want to \u0027fix\u0027 this by handling this exception higher up - but instead by ensuring its not thrown in the first instance - which in most cases is easy to do by checking the array length.  \n\nAnother way of putting this is that other exceptions can arise due to genuine lack of control over input or program state BUT IndexOutOfRangeException more often than not is simply just pilot (programmer) error.\n    "
    ]
  },
  {
    "Id": "683a4958-1aa8-4f66-9786-b716f85c01dc",
    "QuestionId": 767999,
    "Description": "Random number generator only generating one random number",
    "Votes": 779,
    "Views": 197703,
    "Tags": [
      "c#",
      "random"
    ],
    "Discussions": [
      "\nEvery time you do new Random() it is initialized using the clock. This means that in a tight loop you get the same value lots of times. You should keep a single Random instance and keep using Next on the same instance.\n\n//Function to get a random number \nprivate static readonly Random random = new Random(); \nprivate static readonly object syncLock = new object(); \npublic static int RandomNumber(int min, int max)\n{\n    lock(syncLock) { // synchronize\n        return random.Next(min, max);\n    }\n}\n\n\n\n\nEdit (see comments): why do we need a lock here?\n\nBasically, Next is going to change the internal state of the Random instance. If we do that at the same time from multiple threads, you could argue \u0022we\u0027ve just made the outcome even more random\u0022, but what we are actually doing is potentially breaking the internal implementation, and we could also start getting the same numbers from different threads, which might be a problem - and might not. The guarantee of what happens internally is the bigger issue, though; since Random does not make any guarantees of thread-safety. Thus there are two valid approaches:\n\n\nSynchronize so that we don\u0027t access it at the same time from different threads\nUse different Random instances per thread\n\n\nEither can be fine; but mutexing a single instance from multiple callers at the same time is just asking for trouble.\n\nThe lock achieves the first (and simpler) of these approaches; however, another approach might be: \n\nprivate static readonly ThreadLocal\u003CRandom\u003E appRandom\n     = new ThreadLocal\u003CRandom\u003E(() =\u003E new Random());\n\n\nthis is then per-thread, so you don\u0027t need to synchronize. \n    ",
      "\nFor ease of re-use throughout your application a static class may help.\n\npublic static class StaticRandom\n{\n    private static int seed;\n\n    private static ThreadLocal\u003CRandom\u003E threadLocal = new ThreadLocal\u003CRandom\u003E\n        (() =\u003E new Random(Interlocked.Increment(ref seed)));\n\n    static StaticRandom()\n    {\n        seed = Environment.TickCount;\n    }\n\n    public static Random Instance { get { return threadLocal.Value; } }\n}\n\n\nYou can use then use static random instance with code such as\n\nStaticRandom.Instance.Next(1, 100);\n\n    ",
      "\nMark\u0027s solution can be quite expensive since it needs to synchronize everytime.\n\nWe can get around the need for synchronization by using the thread-specific storage pattern:\n\n\npublic class RandomNumber : IRandomNumber\n{\n    private static readonly Random Global = new Random();\n    [ThreadStatic] private static Random _local;\n\n    public int Next(int max)\n    {\n        var localBuffer = _local;\n        if (localBuffer == null) \n        {\n            int seed;\n            lock(Global) seed = Global.Next();\n            localBuffer = new Random(seed);\n            _local = localBuffer;\n        }\n        return localBuffer.Next(max);\n    }\n}\n\n\n\nMeasure the two implementations and you should see a significant difference.\n    ",
      "\nMy answer from here:\n\nJust reiterating the right solution:\n\nnamespace mySpace\n{\n    public static class Util\n    {\n        private static rnd = new Random();\n        public static int GetRandom()\n        {\n            return rnd.Next();\n        }\n    }\n}\n\n\nSo you can call:\n\nvar i = Util.GetRandom();\n\n\nall throughout. \n\nIf you strictly need a true stateless static method to generate random numbers, you can rely on a Guid.\n\npublic static class Util\n{\n    public static int GetRandom()\n    {\n        return Guid.NewGuid().GetHashCode();\n    }\n}\n\n\nIt\u0027s going to be a wee bit slower, but can be much more random than Random.Next, at least from my experience.\n\nBut not:\n\nnew Random(Guid.NewGuid().GetHashCode()).Next();\n\n\nThe unnecessary object creation is going to make it slower especially under a loop.\n\nAnd never:\n\nnew Random().Next();\n\n\nNot only it\u0027s slower (inside a loop), its randomness is... well not really good according to me..\n    ",
      "\nI would rather use the following class to generate random numbers:\n\nbyte[] random;\nSystem.Security.Cryptography.RNGCryptoServiceProvider prov = new System.Security.Cryptography.RNGCryptoServiceProvider();\nprov.GetBytes(random);\n\n    ",
      "\n1) As Marc Gravell said, try to use ONE random-generator. It\u0027s always cool to add this to the constructor: System.Environment.TickCount.\n\n2) One tip. Let\u0027s say you want to create 100 objects and suppose each of them should have its-own random-generator (handy if you calculate LOADS of random numbers in a very short period of time). If you would do this in a loop (generation of 100 objects), you could do this like that (to assure fully-randomness):\n\nint inMyRandSeed;\n\nfor(int i=0;i\u003C100;i\u002B\u002B)\n{\n   inMyRandSeed = System.Environment.TickCount \u002B i;\n   .\n   .\n   .\n   myNewObject = new MyNewObject(inMyRandSeed);  \n   .\n   .\n   .\n}\n\n// Usage: Random m_rndGen = new Random(inMyRandSeed);\n\n\nCheers.\n    ",
      "\nEvery time you execute\n\nRandom random = new Random (15);\n\n\nIt does not matter if you execute it millions of times, you will always use the same seed.\n\nIf you use \n\nRandom random = new Random ();\n\n\nYou get different random number sequence, if a hacker guesses the seed and your algorithm is related to the security of your system - your algorithm is broken. I you execute mult. In this constructor the seed is specified by the system clock and if several instances are created in a very short period of time (milliseconds) it is possible that they may have the same seed.\n\nIf you need safe random numbers you must use the class\n\n\n  System.Security.Cryptography.RNGCryptoServiceProvider\n\n\npublic static int Next(int min, int max)\n{\n    if(min \u003E= max)\n    {\n        throw new ArgumentException(\u0022Min value is greater or equals than Max value.\u0022);\n    }\n    byte[] intBytes = new byte[4];\n    using(RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider())\n    {\n        rng.GetNonZeroBytes(intBytes);\n    }\n    return  min \u002B  Math.Abs(BitConverter.ToInt32(intBytes, 0)) % (max - min \u002B 1);\n}\n\n\nUsage:\n\nint randomNumber = Next(1,100);\n\n    ",
      "\nI solved the problem by using the Rnd() function:\nFunction RollD6() As UInteger\n        RollD6 = (Math.Floor(6 * Rnd())) \u002B 1\n        Return RollD6\nEnd Function\n\nWhen the form loads, I use the Randomize() method to make sure I don\u0027t always get the same sequence of random numbers from run to run.\n    ",
      "\nAlways get a positive random number.\n var nexnumber = Guid.NewGuid().GetHashCode();\n        if (nexnumber \u003C 0)\n        {\n            nexnumber *= -1;\n        }\n\n    ",
      "\nThere are a lot of solutions, here one: if you want only number erase the letters and the method receives a random and the result length.\n\npublic String GenerateRandom(Random oRandom, int iLongitudPin)\n{\n    String sCharacters = \u0022123456789ABCDEFGHIJKLMNPQRSTUVWXYZ123456789\u0022;\n    int iLength = sCharacters.Length;\n    char cCharacter;\n    int iLongitudNuevaCadena = iLongitudPin; \n    String sRandomResult = \u0022\u0022;\n    for (int i = 0; i \u003C iLongitudNuevaCadena; i\u002B\u002B)\n    {\n        cCharacter = sCharacters[oRandom.Next(iLength)];\n        sRandomResult \u002B= cCharacter.ToString();\n    }\n    return (sRandomResult);\n}\n\n    ",
      "\n                \n                As a general rule, all static methods should be made thread-safe, since it is hard to guarantee that multiple threads won\u0027t call it at the same time. It is not usually necessary to make instance (i.e. non-static) methods thread-safe.\n                \n\u2013\u00A0Marc Gravell\u2666\n                Apr 20 \u002709 at 12:32\n            ",
      "\n                \n                @Florin - there is no difference re \u0022stack based\u0022 between the two. Static fields are just as much \u0022external state\u0022, and will absolutely be shared between callers. With instances, there is a good chance that different threads have different instances (a common pattern). With statics, it is guaranteed that they all share (not including [ThreadStatic]).\n                \n\u2013\u00A0Marc Gravell\u2666\n                Apr 20 \u002709 at 13:03\n            ",
      "\n                \n                Why can\u0027t you use lock(random)?\n                \n\u2013\u00A0Dan Bechard\n                Jan 31 \u002714 at 21:39\n            ",
      "\n                \n                @Dan if the object is never exposed publicly: you can. The (very theoretical) risk is that some other thread is locking on it in ways you did not expect.\n                \n\u2013\u00A0Marc Gravell\u2666\n                Jan 31 \u002714 at 22:34\n            ",
      "\n                \n                @smiron It\u0027s very likely you\u0027re simply using the random outside of a lock as well. Locking doesn\u0027t prevent all access to what you\u0027re locking around - it just makes sure that two lock statements on the same instance will not run concurrently. So lock (syncObject) will only help if all random.Next() calls are also within lock (syncObject). If the scenario you describe does happen even with correct lock usage, it also extremely likely happens in a single-threaded scenario (e.g. Random is subtly broken).\n                \n\u2013\u00A0Luaan\n                Apr 21 \u002715 at 12:17\n            ",
      "\n                \n                Locks are very cheap when they aren\u0027t contested... and even if contested I would expect the \u0022now do something with the number\u0022 code to dwarf the cost of the lock in most interesting scenarios.\n                \n\u2013\u00A0Marc Gravell\u2666\n                Sep 18 \u002709 at 15:57\n            ",
      "\n                \n                Agreed, this solves the locking problem, but isn\u0027t this still a highly complicated solution to a trivial problem: that you need to write \u0027\u0027two\u0027\u0027 lines of code to generate a random number instead of one. Is this really worth it to save reading one simple line of code?\n                \n\u2013\u00A0EMP\n                Apr 15 \u002710 at 23:07\n            ",
      "\n                \n                \u002B1 Using an additional global Random instance for getting the seed is a nice idea. Note also that the code can be further simplified using the ThreadLocal\u003CT\u003E class introduced in .NET 4 (as Phil also wrote below).\n                \n\u2013\u00A0Groo\n                May 9 \u002714 at 8:41\n                        \n                            \n                        \n            ",
      "\n                \n                Given that _local is ThreadStatic, why do you copy it to/from var localBuffer? Is that a performance optimization? That is, is the performance of access to a ThreadStatic variable significantly more expensive than access to a regular variable? (If so, that may nullify the alleged advantage over lock, in typical situations. If not, then the code could be simplified.)\n                \n\u2013\u00A0ToolmakerSteve\n                Aug 5 at 21:36\n                        \n                            \n                        \n            ",
      "\n                \n                @ToolmakerSteve Yes, the stack is faster that TSS. I\u0027m not worried about the cost compared to locking as locking introduces 100\u0027s to 1000\u0027s of cycles. The issue with my solution is the branch introduced by the \u0022If\u0022 statement potentially costing 100\u002B cycles due to the flushing of the pipeline and the instruction cache when the branch predictor gets it wrong.\n                \n\u2013\u00A0Hans Malherbe\n                Sep 24 at 4:20\n            ",
      "\n                \n                I do not agree with the Guid case. The Random class implements a uniform distribution. Which is not the case in Guid. Guid aim is to be unique not uniformly distributed (and its implementation is most of the time based on some hardware/machine property which is the opposite of ... randomness).\n                \n\u2013\u00A0Askolein\n                Mar 31 \u002713 at 13:37\n            ",
      "\n                \n                if you cannot prove the uniformity of Guid generation , then it is wrong to use it as random (and the Hash would be another step away from uniformity). Likewise, collisions aren\u0027t an issue: uniformity of collision is. Concerning the Guid generation not being on hardware anymore I\u0027m going to RTFM, my bad (any reference?)\n                \n\u2013\u00A0Askolein\n                Mar 31 \u002713 at 14:18\n                        \n                            \n                        \n            ",
      "\n                \n                There is two understandings of \u0022Random\u0022: 1. lack of pattern or 2. lack of pattern following an evolution described by a probability distribution (2 included in 1). Your Guid example is correct in case 1, not in case 2. In opposite: Random class matches case 2 (thus, case 1 too). You can only replace the usage of Random by your Guid\u002BHash if you are not in case 2. Case 1 is probably enough to answer the Question, and then, your Guid\u002BHash works fine. But it is not clearly said (ps: this uniform)\n                \n\u2013\u00A0Askolein\n                Mar 31 \u002713 at 17:33\n            ",
      "\n                \n                @Askolein Just for some test data, I run several batches of both Random and Guid.NewGuid().GetHashCode() through Ent (fourmilab.ch/random) and both are similarly random. new Random(Guid.NewGuid().GetHashCode()) works just as well, as does using a synchronized \u0022master\u0022 Random to generate seeds for \u0022child\u0022 Randoms.. Of course, it does depend on how your system generates Guids - for my system, they are quite random, and on others it may even be crypto-random. So Windows or MS SQL seems fine nowadays. Mono and/or mobile might be different, though.\n                \n\u2013\u00A0Luaan\n                Apr 21 \u002715 at 12:29\n            ",
      "\n                \n                @EdB As I have said in comments previously, while Guid (a large number) is meant to be unique, the GetHashCode of the Guid in .NET is derived from its string representation. The output is quite random for my liking.\n                \n\u2013\u00A0nawfal\n                Aug 3 \u002715 at 17:28\n            ",
      "\n                \n                I\u0027m not one of the down-voters, but note that standard PNRG do serve a genuine need - i.e. to be able to repeatably reproduce a sequence from a known seed. Sometimes the sheer cost of a true cryptographic RNG is too much. And sometimes a crypto RNG is necessary. Horses for courses, so to speak.\n                \n\u2013\u00A0Marc Gravell\u2666\n                Apr 20 \u002709 at 12:35\n            ",
      "\n                \n                According to the documentation this class is thread-safe, so that\u0027s something in it\u0027s favour.\n                \n\u2013\u00A0Rob Church\n                Apr 26 \u002713 at 13:51\n            ",
      "\n                \n                What is the probability two random strings to be one and the same using that? If the string is just 3 characters I guess this will happen with high probability but what if is 255 characters length is it possible to have the same random string or is guaranteed that this can\u0027t happen from the algorithm?\n                \n\u2013\u00A0Lyubomir Velchev\n                Jul 12 \u002716 at 13:03\n            ",
      "\n                \n                @LyubomirVelchev - It is mathematically impossible to craft a function (or a piece of hardware or even a theoretical construct) that guarantees two independently generated strings of finite length are never the same. It cannot be: there is a finite number of choices. Given n possible strings, there is - and must be - a 1/n probability of two independent strings being the same. (And yes, this implies any cryptographic scheme is not 100% safe; however if the odds of something happening twice during the lifetime of the universe is low enough ... good enough in practice.)\n                \n\u2013\u00A0ToolmakerSteve\n                Aug 5 at 21:43\n                        \n                            \n                        \n            ",
      "\n                \n                Joma\u0027s later answer contains a more complete code snippet based on RNGCryptoServiceProvider. See public static int Next(int min, int max) .... But for performance, modify his code to move the new out of the Next method - see my comment there.\n                \n\u2013\u00A0ToolmakerSteve\n                Aug 5 at 22:59\n                        \n                            \n                        \n            ",
      "\n                \n                I would move System.Environment.TickCount out of the loop.  If it ticks over while you are iterating then you will have two items initialized to the same seed.  Another option would be to combine the tickcount an i differently (e.g. System.Environment.TickCount\u003C\u003C8 \u002B i)\n                \n\u2013\u00A0Dolphin\n                Jun 25 \u002709 at 19:03\n            ",
      "\n                \n                If I understand correctly: do you mean, it could happen, that \u0022System.Environment.TickCount \u002B i\u0022 could result the SAME value?\n                \n\u2013\u00A0sabiland\n                Jun 26 \u002709 at 13:18\n            ",
      "\n                \n                EDIT: Of course, no need to have TickCount inside the loop. My bad :).\n                \n\u2013\u00A0sabiland\n                Jun 26 \u002709 at 13:19\n            ",
      "\n                \n                The default Random() constructor calls Random(Environment.TickCount) anyway\n                \n\u2013\u00A0Alsty\n                Feb 16 \u002717 at 16:29\n            ",
      "\n                \n                @Alsty - Useful observation - if only creae one global Random generator. However, if you call the default Random() constructor twice during the same tick, you will get two Random generators that each generate the exact same sequence of random numbers. Probably not what you want! The above logic (#2) uses seeds TickCount\u002B0, TickCount\u002B1, etc - so the generators are all different.\n                \n\u2013\u00A0ToolmakerSteve\n                Aug 5 at 21:57\n                        \n                            \n                        \n            ",
      "\n                \n                It does not matter if you execute it millions of times, you will always use the same seed.  That\u0027s not true unless you specify the seed yourself.\n                \n\u2013\u00A0LarsTech\n                Oct 19 \u002718 at 17:47\n            ",
      "\n                \n                Fixed up. Thanks Exactly as you say LarsTech, if the same seed is always specified, the same sequence of random numbers will always be generated.  In my answer I refer to the constructor with parameters if you always use the same seed.  The Random class generates only pseudo random numbers.  If someone finds out what seed you have used in your algorithm, it can compromise the security or randomness of your algorithm.  With the RNGCryptoServiceProvider class, you can safely have random numbers. I already corrected, thank you very much for the correction.\n                \n\u2013\u00A0Joma\n                Oct 19 \u002718 at 21:03\n            ",
      "\n                \n                It is excessive to call new RNGCryptoServiceProvider() on every Next. Instead, declare private static RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider(); Then remove the using wrapper; simply call rng.GetNonZeroBytes(intBytes); on that static.\n                \n\u2013\u00A0ToolmakerSteve\n                Aug 5 at 22:06\n            ",
      "\n                \n                Re \u0022The Random class generates only pseudo random numbers.\u0022  - ALL software algorithms generate pseudo-random number sequences. True randomness requires hardware based on some physical phenomena that is considered \u0022truly random\u0022. OTOH, cryptographic algorithms have been carefully designed (and tested) to improve the statistical distribution of the generated sequence - to avoid brute force attacks that can exploit weaknesses in simpler random generators. Even though overkill for many uses, I agree that this gives a superior statistical distribution.\n                \n\u2013\u00A0ToolmakerSteve\n                Aug 5 at 22:13\n                        \n                            \n                        \n            ",
      "\n                \n                This question is about C#, not Visual Basic.NET.  (Although both are .NET languages, and even though it\u0027s possible, but not so trivial, to access VB functions from C#.)\n                \n\u2013\u00A0Peter O.\n                Aug 31 at 5:22\n                        \n                            \n                        \n            ",
      "\n                \n                The basic problem is still the same - you\u0027re passing in a Random instance, but you\u0027re still expecting the caller to create a shared instance.  If the caller creates a new instance each time and the code is executed twice before the clock changes, you\u0027ll get the same random number.  So this answer still makes assumptions which could be erroneous.\n                \n\u2013\u00A0Savage\n                Jul 8 \u002719 at 10:38\n            ",
      "\n                \n                Also, the whole point of having a method to generate random numbers is encapsulation - that the calling method doesn\u0027t have to worry about the implementation, it\u0027s only interested in getting a random number back\n                \n\u2013\u00A0Savage\n                Jul 8 \u002719 at 10:42\n            "
    ]
  },
  {
    "Id": "83e70e3f-238a-4154-b32c-0b9b3d8314e7",
    "QuestionId": 661561,
    "Description": "How do I update the GUI from another thread?",
    "Votes": 1442,
    "Views": 693156,
    "Tags": [
      "c#",
      ".net",
      "multithreading",
      "winforms",
      "user-interface"
    ],
    "Discussions": [
      "\nFor .NET 2.0, here\u0027s a nice bit of code I wrote that does exactly what you want, and works for any property on a Control:\n\nprivate delegate void SetControlPropertyThreadSafeDelegate(\n    Control control, \n    string propertyName, \n    object propertyValue);\n\npublic static void SetControlPropertyThreadSafe(\n    Control control, \n    string propertyName, \n    object propertyValue)\n{\n  if (control.InvokeRequired)\n  {\n    control.Invoke(new SetControlPropertyThreadSafeDelegate               \n    (SetControlPropertyThreadSafe), \n    new object[] { control, propertyName, propertyValue });\n  }\n  else\n  {\n    control.GetType().InvokeMember(\n        propertyName, \n        BindingFlags.SetProperty, \n        null, \n        control, \n        new object[] { propertyValue });\n  }\n}\n\n\nCall it like this:\n\n// thread-safe equivalent of\n// myLabel.Text = status;\nSetControlPropertyThreadSafe(myLabel, \u0022Text\u0022, status);\n\n\nIf you\u0027re using .NET 3.0 or above, you could rewrite the above method as an extension method of the Control class, which would then simplify the call to:\n\nmyLabel.SetPropertyThreadSafe(\u0022Text\u0022, status);\n\n\nUPDATE 05/10/2010:\n\nFor .NET 3.0 you should use this code:\n\nprivate delegate void SetPropertyThreadSafeDelegate\u003CTResult\u003E(\n    Control @this, \n    Expression\u003CFunc\u003CTResult\u003E\u003E property, \n    TResult value);\n\npublic static void SetPropertyThreadSafe\u003CTResult\u003E(\n    this Control @this, \n    Expression\u003CFunc\u003CTResult\u003E\u003E property, \n    TResult value)\n{\n  var propertyInfo = (property.Body as MemberExpression).Member \n      as PropertyInfo;\n\n  if (propertyInfo == null ||\n      !@this.GetType().IsSubclassOf(propertyInfo.ReflectedType) ||\n      @this.GetType().GetProperty(\n          propertyInfo.Name, \n          propertyInfo.PropertyType) == null)\n  {\n    throw new ArgumentException(\u0022The lambda expression \u0027property\u0027 must reference a valid property on this Control.\u0022);\n  }\n\n  if (@this.InvokeRequired)\n  {\n      @this.Invoke(new SetPropertyThreadSafeDelegate\u003CTResult\u003E \n      (SetPropertyThreadSafe), \n      new object[] { @this, property, value });\n  }\n  else\n  {\n      @this.GetType().InvokeMember(\n          propertyInfo.Name, \n          BindingFlags.SetProperty, \n          null, \n          @this, \n          new object[] { value });\n  }\n}\n\n\nwhich uses LINQ and lambda expressions to allow much cleaner, simpler and safer syntax:\n\nmyLabel.SetPropertyThreadSafe(() =\u003E myLabel.Text, status); // status has to be a string or this will fail to compile\n\n\nNot only is the property name now checked at compile time, the property\u0027s type is as well, so it\u0027s impossible to (for example) assign a string value to a boolean property, and hence cause a runtime exception.\n\nUnfortunately this doesn\u0027t stop anyone from doing stupid things such as passing in another Control\u0027s property and value, so the following will happily compile:\n\nmyLabel.SetPropertyThreadSafe(() =\u003E aForm.ShowIcon, false);\n\n\nHence I added the runtime checks to ensure that the passed-in property does actually belong to the Control that the method\u0027s being called on. Not perfect, but still a lot better than the .NET 2.0 version.\n\nIf anyone has any further suggestions on how to improve this code for compile-time safety, please comment!\n    ",
      "\nThe simplest way is an anonymous method passed into Label.Invoke:\n\n// Running on the worker thread\nstring newText = \u0022abc\u0022;\nform.Label.Invoke((MethodInvoker)delegate {\n    // Running on the UI thread\n    form.Label.Text = newText;\n});\n// Back on the worker thread\n\n\nNotice that Invoke blocks execution until it completes--this is synchronous code. The question doesn\u0027t ask about asynchronous code, but there is lots of content on Stack Overflow about writing asynchronous code when you want to learn about it.\n    ",
      "\nHandling long work\n\nSince .NET 4.5 and C# 5.0 you should use Task-based Asynchronous Pattern (TAP) along with async-await keywords in all areas (including the GUI):\n\n\n  TAP is the recommended asynchronous design pattern for new development\n\n\ninstead of Asynchronous Programming Model (APM) and Event-based Asynchronous Pattern (EAP) (the latter includes the BackgroundWorker Class).\n\nThen, the recommended solution for new development is:\n\n\nAsynchronous implementation of an event handler (Yes, that\u0027s all):\n\nprivate async void Button_Clicked(object sender, EventArgs e)\n{\n    var progress = new Progress\u003Cstring\u003E(s =\u003E label.Text = s);\n    await Task.Factory.StartNew(() =\u003E SecondThreadConcern.LongWork(progress),\n                                TaskCreationOptions.LongRunning);\n    label.Text = \u0022completed\u0022;\n}\n\nImplementation of the second thread that notifies the UI thread:\n\nclass SecondThreadConcern\n{\n    public static void LongWork(IProgress\u003Cstring\u003E progress)\n    {\n        // Perform a long running work...\n        for (var i = 0; i \u003C 10; i\u002B\u002B)\n        {\n            Task.Delay(500).Wait();\n            progress.Report(i.ToString());\n        }\n    }\n}\n\n\n\nNotice the following: \n\n\nShort and clean code written in sequential manner without callbacks and explicit threads.\nTask instead of Thread.\nasync keyword, that allows to use await which in turn prevent the event handler from reaching the completion state till the task finished and in the meantime doesn\u0027t block the UI thread.\nProgress class (see IProgress Interface) that supports Separation of Concerns (SoC) design principle and doesn\u0027t require explicit dispatcher and invoking. It uses the current SynchronizationContext from its creation place (here the UI thread).\nTaskCreationOptions.LongRunning that hints to do not queue the task into ThreadPool.\n\n\nFor a more verbose examples see: The Future of C#: Good things come to those who \u0027await\u0027 by Joseph Albahari.\n\nSee also about UI Threading Model concept.\n\nHandling exceptions\n\nThe below snippet is an example of how to handle exceptions and toggle button\u0027s Enabled property to prevent multiple clicks during background execution.\n\nprivate async void Button_Click(object sender, EventArgs e)\n{\n    button.Enabled = false;\n\n    try\n    {\n        var progress = new Progress\u003Cstring\u003E(s =\u003E button.Text = s);\n        await Task.Run(() =\u003E SecondThreadConcern.FailingWork(progress));\n        button.Text = \u0022Completed\u0022;\n    }\n    catch(Exception exception)\n    {\n        button.Text = \u0022Failed: \u0022 \u002B exception.Message;\n    }\n\n    button.Enabled = true;\n}\n\nclass SecondThreadConcern\n{\n    public static void FailingWork(IProgress\u003Cstring\u003E progress)\n    {\n        progress.Report(\u0022I will fail in...\u0022);\n        Task.Delay(500).Wait();\n\n        for (var i = 0; i \u003C 3; i\u002B\u002B)\n        {\n            progress.Report((3 - i).ToString());\n            Task.Delay(500).Wait();\n        }\n\n        throw new Exception(\u0022Oops...\u0022);\n    }\n}\n\n    ",
      "\nVariation of Marc Gravell\u0027s simplest solution for .NET 4:\n\ncontrol.Invoke((MethodInvoker) (() =\u003E control.Text = \u0022new text\u0022));\n\n\nOr use Action delegate instead:\n\ncontrol.Invoke(new Action(() =\u003E control.Text = \u0022new text\u0022));\n\n\nSee here for a comparison of the two: MethodInvoker vs Action for Control.BeginInvoke\n    ",
      "\nFire and forget extension method for .NET 3.5\u002B\n\nusing System;\nusing System.Windows.Forms;\n\npublic static class ControlExtensions\n{\n    /// \u003Csummary\u003E\n    /// Executes the Action asynchronously on the UI thread, does not block execution on the calling thread.\n    /// \u003C/summary\u003E\n    /// \u003Cparam name=\u0022control\u0022\u003E\u003C/param\u003E\n    /// \u003Cparam name=\u0022code\u0022\u003E\u003C/param\u003E\n    public static void UIThread(this Control @this, Action code)\n    {\n        if (@this.InvokeRequired)\n        {\n            @this.BeginInvoke(code);\n        }\n        else\n        {\n            code.Invoke();\n        }\n    }\n}\n\n\nThis can be called using the following line of code:\n\nthis.UIThread(() =\u003E this.myLabel.Text = \u0022Text Goes Here\u0022);\n\n    ",
      "\nThis is the classic way you should do this:\n\nusing System;\nusing System.Windows.Forms;\nusing System.Threading;\n\nnamespace Test\n{\n    public partial class UIThread : Form\n    {\n        Worker worker;\n\n        Thread workerThread;\n\n        public UIThread()\n        {\n            InitializeComponent();\n\n            worker = new Worker();\n            worker.ProgressChanged \u002B= new EventHandler\u003CProgressChangedArgs\u003E(OnWorkerProgressChanged);\n            workerThread = new Thread(new ThreadStart(worker.StartWork));\n            workerThread.Start();\n        }\n\n        private void OnWorkerProgressChanged(object sender, ProgressChangedArgs e)\n        {\n            // Cross thread - so you don\u0027t get the cross-threading exception\n            if (this.InvokeRequired)\n            {\n                this.BeginInvoke((MethodInvoker)delegate\n                {\n                    OnWorkerProgressChanged(sender, e);\n                });\n                return;\n            }\n\n            // Change control\n            this.label1.Text = e.Progress;\n        }\n    }\n\n    public class Worker\n    {\n        public event EventHandler\u003CProgressChangedArgs\u003E ProgressChanged;\n\n        protected void OnProgressChanged(ProgressChangedArgs e)\n        {\n            if(ProgressChanged!=null)\n            {\n                ProgressChanged(this,e);\n            }\n        }\n\n        public void StartWork()\n        {\n            Thread.Sleep(100);\n            OnProgressChanged(new ProgressChangedArgs(\u0022Progress Changed\u0022));\n            Thread.Sleep(100);\n        }\n    }\n\n\n    public class ProgressChangedArgs : EventArgs\n    {\n        public string Progress {get;private set;}\n        public ProgressChangedArgs(string progress)\n        {\n            Progress = progress;\n        }\n    }\n}\n\n\nYour worker thread has an event. Your UI thread starts off another thread to do the work and hooks up that worker event so you can display the state of the worker thread.\n\nThen in the UI you need to cross threads to change the actual control... like a label or a progress bar.\n    ",
      "\nThe simple solution is to use Control.Invoke.\n\nvoid DoSomething()\n{\n    if (InvokeRequired) {\n        Invoke(new MethodInvoker(updateGUI));\n    } else {\n        // Do Something\n        updateGUI();\n    }\n}\n\nvoid updateGUI() {\n    // update gui here\n}\n\n    ",
      "\nThreading code is often buggy and always hard to test. You don\u0027t need to write threading code to update the user interface from a background task. Just use the BackgroundWorker class to run the task and its ReportProgress method to update the user interface. Usually, you just report a percentage complete, but there\u0027s another overload that includes a state object. Here\u0027s an example that just reports a string object:\n\n    private void button1_Click(object sender, EventArgs e)\n    {\n        backgroundWorker1.WorkerReportsProgress = true;\n        backgroundWorker1.RunWorkerAsync();\n    }\n\n    private void backgroundWorker1_DoWork(object sender, DoWorkEventArgs e)\n    {\n        Thread.Sleep(5000);\n        backgroundWorker1.ReportProgress(0, \u0022A\u0022);\n        Thread.Sleep(5000);\n        backgroundWorker1.ReportProgress(0, \u0022B\u0022);\n        Thread.Sleep(5000);\n        backgroundWorker1.ReportProgress(0, \u0022C\u0022);\n    }\n\n    private void backgroundWorker1_ProgressChanged(\n        object sender, \n        ProgressChangedEventArgs e)\n    {\n        label1.Text = e.UserState.ToString();\n    }\n\n\nThat\u0027s fine if you always want to update the same field. If you\u0027ve got more complicated updates to make, you could define a class to represent the UI state and pass it to the ReportProgress method.\n\nOne final thing, be sure to set the WorkerReportsProgress flag, or the ReportProgress method will be completely ignored.\n    ",
      "\nThe vast majority of answers use Control.Invoke which is a race condition waiting to happen. For example, consider the accepted answer:\n\nstring newText = \u0022abc\u0022; // running on worker thread\nthis.Invoke((MethodInvoker)delegate { \n    someLabel.Text = newText; // runs on UI thread\n});\n\n\nIf the user closes the form just before this.Invoke is called (remember, this is the Form object), an ObjectDisposedException will be likely fired.\n\nThe solution is to use SynchronizationContext, specifically SynchronizationContext.Current as hamilton.danielb suggests (other answers rely on specific SynchronizationContext implementations which is completely unnecessary). I would slightly modify his code to use SynchronizationContext.Post rather than SynchronizationContext.Send though (as there\u0027s typically no need for the worker thread to wait):\n\npublic partial class MyForm : Form\n{\n    private readonly SynchronizationContext _context;\n    public MyForm()\n    {\n        _context = SynchronizationContext.Current\n        ...\n    }\n\n    private MethodOnOtherThread()\n    {\n         ...\n         _context.Post(status =\u003E someLabel.Text = newText,null);\n    }\n}\n\n\nNote that on .NET 4.0 and up you should really be using tasks for async operations. See n-san\u0027s answer for the equivalent task-based approach (using TaskScheduler.FromCurrentSynchronizationContext). \n\nFinally, on .NET 4.5 and up you can also use Progress\u003CT\u003E (which basically captures SynchronizationContext.Current upon its creation) as demonstrated by Ryszard D\u017Cegan\u0027s for cases where the long-running operation needs to run UI code while still working.\n    ",
      "\nYou\u0027ll have to make sure that the update happens on the correct thread; the UI thread.\n\nIn order to do this, you\u0027ll have to Invoke the event-handler instead of calling it directly.\n\nYou can do this by raising your event like this:\n\n(The code is typed here out of my head, so I haven\u0027t checked for correct syntax, etc., but it should get you going.)\n\nif( MyEvent != null )\n{\n   Delegate[] eventHandlers = MyEvent.GetInvocationList();\n\n   foreach( Delegate d in eventHandlers )\n   {\n      // Check whether the target of the delegate implements \n      // ISynchronizeInvoke (Winforms controls do), and see\n      // if a context-switch is required.\n      ISynchronizeInvoke target = d.Target as ISynchronizeInvoke;\n\n      if( target != null \u0026\u0026 target.InvokeRequired )\n      {\n         target.Invoke (d, ... );\n      }\n      else\n      {\n          d.DynamicInvoke ( ... );\n      }\n   }\n}\n\n\nNote that the code above will not work on WPF projects, since WPF controls do not implement the ISynchronizeInvoke interface.\n\nIn order to make sure that the code above works with Windows Forms and WPF, and all other platforms, you can have a look at the AsyncOperation, AsyncOperationManager and SynchronizationContext classes.\n\nIn order to easily raise events this way, I\u0027ve created an extension method, which allows me to simplify raising an event by just calling:\n\nMyEvent.Raise(this, EventArgs.Empty);\n\n\nOf course, you can also make use of the BackGroundWorker class, which will abstract this matter for you.\n    ",
      "\nYou\u0027ll need to Invoke the method on the GUI thread. You can do that by calling Control.Invoke.\n\nFor example:\n\ndelegate void UpdateLabelDelegate (string message);\n\nvoid UpdateLabel (string message)\n{\n    if (InvokeRequired)\n    {\n         Invoke (new UpdateLabelDelegate (UpdateLabel), message);\n         return;\n    }\n\n    MyLabelControl.Text = message;\n}\n\n    ",
      "\nBecause of the triviality of the scenario I would actually have the UI thread poll for the status. I think you will find that it can be quite elegant.\n\npublic class MyForm : Form\n{\n  private volatile string m_Text = \u0022\u0022;\n  private System.Timers.Timer m_Timer;\n\n  private MyForm()\n  {\n    m_Timer = new System.Timers.Timer();\n    m_Timer.SynchronizingObject = this;\n    m_Timer.Interval = 1000;\n    m_Timer.Elapsed \u002B= (s, a) =\u003E { MyProgressLabel.Text = m_Text; };\n    m_Timer.Start();\n    var thread = new Thread(WorkerThread);\n    thread.Start();\n  }\n\n  private void WorkerThread()\n  {\n    while (...)\n    {\n      // Periodically publish progress information.\n      m_Text = \u0022Still working...\u0022;\n    }\n  }\n}\n\n\nThe approach avoids the marshaling operation required when using the ISynchronizeInvoke.Invoke and ISynchronizeInvoke.BeginInvoke methods. There is nothing wrong with using the marshaling technique, but there are a couple of caveats you need to be aware of.\n\n\nMake sure you do not call BeginInvoke too frequently or it could overrun the message pump.\nCalling Invoke on the worker thread is a blocking call. It will temporarily halt the work being done in that thread.\n\n\nThe strategy I propose in this answer reverses the communication roles of the threads. Instead of the worker thread pushing the data the UI thread polls for it. This a common pattern used in many scenarios. Since all you are wanting to do is display progress information from the worker thread then I think you will find that this solution is a great alternative to the marshaling solution. It has the following advantages.\n\n\nThe UI and worker threads remain loosely coupled as opposed to the Control.Invoke or Control.BeginInvoke approach which tightly couples them.\nThe UI thread will not impede the progress of the worker thread.\nThe worker thread cannot dominate the time the UI thread spends updating.\nThe intervals at which the UI and worker threads perform operations can remain independent.\nThe worker thread cannot overrun the UI thread\u0027s message pump.\nThe UI thread gets to dictate when and how often the UI gets updated.\n\n    ",
      "\nNone of the Invoke stuff in the previous answers is necessary.\n\nYou need to look at WindowsFormsSynchronizationContext:\n\n// In the main thread\nWindowsFormsSynchronizationContext mUiContext = new WindowsFormsSynchronizationContext();\n\n...\n\n// In some non-UI Thread\n\n// Causes an update in the GUI thread.\nmUiContext.Post(UpdateGUI, userData);\n\n...\n\nvoid UpdateGUI(object userData)\n{\n    // Update your GUI controls here\n}\n\n    ",
      "\nThis one is similar to the solution above using .NET Framework 3.0, but it solved the issue of compile-time safety support.\n\npublic  static class ControlExtension\n{\n    delegate void SetPropertyValueHandler\u003CTResult\u003E(Control souce, Expression\u003CFunc\u003CControl, TResult\u003E\u003E selector, TResult value);\n\n    public static void SetPropertyValue\u003CTResult\u003E(this Control source, Expression\u003CFunc\u003CControl, TResult\u003E\u003E selector, TResult value)\n    {\n        if (source.InvokeRequired)\n        {\n            var del = new SetPropertyValueHandler\u003CTResult\u003E(SetPropertyValue);\n            source.Invoke(del, new object[]{ source, selector, value});\n        }\n        else\n        {\n            var propInfo = ((MemberExpression)selector.Body).Member as PropertyInfo;\n            propInfo.SetValue(source, value, null);\n        }\n    }\n}\n\n\nTo use:\n\nthis.lblTimeDisplay.SetPropertyValue(a =\u003E a.Text, \u0022some string\u0022);\nthis.lblTimeDisplay.SetPropertyValue(a =\u003E a.Visible, false);\n\n\nThe compiler will fail if the user passes the wrong data type.\n\nthis.lblTimeDisplay.SetPropertyValue(a =\u003E a.Visible, \u0022sometext\u0022);\n\n    ",
      "\nSalvete! Having searched for this question, I found the answers by FrankG and Oregon Ghost to be the easiest most useful to me. Now, I code in Visual Basic and ran this snippet through a convertor; so I\u0027m not sure quite how it turns out.\n\nI have a dialog form called form_Diagnostics, which has a richtext box, called updateDiagWindow, which I am using as a sort of logging display.  I needed to be able to update its text from all threads. The extra lines allow the window to automatically scroll to the newest lines.\n\nAnd so, I can now update the display with one line, from anywhere in the entire program in the manner which you think it would work without any threading:\n\n  form_Diagnostics.updateDiagWindow(whatmessage);\n\n\nMain Code (put this inside of your form\u0027s class code):\n\n#region \u0022---------Update Diag Window Text------------------------------------\u0022\n// This sub allows the diag window to be updated by all threads\npublic void updateDiagWindow(string whatmessage)\n{\n    var _with1 = diagwindow;\n    if (_with1.InvokeRequired) {\n        _with1.Invoke(new UpdateDiagDelegate(UpdateDiag), whatmessage);\n    } else {\n        UpdateDiag(whatmessage);\n    }\n}\n// This next line makes the private UpdateDiagWindow available to all threads\nprivate delegate void UpdateDiagDelegate(string whatmessage);\nprivate void UpdateDiag(string whatmessage)\n{\n    var _with2 = diagwindow;\n    _with2.appendtext(whatmessage);\n    _with2.SelectionStart = _with2.Text.Length;\n    _with2.ScrollToCaret();\n}\n#endregion\n\n    ",
      "\nFor many purposes it\u0027s as simple as this:\n\npublic delegate void serviceGUIDelegate();\nprivate void updateGUI()\n{\n  this.Invoke(new serviceGUIDelegate(serviceGUI));\n}\n\n\n\u0022serviceGUI()\u0022 is a GUI level method within the form (this) that can change as many controls as you want. Call \u0022updateGUI()\u0022 from the other thread. Parameters can be added to pass values, or (probably faster) use class scope variables with locks on them as required if there is any possibility of a clash between threads accessing them that could cause instability.  Use BeginInvoke instead of Invoke if the non-GUI thread is time critical (keeping Brian Gideon\u0027s warning in mind). \n    ",
      "\nThis in my C# 3.0 variation of Ian Kemp\u0027s solution:\n\npublic static void SetPropertyInGuiThread\u003CC,V\u003E(this C control, Expression\u003CFunc\u003CC, V\u003E\u003E property, V value) where C : Control\n{\n    var memberExpression = property.Body as MemberExpression;\n    if (memberExpression == null)\n        throw new ArgumentException(\u0022The \u0027property\u0027 expression must specify a property on the control.\u0022);\n\n    var propertyInfo = memberExpression.Member as PropertyInfo;\n    if (propertyInfo == null)\n        throw new ArgumentException(\u0022The \u0027property\u0027 expression must specify a property on the control.\u0022);\n\n    if (control.InvokeRequired)\n        control.Invoke(\n            (Action\u003CC, Expression\u003CFunc\u003CC, V\u003E\u003E, V\u003E)SetPropertyInGuiThread,\n            new object[] { control, property, value }\n        );\n    else\n        propertyInfo.SetValue(control, value, null);\n}\n\n\nYou call it like this:\n\nmyButton.SetPropertyInGuiThread(b =\u003E b.Text, \u0022Click Me!\u0022)\n\n\n\nIt adds null-checking to the result of the \u0022as MemberExpression\u0022.\nIt improves the static type-safety.\n\n\nOtherwise, the original is a very nice solution.\n    ",
      "\nLabel lblText; //initialized elsewhere\n\nvoid AssignLabel(string text)\n{\n   if (InvokeRequired)\n   {\n      BeginInvoke((Action\u003Cstring\u003E)AssignLabel, text);\n      return;\n   }\n\n   lblText.Text = text;           \n}\n\n\nNote that BeginInvoke() is preferred over Invoke() because it\u0027s less likely to cause deadlocks (however, this is not an issue here when just assigning text to a label): \n\nWhen using Invoke() you are waiting for the method to return. Now, it may be that you do something in the invoked code that will need to wait for the thread, which may not be immediately obvious if it\u0027s buried in some functions that you are calling, which itself may happen indirectly via event handlers. So you would be waiting for the thread, the thread would be waiting for you and you are deadlocked. \n\nThis actually caused some of our released software to hang. It was easy enough to fix by replacing Invoke() with BeginInvoke(). Unless you have a need for synchronous operation, which may be the case if you need a return value, use BeginInvoke().\n    ",
      "\nWhen I encountered the same issue I sought help from Google, but rather than give me a simple solution it confused me more by giving examples of MethodInvoker and blah blah blah. So I decided to solve it on my own. Here is my solution:\n\nMake a delegate like this:\n\nPublic delegate void LabelDelegate(string s);\n\nvoid Updatelabel(string text)\n{\n   if (label.InvokeRequired)\n   {\n       LabelDelegate LDEL = new LabelDelegate(Updatelabel);\n       label.Invoke(LDEL, text);\n   }\n   else\n       label.Text = text\n}\n\n\nYou can call this function in a new thread like this\n\nThread th = new Thread(() =\u003E Updatelabel(\u0022Hello World\u0022));\nth.start();\n\n\nDon\u0027t be confused with Thread(() =\u003E .....). I use an anonymous function or lambda expression when I work on a thread. To reduce the lines of code you can use the ThreadStart(..) method too which I am not supposed to explain here.\n    ",
      "\nSimply use something like this:\n\n this.Invoke((MethodInvoker)delegate\n            {\n                progressBar1.Value = e.ProgressPercentage; // runs on UI thread\n            });\n\n    ",
      "\nYou may use the already-existing delegate Action:\n\nprivate void UpdateMethod()\n{\n    if (InvokeRequired)\n    {\n        Invoke(new Action(UpdateMethod));\n    }\n}\n\n    ",
      "\nMy version is to insert one line of recursive \u0022mantra\u0022:\n\nFor no arguments:\n\n    void Aaaaaaa()\n    {\n        if (InvokeRequired) { Invoke(new Action(Aaaaaaa)); return; } //1 line of mantra\n\n        // Your code!\n    }\n\n\nFor a function that has arguments:\n\n    void Bbb(int x, string text)\n    {\n        if (InvokeRequired) { Invoke(new Action\u003Cint, string\u003E(Bbb), new[] { x, text }); return; }\n        // Your code!\n    }\n\n\nTHAT is IT.\n\n\n\nSome argumentation: Usually it is bad for code readability to put {} after an if () statement in one line. But in this case it is routine all-the-same \u0022mantra\u0022. It doesn\u0027t break code readability if this method is consistent over the project. And it saves your code from littering (one line of code instead of five).\n\nAs you see if(InvokeRequired) {something long} you just know \u0022this function is safe to call from another thread\u0022.\n    ",
      "\nTry to refresh the label using this\n\npublic static class ExtensionMethods\n{\n    private static Action EmptyDelegate = delegate() { };\n\n    public static void Refresh(this UIElement uiElement)\n    {\n        uiElement.Dispatcher.Invoke(DispatcherPriority.Render, EmptyDelegate);\n    }\n}\n\n    ",
      "\nCreate a class variable:\n\nSynchronizationContext _context;\n\n\nSet it in the constructor that creates your UI:\n\nvar _context = SynchronizationContext.Current;\n\n\nWhen you want to update the label:\n\n_context.Send(status =\u003E{\n    // UPDATE LABEL\n}, null);\n\n    ",
      "\nMost of the other answers are a little complex for me on this question (I\u0027m new to C#), so I am writing mine:\n\nI have a WPF application and have defined a worker as below:\n\nIssue:\n\nBackgroundWorker workerAllocator;\nworkerAllocator.DoWork \u002B= delegate (object sender1, DoWorkEventArgs e1) {\n    // This is my DoWork function.\n    // It is given as an anonymous function, instead of a separate DoWork function\n\n    // I need to update a message to textbox (txtLog) from this thread function\n\n    // Want to write below line, to update UI\n    txt.Text = \u0022my message\u0022\n\n    // But it fails with:\n    //  \u0027System.InvalidOperationException\u0027:\n    //  \u0022The calling thread cannot access this object because a different thread owns it\u0022\n}\n\n\nSolution:\n\nworkerAllocator.DoWork \u002B= delegate (object sender1, DoWorkEventArgs e1)\n{\n    // The below single line works\n    txtLog.Dispatcher.BeginInvoke((Action)(() =\u003E txtLog.Text = \u0022my message\u0022));\n}\n\n\nI am yet to find out what the above line means, but it works.\n\nFor WinForms:\n\nSolution:\n\ntxtLog.Invoke((MethodInvoker)delegate\n{\n    txtLog.Text = \u0022my message\u0022;\n});\n\n    ",
      "\nYou must use invoke and delegate\n\nprivate delegate void MyLabelDelegate();\nlabel1.Invoke( new MyLabelDelegate(){ label1.Text \u002B= 1; });\n\n    ",
      "\nThe easiest way I think:\n\n   void Update()\n   {\n       BeginInvoke((Action)delegate()\n       {\n           //do your update\n       });\n   }\n\n    ",
      "\nFor example, access a control other than in the current thread:\n\nSpeed_Threshold = 30;\ntextOutput.Invoke(new EventHandler(delegate\n{\n    lblThreshold.Text = Speed_Threshold.ToString();\n}));\n\n\nThere the lblThreshold is a Label and Speed_Threshold is a global variable.\n    ",
      "\nWhen you\u0027re in the UI thread you could ask it for its synchronization context task scheduler. It would give you a TaskScheduler that schedules everything on the UI thread.\n\nThen you can chain your tasks so that when the result is ready then another task (which is scheduled on the UI thread) picks it and assigns it to a label.\n\npublic partial class MyForm : Form\n{\n  private readonly TaskScheduler _uiTaskScheduler;\n  public MyForm()\n  {\n    InitializeComponent();\n    _uiTaskScheduler = TaskScheduler.FromCurrentSynchronizationContext();\n  }\n\n  private void buttonRunAsyncOperation_Click(object sender, EventArgs e)\n  {\n    RunAsyncOperation();\n  }\n\n  private void RunAsyncOperation()\n  {\n    var task = new Task\u003Cstring\u003E(LengthyComputation);\n    task.ContinueWith(antecedent =\u003E\n                         UpdateResultLabel(antecedent.Result), _uiTaskScheduler);\n    task.Start();\n  }\n\n  private string LengthyComputation()\n  {\n    Thread.Sleep(3000);\n    return \u002247\u0022;\n  }\n\n  private void UpdateResultLabel(string text)\n  {\n    labelResult.Text = text;\n  }\n}\n\n\nThis works for tasks (not threads) which are the preferred way of writing concurrent code now.\n    ",
      "\nI just read the answers and this appears to be a very hot topic. I\u0027m currently using .NET 3.5 SP1 and Windows Forms.\n\nThe well-known formula greatly described in the previous answers that makes use of the InvokeRequired property covers most of the cases, but not the entire pool.\n\nWhat if the Handle has not been created yet?\n\nThe InvokeRequired property, as described here (Control.InvokeRequired Property reference to MSDN) returns true if the call was made from a thread that is not the GUI thread, false either if the call was made from the GUI thread, or if the Handle was not created yet.\n\nYou can come across an exception if you want to have a modal form shown and updated by another thread. Because you want that form shown modally, you could do the following:\n\nprivate MyForm _gui;\n\npublic void StartToDoThings()\n{\n    _gui = new MyForm();\n    Thread thread = new Thread(SomeDelegate);\n    thread.Start();\n    _gui.ShowDialog();\n}\n\n\nAnd the delegate can update a Label on the GUI:\n\nprivate void SomeDelegate()\n{\n    // Operations that can take a variable amount of time, even no time\n    //... then you update the GUI\n    if(_gui.InvokeRequired)\n        _gui.Invoke((Action)delegate { _gui.Label1.Text = \u0022Done!\u0022; });\n    else\n        _gui.Label1.Text = \u0022Done!\u0022;\n}\n\n\nThis can cause an InvalidOperationException if the operations before the label\u0027s update \u0022take less time\u0022 (read it and interpret it as a simplification) than the time it takes for the GUI thread to create the Form\u0027s Handle. This happens within the ShowDialog() method.\n\nYou should also check for the Handle like this:\n\nprivate void SomeDelegate()\n{\n    // Operations that can take a variable amount of time, even no time\n    //... then you update the GUI\n    if(_gui.IsHandleCreated)  //  \u003C---- ADDED\n        if(_gui.InvokeRequired)\n            _gui.Invoke((Action)delegate { _gui.Label1.Text = \u0022Done!\u0022; });\n        else\n            _gui.Label1.Text = \u0022Done!\u0022;\n}\n\n\nYou can handle the operation to perform if the Handle has not been created yet: You can just ignore the GUI update (like shown in the code above) or you can wait (more risky).\nThis should answer the question.\n\nOptional stuff:\nPersonally I came up coding the following:\n\npublic class ThreadSafeGuiCommand\n{\n  private const int SLEEPING_STEP = 100;\n  private readonly int _totalTimeout;\n  private int _timeout;\n\n  public ThreadSafeGuiCommand(int totalTimeout)\n  {\n    _totalTimeout = totalTimeout;\n  }\n\n  public void Execute(Form form, Action guiCommand)\n  {\n    _timeout = _totalTimeout;\n    while (!form.IsHandleCreated)\n    {\n      if (_timeout \u003C= 0) return;\n\n      Thread.Sleep(SLEEPING_STEP);\n      _timeout -= SLEEPING_STEP;\n    }\n\n    if (form.InvokeRequired)\n      form.Invoke(guiCommand);\n    else\n      guiCommand();\n  }\n}\n\n\nI feed my forms that get updated by another thread with an instance of this ThreadSafeGuiCommand, and I define methods that update the GUI (in my Form) like this:\n\npublic void SetLabeTextTo(string value)\n{\n  _threadSafeGuiCommand.Execute(this, delegate { Label1.Text = value; });\n}\n\n\nIn this way I\u0027m quite sure that I will have my GUI updated whatever thread will make the call, optionally waiting for a well-defined amount of time (the timeout).\n    ",
      "\n                \n                There are cases when this.GetType() evaluates to the same as propertyInfo.ReflectedType (e.g. LinkLabel on WinForms). I don\u0027t have a large C# experience, but I think that the condition for exception should be:  if (propertyInfo == null ||                 (!@this.GetType().IsSubclassOf(propertyInfo.ReflectedType) \u0026\u0026 @this.GetType() != propertyInfo.ReflectedType) ||                 @this.GetType().GetProperty(propertyInfo.Name, propertyInfo.PropertyType) == null)\n                \n\u2013\u00A0Corvin\n                Jan 31 \u002711 at 13:03\n                        \n                            \n                        \n            ",
      "\n                \n                @lan can this SetControlPropertyThreadSafe(myLabel, \u0022Text\u0022, status) be called from another module or class or form\n                \n\u2013\u00A0Smith\n                Jun 23 \u002711 at 10:58\n            ",
      "\n                \n                The solution provided is unnecessarily complex. See Marc Gravell\u0027s solution, or Zaid Masud\u0027s solution, if you value simplicity.\n                \n\u2013\u00A0Frank Hileman\n                Mar 28 \u002714 at 17:23\n            ",
      "\n                \n                This solution does waste ton\u0027s of resources if you update multiple properties as every Invoke costs a lot of resources. I don\u0027t think this is how the feature of Thread Safety was intended anyway. Do Encapsulte your UI update actions and Invoke it ONCE (and not per property)\n                \n\u2013\u00A0Console\n                Aug 6 \u002714 at 12:09\n            ",
      "\n                \n                Why on earth would you use this code over the BackgroundWorker component?\n                \n\u2013\u00A0Andy\n                Oct 8 \u002716 at 17:11\n            ",
      "\n                \n                But, then your processing function must be a member method of your GUI form ?\n                \n\u2013\u00A0Frederik Gheysels\n                Mar 19 \u002709 at 10:25\n            ",
      "\n                \n                Seeing as the OP hasn\u0027t mentioned any class/instance except the form, that isn\u0027t a bad default...\n                \n\u2013\u00A0Marc Gravell\u2666\n                Mar 19 \u002709 at 10:30\n            ",
      "\n                \n                Don\u0027t forget the \u0022this\u0022 keyword is referencing a \u0022Control\u0022 class.\n                \n\u2013\u00A0AZ.\n                Mar 16 \u002710 at 19:49\n            ",
      "\n                \n                @codecompleting it is safe either way, and we already know we\u0027re on a worker, so why check something we know?\n                \n\u2013\u00A0Marc Gravell\u2666\n                Dec 1 \u002711 at 16:50\n            ",
      "\n                \n                @Dragouf not really - one of the point of using this method is that you already know which parts run on the worker, and which run on the UI thread. No need to check.\n                \n\u2013\u00A0Marc Gravell\u2666\n                Feb 16 \u002712 at 18:16\n            ",
      "\n                \n                If SecondThreadConcern.LongWork() throws an exception, can it be caught by the UI thread?  This is an excellent post, btw.\n                \n\u2013\u00A0kdbanman\n                Aug 13 \u002715 at 17:53\n            ",
      "\n                \n                I have added an additional section to the answer to fulfil your requirements. Regards.\n                \n\u2013\u00A0Ryszard D\u017Cegan\n                Aug 14 \u002715 at 8:14\n            ",
      "\n                \n                The ExceptionDispatchInfo class is responsible for that miracle of rethrowing background exception on UI thread in async-await pattern.\n                \n\u2013\u00A0Ryszard D\u017Cegan\n                Aug 18 \u002715 at 6:45\n            ",
      "\n                \n                Is it just me in thinking that this way of doing this is way more verbose than just invoking Invoke/Begin?!\n                \n\u2013\u00A0MeTitus\n                Sep 28 \u002715 at 12:36\n            ",
      "\n                \n                Task.Delay(500).Wait()? What\u0027s the point of creating a Task to just block the current thread? You should never block a thread pool thread!\n                \n\u2013\u00A0Yarik\n                Dec 15 \u002716 at 19:22\n            ",
      "\n                \n                what is \u0027control\u0027 in this example? My UI control? Trying to implement this in WPF on a label control, and Invoke is not a member of my label.\n                \n\u2013\u00A0Dbloom\n                Feb 9 \u002717 at 22:17\n            ",
      "\n                \n                What\u0027s about extension method like @styxriver  stackoverflow.com/a/3588137/206730 ?\n                \n\u2013\u00A0Kiquenet\n                Apr 3 \u002717 at 14:17\n            ",
      "\n                \n                declare \u0027Action y;\u0027 inside the class or method changing the text property and  update the text with this piece of code \u0027yourcontrol.Invoke(y=() =\u003E yourcontrol.Text = \u0022new text\u0022);\u0027\n                \n\u2013\u00A0Antonio Leite\n                Aug 25 \u002717 at 15:20\n                        \n                            \n                        \n            ",
      "\n                \n                @Dbloom it\u0027s not a member because it\u0027s only for WinForms. For WPF you use Dispatcher.Invoke\n                \n\u2013\u00A0sLw\n                Mar 22 \u002718 at 13:09\n            ",
      "\n                \n                I was following this solution but sometimes my UI was not getting updated. I found that i need this.refresh() to force invalidate and repaint the GUI .. if it is helpful ..\n                \n\u2013\u00A0Rakibul Haq\n                Apr 5 \u002718 at 10:47\n                        \n                            \n                        \n            ",
      "\n                \n                What\u0027s the point of the @this usage?  Wouldn\u0027t \u0022control\u0022 be equivalent?  Are there any benefits to @this?\n                \n\u2013\u00A0argyle\n                Sep 9 \u002713 at 0:03\n            ",
      "\n                \n                @jeromeyers - The @this is simply the variable name, in this case the reference to the current control calling the extension. You could rename it to source, or whatever floats your boat. I use @this, because it\u0027s referring to \u0027this Control\u0027 that is calling the extension and is consistent (in my head, at least) with using the \u0027this\u0027 keyword in normal (non-extension) code.\n                \n\u2013\u00A0StyxRiver\n                Sep 12 \u002713 at 4:26\n            ",
      "\n                \n                This is great, easy and for me the best solution. You could include all the work you have to do in the ui thread. Example:            this.UIThread(() =\u003E             {                 txtMessage.Text = message;                 listBox1.Items.Add(message);             });\n                \n\u2013\u00A0Auto\n                Feb 23 \u002716 at 19:39\n                        \n                            \n                        \n            ",
      "\n                \n                I really like this solution. Minor nit:  I would name this method OnUIThread rather than UIThread.\n                \n\u2013\u00A0ToolmakerSteve\n                May 16 \u002716 at 18:08\n                        \n                            \n                        \n            ",
      "\n                \n                That\u0027s why I named this extension RunOnUiThread. But thats just personal taste.\n                \n\u2013\u00A0Grisgram\n                Jan 30 \u002719 at 8:11\n            ",
      "\n                \n                well done for the simplicity! not only simple, but also works well! I really did not understand why microsoft could not make it simpler as it is meant to be! for calling 1 line on the main thread, we should write couple of functions!\n                \n\u2013\u00A0MBH\n                Dec 19 \u002715 at 9:17\n            ",
      "\n                \n                @MBH Agree.  BTW, did you notice stackoverflow.com/a/3588137/199364 answer above, which defines an extension method?  Do that once in a custom utilities class, then don\u0027t have to care any more that Microsoft did not do it for us :)\n                \n\u2013\u00A0ToolmakerSteve\n                May 16 \u002716 at 18:14\n            ",
      "\n                \n                @ToolmakerSteve Thats exactly what it meant to be! you are right we can find a way, but i mean from DRY (don\u0027t repeat yourself) point of view, the problem that has common solution, can be solved by them with minimum effort by Microsoft which will save a lot of time for programmers :)\n                \n\u2013\u00A0MBH\n                May 16 \u002716 at 18:56\n            ",
      "\n                \n                At the end of processing, it is also possible to update the user interface via backgroundWorker1_RunWorkerCompleted.\n                \n\u2013\u00A0DavidRR\n                Apr 1 \u002716 at 19:18\n                        \n                            \n                        \n            ",
      "\n                \n                Indeed, but I don\u0027t like to \u0027clutter\u0027 my GUI code with this matter.  My GUI shouldn\u0027t care whether it needs to Invoke or not. In other words: i don\u0027t think that it is the responsability of the GUI to perform the context-swithc.\n                \n\u2013\u00A0Frederik Gheysels\n                Mar 19 \u002709 at 9:51\n            ",
      "\n                \n                Breaking the delegate apart etc seems overkill - why not just: SynchronizationContext.Current.Send(delegate { MyEvent(...); }, null);\n                \n\u2013\u00A0Marc Gravell\u2666\n                Mar 19 \u002709 at 11:07\n            ",
      "\n                \n                Do you always have access to the SynchronizationContext ?  Even if your class is in a class lib ?\n                \n\u2013\u00A0Frederik Gheysels\n                Mar 19 \u002709 at 11:42\n            ",
      "\n                \n                The invoke line gives me a compiler error. The best overloaded method match for \u0027System.Windows.Forms.Control.Invoke(System.Delegate, object[])\u0027 has some invalid arguments\n                \n\u2013\u00A0CruelIO\n                Mar 19 \u002709 at 11:12\n            ",
      "\n                \n                Good idea. The only thing you didn\u0027t mention is how you properly dispose the timer once the WorkerThread is finished. Note this can cause trouble when the application ends (i.e. the user closes the application). Do you have an idea how to solve this?\n                \n\u2013\u00A0Matt\n                Nov 11 \u002713 at 10:24\n                        \n                            \n                        \n            ",
      "\n                \n                @Matt Instead of using an anonymous handler for Elapsed event, you use a member method so you can remove the timer when the form is disposed...\n                \n\u2013\u00A0Phil1970\n                Apr 20 \u002718 at 0:54\n            ",
      "\n                \n                @Phil1970 - Good point. You meant like System.Timers.ElapsedEventHandler handler = (s, a) =\u003E { MyProgressLabel.Text = m_Text; }; and assigning it via m_Timer.Elapsed \u002B= handler;, later in the dispose context doing a m_Timer.Elapsed -= handler; am I right? And for the disposing/closing following the advice as discussed here.\n                \n\u2013\u00A0Matt\n                Apr 20 \u002718 at 8:37\n                        \n                            \n                        \n            ",
      "\n                \n                what do you think the Post method uses under the hood? :)\n                \n\u2013\u00A0increddibelly\n                May 5 \u002716 at 9:09\n            ",
      "\n                \n                If you have e.ProgressPercentage, aren\u0027t you already in the UI thread from the method you are calling this?\n                \n\u2013\u00A0LarsTech\n                Jan 11 \u002716 at 19:55\n            ",
      "\n                \n                The ProgressChanged event runs on the UI thread.  That\u0027s one of the conveniences of using the BackgroundWorker.  The Completed event runs on the gui, too.  The only thing running in the non-UI thread is the DoWork method.\n                \n\u2013\u00A0LarsTech\n                Jan 11 \u002716 at 20:18\n            ",
      "\n                \n                Is it for Windows Forms ?\n                \n\u2013\u00A0Kiquenet\n                Apr 3 \u002717 at 14:13\n            ",
      "\n                \n                The question was about Winforms, not WPF.\n                \n\u2013\u00A0Marc L.\n                Jul 10 \u002718 at 17:52\n            ",
      "\n                \n                Thanks. Added WinForms solution above.\n                \n\u2013\u00A0Manohar Reddy Poreddy\n                Jul 11 \u002718 at 4:12\n            ",
      "\n                \n                ...which is just a copy of however many other answers on this same question, but okay. Why not be part of the solution and just delete your answer?\n                \n\u2013\u00A0Marc L.\n                Jul 11 \u002718 at 13:52\n            ",
      "\n                \n                hmm, correct you are, if only, you read my answer with attention, the beginning part (the reason why i wrote the answer), and hopefully with a little more attention you see there is someone who had exact same problem \u0026 upvoted today for my simple answer, and with even more attn if you could foresee the real story on why all this happened, that google sends me here even when i search for wpf. Sure since you missed these more or less obvious 3 reasons, i can understand why you won\u0027t remove your downvote. Instead of cleaning the okay one, create something new which is much more difficult.\n                \n\u2013\u00A0Manohar Reddy Poreddy\n                Jul 11 \u002718 at 15:51\n                        \n                            \n                        \n            ",
      "\n                \n                Calling Task.Start is typically not a good practice blogs.msdn.com/b/pfxteam/archive/2012/01/14/10256832.aspx\n                \n\u2013\u00A0Ohad Schneider\n                May 24 \u002714 at 8:07\n            ",
      "\n                \n                Came here to find this, as I also check for IsHandleCreated. One other property to check is IsDisposed. If your form is disposed, you cannot call Invoke() on it.  If the user closed the form before your background thread could complete you don\u0027t want it trying to call back to the UI when the form is disposed.\n                \n\u2013\u00A0Jon\n                Feb 11 \u002716 at 18:04\n            ",
      "\n                \n                I would say that it is a bad idea to start with... Normally, you would show the child form immediately and have a progress bar or some other feedback while doing background processing. Or you would do all processing first and then pass the result to the new form at creation. Doing both at the same time would generally have marginal benefits but much less maintainable code.\n                \n\u2013\u00A0Phil1970\n                Dec 18 \u002716 at 15:00\n            ",
      "\n                \n                The described scenario takes into account a modal form used as a progress view of a background-thread job. Because it must be modal, it must be shown by calling the Form.ShowDialog() method. By doing this, you prevent your code that follows the call to be executed until the form is closed. So, unless you can start the background thread differently from the given example (and, of course, you can) this form must be modally shown after the background thread has started. In this case, you need to check for the Handle to be created. If you don\u0027t need a modal form, then it\u0027s another story.\n                \n\u2013\u00A0Sume\n                Mar 30 \u002717 at 13:42\n            "
    ]
  },
  {
    "Id": "d8d777cc-2908-4700-a135-b28e3ca7fe95",
    "QuestionId": 30094047,
    "Description": "Post an HTML Table to ADO.NET DataTable",
    "Votes": 70,
    "Views": 10584,
    "Tags": [
      "c#",
      "asp.net-mvc",
      "razor",
      "asp.net-mvc-5"
    ],
    "Discussions": [
      "\nIn order to bind to a model on post back, the name attributes of the form controls must match the model properties. Your use of a foreach loop does not generate the correct name attributes. If you inspect the html you will see multiple instances of\n\n\u003Cinput type=\u0022text\u0022 name=\u0022item.LeaveType\u0022 .../\u003E\n\n\nbut in order to bind to your model the controls would need to be \n\n\u003Cinput type=\u0022text\u0022 name=\u0022LeaveDetailsList[0].LeaveType\u0022 .../\u003E\n\u003Cinput type=\u0022text\u0022 name=\u0022LeaveDetailsList[1].LeaveType\u0022 .../\u003E\n\n\netc. The easiest way to think about this is to consider how you would access the value of a LeaveType property in C# code\n\nvar model = new LeaveBalanceViewModel();\n// add some LeaveBalanceDetails instances to the LeaveDetailsList property, then access a value\nvar leaveType = model.LeaveDetailsList[0].LeaveType;\n\n\nSince your POST method will have a parameter name (say model), just drop the prefix (model) and that\u0027s how the name attribute of the control must be. In order to do that you must use either a for loop (the collection must implement IList\u003CT\u003E)\n\nfor(int i = 0; i \u003C Model.LeaveDetailsList.Count; i\u002B\u002B)\n{\n    @Html.TextBoxFor(m =\u003E m.LeaveDetailsList[i].LeaveType)\n    ....\n}\n\n\nor use a custom EditorTemplate (the collection need only implement IEnumerable\u003CT\u003E)\n\nIn /Views/Shared/EditorTemplates/LeaveBalanceDetails.cshtml\n\n@model yourAssembly.LeaveBalanceDetails\n\u003Ctr\u003E\n    \u003Ctd\u003E@Html.TextBoxFor(m =\u003E m.LeaveType)\u003C/td\u003E\n    ....\n\u003C/tr\u003E\n\n\nand then in the main view (not in a loop)\n\n\u003Ctable\u003E\n    .... // add headings (preferably in a thead element\n    \u003Ctbody\u003E\n        @Html.EditorFor(m =\u003E m.LeaveDetailsList)\n    \u003C/tbody\u003E\n\u003C/table\u003E\n\n\nand finally, in the controller\n\npublic ActionResult Edit(LeaveBalanceViewModel model)\n{\n    // iterate over model.LeaveDetailsList and save the items\n}\n\n    ",
      "\nWith respect to your requirement, try this\n\njQuery(document).on(\u0022change\u0022, \u0022.DDLChoices\u0022, function (e) {\n    var comma_ChoiceIds = \u0027\u0027;\n    var comma_ChoicesText = \u0027\u0027;\n    $(\u0027input[class=\u0022DDLChoices\u0022]\u0027).each(function (e) {\n        if (this.checked) {\n            comma_ChoiceIds = comma_ChoiceIds \u002B $(this).val() \u002B \u0027,\u0027;\n            comma_ChoicesText = comma_ChoicesText \u002B $(this).parent(\u0027label\u0027).parent() \u002B \u0027,\u0027;\n        }\n    });\n    $(\u0027#ChoiceIds\u0027).val(comma_ChoiceIds);\n    $(\u0027#ChoiceText\u0027).val(comma_ChoicesText);\n});\n\n\n@using (Html.BeginForm(\u0022Actionname\u0022, \u0022Controllername\u0022, FormMethod.Post, new { id = \u0022frmChoices\u0022 }))\n{\n\n    @Html.HiddenFor(m =\u003E m.ChoiceText, new { @id = \u0022ChoiceText\u0022 })\n    @Html.HiddenFor(m =\u003E m.ChoiceIds, new { @id = \u0022ChoiceIds\u0022 })\n    \u003Cdiv class=\u0022form-group\u0022\u003E\n        \u003Cdiv\u003E\n            \u003Ctable\u003E\n                \u003Ctr\u003E\n                    \u003Cth\u003EName\u003C/th\u003E\n                    \u003Cth\u003ESelected\u003C/th\u003E\n                \u003C/tr\u003E\n                @foreach (var item in @Model.Choices)\n                {\n                    \u003Ctr\u003E\n                        \u003Ctd\u003E \u003Clabel\u003E@item.ChoicesText\u003C/label\u003E    \u003C/td\u003E\n                        \u003Ctd\u003E \u003Cinput class=\u0022DDLChoices\u0022 value=\u0022@item.ChoiceIds\u0022 type=\u0022checkbox\u0022 /\u003E\u003C/td\u003E\n                    \u003C/tr\u003E\n                }\n            \u003C/table\u003E\n        \u003C/div\u003E\n     \u003Cinput type=\u0022button\u0022 value=\u0022Submit\u0022 onclick=\u0022return ChoicesPoster.passChoices()\u0022\n    \u003C/div\u003E\n}\n\n    ",
      "\n                \n                This explains what must be in the prefix name to make a list detectable by the razor engine. Thanks! ;)\n                \n\u2013\u00A0Ian\n                Aug 19 \u002716 at 10:37\n            ",
      "\n                \n                This was very helpful! I\u0027m still having an issue, though - I changed my model type to a List instead of IEnumerable and iterate through it in the View using a For loop instead of For Each. When I submit, though, it gets to the Controller, and my model there is Nothing! Why would it be Nothing?\n                \n\u2013\u00A0Andy\n                Mar 16 \u002717 at 23:05\n            ",
      "\n                \n                @Andarta, Without seeing your code I have no idea what mistakes you made. You need to ask a question, showing the relevant details and we will be able to answer it :)\n                \n\u2013\u00A0user3559349\n                Mar 16 \u002717 at 23:32\n                        \n                            \n                        \n            "
    ]
  },
  {
    "Id": "b84a0124-b27e-46b6-9b1a-922b38b25c0d",
    "QuestionId": 232535,
    "Description": "How do I use reflection to call a generic method?",
    "Votes": 1108,
    "Views": 269679,
    "Tags": [
      "c#",
      ".net",
      "generics",
      "reflection"
    ],
    "Discussions": [
      "\nYou need to use reflection to get the method to start with, then \u0022construct\u0022 it by supplying type arguments with MakeGenericMethod:\n\nMethodInfo method = typeof(Sample).GetMethod(nameof(Sample.GenericMethod));\nMethodInfo generic = method.MakeGenericMethod(myType);\ngeneric.Invoke(this, null);\n\n\nFor a static method, pass null as the first argument to Invoke. That\u0027s nothing to do with generic methods - it\u0027s just normal reflection.\n\nAs noted, a lot of this is simpler as of C# 4 using dynamic - if you can use type inference, of course. It doesn\u0027t help in cases where type inference isn\u0027t available, such as the exact example in the question.\n    ",
      "\nJust an addition to the original answer. While this will work:\n\nMethodInfo method = typeof(Sample).GetMethod(\u0022GenericMethod\u0022);\nMethodInfo generic = method.MakeGenericMethod(myType);\ngeneric.Invoke(this, null);\n\n\nIt is also a little dangerous in that you lose compile-time check for GenericMethod. If you later do a refactoring and rename GenericMethod, this code won\u0027t notice and will fail at run time. Also, if there is any post-processing of the assembly (for example obfuscating or removing unused methods/classes) this code might break too.\n\nSo, if you know the method you are linking to at compile time, and this isn\u0027t called millions of times so overhead doesn\u0027t matter, I would change this code to be:\n\nAction\u003C\u003E GenMethod = GenericMethod\u003Cint\u003E;  //change int by any base type \n                                          //accepted by GenericMethod\nMethodInfo method = this.GetType().GetMethod(GenMethod.Method.Name);\nMethodInfo generic = method.MakeGenericMethod(myType);\ngeneric.Invoke(this, null);\n\n\nWhile not very pretty, you have a compile time reference to GenericMethod here, and if you refactor, delete or do anything with GenericMethod, this code will keep working, or at least break at compile time (if for example you remove GenericMethod). \n\nOther way to do the same would be to create a new wrapper class, and create it through Activator. I don\u0027t know if there is a better way.\n    ",
      "\nCalling a generic method with a type parameter known only at runtime can be greatly simplified by using a dynamic type instead of the reflection API.\nTo use this technique the type must be known from the actual object (not just an instance of the Type class). Otherwise, you have to create an object of that type or use the standard reflection API solution. You can create an object by using the Activator.CreateInstance method.\nIf you want to call a generic method, that in \u0022normal\u0022 usage would have had its type inferred, then it simply comes to casting the object of unknown type to dynamic. Here\u0027s an example:\nclass Alpha { }\nclass Beta { }\nclass Service\n{\n    public void Process\u003CT\u003E(T item)\n    {\n        Console.WriteLine(\u0022item.GetType(): \u0022 \u002B item.GetType()\n                          \u002B \u0022\\ttypeof(T): \u0022 \u002B typeof(T));\n    }\n}\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        var a = new Alpha();\n        var b = new Beta();\n\n        var service = new Service();\n        service.Process(a); // Same as \u0022service.Process\u003CAlpha\u003E(a)\u0022\n        service.Process(b); // Same as \u0022service.Process\u003CBeta\u003E(b)\u0022\n\n        var objects = new object[] { a, b };\n        foreach (var o in objects)\n        {\n            service.Process(o); // Same as \u0022service.Process\u003Cobject\u003E(o)\u0022\n        }\n        foreach (var o in objects)\n        {\n            dynamic dynObj = o;\n            service.Process(dynObj); // Or write \u0022service.Process((dynamic)o)\u0022\n        }\n    }\n}\n\nAnd here\u0027s the output of this program:\nitem.GetType(): Alpha    typeof(T): Alpha\nitem.GetType(): Beta     typeof(T): Beta\nitem.GetType(): Alpha    typeof(T): System.Object\nitem.GetType(): Beta     typeof(T): System.Object\nitem.GetType(): Alpha    typeof(T): Alpha\nitem.GetType(): Beta     typeof(T): Beta\n\nProcess is a generic instance method that writes the real type of the passed argument (by using the GetType() method) and the type of the generic parameter (by using typeof operator).\nBy casting the object argument to dynamic type we deferred providing the type parameter until runtime. When the Process method is called with the dynamic argument then the compiler doesn\u0027t care about the type of this argument. The compiler generates code that at runtime checks the real types of passed arguments (by using reflection) and choose the best method to call. Here there is only this one generic method, so it\u0027s invoked with a proper type parameter.\nIn this example, the output is the same as if you wrote:\nforeach (var o in objects)\n{\n    MethodInfo method = typeof(Service).GetMethod(\u0022Process\u0022);\n    MethodInfo generic = method.MakeGenericMethod(o.GetType());\n    generic.Invoke(service, new object[] { o });\n}\n\nThe version with a dynamic type is definitely shorter and easier to write. You also shouldn\u0027t worry about performance of calling this function multiple times. The next call with arguments of the same type should be faster thanks to the caching mechanism in DLR. Of course, you can write code that cache invoked delegates, but by using the dynamic type you get this behaviour for free.\nIf the generic method you want to call don\u0027t have an argument of a parametrized type (so its type parameter can\u0027t be inferred) then you can wrap the invocation of the generic method in a helper method like in the following example:\nclass Program\n{\n    static void Main(string[] args)\n    {\n        object obj = new Alpha();\n\n        Helper((dynamic)obj);\n    }\n\n    public static void Helper\u003CT\u003E(T obj)\n    {\n        GenericMethod\u003CT\u003E();\n    }\n\n    public static void GenericMethod\u003CT\u003E()\n    {\n        Console.WriteLine(\u0022GenericMethod\u003C\u0022 \u002B typeof(T) \u002B \u0022\u003E\u0022);\n    }\n}\n\nIncreased type safety\nWhat is really great about using dynamic object as a replacement for using reflection API is that you only lose compile time checking of this particular type that you don\u0027t know until runtime. Other arguments and the name of the method are staticly analysed by the compiler as usual. If you remove or add more arguments, change their types or rename method name then you\u0027ll get a compile-time error. This won\u0027t happen if you provide the method name as a string in Type.GetMethod and arguments as the objects array in MethodInfo.Invoke.\nBelow is a simple example that illustrates how some errors can be caught at compile time (commented code) and other at runtime. It also shows how the DLR tries to resolve which method to call.\ninterface IItem { }\nclass FooItem : IItem { }\nclass BarItem : IItem { }\nclass Alpha { }\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        var objects = new object[] { new FooItem(), new BarItem(), new Alpha() };\n        for (int i = 0; i \u003C objects.Length; i\u002B\u002B)\n        {\n            ProcessItem((dynamic)objects[i], \u0022test\u0022 \u002B i, i);\n\n            //ProcesItm((dynamic)objects[i], \u0022test\u0022 \u002B i, i);\n            //compiler error: The name \u0027ProcesItm\u0027 does not\n            //exist in the current context\n\n            //ProcessItem((dynamic)objects[i], \u0022test\u0022 \u002B i);\n            //error: No overload for method \u0027ProcessItem\u0027 takes 2 arguments\n        }\n    }\n\n    static string ProcessItem\u003CT\u003E(T item, string text, int number)\n        where T : IItem\n    {\n        Console.WriteLine(\u0022Generic ProcessItem\u003C{0}\u003E, text {1}, number:{2}\u0022,\n                          typeof(T), text, number);\n        return \u0022OK\u0022;\n    }\n    static void ProcessItem(BarItem item, string text, int number)\n    {\n        Console.WriteLine(\u0022ProcessItem with Bar, \u0022 \u002B text \u002B \u0022, \u0022 \u002B number);\n    }\n}\n\nHere we again execute some method by casting the argument to the dynamic type. Only verification of first argument\u0027s type is postponed to runtime. You will get a compiler error if the name of the method you\u0027re calling doesn\u0027t exist or if other arguments are invalid (wrong number of arguments or wrong types).\nWhen you pass the dynamic argument to a method then this call is lately bound. Method overload resolution happens at runtime and tries to choose the best overload. So if you invoke the ProcessItem method with an object of BarItem type then you\u0027ll actually call the non-generic method, because it is a better match for this type. However, you\u0027ll get a runtime error when you pass an argument of the Alpha type because there\u0027s no method that can handle this object (a generic method has the constraint where T : IItem and Alpha class doesn\u0027t implement this interface). But that\u0027s the whole point. The compiler doesn\u0027t have information that this call is valid. You as a programmer know this, and you should make sure that this code runs without errors.\nReturn type gotcha\nWhen you\u0027re calling a non-void method with a parameter of dynamic type, its return type will probably be dynamic too. So if you\u0027d change previous example to this code:\nvar result = ProcessItem((dynamic)testObjects[i], \u0022test\u0022 \u002B i, i);\n\nthen the type of the result object would be dynamic. This is because the compiler don\u0027t always know which method will be called. If you know the return type of the function call then you should implicitly convert it to the required type so the rest of the code is statically typed:\nstring result = ProcessItem((dynamic)testObjects[i], \u0022test\u0022 \u002B i, i);\n\nYou\u0027ll get a runtime error if the type doesn\u0027t match.\nActually, if you try to get the result value in the previous example then you\u0027ll get a runtime error in the second loop iteration. This is because you tried to save the return value of a void function.\n    ",
      "\nWith C# 4.0, reflection isn\u0027t necessary as the DLR can call it using runtime types. Since using the DLR library is kind of a pain dynamically (instead of the C# compiler generating code for you), the open source framework Dynamitey (.net standard 1.5) gives you easy cached run-time access to the same calls the compiler would generate for you.\n\nvar name = InvokeMemberName.Create;\nDynamic.InvokeMemberAction(this, name(\u0022GenericMethod\u0022, new[]{myType}));\n\n\nvar staticContext = InvokeContext.CreateStatic;\nDynamic.InvokeMemberAction(staticContext(typeof(Sample)), name(\u0022StaticMethod\u0022, new[]{myType}));\n\n    ",
      "\nAdding on to Adrian Gallero\u0027s answer:\n\nCalling a generic method from type info involves three steps.\n\nTLDR: Calling a known generic method with a type object can be accomplished by:\n\n((Action)GenericMethod\u003Cobject\u003E)\n    .Method\n    .GetGenericMethodDefinition()\n    .MakeGenericMethod(typeof(string))\n    .Invoke(this, null);\n\n\nwhere GenericMethod\u003Cobject\u003E is the method name to call and any type that satisfies the generic constraints.\n\n(Action) matches the signature of the method to be called i.e. (Func\u003Cstring,string,int\u003E or Action\u003Cbool\u003E)\n\nStep 1 is getting the MethodInfo for the generic method definition\n\nMethod 1: Use GetMethod() or GetMethods() with appropriate types or binding flags.\n\nMethodInfo method = typeof(Sample).GetMethod(\u0022GenericMethod\u0022);\n\n\nMethod 2: Create a delegate, get the MethodInfo object and then call GetGenericMethodDefinition\n\nFrom inside the class that contains the methods:\n\nMethodInfo method = ((Action)GenericMethod\u003Cobject\u003E)\n    .Method\n    .GetGenericMethodDefinition();\n\nMethodInfo method = ((Action)StaticMethod\u003Cobject\u003E)\n    .Method\n    .GetGenericMethodDefinition();\n\n\nFrom outside of the class that contains the methods:\n\nMethodInfo method = ((Action)(new Sample())\n    .GenericMethod\u003Cobject\u003E)\n    .Method\n    .GetGenericMethodDefinition();\n\nMethodInfo method = ((Action)Sample.StaticMethod\u003Cobject\u003E)\n    .Method\n    .GetGenericMethodDefinition();\n\n\nIn C#, the name of a method, i.e. \u0022ToString\u0022 or \u0022GenericMethod\u0022 actually refers to a group of methods that may contain one or more methods.  Until you provide the types of the method parameters, it is not known which\nmethod you are referring to.\n\n((Action)GenericMethod\u003Cobject\u003E) refers to the delegate for a specific method.  ((Func\u003Cstring, int\u003E)GenericMethod\u003Cobject\u003E)\nrefers to a different overload of GenericMethod\n\nMethod 3: Create a lambda expression containing a method call expression, get the MethodInfo object and then GetGenericMethodDefinition\n\nMethodInfo method = ((MethodCallExpression)((Expression\u003CAction\u003CSample\u003E\u003E)(\n    (Sample v) =\u003E v.GenericMethod\u003Cobject\u003E()\n    )).Body).Method.GetGenericMethodDefinition();\n\n\nThis breaks down to\n\nCreate a lambda expression where the body is a call to your desired method.\n\nExpression\u003CAction\u003CSample\u003E\u003E expr = (Sample v) =\u003E v.GenericMethod\u003Cobject\u003E();\n\n\nExtract the body and cast to MethodCallExpression\n\nMethodCallExpression methodCallExpr = (MethodCallExpression)expr.Body;\n\n\nGet the generic method definition from the method\n\nMethodInfo methodA = methodCallExpr.Method.GetGenericMethodDefinition();\n\n\nStep 2 is calling MakeGenericMethod to create a generic method with the appropriate type(s).\n\nMethodInfo generic = method.MakeGenericMethod(myType);\n\n\nStep 3 is invoking the method with the appropriate arguments.\n\ngeneric.Invoke(this, null);\n\n    ",
      "\nNobody provided the \u0022classic Reflection\u0022 solution, so here is a complete code example:\n\nusing System;\nusing System.Collections;\nusing System.Collections.Generic;\n\nnamespace DictionaryRuntime\n{\n    public class DynamicDictionaryFactory\n    {\n        /// \u003Csummary\u003E\n        /// Factory to create dynamically a generic Dictionary.\n        /// \u003C/summary\u003E\n        public IDictionary CreateDynamicGenericInstance(Type keyType, Type valueType)\n        {\n            //Creating the Dictionary.\n            Type typeDict = typeof(Dictionary\u003C,\u003E);\n\n            //Creating KeyValue Type for Dictionary.\n            Type[] typeArgs = { keyType, valueType };\n\n            //Passing the Type and create Dictionary Type.\n            Type genericType = typeDict.MakeGenericType(typeArgs);\n\n            //Creating Instance for Dictionary\u003CK,T\u003E.\n            IDictionary d = Activator.CreateInstance(genericType) as IDictionary;\n\n            return d;\n\n        }\n    }\n}\n\n\nThe above DynamicDictionaryFactory class has a method \n\nCreateDynamicGenericInstance(Type keyType, Type valueType)\n\nand it creates and returns an IDictionary instance, the types of whose keys and values are exactly the specified on the call keyType and valueType.\n\nHere is a complete example how to call this method to instantiate and use a Dictionary\u003CString, int\u003E :\n\nusing System;\nusing System.Collections.Generic;\n\nnamespace DynamicDictionary\n{\n    class Test\n    {\n        static void Main(string[] args)\n        {\n            var factory = new DictionaryRuntime.DynamicDictionaryFactory();\n            var dict = factory.CreateDynamicGenericInstance(typeof(String), typeof(int));\n\n            var typedDict = dict as Dictionary\u003CString, int\u003E;\n\n            if (typedDict != null)\n            {\n                Console.WriteLine(\u0022Dictionary\u003CString, int\u003E\u0022);\n\n                typedDict.Add(\u0022One\u0022, 1);\n                typedDict.Add(\u0022Two\u0022, 2);\n                typedDict.Add(\u0022Three\u0022, 3);\n\n                foreach(var kvp in typedDict)\n                {\n                    Console.WriteLine(\u0022\\\u0022\u0022 \u002B kvp.Key \u002B \u0022\\\u0022: \u0022 \u002B kvp.Value);\n                }\n            }\n            else\n                Console.WriteLine(\u0022null\u0022);\n        }\n    }\n}\n\n\nWhen the above console application is executed, we get the correct, expected result:\n\nDictionary\u003CString, int\u003E\n\u0022One\u0022: 1\n\u0022Two\u0022: 2\n\u0022Three\u0022: 3\n\n    ",
      "\nThis is my 2 cents based on Grax\u0027s answer, but with two parameters required for a generic method.\n\nAssume your method is defined as follows in an Helpers class:\n\npublic class Helpers\n{\n    public static U ConvertCsvDataToCollection\u003CU, T\u003E(string csvData)\n    where U : ObservableCollection\u003CT\u003E\n    {\n      //transform code here\n    }\n}\n\n\nIn my case, U type is always an observable collection storing object of type T.\n\nAs I have my types predefined, I first create the \u0022dummy\u0022 objects that represent the observable collection (U) and the object stored in it (T) and that will be used below to get their type when calling the Make\n\nobject myCollection = Activator.CreateInstance(collectionType);\nobject myoObject = Activator.CreateInstance(objectType);\n\n\nThen call the GetMethod to find your Generic function:\n\nMethodInfo method = typeof(Helpers).\nGetMethod(\u0022ConvertCsvDataToCollection\u0022);\n\n\nSo far, the above call is pretty much identical as to what was explained above but with a small difference when you need have to pass multiple parameters to it.\n\nYou need to pass an Type[] array to the MakeGenericMethod function that contains the \u0022dummy\u0022 objects\u0027 types that were create above:\n\nMethodInfo generic = method.MakeGenericMethod(\nnew Type[] {\n   myCollection.GetType(),\n   myObject.GetType()\n});\n\n\nOnce that\u0027s done, you need to call the Invoke method as mentioned above.\n\ngeneric.Invoke(null, new object[] { csvData });\n\n\nAnd you\u0027re done. Works a charm!\n\nUPDATE:\n\nAs @Bevan highlighted, I do not need to create an array when calling the MakeGenericMethod function as it takes in params and I do not need to create an object in order to get the types as I can just pass the types directly to this function. In my case, since I have the types predefined in another class, I simply changed my code to:\n\nobject myCollection = null;\n\nMethodInfo method = typeof(Helpers).\nGetMethod(\u0022ConvertCsvDataToCollection\u0022);\n\nMethodInfo generic = method.MakeGenericMethod(\n   myClassInfo.CollectionType,\n   myClassInfo.ObjectType\n);\n\nmyCollection = generic.Invoke(null, new object[] { csvData });\n\n\nmyClassInfo contains 2 properties of type Type which I set at run time based on an enum value passed to the constructor and will provide me with the relevant types which I then use in the MakeGenericMethod.\n\nThanks again for highlighting this @Bevan.\n    ",
      "\nInspired by Enigmativity\u0027s answer - let\u0027s assume you have two (or more) classes, like\n\npublic class Bar { }\npublic class Square { }\n\n\nand you want to call the method Foo\u003CT\u003E with Bar and Square, which is declared as\n\npublic class myClass\n{\n    public void Foo\u003CT\u003E(T item)\n    {\n        Console.WriteLine(typeof(T).Name);\n    }\n}\n\n\nThen you can implement an Extension method like:\n\npublic static class Extension\n{\n    public static void InvokeFoo\u003CT\u003E(this T t)\n    {\n        var fooMethod = typeof(myClass).GetMethod(\u0022Foo\u0022);\n        var tType = typeof(T);\n        var fooTMethod = fooMethod.MakeGenericMethod(new[] { tType });\n        fooTMethod.Invoke(new myClass(), new object[] { t });\n    }\n}\n\n\nWith this, you can simply invoke Foo like:\n\nvar objSquare = new Square();\nobjSquare.InvokeFoo();\n\nvar objBar = new Bar();\nobjBar.InvokeFoo();\n\n\nwhich works for every class. In this case, it will output:\n\n\n  Square \n  Bar\n\n    ",
      "\n                \n                \u002B1; note that GetMethod() only considers public instance methods by default, so you may need BindingFlags.Static and/or BindingFlags.NonPublic.\n                \n\u2013\u00A0user565869\n                Dec 16 \u002711 at 22:32\n            ",
      "\n                \n                The correct combination of flags is BindingFlags.NonPublic | BindingFlags.Instance (and optionally BindingFlags.Static).\n                \n\u2013\u00A0Lars Kemmann\n                Feb 15 \u002713 at 19:10\n            ",
      "\n                \n                A question getting marked dupe of this wonders how to do this with static methods - and technically so does the question here. generic.Invoke()\u0027s first parameter should be null when calling static methods. The first parameter is only necessary when calling instance methods.\n                \n\u2013\u00A0Chris Moschini\n                Mar 22 \u002713 at 21:30\n            ",
      "\n                \n                @ChrisMoschini: Added that to the answer.\n                \n\u2013\u00A0Jon Skeet\n                Mar 22 \u002713 at 21:32\n            ",
      "\n                \n                @gzou: I\u0027ve added something to the answer - but note that for calling the generic methods in the question, dynamic doesn\u0027t help because type inference isn\u0027t available. (There are no arguments the compiler can use to determine the type argument.)\n                \n\u2013\u00A0Jon Skeet\n                Apr 24 \u002715 at 9:44\n            ",
      "\n                \n                In cases where reflection is used to call a method, it\u0027s usual that the method name is itself discovered by another method. Knowing the method name in advance isn\u0027t common.\n                \n\u2013\u00A0Bevan\n                Feb 27 \u002711 at 21:59\n            ",
      "\n                \n                Well, I agree for common uses of reflection. But the original question was how to call \u0022GenericMethod\u003CmyType\u003E()\u0022 If that syntax was allowed, we wouldn\u0027t need GetMethod() at all. But for the question \u0022how do I write \u0022GenericMethod\u003CmyType\u003E\u0022? I think the answer should include a way to avoid losing the compile-time link with GenericMethod. Now if this question is common or not I don\u0027t know, but I do know I had this exact problem yesterday, and that\u0027s why I landed in this question.\n                \n\u2013\u00A0Adrian Gallero\n                Feb 28 \u002711 at 21:24\n                        \n                            \n                        \n            ",
      "\n                \n                You could do GenMethod.Method.GetGenericMethodDefinition() instead of this.GetType().GetMethod(GenMethod.Method.Name). It\u2019s slightly cleaner and probably safer.\n                \n\u2013\u00A0Daniel Cassidy\n                May 10 \u002711 at 10:10\n            ",
      "\n                \n                What does mean \u0022myType\u0022 in your sample?\n                \n\u2013\u00A0DmitryBoyko\n                Dec 7 \u002711 at 13:45\n            ",
      "\n                \n                Now you can use nameof(GenericMethod)\n                \n\u2013\u00A0dmigo\n                Mar 17 \u002716 at 10:02\n            ",
      "\n                \n                Mariusz, confused by \u0022However, you\u0027ll get runtime error when you pass argument of Alpha type because there\u0027s no method that can handle this object. \u0022 If I call var a = new Alpha() ProcessItem(a,\u0022test\u0022 \u002B i, i)  Why wouldn\u0027t the generic ProcessItem method handle this effectively, outputting \u0022General Process Item\u0022?\n                \n\u2013\u00A0Alex Edelstein\n                Mar 21 \u002715 at 18:51\n                        \n                            \n                        \n            ",
      "\n                \n                @AlexEdelstein I edited my answer to clarify a bit. It\u0027s because generic ProcessItem method has generic constraint and accepts only object that implements IItem interface. When you will call ProcessItem(new Aplha(), \u0022test\u0022 , 1); or ProcessItem((object)(new Aplha()), \u0022test\u0022 , 1); you\u0027ll get a compiler error but when casting to dynamic you postpone that check to runtime.\n                \n\u2013\u00A0Mariusz Pawelski\n                Mar 23 \u002715 at 11:38\n            ",
      "\n                \n                Great answer and explanation, works perfectly for me. Much better than the accepted answer, shorter to write, more performant, and safer.\n                \n\u2013\u00A0ygoe\n                Aug 28 \u002715 at 9:08\n            ",
      "\n                \n                The arguments to MakeGenericMethod() have the params keyword so you don\u0027t need to create an array; nor do you need to create instances to get the types - methodInfo.MakeGenericMethod(typeof(TCollection), typeof(TObject)) would be sufficient.\n                \n\u2013\u00A0Bevan\n                Oct 26 \u002715 at 21:58\n            "
    ]
  },
  {
    "Id": "a7a0556f-e401-4ec1-a8ff-ceb12186fe58",
    "QuestionId": 142003,
    "Description": "Cross-thread operation not valid: Control accessed from a thread other than the thread it was created on",
    "Votes": 601,
    "Views": 419668,
    "Tags": [
      "c#",
      "multithreading",
      "winforms",
      "invoke"
    ],
    "Discussions": [
      "\nAs per Prerak K\u0027s update comment (since deleted):\n\nI guess I have not presented the question properly.\nSituation is this: I want to load data into a global variable based on the value of a control. I don\u0027t want to change the value of a control from the child thread. I\u0027m not going to do it ever from a child thread.\nSo only accessing the value so that corresponding data can be fetched from the database.\n\nThe solution you want then should look like:\nUserContrl1_LOadDataMethod()\n{\n    string name = \u0022\u0022;\n    if(textbox1.InvokeRequired)\n    {\n        textbox1.Invoke(new MethodInvoker(delegate { name = textbox1.text; }));\n    }\n    if(name == \u0022MyName\u0022)\n    {\n        // do whatever\n    }\n}\n\nDo your serious processing in the separate thread before you attempt to switch back to the control\u0027s thread. For example:\nUserContrl1_LOadDataMethod()\n{\n    if(textbox1.text==\u0022MyName\u0022) //\u003C\u003C======Now it wont give exception**\n    {\n        //Load data correspondin to \u0022MyName\u0022\n        //Populate a globale variable List\u003Cstring\u003E which will be\n        //bound to grid at some later stage\n        if(InvokeRequired)\n        {\n            // after we\u0027ve done all the processing, \n            this.Invoke(new MethodInvoker(delegate {\n                // load the control with the appropriate data\n            }));\n            return;\n        }\n    }\n}\n\n    ",
      "\nThreading Model in UI\n\nPlease read the Threading Model in UI applications (old VB link is here) in order to understand basic concepts. The link navigates to page that describes the WPF threading model. However, Windows Forms utilizes the same idea.\n\nThe UI Thread\n\n\nThere is only one thread (UI thread), that is allowed to access System.Windows.Forms.Control and its subclasses members.\nAttempt to access member of System.Windows.Forms.Control from different thread than UI thread will cause cross-thread exception.\nSince there is only one thread, all UI operations are queued as work items into that thread:\n\n\n\n\n\nIf there is no work for UI thread, then there are idle gaps that can be used by a not-UI related computing.\nIn order to use mentioned gaps use System.Windows.Forms.Control.Invoke or System.Windows.Forms.Control.BeginInvoke methods:\n\n\n\n\nBeginInvoke and Invoke methods\n\n\nThe computing overhead of method being invoked should be small as well as computing overhead of event handler methods because the UI thread is used there - the same that is responsible for handling user input. Regardless if this is System.Windows.Forms.Control.Invoke or System.Windows.Forms.Control.BeginInvoke.\nTo perform computing expensive operation always use separate thread. Since .NET 2.0 BackgroundWorker is dedicated to performing computing expensive operations in Windows Forms. However in new solutions you should use the async-await pattern as described here.\nUse System.Windows.Forms.Control.Invoke or System.Windows.Forms.Control.BeginInvoke methods only to update a user interface. If you use them for heavy computations, your application will block:\n\n\n\n\nInvoke\n\n\nSystem.Windows.Forms.Control.Invoke causes separate thread to wait till invoked method is completed:\n\n\n\n\nBeginInvoke\n\n\nSystem.Windows.Forms.Control.BeginInvoke doesn\u0027t cause the separate thread to wait till invoked method is completed:\n\n\n\n\nCode solution\n\nRead answers on question How to update the GUI from another thread in C#?.\nFor C# 5.0 and .NET 4.5 the recommended solution is here.\n    ",
      "\nYou only want to use Invoke or BeginInvoke for the bare minimum piece of work required to change the UI. Your \u0022heavy\u0022 method should execute on another thread (e.g. via BackgroundWorker) but then using Control.Invoke/Control.BeginInvoke just to update the UI. That way your UI thread will be free to handle UI events etc.\n\nSee my threading article for a WinForms example - although the article was written before BackgroundWorker arrived on the scene, and I\u0027m afraid I haven\u0027t updated it in that respect. BackgroundWorker merely simplifies the callback a bit.\n    ",
      "\nI know its too late now. However even today if you are having trouble accessing cross thread controls? This is the shortest answer till date :P\n\nInvoke(new Action(() =\u003E\n                {\n                    label1.Text = \u0022WooHoo!!!\u0022;\n                }));\n\n\nThis is how i access any form control from a thread.\n    ",
      "\nI have had this problem with the FileSystemWatcher and found that the following code solved the problem:\n\nfsw.SynchronizingObject = this\n\nThe control then uses the current form object to deal with the events, and will therefore be on the same thread.\n    ",
      "\nI find the check-and-invoke code which needs to be littered within all methods related to forms to be way too verbose and unneeded. Here\u0027s a simple extension method which lets you do away with it completely:\n\npublic static class Extensions\n{\n    public static void Invoke\u003CTControlType\u003E(this TControlType control, Action\u003CTControlType\u003E del) \n        where TControlType : Control\n        {\n            if (control.InvokeRequired)\n                control.Invoke(new Action(() =\u003E del(control)));\n            else\n                del(control);\n    }\n}\n\n\nAnd then you can simply do this:\n\ntextbox1.Invoke(t =\u003E t.Text = \u0022A\u0022);\n\n\nNo more messing around - simple.\n    ",
      "\nControls in .NET are not generally thread safe.  That means you shouldn\u0027t access a control from a thread other than the one where it lives.  To get around this, you need to invoke the control, which is what your 2nd sample is attempting.  \n\nHowever, in your case all you\u0027ve done is pass the long-running method back to the main thread.  Of course, that\u0027s not really what you want to do.  You need to rethink this a little so that all you\u0027re doing on the main thread is setting a quick property here and there.\n    ",
      "\nThe cleanest (and proper) solution for UI cross-threading issues is to use SynchronizationContext, see Synchronizing calls to the UI in a multi-threaded application article, it explains it very nicely.\n    ",
      "\nA new look using Async/Await and callbacks.  You only need one line of code if you keep the extension method in your project.  \n\n/// \u003Csummary\u003E\n/// A new way to use Tasks for Asynchronous calls\n/// \u003C/summary\u003E\npublic class Example\n{\n    /// \u003Csummary\u003E\n    /// No more delegates, background workers etc. just one line of code as shown below\n    /// Note it is dependent on the XTask class shown next.\n    /// \u003C/summary\u003E\n    public async void ExampleMethod()\n    {\n        //Still on GUI/Original Thread here\n        //Do your updates before the next line of code\n        await XTask.RunAsync(() =\u003E\n        {\n            //Running an asynchronous task here\n            //Cannot update GUI Thread here, but can do lots of work\n        });\n        //Can update GUI/Original thread on this line\n    }\n}\n\n/// \u003Csummary\u003E\n/// A class containing extension methods for the Task class \n/// Put this file in folder named Extensions\n/// Use prefix of X for the class it Extends\n/// \u003C/summary\u003E\npublic static class XTask\n{\n    /// \u003Csummary\u003E\n    /// RunAsync is an extension method that encapsulates the Task.Run using a callback\n    /// \u003C/summary\u003E\n    /// \u003Cparam name=\u0022Code\u0022\u003EThe caller is called back on the new Task (on a different thread)\u003C/param\u003E\n    /// \u003Creturns\u003E\u003C/returns\u003E\n    public async static Task RunAsync(Action Code)\n    {\n        await Task.Run(() =\u003E\n        {\n            Code();\n        });\n        return;\n    }\n}\n\n\nYou can add other things to the Extension method such as wrapping it in a Try/Catch statement, allowing caller to tell it what type to return after completion, an exception callback to caller:\n\nAdding Try Catch, Auto Exception Logging and CallBack\n\n    /// \u003Csummary\u003E\n    /// Run Async\n    /// \u003C/summary\u003E\n    /// \u003Ctypeparam name=\u0022T\u0022\u003EThe type to return\u003C/typeparam\u003E\n    /// \u003Cparam name=\u0022Code\u0022\u003EThe callback to the code\u003C/param\u003E\n    /// \u003Cparam name=\u0022Error\u0022\u003EThe handled and logged exception if one occurs\u003C/param\u003E\n    /// \u003Creturns\u003EThe type expected as a competed task\u003C/returns\u003E\n\n    public async static Task\u003CT\u003E RunAsync\u003CT\u003E(Func\u003Cstring,T\u003E Code, Action\u003CException\u003E Error)\n    {\n       var done =  await Task\u003CT\u003E.Run(() =\u003E\n        {\n            T result = default(T);\n            try\n            {\n               result = Code(\u0022Code Here\u0022);\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine(\u0022Unhandled Exception: \u0022 \u002B ex.Message);\n                Console.WriteLine(ex.StackTrace);\n                Error(ex);\n            }\n            return result;\n\n        });\n        return done;\n    }\n    public async void HowToUse()\n    {\n       //We now inject the type we want the async routine to return!\n       var result =  await RunAsync\u003Cbool\u003E((code) =\u003E {\n           //write code here, all exceptions are logged via the wrapped try catch.\n           //return what is needed\n           return someBoolValue;\n       }, \n       error =\u003E {\n\n          //exceptions are already handled but are sent back here for further processing\n       });\n        if (result)\n        {\n            //we can now process the result because the code above awaited for the completion before\n            //moving to this statement\n        }\n    }\n\n    ",
      "\nThis is not the recommended way to solve this error but you can suppress it quickly, it will do the job . I prefer this for prototypes or demos . add \n\nCheckForIllegalCrossThreadCalls = false\n\n\nin Form1() constructor . \n    ",
      "\nFollow the simplest (in my opinion) way to modify objects from another thread:\n\nusing System.Threading.Tasks;\nusing System.Threading;\n\nnamespace TESTE\n{\n    public partial class Form1 : Form\n    {\n        public Form1()\n        {\n            InitializeComponent();\n        }\n\n        private void button1_Click(object sender, EventArgs e)\n        {\n            Action\u003Cstring\u003E DelegateTeste_ModifyText = THREAD_MOD;\n            Invoke(DelegateTeste_ModifyText, \u0022MODIFY BY THREAD\u0022);\n        }\n\n        private void THREAD_MOD(string teste)\n        {\n            textBox1.Text = teste;\n        }\n    }\n}\n\n    ",
      "\nYou need to look at the Backgroundworker example:\nhttp://msdn.microsoft.com/en-us/library/system.componentmodel.backgroundworker.aspx\nEspecially how it interacts with the UI layer.  Based on your posting, this seems to answer your issues.\n    ",
      "\nI found a need for this while programming an iOS-Phone monotouch app controller in a visual studio winforms prototype project outside of xamarin stuidio. Preferring to program in VS over xamarin studio as much as possible, I wanted the controller to be completely decoupled from the phone framework. This way implementing this for other frameworks like Android and Windows Phone would be much easier for future uses.\n\nI wanted a solution where the GUI could respond to events without the burden of dealing with the cross threading switching code behind every button click. Basically let the class controller handle that to keep the client code simple. You could possibly have many events on the GUI where as if you could handle it in one place in the class would be cleaner. I am not a multi theading expert, let me know if this is flawed.\n\npublic partial class Form1 : Form\n{\n    private ExampleController.MyController controller;\n\n    public Form1()\n    {          \n        InitializeComponent();\n        controller = new ExampleController.MyController((ISynchronizeInvoke) this);\n        controller.Finished \u002B= controller_Finished;\n    }\n\n    void controller_Finished(string returnValue)\n    {\n        label1.Text = returnValue; \n    }\n\n    private void button1_Click(object sender, EventArgs e)\n    {\n        controller.SubmitTask(\u0022Do It\u0022);\n    }\n}\n\n\nThe GUI form is unaware the controller is running asynchronous tasks.\n\npublic delegate void FinishedTasksHandler(string returnValue);\n\npublic class MyController\n{\n    private ISynchronizeInvoke _syn; \n    public MyController(ISynchronizeInvoke syn) {  _syn = syn; } \n    public event FinishedTasksHandler Finished; \n\n    public void SubmitTask(string someValue)\n    {\n        System.Threading.ThreadPool.QueueUserWorkItem(state =\u003E submitTask(someValue));\n    }\n\n    private void submitTask(string someValue)\n    {\n        someValue = someValue \u002B \u0022 \u0022 \u002B DateTime.Now.ToString();\n        System.Threading.Thread.Sleep(5000);\n//Finished(someValue); This causes cross threading error if called like this.\n\n        if (Finished != null)\n        {\n            if (_syn.InvokeRequired)\n            {\n                _syn.Invoke(Finished, new object[] { someValue });\n            }\n            else\n            {\n                Finished(someValue);\n            }\n        }\n    }\n}\n\n    ",
      "\nHere is an alternative way if the object you are working with doesn\u0027t have \n\n(InvokeRequired)\n\n\nThis is useful if you are working with the main form in a class other than the main form with an object that is in the main form, but doesn\u0027t have InvokeRequired\n\ndelegate void updateMainFormObject(FormObjectType objectWithoutInvoke, string text);\n\nprivate void updateFormObjectType(FormObjectType objectWithoutInvoke, string text)\n{\n    MainForm.Invoke(new updateMainFormObject(UpdateObject), objectWithoutInvoke, text);\n}\n\npublic void UpdateObject(ToolStripStatusLabel objectWithoutInvoke, string text)\n{\n    objectWithoutInvoke.Text = text;\n}\n\n\nIt works the same as above, but it is a different approach if you don\u0027t have an object with invokerequired, but do have access to the MainForm\n    ",
      "\nAlong the same lines as previous answers,\nbut a very short addition that Allows to use all Control properties without having cross thread invokation exception.\n\nHelper Method\n\n/// \u003Csummary\u003E\n/// Helper method to determin if invoke required, if so will rerun method on correct thread.\n/// if not do nothing.\n/// \u003C/summary\u003E\n/// \u003Cparam name=\u0022c\u0022\u003EControl that might require invoking\u003C/param\u003E\n/// \u003Cparam name=\u0022a\u0022\u003Eaction to preform on control thread if so.\u003C/param\u003E\n/// \u003Creturns\u003Etrue if invoke required\u003C/returns\u003E\npublic bool ControlInvokeRequired(Control c, Action a)\n{\n    if (c.InvokeRequired) c.Invoke(new MethodInvoker(delegate\n    {\n        a();\n    }));\n    else return false;\n\n    return true;\n}\n\n\nSample Usage\n\n// usage on textbox\npublic void UpdateTextBox1(String text)\n{\n    //Check if invoke requied if so return - as i will be recalled in correct thread\n    if (ControlInvokeRequired(textBox1, () =\u003E UpdateTextBox1(text))) return;\n    textBox1.Text = ellapsed;\n}\n\n//Or any control\npublic void UpdateControl(Color c, String s)\n{\n    //Check if invoke requied if so return - as i will be recalled in correct thread\n    if (ControlInvokeRequired(myControl, () =\u003E UpdateControl(c, s))) return;\n    myControl.Text = s;\n    myControl.BackColor = c;\n}\n\n    ",
      "\nthis.Invoke(new MethodInvoker(delegate\n            {\n                //your code here;\n            }));\n\n    ",
      "\nFor example to get the text from a Control of the UI thread:\n\nPrivate Delegate Function GetControlTextInvoker(ByVal ctl As Control) As String\n\nPrivate Function GetControlText(ByVal ctl As Control) As String\n    Dim text As String\n\n    If ctl.InvokeRequired Then\n        text = CStr(ctl.Invoke(\n            New GetControlTextInvoker(AddressOf GetControlText), ctl))\n    Else\n        text = ctl.Text\n    End If\n\n    Return text\nEnd Function\n\n    ",
      "\nSame question : how-to-update-the-gui-from-another-thread-in-c\n\nTwo Ways:\n\n\nReturn value in e.result and use it to set yout textbox value in backgroundWorker_RunWorkerCompleted event\nDeclare some variable to hold these kind of values in a separate class (which will work as data holder) . Create static instance of this class adn you can access it over any thread.\n\n\nExample:\n\npublic  class data_holder_for_controls\n{\n    //it will hold value for your label\n    public  string status = string.Empty;\n}\n\nclass Demo\n{\n    public static  data_holder_for_controls d1 = new data_holder_for_controls();\n    static void Main(string[] args)\n    {\n        ThreadStart ts = new ThreadStart(perform_logic);\n        Thread t1 = new Thread(ts);\n        t1.Start();\n        t1.Join();\n        //your_label.Text=d1.status; --- can access it from any thread \n    }\n\n    public static void perform_logic()\n    {\n        //put some code here in this function\n        for (int i = 0; i \u003C 10; i\u002B\u002B)\n        {\n            //statements here\n        }\n        //set result in status variable\n        d1.status = \u0022Task done\u0022;\n    }\n}\n\n    ",
      "\nSimply use this:\n\nthis.Invoke((MethodInvoker)delegate\n            {\n                YourControl.Property= value; // runs thread safe\n            });\n\n    ",
      "\nAction y; //declared inside class\n\nlabel1.Invoke(y=()=\u003Elabel1.Text=\u0022text\u0022);\n    ",
      "\nSimple and re-usable way to work around this problem.\n\nExtension Method\n\npublic static class FormExts\n{\n    public static void LoadOnUI(this Form frm, Action action)\n    {\n        if (frm.InvokeRequired) frm.Invoke(action);\n        else action.Invoke();\n    }\n}\n\n\nSample Usage\n\nprivate void OnAnyEvent(object sender, EventArgs args)\n{\n    this.LoadOnUI(() =\u003E\n    {\n        label1.Text = \u0022\u0022;\n        button1.Text = \u0022\u0022;\n    });\n}\n\n    ",
      "\nThere are two options for cross thread operations.\n\nControl.InvokeRequired Property \n\n\nand second one is to use \n\nSynchronizationContext Post Method\n\n\nControl.InvokeRequired is only useful when working controls inherited from Control class while SynchronizationContext can be used anywhere. Some useful information is as following links\n\nCross Thread Update UI | .Net \n\nCross Thread Update UI using SynchronizationContext | .Net\n    ",
      "\n                \n                It\u0027s been a while now since I\u0027ve done C# programming, but based on the MSDN article and my patchy knowledge, it looks like it.\n                \n\u2013\u00A0Jeff Hubbard\n                Dec 13 \u002716 at 21:17\n            ",
      "\n                \n                The difference is, BeginInvoke() is asynchronous while Invoke() runs synchronously. stackoverflow.com/questions/229554/\u2026\n                \n\u2013\u00A0frzsombor\n                Oct 13 \u002717 at 0:18\n                        \n                            \n                        \n            ",
      "\n                \n                Here is the updated link for WPF threading model.\n                \n\u2013\u00A0Adam Howell\n                Mar 4 \u002719 at 20:01\n            ",
      "\n                \n                here in this condition of mine . i m not even changing the UI. I m just accessig its current values from the child thread. any suggestion hw to implement\n                \n\u2013\u00A0Prerak K\n                Sep 26 \u002708 at 21:26\n            ",
      "\n                \n                You still need to marshal over to the UI thread even just to access properties. If your method can\u0027t continue until the value is accessed, you can use a delegate which returns the value. But yes, go via the UI thread.\n                \n\u2013\u00A0Jon Skeet\n                Sep 26 \u002708 at 21:38\n            ",
      "\n                \n                Hi Jon, i belive you are heading me to the right direction. Yes i need the value without it i cant proceed further. Please could you eloborate on that \u0027 Using a delegate which return a value\u0027. Thanks\n                \n\u2013\u00A0Prerak K\n                Sep 26 \u002708 at 21:46\n            ",
      "\n                \n                Use a delegate such as Func\u003Cstring\u003E:  string text = textbox1.Invoke((Func\u003Cstring\u003E) () =\u003E textbox1.Text);  (That\u0027s assuming you\u0027re using C# 3.0 - you could use an anonymous method otherwise.)\n                \n\u2013\u00A0Jon Skeet\n                Sep 26 \u002708 at 21:49\n            ",
      "\n                \n                This gives me Invoke or BeginInvoke cannot be called on a control until the window handle has been created. I solved it here\n                \n\u2013\u00A0rupweb\n                Jan 24 \u002718 at 16:22\n            ",
      "\n                \n                This saved my bacon. In VB.NET I used .SynchronizingObject = Me\n                \n\u2013\u00A0codingcoding\n                Jun 23 \u002716 at 2:40\n            ",
      "\n                \n                what is \u0027t\u0027 here\n                \n\u2013\u00A0Rawat\n                Jan 6 \u002718 at 17:27\n            ",
      "\n                \n                @Rawat t in this case will be textbox1 - it\u0027s passed as an argument\n                \n\u2013\u00A0Rob\u2666\n                Jan 7 \u002718 at 2:52\n            ",
      "\n                \n                Can anyone argue against this approach? It seems insanely easy by comparison to the popular answers.\n                \n\u2013\u00A0Programmer Paul\n                Oct 3 at 20:52\n            "
    ]
  },
  {
    "Id": "aedbab8f-f5ae-47f2-b504-28898d5f2b92",
    "QuestionId": 271440,
    "Description": "Captured variable in a loop in C#",
    "Votes": 226,
    "Views": 52480,
    "Tags": [
      "c#",
      "closures",
      "captured-variable"
    ],
    "Discussions": [
      "\nYes - take a copy of the variable inside the loop:\n\nwhile (variable \u003C 5)\n{\n    int copy = variable;\n    actions.Add(() =\u003E copy * 2);\n    \u002B\u002B variable;\n}\n\n\nYou can think of it as if the C# compiler creates a \u0022new\u0022 local variable every time it hits the variable declaration. In fact it\u0027ll create appropriate new closure objects, and it gets complicated (in terms of implementation) if you refer to variables in multiple scopes, but it works :)\n\nNote that a more common occurrence of this problem is using for or foreach:\n\nfor (int i=0; i \u003C 10; i\u002B\u002B) // Just one variable\nforeach (string x in foo) // And again, despite how it reads out loud\n\n\nSee section 7.14.4.2 of the C# 3.0 spec for more details of this, and my article on closures has more examples too.\n\nNote that as of the C# 5 compiler and beyond (even when specifying an earlier version of C#), the behavior of foreach changed so you no longer need to make local copy. See this answer for more details.\n    ",
      "\nI believe what you are experiencing is something known as Closure http://en.wikipedia.org/wiki/Closure_(computer_science). Your lamba has a reference to a variable which is scoped outside the function itself. Your lamba is not interpreted until you invoke it and once it is it will get the value the variable has at execution time.\n    ",
      "\nBehind the scenes, the compiler is generating a class that represents the closure for your method call. It uses that single instance of the closure class for each iteration of the loop. The code looks something like this, which makes it easier to see why the bug happens:\n\nvoid Main()\n{\n    List\u003CFunc\u003Cint\u003E\u003E actions = new List\u003CFunc\u003Cint\u003E\u003E();\n\n    int variable = 0;\n\n    var closure = new CompilerGeneratedClosure();\n\n    Func\u003Cint\u003E anonymousMethodAction = null;\n\n    while (closure.variable \u003C 5)\n    {\n        if(anonymousMethodAction == null)\n            anonymousMethodAction = new Func\u003Cint\u003E(closure.YourAnonymousMethod);\n\n        //we\u0027re re-adding the same function \n        actions.Add(anonymousMethodAction);\n\n        \u002B\u002Bclosure.variable;\n    }\n\n    foreach (var act in actions)\n    {\n        Console.WriteLine(act.Invoke());\n    }\n}\n\nclass CompilerGeneratedClosure\n{\n    public int variable;\n\n    public int YourAnonymousMethod()\n    {\n        return this.variable * 2;\n    }\n}\n\n\nThis isn\u0027t actually the compiled code from your sample, but I\u0027ve examined my own code and this looks very much like what the compiler would actually generate.\n    ",
      "\nThe way around this is to store the value you need in a proxy variable, and have that variable get captured.\n\nI.E.\n\nwhile( variable \u003C 5 )\n{\n    int copy = variable;\n    actions.Add( () =\u003E copy * 2 );\n    \u002B\u002Bvariable;\n}\n\n    ",
      "\nThis has nothing to do with loops. \n\nThis behavior is triggered because you use a lambda expression () =\u003E variable * 2 where the outer scoped variable not actually defined in the lambda\u0027s inner scope. \n\nLambda expressions (in C#3\u002B, as well as anonymous methods in C#2) still create actual methods. Passing variables to these methods involve some dilemmas (pass by value? pass by reference? C# goes with by reference - but this opens another problem where the reference can outlive the actual variable). What C# does to resolve all these dilemmas is to create a new helper class (\u0022closure\u0022) with fields corresponding to the local variables used in the lambda expressions, and methods corresponding to the actual lambda methods. Any changes to variable in your code is actually translated to change in that ClosureClass.variable\n\nSo your while loop keeps updating the ClosureClass.variable until it reaches 10, then you for loops executes the actions, which all operate on the same ClosureClass.variable.\n\nTo get your expected result, you need to create a separation between the loop variable, and the variable that is being closured. You can do this by introducing another variable, i.e.:\n\nList\u003CFunc\u003Cint\u003E\u003E actions = new List\u003CFunc\u003Cint\u003E\u003E();\nint variable = 0;\nwhile (variable \u003C 5)\n{\n    var t = variable; // now t will be closured (i.e. replaced by a field in the new class)\n    actions.Add(() =\u003E t * 2);\n    \u002B\u002Bvariable; // changing variable won\u0027t affect the closured variable t\n}\nforeach (var act in actions)\n{\n    Console.WriteLine(act.Invoke());\n}\n\n\nYou could also move the closure to another method to create this separation:\n\nList\u003CFunc\u003Cint\u003E\u003E actions = new List\u003CFunc\u003Cint\u003E\u003E();\n\nint variable = 0;\nwhile (variable \u003C 5)\n{\n    actions.Add(Mult(variable));\n    \u002B\u002Bvariable;\n}\n\nforeach (var act in actions)\n{\n    Console.WriteLine(act.Invoke());\n}\n\n\nYou can implement Mult as a lambda expression (implicit closure) \n\nstatic Func\u003Cint\u003E Mult(int i)\n{\n    return () =\u003E i * 2;\n}\n\n\nor with an actual helper class:\n\npublic class Helper\n{\n    public int _i;\n    public Helper(int i)\n    {\n        _i = i;\n    }\n    public int Method()\n    {\n        return _i * 2;\n    }\n}\n\nstatic Func\u003Cint\u003E Mult(int i)\n{\n    Helper help = new Helper(i);\n    return help.Method;\n}\n\n\nIn any case, \u0022Closures\u0022 are NOT a concept related to loops, but rather to anonymous methods / lambda expressions use of local scoped variables - although some incautious use of loops demonstrate closures traps.\n    ",
      "\nYes you need to scope variable within the loop and pass it to the lambda that way:\n\nList\u003CFunc\u003Cint\u003E\u003E actions = new List\u003CFunc\u003Cint\u003E\u003E();\n\nint variable = 0;\nwhile (variable \u003C 5)\n{\n    int variable1 = variable;\n    actions.Add(() =\u003E variable1 * 2);\n    \u002B\u002Bvariable;\n}\n\nforeach (var act in actions)\n{\n    Console.WriteLine(act.Invoke());\n}\n\nConsole.ReadLine();\n\n    ",
      "\nThe same situation is happening in multi-threading (C#, .NET 4.0].\n\nSee the following code:\n\nPurpose is to print 1,2,3,4,5 in order.\n\nfor (int counter = 1; counter \u003C= 5; counter\u002B\u002B)\n{\n    new Thread (() =\u003E Console.Write (counter)).Start();\n}\n\n\nThe output is interesting! (It might be like 21334...)\n\nThe only solution is to use local variables.\n\nfor (int counter = 1; counter \u003C= 5; counter\u002B\u002B)\n{\n    int localVar= counter;\n    new Thread (() =\u003E Console.Write (localVar)).Start();\n}\n\n    ",
      "\nSince no one here directly quoted ECMA-334:\n\n\n  10.4.4.10 For statements \n  \n  Definite assignment checking for a for-statement of the form:\n\n\nfor (for-initializer; for-condition; for-iterator) embedded-statement\n\n\n\n  is done as if the statement were written:\n\n\n{\n    for-initializer;\n    while (for-condition) {\n        embedded-statement;\n    LLoop: for-iterator;\n    }\n}\n\n\nFurther on in the spec,\n\n\n  12.16.6.3 Instantiation of local variables\n  \n  A local variable is considered to be instantiated when execution enters the scope of the variable. \n  \n  [Example: For example, when the following method is invoked, the local variable x is instantiated and initialized three times\u2014once for each iteration of the loop.\n\n\nstatic void F() {\n  for (int i = 0; i \u003C 3; i\u002B\u002B) {\n    int x = i * 2 \u002B 1;\n    ...\n  }\n}\n\n\n\n  However, moving the declaration of x outside the loop results in a single instantiation of x:\n\n\nstatic void F() {\n  int x;\n  for (int i = 0; i \u003C 3; i\u002B\u002B) {\n    x = i * 2 \u002B 1;\n    ...\n  }\n}\n\n\n\n  end example]\n  \n  When not captured, there is no way to observe exactly how often a local variable is instantiated\u2014because the lifetimes of the instantiations are disjoint, it is possible for each instantation to simply use the same storage location. However, when an anonymous function captures a local variable, the effects of instantiation become apparent.\n  \n  [Example: The example \n\n\nusing System;\n\ndelegate void D();\n\nclass Test{\n  static D[] F() {\n    D[] result = new D[3];\n    for (int i = 0; i \u003C 3; i\u002B\u002B) {\n      int x = i * 2 \u002B 1;\n      result[i] = () =\u003E { Console.WriteLine(x); };\n    }\n  return result;\n  }\n  static void Main() {\n    foreach (D d in F()) d();\n  }\n}\n\n\n\n  produces the output:\n\n\n1\n3\n5\n\n\n\n  However, when the declaration of x is moved outside the loop:\n\n\nstatic D[] F() {\n  D[] result = new D[3];\n  int x;\n  for (int i = 0; i \u003C 3; i\u002B\u002B) {\n    x = i * 2 \u002B 1;\n    result[i] = () =\u003E { Console.WriteLine(x); };\n  }\n  return result;\n}\n\n\n\n  the output is:\n\n\n5\n5\n5\n\n\n\n  Note that the compiler is permitted (but not required) to optimize the three instantiations into a single delegate instance (\u00A711.7.2).\n  \n  If a for-loop declares an iteration variable, that variable itself is considered to be declared outside of the loop. \n  [Example: Thus, if the example is changed to capture the iteration variable itself:\n\n\nstatic D[] F() {\n  D[] result = new D[3];\n  for (int i = 0; i \u003C 3; i\u002B\u002B) {\n    result[i] = () =\u003E { Console.WriteLine(i); };\n  }\n  return result;\n}\n\n\n\n  only one instance of the iteration variable is captured, which produces the output:\n\n\n3\n3\n3\n\n\n\n  end example]\n\n\nOh yea, I guess it should be mentioned that in C\u002B\u002B this problem doesn\u0027t occur because you can choose if the variable is captured by value or by reference (see: Lambda capture).\n    ",
      "\nIt is called the closure problem,\nsimply use a copy variable, and it\u0027s done.\n\nList\u003CFunc\u003Cint\u003E\u003E actions = new List\u003CFunc\u003Cint\u003E\u003E();\n\nint variable = 0;\nwhile (variable \u003C 5)\n{\n    int i = variable;\n    actions.Add(() =\u003E i * 2);\n    \u002B\u002B variable;\n}\n\nforeach (var act in actions)\n{\n    Console.WriteLine(act.Invoke());\n}\n\n    ",
      "\n                \n                Jon\u0027s book also has a very good chapter on this (stop being humble, Jon!)\n                \n\u2013\u00A0Marc Gravell\u2666\n                Nov 7 \u002708 at 7:57\n            ",
      "\n                \n                It looks better if I let other people plug it ;) (I confess that I do tend to vote up answers recommending it though.)\n                \n\u2013\u00A0Jon Skeet\n                Nov 7 \u002708 at 8:03\n            ",
      "\n                \n                As ever, feedback to skeet@pobox.com would be appreciated :)\n                \n\u2013\u00A0Jon Skeet\n                Nov 7 \u002708 at 9:30\n            ",
      "\n                \n                For C# 5.0 behavior is different (more reasonable) see newer answer by Jon Skeet - stackoverflow.com/questions/16264289/\u2026\n                \n\u2013\u00A0Alexei Levenkov\n                Jan 22 \u002716 at 2:35\n                        \n                            \n                        \n            ",
      "\n                \n                @Florimond: That\u0027s just not how closures work in C#. They capture variables, not values. (That\u0027s true regardless of loops, and is easily demonstrated with a lambda that captures a variable, and just prints the current value whenever it\u0027s executed.)\n                \n\u2013\u00A0Jon Skeet\n                Apr 29 \u002719 at 17:27\n                        \n                            \n                        \n            ",
      "\n                \n                See the explanation in my edited answer. I\u0027m finding the relevant bit of the spec now.\n                \n\u2013\u00A0Jon Skeet\n                Nov 7 \u002708 at 7:35\n            ",
      "\n                \n                Haha jon, I actually just read your article: csharpindepth.com/Articles/Chapter5/Closures.aspx  You do good work my friend.\n                \n\u2013\u00A0tjlevine\n                Nov 7 \u002708 at 7:36\n            ",
      "\n                \n                @tjlevine: Thanks very much. I\u0027ll add a reference to that in my answer. I\u0027d forgotten about it!\n                \n\u2013\u00A0Jon Skeet\n                Nov 7 \u002708 at 7:37\n            ",
      "\n                \n                Also, Jon, I\u0027d love to read about your thoughts on the various Java 7 closure proposals. I\u0027ve seen you mention that you wanted to write one, but I haven\u0027t seen it.\n                \n\u2013\u00A0tjlevine\n                Nov 7 \u002708 at 7:42\n            ",
      "\n                \n                @tjlevine: Okay, I promise to try to write it up by the end of the year :)\n                \n\u2013\u00A0Jon Skeet\n                Nov 7 \u002708 at 7:54\n            ",
      "\n                \n                This does not seem to help me. Still non-deterministic.\n                \n\u2013\u00A0Mladen Mihajlovic\n                Jan 31 \u002714 at 11:14\n            ",
      "\n                \n                In what way your answer is different from the answer provided by someone above?\n                \n\u2013\u00A0Thangadurai\n                Jan 30 \u002719 at 7:38\n            "
    ]
  },
  {
    "Id": "5fd3d5f4-9e42-49fb-8f0b-24f690fe37bc",
    "QuestionId": 78536,
    "Description": "Deep cloning objects",
    "Votes": 2310,
    "Views": 840529,
    "Tags": [
      "c#",
      ".net",
      "clone"
    ],
    "Discussions": [
      "\nWhilst the standard practice is to implement the ICloneable interface (described here, so I won\u0027t regurgitate), here\u0027s a nice deep clone object copier I found on The Code Project a while ago and incorporated it in our stuff.\nAs mentioned elsewhere, it requires your objects to be serializable.\nusing System;\nusing System.IO;\nusing System.Runtime.Serialization;\nusing System.Runtime.Serialization.Formatters.Binary;\n\n/// \u003Csummary\u003E\n/// Reference Article http://www.codeproject.com/KB/tips/SerializedObjectCloner.aspx\n/// Provides a method for performing a deep copy of an object.\n/// Binary Serialization is used to perform the copy.\n/// \u003C/summary\u003E\npublic static class ObjectCopier\n{\n    /// \u003Csummary\u003E\n    /// Perform a deep Copy of the object.\n    /// \u003C/summary\u003E\n    /// \u003Ctypeparam name=\u0022T\u0022\u003EThe type of object being copied.\u003C/typeparam\u003E\n    /// \u003Cparam name=\u0022source\u0022\u003EThe object instance to copy.\u003C/param\u003E\n    /// \u003Creturns\u003EThe copied object.\u003C/returns\u003E\n    public static T Clone\u003CT\u003E(T source)\n    {\n        if (!typeof(T).IsSerializable)\n        {\n            throw new ArgumentException(\u0022The type must be serializable.\u0022, nameof(source));\n        }\n\n        // Don\u0027t serialize a null object, simply return the default for that object\n        if (Object.ReferenceEquals(source, null))\n        {\n            return default(T);\n        }\n\n        IFormatter formatter = new BinaryFormatter();\n        Stream stream = new MemoryStream();\n        using (stream)\n        {\n            formatter.Serialize(stream, source);\n            stream.Seek(0, SeekOrigin.Begin);\n            return (T)formatter.Deserialize(stream);\n        }\n    }\n}\n\nThe idea is that, it serializes your object and then deserializes it into a fresh object. The benefit is that you don\u0027t have to concern yourself about cloning everything when an object gets too complex.\nAnd with the use of extension methods (also from the originally referenced source):\nIn case of you prefer to use the new extension methods of C# 3.0, change the method to have the following signature:\npublic static T Clone\u003CT\u003E(this T source)\n{\n   //...\n}\n\nNow the method call simply becomes objectBeingCloned.Clone();.\nEDIT (January 10 2015) Thought I\u0027d revisit this, to mention I recently started using (Newtonsoft) Json to do this, it should be lighter, and avoids the overhead of [Serializable] tags. (NB @atconway has pointed out in the comments that private members are not cloned using the JSON method)\n/// \u003Csummary\u003E\n/// Perform a deep Copy of the object, using Json as a serialization method. NOTE: Private members are not cloned using this method.\n/// \u003C/summary\u003E\n/// \u003Ctypeparam name=\u0022T\u0022\u003EThe type of object being copied.\u003C/typeparam\u003E\n/// \u003Cparam name=\u0022source\u0022\u003EThe object instance to copy.\u003C/param\u003E\n/// \u003Creturns\u003EThe copied object.\u003C/returns\u003E\npublic static T CloneJson\u003CT\u003E(this T source)\n{            \n    // Don\u0027t serialize a null object, simply return the default for that object\n    if (Object.ReferenceEquals(source, null))\n    {\n        return default(T);\n    }\n\n    // initialize inner objects individually\n    // for example in default constructor some list property initialized with some values,\n    // but in \u0027source\u0027 these items are cleaned -\n    // without ObjectCreationHandling.Replace default constructor values will be added to result\n    var deserializeSettings = new JsonSerializerSettings {ObjectCreationHandling = ObjectCreationHandling.Replace};\n\n    return JsonConvert.DeserializeObject\u003CT\u003E(JsonConvert.SerializeObject(source), deserializeSettings);\n}\n\n    ",
      "\nI wanted a cloner for very simple objects of mostly primitives and lists.  If your object is out of the box JSON serializable then this method will do the trick.  This requires no modification or implementation of interfaces on the cloned class, just a JSON serializer like JSON.NET.\n\npublic static T Clone\u003CT\u003E(T source)\n{\n    var serialized = JsonConvert.SerializeObject(source);\n    return JsonConvert.DeserializeObject\u003CT\u003E(serialized);\n}\n\n\nAlso, you can use this extension method\n\npublic static class SystemExtension\n{\n    public static T Clone\u003CT\u003E(this T source)\n    {\n        var serialized = JsonConvert.SerializeObject(source);\n        return JsonConvert.DeserializeObject\u003CT\u003E(serialized);\n    }\n}\n\n    ",
      "\nThe reason not to use ICloneable is not because it doesn\u0027t have a generic interface.  The reason not to use it is because it\u0027s vague.  It doesn\u0027t make clear whether you\u0027re getting a shallow or a deep copy; that\u0027s up to the implementer.\n\nYes, MemberwiseClone makes a shallow copy, but the opposite of MemberwiseClone isn\u0027t Clone; it would be, perhaps, DeepClone, which doesn\u0027t exist.  When you use an object through its ICloneable interface, you can\u0027t know which kind of cloning the underlying object performs.  (And XML comments won\u0027t make it clear, because you\u0027ll get the interface comments rather than the ones on the object\u0027s Clone method.)\n\nWhat I usually do is simply make a Copy method that does exactly what I want.\n    ",
      "\nAfter much much reading about many of the options linked here, and possible solutions for this issue, I believe all the options are summarized pretty well at Ian P\u0027s link (all other options are variations of those) and the best solution is provided by Pedro77\u0027s link on the question comments.\n\nSo I\u0027ll just copy relevant parts of those 2 references here. That way we can have:\n\nThe best thing to do for cloning objects in C sharp!\n\nFirst and foremost, those are all our options:\n\n\nManually with ICloneable, which is Shallow and not Type-Safe\nMemberwiseClone, which uses ICloneable\nReflection by using Activator.CreateInstance and recursive MemberwiseClone\nSerialization, as pointed by johnc\u0027s preferred answer\nIntermediate Language, which I got no idea how works\nExtension Methods, such as this custom clone framework by Havard Straden\nExpression Trees\n\n\nThe article Fast Deep Copy by Expression Trees   has  also performance comparison of cloning by Serialization, Reflection and Expression Trees.\n\nWhy I choose ICloneable (i.e. manually)\n\nMr Venkat Subramaniam (redundant link here) explains in much detail why.\n\nAll his article circles around an example that tries to be applicable for most cases, using 3 objects: Person, Brain and City. We want to clone a person, which will have its own brain but the same city. You can either picture all problems any of the other methods above can bring or read the article.\n\nThis is my slightly modified version of his conclusion:\n\n\n  Copying an object by specifying New followed by the class name often leads to code that is not extensible. Using clone, the application of prototype pattern, is a better way to achieve this. However, using clone as it is provided in C# (and Java) can be quite problematic as well. It is better to provide a protected (non-public) copy constructor and invoke that from the clone method. This gives us the ability to delegate the task of creating an object to an instance of a class itself, thus providing extensibility and also, safely creating the objects using the protected copy constructor.\n\n\nHopefully this implementation can make things clear:\n\npublic class Person : ICloneable\n{\n    private final Brain brain; // brain is final since I do not want \n                // any transplant on it once created!\n    private int age;\n    public Person(Brain aBrain, int theAge)\n    {\n        brain = aBrain; \n        age = theAge;\n    }\n    protected Person(Person another)\n    {\n        Brain refBrain = null;\n        try\n        {\n            refBrain = (Brain) another.brain.clone();\n            // You can set the brain in the constructor\n        }\n        catch(CloneNotSupportedException e) {}\n        brain = refBrain;\n        age = another.age;\n    }\n    public String toString()\n    {\n        return \u0022This is person with \u0022 \u002B brain;\n        // Not meant to sound rude as it reads!\n    }\n    public Object clone()\n    {\n        return new Person(this);\n    }\n    \u2026\n}\n\n\nNow consider having a class derive from Person.\n\npublic class SkilledPerson extends Person\n{\n    private String theSkills;\n    public SkilledPerson(Brain aBrain, int theAge, String skills)\n    {\n        super(aBrain, theAge);\n        theSkills = skills;\n    }\n    protected SkilledPerson(SkilledPerson another)\n    {\n        super(another);\n        theSkills = another.theSkills;\n    }\n\n    public Object clone()\n    {\n        return new SkilledPerson(this);\n    }\n    public String toString()\n    {\n        return \u0022SkilledPerson: \u0022 \u002B super.toString();\n    }\n}\n\n\nYou may try running the following code:\n\npublic class User\n{\n    public static void play(Person p)\n    {\n        Person another = (Person) p.clone();\n        System.out.println(p);\n        System.out.println(another);\n    }\n    public static void main(String[] args)\n    {\n        Person sam = new Person(new Brain(), 1);\n        play(sam);\n        SkilledPerson bob = new SkilledPerson(new SmarterBrain(), 1, \u0022Writer\u0022);\n        play(bob);\n    }\n}\n\n\nThe output produced will be:\n\nThis is person with Brain@1fcc69\nThis is person with Brain@253498\nSkilledPerson: This is person with SmarterBrain@1fef6f\nSkilledPerson: This is person with SmarterBrain@209f4e\n\n\nObserve that, if we keep a count of the number of objects, the clone as implemented here will keep a correct count of the number of objects.\n    ",
      "\nI prefer a copy constructor to a clone. The intent is clearer.\n    ",
      "\nSimple extension method to copy all the public properties. Works for any objects and does not require class to be [Serializable]. Can be extended for other access level.\n\npublic static void CopyTo( this object S, object T )\n{\n    foreach( var pS in S.GetType().GetProperties() )\n    {\n        foreach( var pT in T.GetType().GetProperties() )\n        {\n            if( pT.Name != pS.Name ) continue;\n            ( pT.GetSetMethod() ).Invoke( T, new object[] \n            { pS.GetGetMethod().Invoke( S, null ) } );\n        }\n    };\n}\n\n    ",
      "\nI\u0027ve just created CloneExtensions library project. It performs fast, deep clone using simple assignment operations generated by Expression Tree runtime code compilation.\n\nHow to use it?\n\nInstead of writing your own Clone or Copy methods with a tone of assignments between fields and properties make the program do it for yourself, using Expression Tree. GetClone\u003CT\u003E() method marked as extension method allows you to simply call it on your instance:\n\nvar newInstance = source.GetClone();\n\n\nYou can choose what should be copied from source to newInstance using CloningFlags enum:\n\nvar newInstance \n    = source.GetClone(CloningFlags.Properties | CloningFlags.CollectionItems);\n\n\nWhat can be cloned?\n\n\nPrimitive (int, uint, byte, double, char, etc.), known immutable\ntypes (DateTime, TimeSpan, String) and delegates (including\nAction, Func, etc)\nNullable\nT[] arrays\nCustom classes and structs, including generic classes and structs.\n\n\nFollowing class/struct members are cloned internally:\n\n\nValues of public, not readonly fields\nValues of public properties with both get and set accessors\nCollection items for types implementing ICollection\n\n\nHow fast it is?\n\nThe solution is faster then reflection, because members information has to be gathered only once, before GetClone\u003CT\u003E is used for the first time for given type T.\n\nIt\u0027s also faster than serialization-based solution when you clone more then couple instances of the same type T.\n\nand more...\n\nRead more about generated expressions on documentation.\n\nSample expression debug listing for List\u003Cint\u003E:\n\n.Lambda #Lambda1\u003CSystem.Func\u00604[System.Collections.Generic.List\u00601[System.Int32],CloneExtensions.CloningFlags,System.Collections.Generic.IDictionary\u00602[System.Type,System.Func\u00602[System.Object,System.Object]],System.Collections.Generic.List\u00601[System.Int32]]\u003E(\n    System.Collections.Generic.List\u00601[System.Int32] $source,\n    CloneExtensions.CloningFlags $flags,\n    System.Collections.Generic.IDictionary\u00602[System.Type,System.Func\u00602[System.Object,System.Object]] $initializers) {\n    .Block(System.Collections.Generic.List\u00601[System.Int32] $target) {\n        .If ($source == null) {\n            .Return #Label1 { null }\n        } .Else {\n            .Default(System.Void)\n        };\n        .If (\n            .Call $initializers.ContainsKey(.Constant\u003CSystem.Type\u003E(System.Collections.Generic.List\u00601[System.Int32]))\n        ) {\n            $target = (System.Collections.Generic.List\u00601[System.Int32]).Call ($initializers.Item[.Constant\u003CSystem.Type\u003E(System.Collections.Generic.List\u00601[System.Int32])]\n            ).Invoke((System.Object)$source)\n        } .Else {\n            $target = .New System.Collections.Generic.List\u00601[System.Int32]()\n        };\n        .If (\n            ((System.Byte)$flags \u0026 (System.Byte).Constant\u003CCloneExtensions.CloningFlags\u003E(Fields)) == (System.Byte).Constant\u003CCloneExtensions.CloningFlags\u003E(Fields)\n        ) {\n            .Default(System.Void)\n        } .Else {\n            .Default(System.Void)\n        };\n        .If (\n            ((System.Byte)$flags \u0026 (System.Byte).Constant\u003CCloneExtensions.CloningFlags\u003E(Properties)) == (System.Byte).Constant\u003CCloneExtensions.CloningFlags\u003E(Properties)\n        ) {\n            .Block() {\n                $target.Capacity = .Call CloneExtensions.CloneFactory.GetClone(\n                    $source.Capacity,\n                    $flags,\n                    $initializers)\n            }\n        } .Else {\n            .Default(System.Void)\n        };\n        .If (\n            ((System.Byte)$flags \u0026 (System.Byte).Constant\u003CCloneExtensions.CloningFlags\u003E(CollectionItems)) == (System.Byte).Constant\u003CCloneExtensions.CloningFlags\u003E(CollectionItems)\n        ) {\n            .Block(\n                System.Collections.Generic.IEnumerator\u00601[System.Int32] $var1,\n                System.Collections.Generic.ICollection\u00601[System.Int32] $var2) {\n                $var1 = (System.Collections.Generic.IEnumerator\u00601[System.Int32]).Call $source.GetEnumerator();\n                $var2 = (System.Collections.Generic.ICollection\u00601[System.Int32])$target;\n                .Loop  {\n                    .If (.Call $var1.MoveNext() != False) {\n                        .Call $var2.Add(.Call CloneExtensions.CloneFactory.GetClone(\n                                $var1.Current,\n                                $flags,\n\n\n                         $initializers))\n                } .Else {\n                    .Break #Label2 { }\n                }\n            }\n            .LabelTarget #Label2:\n        }\n    } .Else {\n        .Default(System.Void)\n    };\n    .Label\n        $target\n    .LabelTarget #Label1:\n}\n\n\n}\n\nwhat has the same meaning like following c# code:\n\n(source, flags, initializers) =\u003E\n{\n    if(source == null)\n        return null;\n\n    if(initializers.ContainsKey(typeof(List\u003Cint\u003E))\n        target = (List\u003Cint\u003E)initializers[typeof(List\u003Cint\u003E)].Invoke((object)source);\n    else\n        target = new List\u003Cint\u003E();\n\n    if((flags \u0026 CloningFlags.Properties) == CloningFlags.Properties)\n    {\n        target.Capacity = target.Capacity.GetClone(flags, initializers);\n    }\n\n    if((flags \u0026 CloningFlags.CollectionItems) == CloningFlags.CollectionItems)\n    {\n        var targetCollection = (ICollection\u003Cint\u003E)target;\n        foreach(var item in (ICollection\u003Cint\u003E)source)\n        {\n            targetCollection.Add(item.Clone(flags, initializers));\n        }\n    }\n\n    return target;\n}\n\n\nIsn\u0027t it quite like how you\u0027d write your own Clone method for List\u003Cint\u003E?\n    ",
      "\nIf you\u0027re already using a 3rd party application like ValueInjecter or Automapper, you can do something like this:\n\nMyObject oldObj; // The existing object to clone\n\nMyObject newObj = new MyObject();\nnewObj.InjectFrom(oldObj); // Using ValueInjecter syntax\n\n\nUsing this method you don\u0027t have to implement ISerializable or ICloneable on your objects. This is common with the MVC/MVVM pattern, so simple tools like this have been created.\n\nsee the ValueInjecter deep cloning sample on GitHub.\n    ",
      "\nWell I was having problems using ICloneable in Silverlight, but I liked the idea of seralization, I can seralize XML, so I did this:\n\nstatic public class SerializeHelper\n{\n    //Michael White, Holly Springs Consulting, 2009\n    //michael@hollyspringsconsulting.com\n    public static T DeserializeXML\u003CT\u003E(string xmlData) where T:new()\n    {\n        if (string.IsNullOrEmpty(xmlData))\n            return default(T);\n\n        TextReader tr = new StringReader(xmlData);\n        T DocItms = new T();\n        XmlSerializer xms = new XmlSerializer(DocItms.GetType());\n        DocItms = (T)xms.Deserialize(tr);\n\n        return DocItms == null ? default(T) : DocItms;\n    }\n\n    public static string SeralizeObjectToXML\u003CT\u003E(T xmlObject)\n    {\n        StringBuilder sbTR = new StringBuilder();\n        XmlSerializer xmsTR = new XmlSerializer(xmlObject.GetType());\n        XmlWriterSettings xwsTR = new XmlWriterSettings();\n\n        XmlWriter xmwTR = XmlWriter.Create(sbTR, xwsTR);\n        xmsTR.Serialize(xmwTR,xmlObject);\n\n        return sbTR.ToString();\n    }\n\n    public static T CloneObject\u003CT\u003E(T objClone) where T:new()\n    {\n        string GetString = SerializeHelper.SeralizeObjectToXML\u003CT\u003E(objClone);\n        return SerializeHelper.DeserializeXML\u003CT\u003E(GetString);\n    }\n}\n\n    ",
      "\nThe best is to implement an extension method like\n\npublic static T DeepClone\u003CT\u003E(this T originalObject)\n{ /* the cloning code */ }\n\n\nand then use it anywhere in the solution by\n\nvar copy = anyObject.DeepClone();\n\n\nWe can have the following three implementations:\n\n\nBy Serialization (the shortest code)\nBy Reflection - 5x faster\nBy Expression Trees - 20x faster\n\n\nAll linked methods are well working and were deeply tested.\n    ",
      "\nThe short answer is you inherit from the ICloneable interface and then implement the .clone function. Clone should do a memberwise copy and perform a deep copy on any member that requires it, then return the resulting object. This is a recursive operation ( it requires that all members of the class you want to clone are either value types or implement ICloneable and that their members are either value types or implement ICloneable, and so on).\n\nFor a more detailed explanation on Cloning using ICloneable, check out this article.\n\nThe long answer is \u0022it depends\u0022. As mentioned by others, ICloneable is not supported by generics, requires special considerations for circular class references, and is actually viewed by some as a \u0022mistake\u0022 in the .NET Framework. The serialization method depends on your objects being serializable, which they may not be and you may have no control over. There is still much debate in the community over which is the \u0022best\u0022 practice. In reality, none of the solutions are the one-size fits all best practice for all situations like ICloneable was originally interpreted to be.\n\nSee the this Developer\u0027s Corner article for a few more options (credit to Ian).\n    ",
      "\n\nBasically you need to implement ICloneable interface and then realize object structure copying. \nIf it\u0027s deep copy of all members, you need to insure (not relating on solution you choose) that all children are clonable as well. \nSometimes you need to be aware of some restriction during this process, for example if you copying the ORM objects most of frameworks allow only one object attached to the session and you MUST NOT make clones of this object, or if it\u0027s possible you need to care about session attaching of these objects.\n\n\nCheers.\n    ",
      "\nEDIT: project is discontinued\n\nIf you want true cloning to unknown types you can take a look at\nfastclone.\n\nThat\u0027s expression based cloning working about 10 times faster than binary serialization and maintaining complete object graph integrity.\n\nThat means: if you refer multiple times to the same object in your hierachy, the clone will also have a single instance beeing referenced.\n\nThere is no need for interfaces, attributes or any other modification to the objects being cloned.\n    ",
      "\nKeep things simple and use AutoMapper as others mentioned, it\u0027s a simple little library to map one object to another... To copy an object to another with the same type, all you need is three lines of code:\n\nMyType source = new MyType();\nMapper.CreateMap\u003CMyType, MyType\u003E();\nMyType target = Mapper.Map\u003CMyType, MyType\u003E(source);\n\n\nThe target object is now a copy of the source object.\nNot simple enough? Create an extension method to use everywhere in your solution:\n\npublic static T Copy\u003CT\u003E(this T source)\n{\n    T copy = default(T);\n    Mapper.CreateMap\u003CT, T\u003E();\n    copy = Mapper.Map\u003CT, T\u003E(source);\n    return copy;\n}\n\n\nThe extension method can be used as follow:\n\nMyType copy = source.Copy();\n\n    ",
      "\nIn general, you implement the ICloneable interface and implement Clone yourself.\nC# objects have a built-in MemberwiseClone method that performs a shallow copy that can help you out for all the primitives.\n\nFor a deep copy, there is no way it can know how to automatically do it.\n    ",
      "\nI came up with this to overcome a .NET shortcoming having to manually deep copy List\u003CT\u003E.\n\nI use this:\n\nstatic public IEnumerable\u003CSpotPlacement\u003E CloneList(List\u003CSpotPlacement\u003E spotPlacements)\n{\n    foreach (SpotPlacement sp in spotPlacements)\n    {\n        yield return (SpotPlacement)sp.Clone();\n    }\n}\n\n\nAnd at another place:\n\npublic object Clone()\n{\n    OrderItem newOrderItem = new OrderItem();\n    ...\n    newOrderItem._exactPlacements.AddRange(SpotPlacement.CloneList(_exactPlacements));\n    ...\n    return newOrderItem;\n}\n\n\nI tried to come up with oneliner that does this, but it\u0027s not possible, due to yield not working inside anonymous method blocks.\n\nBetter still, use generic List\u003CT\u003E cloner:\n\nclass Utility\u003CT\u003E where T : ICloneable\n{\n    static public IEnumerable\u003CT\u003E CloneList(List\u003CT\u003E tl)\n    {\n        foreach (T t in tl)\n        {\n            yield return (T)t.Clone();\n        }\n    }\n}\n\n    ",
      "\nQ. Why would I choose this answer?\n\nChoose this answer if you want the fastest speed .NET is capable of.\nIgnore this answer if you want a really, really easy method of cloning.\n\nIn other words, go with another answer unless you have a performance bottleneck that needs fixing, and you can prove it with a profiler.\n10x faster than other methods\nThe following method of performing a deep clone is:\n\n10x faster than anything that involves serialization/deserialization;\nPretty darn close to the theoretical maximum speed .NET is capable of.\n\nAnd the method ...\nFor ultimate speed, you can use Nested MemberwiseClone to do a deep copy. Its almost the same speed as copying a value struct, and is much faster than (a) reflection or (b) serialization (as described in other answers on this page).\nNote that if you use Nested MemberwiseClone for a deep copy, you have to manually implement a ShallowCopy for each nested level in the class, and a DeepCopy which calls all said ShallowCopy methods to create a complete clone. This is simple: only a few lines in total, see the demo code below.\nHere is the output of the code showing the relative performance difference for 100,000 clones:\n\n1.08 seconds for Nested MemberwiseClone on nested structs\n4.77 seconds for Nested MemberwiseClone on nested classes\n39.93 seconds for Serialization/Deserialization\n\nUsing Nested MemberwiseClone on a class almost as fast as copying a struct, and copying a struct is pretty darn close to the theoretical maximum speed .NET is capable of.\nDemo 1 of shallow and deep copy, using classes and MemberwiseClone:\n  Create Bob\n    Bob.Age=30, Bob.Purchase.Description=Lamborghini\n  Clone Bob \u003E\u003E BobsSon\n  Adjust BobsSon details\n    BobsSon.Age=2, BobsSon.Purchase.Description=Toy car\n  Proof of deep copy: If BobsSon is a true clone, then adjusting BobsSon details will not affect Bob:\n    Bob.Age=30, Bob.Purchase.Description=Lamborghini\n  Elapsed time: 00:00:04.7795670,30000000\n\nDemo 2 of shallow and deep copy, using structs and value copying:\n  Create Bob\n    Bob.Age=30, Bob.Purchase.Description=Lamborghini\n  Clone Bob \u003E\u003E BobsSon\n  Adjust BobsSon details:\n    BobsSon.Age=2, BobsSon.Purchase.Description=Toy car\n  Proof of deep copy: If BobsSon is a true clone, then adjusting BobsSon details will not affect Bob:\n    Bob.Age=30, Bob.Purchase.Description=Lamborghini\n  Elapsed time: 00:00:01.0875454,30000000\n\nDemo 3 of deep copy, using class and serialize/deserialize:\n  Elapsed time: 00:00:39.9339425,30000000\n\nTo understand how to do a deep copy using MemberwiseCopy, here is the demo project that was used to generate the times above:\n// Nested MemberwiseClone example. \n// Added to demo how to deep copy a reference class.\n[Serializable] // Not required if using MemberwiseClone, only used for speed comparison using serialization.\npublic class Person\n{\n    public Person(int age, string description)\n    {\n        this.Age = age;\n        this.Purchase.Description = description;\n    }\n    [Serializable] // Not required if using MemberwiseClone\n    public class PurchaseType\n    {\n        public string Description;\n        public PurchaseType ShallowCopy()\n        {\n            return (PurchaseType)this.MemberwiseClone();\n        }\n    }\n    public PurchaseType Purchase = new PurchaseType();\n    public int Age;\n    // Add this if using nested MemberwiseClone.\n    // This is a class, which is a reference type, so cloning is more difficult.\n    public Person ShallowCopy()\n    {\n        return (Person)this.MemberwiseClone();\n    }\n    // Add this if using nested MemberwiseClone.\n    // This is a class, which is a reference type, so cloning is more difficult.\n    public Person DeepCopy()\n    {\n            // Clone the root ...\n        Person other = (Person) this.MemberwiseClone();\n            // ... then clone the nested class.\n        other.Purchase = this.Purchase.ShallowCopy();\n        return other;\n    }\n}\n// Added to demo how to copy a value struct (this is easy - a deep copy happens by default)\npublic struct PersonStruct\n{\n    public PersonStruct(int age, string description)\n    {\n        this.Age = age;\n        this.Purchase.Description = description;\n    }\n    public struct PurchaseType\n    {\n        public string Description;\n    }\n    public PurchaseType Purchase;\n    public int Age;\n    // This is a struct, which is a value type, so everything is a clone by default.\n    public PersonStruct ShallowCopy()\n    {\n        return (PersonStruct)this;\n    }\n    // This is a struct, which is a value type, so everything is a clone by default.\n    public PersonStruct DeepCopy()\n    {\n        return (PersonStruct)this;\n    }\n}\n// Added only for a speed comparison.\npublic class MyDeepCopy\n{\n    public static T DeepCopy\u003CT\u003E(T obj)\n    {\n        object result = null;\n        using (var ms = new MemoryStream())\n        {\n            var formatter = new BinaryFormatter();\n            formatter.Serialize(ms, obj);\n            ms.Position = 0;\n            result = (T)formatter.Deserialize(ms);\n            ms.Close();\n        }\n        return (T)result;\n    }\n}\n\nThen, call the demo from main:\nvoid MyMain(string[] args)\n{\n    {\n        Console.Write(\u0022Demo 1 of shallow and deep copy, using classes and MemberwiseCopy:\\n\u0022);\n        var Bob = new Person(30, \u0022Lamborghini\u0022);\n        Console.Write(\u0022  Create Bob\\n\u0022);\n        Console.Write(\u0022    Bob.Age={0}, Bob.Purchase.Description={1}\\n\u0022, Bob.Age, Bob.Purchase.Description);\n        Console.Write(\u0022  Clone Bob \u003E\u003E BobsSon\\n\u0022);\n        var BobsSon = Bob.DeepCopy();\n        Console.Write(\u0022  Adjust BobsSon details\\n\u0022);\n        BobsSon.Age = 2;\n        BobsSon.Purchase.Description = \u0022Toy car\u0022;\n        Console.Write(\u0022    BobsSon.Age={0}, BobsSon.Purchase.Description={1}\\n\u0022, BobsSon.Age, BobsSon.Purchase.Description);\n        Console.Write(\u0022  Proof of deep copy: If BobsSon is a true clone, then adjusting BobsSon details will not affect Bob:\\n\u0022);\n        Console.Write(\u0022    Bob.Age={0}, Bob.Purchase.Description={1}\\n\u0022, Bob.Age, Bob.Purchase.Description);\n        Debug.Assert(Bob.Age == 30);\n        Debug.Assert(Bob.Purchase.Description == \u0022Lamborghini\u0022);\n        var sw = new Stopwatch();\n        sw.Start();\n        int total = 0;\n        for (int i = 0; i \u003C 100000; i\u002B\u002B)\n        {\n            var n = Bob.DeepCopy();\n            total \u002B= n.Age;\n        }\n        Console.Write(\u0022  Elapsed time: {0},{1}\\n\\n\u0022, sw.Elapsed, total);\n    }\n    {               \n        Console.Write(\u0022Demo 2 of shallow and deep copy, using structs:\\n\u0022);\n        var Bob = new PersonStruct(30, \u0022Lamborghini\u0022);\n        Console.Write(\u0022  Create Bob\\n\u0022);\n        Console.Write(\u0022    Bob.Age={0}, Bob.Purchase.Description={1}\\n\u0022, Bob.Age, Bob.Purchase.Description);\n        Console.Write(\u0022  Clone Bob \u003E\u003E BobsSon\\n\u0022);\n        var BobsSon = Bob.DeepCopy();\n        Console.Write(\u0022  Adjust BobsSon details:\\n\u0022);\n        BobsSon.Age = 2;\n        BobsSon.Purchase.Description = \u0022Toy car\u0022;\n        Console.Write(\u0022    BobsSon.Age={0}, BobsSon.Purchase.Description={1}\\n\u0022, BobsSon.Age, BobsSon.Purchase.Description);\n        Console.Write(\u0022  Proof of deep copy: If BobsSon is a true clone, then adjusting BobsSon details will not affect Bob:\\n\u0022);\n        Console.Write(\u0022    Bob.Age={0}, Bob.Purchase.Description={1}\\n\u0022, Bob.Age, Bob.Purchase.Description);                \n        Debug.Assert(Bob.Age == 30);\n        Debug.Assert(Bob.Purchase.Description == \u0022Lamborghini\u0022);\n        var sw = new Stopwatch();\n        sw.Start();\n        int total = 0;\n        for (int i = 0; i \u003C 100000; i\u002B\u002B)\n        {\n            var n = Bob.DeepCopy();\n            total \u002B= n.Age;\n        }\n        Console.Write(\u0022  Elapsed time: {0},{1}\\n\\n\u0022, sw.Elapsed, total);\n    }\n    {\n        Console.Write(\u0022Demo 3 of deep copy, using class and serialize/deserialize:\\n\u0022);\n        int total = 0;\n        var sw = new Stopwatch();\n        sw.Start();\n        var Bob = new Person(30, \u0022Lamborghini\u0022);\n        for (int i = 0; i \u003C 100000; i\u002B\u002B)\n        {\n            var BobsSon = MyDeepCopy.DeepCopy\u003CPerson\u003E(Bob);\n            total \u002B= BobsSon.Age;\n        }\n        Console.Write(\u0022  Elapsed time: {0},{1}\\n\u0022, sw.Elapsed, total);\n    }\n    Console.ReadKey();\n}\n\nAgain, note that if you use Nested MemberwiseClone for a deep copy, you have to manually implement a ShallowCopy for each nested level in the class, and a DeepCopy which calls all said ShallowCopy methods to create a complete clone. This is simple: only a few lines in total, see the demo code above.\nValue types vs. References Types\nNote that when it comes to cloning an object, there is is a big difference between a \u0022struct\u0022 and a \u0022class\u0022:\n\nIf you have a \u0022struct\u0022, it\u0027s a value type so you can just copy it, and the contents will be cloned (but it will only make a shallow clone unless you use the techniques in this post).\nIf you have a \u0022class\u0022, it\u0027s a reference type, so if you copy it, all you are doing is copying the pointer to it. To create a true clone, you have to be more creative, and use differences between value types and references types which creates another copy of the original object in memory.\n\nSee differences between value types and references types.\nChecksums to aid in debugging\n\nCloning objects incorrectly can lead to very difficult-to-pin-down bugs. In production code, I tend to implement a checksum to double check that the object has been cloned properly, and hasn\u0027t been corrupted by another reference to it. This checksum can be switched off in Release mode.\nI find this method quite useful: often, you only want to clone parts of the object, not the entire thing.\n\nReally useful for decoupling many threads from many other threads\nOne excellent use case for this code is feeding clones of a nested class or struct into a queue, to implement the producer / consumer pattern.\n\nWe can have one  (or more) threads modifying a class that they own, then pushing a complete copy of this class into a ConcurrentQueue.\nWe then have one (or more) threads pulling copies of these classes out and dealing with them.\n\nThis works extremely well in practice, and allows us to decouple many threads (the producers) from one or more threads (the consumers).\nAnd this method is blindingly fast too: if we use nested structs, it\u0027s 35x faster than serializing/deserializing nested classes, and allows us to take advantage of all of the threads available on the machine.\nUpdate\nApparently, ExpressMapper is as fast, if not faster, than hand coding such as above. I might have to see how they compare with a profiler.\n    ",
      "\nI\u0027ve seen it implemented through reflection as well. Basically there was a method that would iterate through the members of an object and appropriately copy them to the new object. When it reached reference types or collections I think it did a recursive call on itself. Reflection is expensive, but it worked pretty well.\n    ",
      "\nHere is a deep copy implementation:\n\npublic static object CloneObject(object opSource)\n{\n    //grab the type and create a new instance of that type\n    Type opSourceType = opSource.GetType();\n    object opTarget = CreateInstanceOfType(opSourceType);\n\n    //grab the properties\n    PropertyInfo[] opPropertyInfo = opSourceType.GetProperties(BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance);\n\n    //iterate over the properties and if it has a \u0027set\u0027 method assign it from the source TO the target\n    foreach (PropertyInfo item in opPropertyInfo)\n    {\n        if (item.CanWrite)\n        {\n            //value types can simply be \u0027set\u0027\n            if (item.PropertyType.IsValueType || item.PropertyType.IsEnum || item.PropertyType.Equals(typeof(System.String)))\n            {\n                item.SetValue(opTarget, item.GetValue(opSource, null), null);\n            }\n            //object/complex types need to recursively call this method until the end of the tree is reached\n            else\n            {\n                object opPropertyValue = item.GetValue(opSource, null);\n                if (opPropertyValue == null)\n                {\n                    item.SetValue(opTarget, null, null);\n                }\n                else\n                {\n                    item.SetValue(opTarget, CloneObject(opPropertyValue), null);\n                }\n            }\n        }\n    }\n    //return the new item\n    return opTarget;\n}\n\n    ",
      "\nAs I couldn\u0027t find a cloner that meets all my requirements in different projects, I created a deep cloner that can be configured and adapted to different code structures instead of adapting my code to meet the cloners requirements. Its achieved by adding annotations to the code that shall be cloned or you just leave the code as it is to have the default behaviour. It uses reflection, type caches and is based on fasterflect. The cloning process is very fast for a huge amount of data and a high object hierarchy (compared to other reflection/serialization based algorithms). \n\nhttps://github.com/kalisohn/CloneBehave\n\nAlso available as a nuget package:\nhttps://www.nuget.org/packages/Clone.Behave/1.0.0\n\nFor example: The following code will deepClone Address, but only perform a shallow copy of the _currentJob field. \n\npublic class Person \n{\n  [DeepClone(DeepCloneBehavior.Shallow)]\n  private Job _currentJob;      \n\n  public string Name { get; set; }\n\n  public Job CurrentJob \n  { \n    get{ return _currentJob; }\n    set{ _currentJob = value; }\n  }\n\n  public Person Manager { get; set; }\n}\n\npublic class Address \n{      \n  public Person PersonLivingHere { get; set; }\n}\n\nAddress adr = new Address();\nadr.PersonLivingHere = new Person(\u0022John\u0022);\nadr.PersonLivingHere.BestFriend = new Person(\u0022James\u0022);\nadr.PersonLivingHere.CurrentJob = new Job(\u0022Programmer\u0022);\n\nAddress adrClone = adr.Clone();\n\n//RESULT\nadr.PersonLivingHere == adrClone.PersonLivingHere //false\nadr.PersonLivingHere.Manager == adrClone.PersonLivingHere.Manager //false\nadr.PersonLivingHere.CurrentJob == adrClone.PersonLivingHere.CurrentJob //true\nadr.PersonLivingHere.CurrentJob.AnyProperty == adrClone.PersonLivingHere.CurrentJob.AnyProperty //true\n\n    ",
      "\nDeepCloner: Quick, easy, effective NuGet package to solve cloning\n\nAfter reading all answers I was surprised no one mentioned this excellent package: \n\nDeepCloner GitHub project  \n\nDeepCloner NuGet package\n\nElaborating a bit on its README, here are the reason why we chose it at work:\n\n\n  \n  It can deep or shallow copy \n  In deep cloning all object graph is maintained. \n  Uses code-generation in runtime, as result cloning is blazingly fast\n  Objects copied by internal structure, no methods or ctors called\n  You don\u0027t need to mark classes somehow (like Serializable-attribute, or implement interfaces)\n  No requirement to specify object type for cloning. Object can be casted to interface or as an abstract object (e.g. you can clone array of ints as abstract Array or IEnumerable; even null can be cloned without any errors)\n  Cloned object doesn\u0027t have any ability to determine that he is clone (except with very specific methods)\n  \n\n\nUsage:\n\nvar deepClone = new { Id = 1, Name = \u0022222\u0022 }.DeepClone();\nvar shallowClone = new { Id = 1, Name = \u0022222\u0022 }.ShallowClone();\n\n\nPerformance:\n\nThe README contains a performance comparison of various cloning libraries and methods: DeepCloner Performance.\n\nRequirements:\n\n\n.NET 4.0 or higher or .NET Standard 1.3 (.NET Core)\nRequires Full Trust permission set or Reflection permission (MemberAccess)\n\n    ",
      "\nCode Generator\n\nWe have seen a lot of ideas from serialization over manual implementation to reflection and I want to propose a totally different approach using the CGbR Code Generator. The generate clone method is memory and CPU efficient and therefor 300x faster as the standard DataContractSerializer.\n\nAll you need is a partial class definition with ICloneable and the generator does the rest:\n\npublic partial class Root : ICloneable\n{\n    public Root(int number)\n    {\n        _number = number;\n    }\n    private int _number;\n\n    public Partial[] Partials { get; set; }\n\n    public IList\u003Culong\u003E Numbers { get; set; }\n\n    public object Clone()\n    {\n        return Clone(true);\n    }\n\n    private Root()\n    {\n    }\n} \n\npublic partial class Root\n{\n    public Root Clone(bool deep)\n    {\n        var copy = new Root();\n        // All value types can be simply copied\n        copy._number = _number; \n        if (deep)\n        {\n            // In a deep clone the references are cloned \n            var tempPartials = new Partial[Partials.Length];\n            for (var i = 0; i \u003C Partials.Length; i\u002B\u002B)\n            {\n                var value = Partials[i];\n                value = value.Clone(true);\n                tempPartials[i] = value;\n            }\n            copy.Partials = tempPartials;\n            var tempNumbers = new List\u003Culong\u003E(Numbers.Count);\n            for (var i = 0; i \u003C Numbers.Count; i\u002B\u002B)\n            {\n                var value = Numbers[i];\n                tempNumbers.Add(value);\n            }\n            copy.Numbers = tempNumbers;\n        }\n        else\n        {\n            // In a shallow clone only references are copied\n            copy.Partials = Partials; \n            copy.Numbers = Numbers; \n        }\n        return copy;\n    }\n}\n\n\nNote: Latest version has a more null checks, but I left them out for better understanding.\n    ",
      "\nI like Copyconstructors like that:\n\n    public AnyObject(AnyObject anyObject)\n    {\n        foreach (var property in typeof(AnyObject).GetProperties())\n        {\n            property.SetValue(this, property.GetValue(anyObject));\n        }\n        foreach (var field in typeof(AnyObject).GetFields())\n        {\n            field.SetValue(this, field.GetValue(anyObject));\n        }\n    }\n\n\nIf you have more things to copy add them\n    ",
      "\nThis method solved the problem for me:\n\nprivate static MyObj DeepCopy(MyObj source)\n        {\n\n            var DeserializeSettings = new JsonSerializerSettings { ObjectCreationHandling = ObjectCreationHandling.Replace };\n\n            return JsonConvert.DeserializeObject\u003CMyObj \u003E(JsonConvert.SerializeObject(source), DeserializeSettings);\n\n        }\n\n\nUse it like this: MyObj a = DeepCopy(b);\n    ",
      "\nHere a solution fast and easy that worked for me without relaying on Serialization/Deserialization. \n\npublic class MyClass\n{\n    public virtual MyClass DeepClone()\n    {\n        var returnObj = (MyClass)MemberwiseClone();\n        var type = returnObj.GetType();\n        var fieldInfoArray = type.GetRuntimeFields().ToArray();\n\n        foreach (var fieldInfo in fieldInfoArray)\n        {\n            object sourceFieldValue = fieldInfo.GetValue(this);\n            if (!(sourceFieldValue is MyClass))\n            {\n                continue;\n            }\n\n            var sourceObj = (MyClass)sourceFieldValue;\n            var clonedObj = sourceObj.DeepClone();\n            fieldInfo.SetValue(returnObj, clonedObj);\n        }\n        return returnObj;\n    }\n}\n\n\nEDIT:\nrequires \n\n    using System.Linq;\n    using System.Reflection;\n\n\nThat\u0027s How I used it\n\npublic MyClass Clone(MyClass theObjectIneededToClone)\n{\n    MyClass clonedObj = theObjectIneededToClone.DeepClone();\n}\n\n    ",
      "\nFollow these steps:\n\n\nDefine an ISelf\u003CT\u003E with a read-only Self property that returns T, and ICloneable\u003Cout T\u003E, which derives from ISelf\u003CT\u003E and includes a method T Clone().\nThen define a CloneBase type which implements a protected virtual generic VirtualClone casting MemberwiseClone to the passed-in type.  \nEach derived type should implement VirtualClone by calling the base clone method and then doing whatever needs to be done to properly clone those aspects of the derived type which the parent VirtualClone method hasn\u0027t yet handled.\n\n\nFor maximum inheritance versatility, classes exposing public cloning functionality should be sealed, but derive from a base class which is otherwise identical except for the lack of cloning.  Rather than passing variables of the explicit clonable type, take a parameter of type ICloneable\u003CtheNonCloneableType\u003E.  This will allow a routine that expects a cloneable derivative of  Foo to work with a cloneable derivative of DerivedFoo, but also allow the creation of non-cloneable derivatives of Foo.\n    ",
      "\nI think you can try this.\n\nMyObject myObj = GetMyObj(); // Create and fill a new object\nMyObject newObj = new MyObject(myObj); //DeepClone it\n\n    ",
      "\nDisclaimer: I\u0027m the author of the mentioned package.\n\nI was surprised how the top answers to this question in 2019 still use serialization or reflection. \n\nSerialization is limiting (requires attributes, specific constructors, etc.) and is very slow\n\nBinaryFormatter requires the Serializable attribute, JsonConverter requires a parameterless constructor or attributes, neither handle read only fields or interfaces very well and both are 10-30x slower than necessary.\n\nExpression Trees\n\nYou can instead use Expression Trees or Reflection.Emit to generate cloning code only once, then use that compiled code instead of slow reflection or serialization.\n\nHaving come across the problem myself and seeing no satisfactory solution, I decided to create a package that does just that and works with every type and is a almost as fast as custom written code.\n\nYou can find the project on GitHub: https://github.com/marcelltoth/ObjectCloner\n\nUsage\n\nYou can install it from NuGet. Either get the ObjectCloner package and use it as:\n\nvar clone = ObjectCloner.DeepClone(original);\n\n\nor if you don\u0027t mind polluting your object type with extensions get ObjectCloner.Extensions as well and write:\n\nvar clone = original.DeepClone();\n\n\nPerformance\n\nA simple benchmark of cloning a class hierarchy showed performance ~3x faster than using Reflection, ~12x faster than Newtonsoft.Json serialization and ~36x faster than the highly suggested BinaryFormatter.\n    ",
      "\nI have created a version of the accepted answer that works with both \u0027[Serializable]\u0027 and \u0027[DataContract]\u0027. It has been a while since I wrote it, but if I remember correctly [DataContract] needed a different serializer.\n\nRequires System, System.IO, System.Runtime.Serialization, System.Runtime.Serialization.Formatters.Binary, System.Xml;\n\npublic static class ObjectCopier\n{\n\n    /// \u003Csummary\u003E\n    /// Perform a deep Copy of an object that is marked with \u0027[Serializable]\u0027 or \u0027[DataContract]\u0027\n    /// \u003C/summary\u003E\n    /// \u003Ctypeparam name=\u0022T\u0022\u003EThe type of object being copied.\u003C/typeparam\u003E\n    /// \u003Cparam name=\u0022source\u0022\u003EThe object instance to copy.\u003C/param\u003E\n    /// \u003Creturns\u003EThe copied object.\u003C/returns\u003E\n    public static T Clone\u003CT\u003E(T source)\n    {\n        if (typeof(T).IsSerializable == true)\n        {\n            return CloneUsingSerializable\u003CT\u003E(source);\n        }\n\n        if (IsDataContract(typeof(T)) == true)\n        {\n            return CloneUsingDataContracts\u003CT\u003E(source);\n        }\n\n        throw new ArgumentException(\u0022The type must be Serializable or use DataContracts.\u0022, \u0022source\u0022);\n    }\n\n\n    /// \u003Csummary\u003E\n    /// Perform a deep Copy of an object that is marked with \u0027[Serializable]\u0027\n    /// \u003C/summary\u003E\n    /// \u003Cremarks\u003E\n    /// Found on http://stackoverflow.com/questions/78536/cloning-objects-in-c-sharp\n    /// Uses code found on CodeProject, which allows free use in third party apps\n    /// - http://www.codeproject.com/KB/tips/SerializedObjectCloner.aspx\n    /// \u003C/remarks\u003E\n    /// \u003Ctypeparam name=\u0022T\u0022\u003EThe type of object being copied.\u003C/typeparam\u003E\n    /// \u003Cparam name=\u0022source\u0022\u003EThe object instance to copy.\u003C/param\u003E\n    /// \u003Creturns\u003EThe copied object.\u003C/returns\u003E\n    public static T CloneUsingSerializable\u003CT\u003E(T source)\n    {\n        if (!typeof(T).IsSerializable)\n        {\n            throw new ArgumentException(\u0022The type must be serializable.\u0022, \u0022source\u0022);\n        }\n\n        // Don\u0027t serialize a null object, simply return the default for that object\n        if (Object.ReferenceEquals(source, null))\n        {\n            return default(T);\n        }\n\n        IFormatter formatter = new BinaryFormatter();\n        Stream stream = new MemoryStream();\n        using (stream)\n        {\n            formatter.Serialize(stream, source);\n            stream.Seek(0, SeekOrigin.Begin);\n            return (T)formatter.Deserialize(stream);\n        }\n    }\n\n\n    /// \u003Csummary\u003E\n    /// Perform a deep Copy of an object that is marked with \u0027[DataContract]\u0027\n    /// \u003C/summary\u003E\n    /// \u003Ctypeparam name=\u0022T\u0022\u003EThe type of object being copied.\u003C/typeparam\u003E\n    /// \u003Cparam name=\u0022source\u0022\u003EThe object instance to copy.\u003C/param\u003E\n    /// \u003Creturns\u003EThe copied object.\u003C/returns\u003E\n    public static T CloneUsingDataContracts\u003CT\u003E(T source)\n    {\n        if (IsDataContract(typeof(T)) == false)\n        {\n            throw new ArgumentException(\u0022The type must be a data contract.\u0022, \u0022source\u0022);\n        }\n\n        // ** Don\u0027t serialize a null object, simply return the default for that object\n        if (Object.ReferenceEquals(source, null))\n        {\n            return default(T);\n        }\n\n        DataContractSerializer dcs = new DataContractSerializer(typeof(T));\n        using(Stream stream = new MemoryStream())\n        {\n            using (XmlDictionaryWriter writer = XmlDictionaryWriter.CreateBinaryWriter(stream))\n            {\n                dcs.WriteObject(writer, source);\n                writer.Flush();\n                stream.Seek(0, SeekOrigin.Begin);\n                using (XmlDictionaryReader reader = XmlDictionaryReader.CreateBinaryReader(stream, XmlDictionaryReaderQuotas.Max))\n                {\n                    return (T)dcs.ReadObject(reader);\n                }\n            }\n        }\n    }\n\n\n    /// \u003Csummary\u003E\n    /// Helper function to check if a class is a [DataContract]\n    /// \u003C/summary\u003E\n    /// \u003Cparam name=\u0022type\u0022\u003EThe type of the object to check.\u003C/param\u003E\n    /// \u003Creturns\u003EBoolean flag indicating if the class is a DataContract (true) or not (false) \u003C/returns\u003E\n    public static bool IsDataContract(Type type)\n    {\n        object[] attributes = type.GetCustomAttributes(typeof(DataContractAttribute), false);\n        return attributes.Length == 1;\n    }\n\n} \n\n    ",
      "\nOk, there are some obvious example with reflection in this post, BUT reflection is usually slow, until you start to cache it properly.\n\nif you\u0027ll cache it properly, than it\u0027ll deep clone 1000000 object by 4,6s (measured by Watcher).\n\nstatic readonly Dictionary\u003CType, PropertyInfo[]\u003E ProperyList = new Dictionary\u003CType, PropertyInfo[]\u003E();\n\n\nthan you take cached properties or add new to dictionary and use them simply\n\nforeach (var prop in propList)\n{\n        var value = prop.GetValue(source, null);   \n        prop.SetValue(copyInstance, value, null);\n}\n\n\nfull code check in my post in another answer\n\nhttps://stackoverflow.com/a/34365709/4711853\n    ",
      "\n                \n                stackoverflow.com/questions/78536/cloning-objects-in-c/\u2026 has a link to the code above [and references two other such implementations, one of which is more appropriate in my context]\n                \n\u2013\u00A0Ruben Bartelink\n                Feb 4 \u002709 at 13:13\n            ",
      "\n                \n                Serialization/deserialization involves significant overhead that isn\u0027t necessary. See the ICloneable interface and .MemberWise() clone methods in C#.\n                \n\u2013\u00A03Dave\n                Jan 28 \u002710 at 17:28\n            ",
      "\n                \n                @David, granted, but if the objects are light, and the performance hit when using it is not too high for your requirements, then it is a useful tip. I haven\u0027t used it intensively with large amounts of data in a loop, I admit, but I have never seen a single performance concern.\n                \n\u2013\u00A0johnc\n                Jan 29 \u002710 at 0:21\n                        \n                            \n                        \n            ",
      "\n                \n                @Amir: actually, no: typeof(T).IsSerializable is also true if the type has been marked with the [Serializable] attribute. It doesn\u0027t have to implement the ISerializable interface.\n                \n\u2013\u00A0Daniel Gehriger\n                Jun 3 \u002711 at 15:25\n            ",
      "\n                \n                Just thought I\u0027d mention that whilst this method is useful, and I\u0027ve used it myself many a time, it\u0027s not at all compatible with Medium Trust - so watch out if you\u0027re writing code that needs compatibility. BinaryFormatter access private fields and thus cannot work in the default permissionset for partial trust environments. You could try another serializer, but make sure your caller knows that the clone may not be perfect if the incoming object relies on private fields.\n                \n\u2013\u00A0Alex Norcliffe\n                Oct 17 \u002711 at 11:35\n                        \n                            \n                        \n            ",
      "\n                \n                the solutiojn is even faster than the BinaryFormatter solution, .NET Serialization Performance Comparison\n                \n\u2013\u00A0esskar\n                Mar 12 \u002714 at 10:25\n                        \n                            \n                        \n            ",
      "\n                \n                Thanks for this.  I was able to do essentially the same thing with the BSON serializer that ships with the MongoDB driver for C#.\n                \n\u2013\u00A0Mark Ewer\n                Jun 18 \u002714 at 0:58\n            ",
      "\n                \n                This is the best way for me, However, I use Newtonsoft.Json.JsonConvert but it is the same\n                \n\u2013\u00A0Pierre\n                Feb 4 \u002715 at 12:20\n            ",
      "\n                \n                For this to work the object to clone needs to be serializable as already mentioned - this also means for example that it may not have circular dependencies\n                \n\u2013\u00A0radomeit\n                Feb 22 \u002718 at 10:03\n                        \n                            \n                        \n            ",
      "\n                \n                I think this is the best solution as the implementation can be applied on most programming languages.\n                \n\u2013\u00A0mr5\n                Jan 2 \u002719 at 7:58\n            ",
      "\n                \n                I\u0027m not clear why ICloneable is considered vague.  Given a type like Dictionary(Of T,U), I would expect that ICloneable.Clone should do whatever level of deep and shallow copying is necessary to make the new dictionary be an independent dictionary that contains the same T\u0027s and U\u0027s (struct contents, and/or object references) as the original.  Where\u0027s the ambiguity?  To be sure, a generic ICloneable(Of T), which inherited ISelf(Of T), which included a \u0022Self\u0022 method, would be much better, but I don\u0027t see ambiguity on deep vs shallow cloning.\n                \n\u2013\u00A0supercat\n                Jan 12 \u002711 at 18:35\n                        \n                            \n                        \n            ",
      "\n                \n                Your example illustrates the problem.  Suppose you have a Dictionary\u003Cstring, Customer\u003E.  Should the cloned Dictionary have the same Customer objects as the original, or copies of those Customer objects?  There are reasonable use cases for either one.  But ICloneable doesn\u0027t make clear which one you\u0027ll get.  That\u0027s why it\u0027s not useful.\n                \n\u2013\u00A0Ryan Lundy\n                Jan 12 \u002711 at 18:53\n            ",
      "\n                \n                @Kyralessa The Microsoft MSDN article actually states this very problem of not knowing if you are requesting a deep or shallow copy.\n                \n\u2013\u00A0crush\n                May 28 \u002714 at 19:05\n            ",
      "\n                \n                The answer from the duplicate stackoverflow.com/questions/129389/\u2026 describes Copy extension, based on recursive MembershipClone\n                \n\u2013\u00A0Michael Freidgeim\n                Jan 23 \u002718 at 12:15\n            ",
      "\n                \n                MS recommends not using ICloneable for public members. \u0022Because callers of Clone cannot depend on the method performing a predictable cloning operation, we recommend that ICloneable not be implemented in public APIs.\u0022 msdn.microsoft.com/en-us/library/\u2026 However, based on the explanation given by Venkat Subramaniam in your linked article, I think it makes sense to use in this situation as long as the creators of the ICloneable objects have a deep understanding of which properties should be deep vs. shallow copies (i.e. deep copy Brain, shallow copy City)\n                \n\u2013\u00A0BateTech\n                Jan 9 \u002715 at 16:57\n            ",
      "\n                \n                First off, I\u0027m far from an expert in this topic (public APIs). I think for once that MS remark makes a lot of sense. And I don\u0027t think it\u0027s safe to assume the users of that API will have such a deep understanding. So, it only makes sense implementing it on a public API if it really won\u0027t matter for whoever is going to use it. I guess having some kind of UML very explicitly making the distinction on each property could help. But I\u0027d like to hear from someone with more experience. :P\n                \n\u2013\u00A0cregox\n                Jan 10 \u002715 at 3:45\n            ",
      "\n                \n                You can use the CGbR Clone Generator and get a similar result without manually writing the code.\n                \n\u2013\u00A0Toxantron\n                Jun 9 \u002716 at 20:53\n            ",
      "\n                \n                Intermediate Language implementation is useful\n                \n\u2013\u00A0Michael Freidgeim\n                Jan 23 \u002718 at 12:35\n            ",
      "\n                \n                There\u0027s no final in C#\n                \n\u2013\u00A0Konrad\n                Sep 5 \u002718 at 11:31\n            ",
      "\n                \n                .Net doesn\u0027t have copy constructors.\n                \n\u2013\u00A0Pop Catalin\n                Sep 17 \u002708 at 0:45\n            ",
      "\n                \n                Sure it does: new MyObject(objToCloneFrom)  Just declare a ctor which takes the object to clone as a parameter.\n                \n\u2013\u00A0Nick\n                Sep 17 \u002708 at 11:49\n            ",
      "\n                \n                It\u0027s not the same thing. You have to add it to every class manually, and you don\u0027t even know if you\u0027re garantueeing a deep copy.\n                \n\u2013\u00A0Dave Van den Eynde\n                Jun 4 \u002709 at 8:01\n            ",
      "\n                \n                \u002B1 for copy ctor. You have to manually write a clone() function for each type of object too, and good luck with that when your class hierarchy gets a few levels deep.\n                \n\u2013\u00A0Andrew Grant\n                Sep 15 \u002709 at 0:50\n            ",
      "\n                \n                With copy constructors you lose hierarchy though. agiledeveloper.com/articles/cloning072002.htm\n                \n\u2013\u00A0Will\n                Nov 6 \u002711 at 21:10\n            ",
      "\n                \n                This, unfortunately, is flawed. It\u0027s equivalent to calling objectOne.MyProperty = objectTwo.MyProperty (i.e., it will just copy the reference across). It will not clone the values of the properties.\n                \n\u2013\u00A0Alex Norcliffe\n                Oct 18 \u002711 at 0:59\n            ",
      "\n                \n                to Alex Norcliffe : author of question asked about \u0022copying each property\u0022 rather then cloning. in most cases exact duplication of properties is not needed.\n                \n\u2013\u00A0Konstantin Salavatov\n                Mar 28 \u002712 at 9:41\n            ",
      "\n                \n                i think about using this method but with recursion. so if the value of a property is a reference, create a new object and call CopyTo again. i just see one problem, that all used classes must have a constructor without parameters. Anybody tried this already? i also wonder if this will actually work with properties containing .net classes like DataRow and DataTable?\n                \n\u2013\u00A0Koryu\n                Jul 25 \u002713 at 9:22\n            ",
      "\n                \n                What are the chances of this getting on NuGet? It seems like the best solution. How does it compare to NClone?\n                \n\u2013\u00A0crush\n                May 28 \u002714 at 19:56\n            ",
      "\n                \n                I think this answer should be upvoted more times. Manually implementing ICloneable is tedious and error-prone, using reflection or serialization is slow if performance is important and you need to copy thousands of objects during a short period of time.\n                \n\u2013\u00A0nightcoder\n                Jul 28 \u002715 at 14:15\n                        \n                            \n                        \n            ",
      "\n                \n                Not at all, you wrong about reflection, you should simply cache this properly.  Check my answer below stackoverflow.com/a/34368738/4711853\n                \n\u2013\u00A0Roma Borodov\n                Dec 19 \u002715 at 9:32\n                        \n                            \n                        \n            ",
      "\n                \n                cloning code using Expression trees that you have posted codeproject.com/Articles/1111658/\u2026, is failing with newer versions of .Net framework with a security exception, Operation could destabilize the runtime, it is basically an exception due to malformed expression tree, which is used to generate the Func at runtime, please check if you have some solution.In fact I have seen issue only with complex objects with deep hierarchy, simple one easily get copied\n                \n\u2013\u00A0Mrinal Kamboj\n                Dec 24 \u002717 at 14:36\n            ",
      "\n                \n                ExpressionTree implementation seems very good. It even works with circular references and private members. No attributes needed. Best answer I\u0027ve found.\n                \n\u2013\u00A0N73k\n                Jul 1 \u002719 at 20:29\n                        \n                            \n                        \n            ",
      "\n                \n                The best answer, worked very well, you saved my day\n                \n\u2013\u00A0Adel Mourad\n                Jan 12 at 17:40\n            ",
      "\n                \n                ICloneable doesn\u0027t have a generic interface, so it is not recommended to use that interface.\n                \n\u2013\u00A0Karg\n                Sep 17 \u002708 at 0:15\n            ",
      "\n                \n                Your solution works until it needs to handle circular references, then things start to complicate, it\u0027s better to try implement deep cloning using deep serialization.\n                \n\u2013\u00A0Pop Catalin\n                Sep 17 \u002708 at 0:46\n            ",
      "\n                \n                Unfortunately, not all objects are serializable either, so you can\u0027t always use that method either. Ian\u0027s link is the most comprehensive answer so far.\n                \n\u2013\u00A0Zach Burlingame\n                Sep 17 \u002708 at 0:56\n            ",
      "\n                \n                ICloneable doesn\u0027t have a generic interface, so it is not recommended to use that interface.\n                \n\u2013\u00A0Karg\n                Sep 17 \u002708 at 0:13\n            ",
      "\n                \n                Simple and concise answers are the best.\n                \n\u2013\u00A0DavidGuaita\n                Apr 20 \u002718 at 0:45\n            ",
      "\n                \n                This one seems to be pretty useful\n                \n\u2013\u00A0LuckyLikey\n                Apr 20 \u002715 at 13:53\n            ",
      "\n                \n                It\u0027s easier to start working from one code snapshot than for overall system, especially closed one. It\u0027s quite understandable that no library can solve all problems with one shot. Some relaxations should be made.\n                \n\u2013\u00A0TarmoPikaro\n                Apr 24 \u002715 at 19:56\n            ",
      "\n                \n                I\u0027ve tried your solution and it seems to work well, thanks!  I think this answer should be upvoted more times. Manually implementing ICloneable is tedious and error-prone, using reflection or serialization is slow if performance is important and you need to copy thousands of objects during a short period of time.\n                \n\u2013\u00A0nightcoder\n                Jul 28 \u002715 at 15:25\n                        \n                            \n                        \n            ",
      "\n                \n                I tried it and it didn\u0027t work at all for me. Throws a MemberAccess exception.\n                \n\u2013\u00A0Michael Brown\n                Nov 15 \u002718 at 22:22\n            ",
      "\n                \n                It doesn\u0027t work with newer versions of .NET and is discontinued\n                \n\u2013\u00A0Michael Sander\n                Nov 19 \u002718 at 15:55\n            ",
      "\n                \n                Be careful with this one, it performs really poorly. I ended up switching to johnc answer which is as short as this one and performs a lot better.\n                \n\u2013\u00A0Agorilla\n                Apr 11 \u002717 at 7:42\n            ",
      "\n                \n                This only does a shallow copy.\n                \n\u2013\u00A0N73k\n                Jul 1 \u002719 at 18:27\n            ",
      "\n                \n                ICloneable doesn\u0027t have a generic interface, so it is not recommended to use that interface.\n                \n\u2013\u00A0Karg\n                Sep 17 \u002708 at 0:12\n            ",
      "\n                \n                If you copy a struct you get a shallow copy, you might still need specific implementation for a deep copy.\n                \n\u2013\u00A0Lasse V. Karlsen\n                Jul 4 \u002715 at 17:34\n            ",
      "\n                \n                @Lasse V. Karlsen. Yes, you\u0027re absolutely correct, I\u0027ve updated the answer to make this clearer. This method can be used to make deep copies of structs and classes. You can run the included example demo code to show how its done, it has an example of deep cloning a nested struct, and another example of deep cloning a nested class.\n                \n\u2013\u00A0Contango\n                Jul 4 \u002715 at 17:51\n                        \n                            \n                        \n            ",
      "\n                \n                This looks like memberwise clone because does not aware of reference type properties\n                \n\u2013\u00A0sll\n                Nov 6 \u002711 at 10:17\n                        \n                            \n                        \n            ",
      "\n                \n                If you want blindingly fast performance, don\u0027t go for this implementation: it uses reflection, so it won\u0027t be that fast. Conversely, \u0022premature optmization is the of all evil\u0022, so ignore the performance side until after you\u0027ve run a profiler.\n                \n\u2013\u00A0Contango\n                Dec 30 \u002711 at 17:30\n            ",
      "\n                \n                CreateInstanceOfType is not defined?\n                \n\u2013\u00A0MonsterMMORPG\n                Oct 14 \u002715 at 19:40\n            ",
      "\n                \n                It fails on interger: \u0022Non-static method requires a target.\u0022\n                \n\u2013\u00A0Mr.B\n                May 17 \u002716 at 9:08\n            ",
      "\n                \n                This question is quite old. I think this answer should go up so people can actually see the value here.\n                \n\u2013\u00A0EduLopez\n                May 18 at 22:38\n            ",
      "\n                \n                The reason Serialization is still popular in 2019 is because code generation ONLY works in trusted environments.  This means it won\u0027t work in Unity or iOS and probably never will.  So code generation is non-portable.\n                \n\u2013\u00A0JamesHoux\n                Jul 4 at 21:28\n            ",
      "\n                \n                Calling prop.GetValue(...) is still reflection and can\u0027t be cached. In an expression tree its compiled though, so faster\n                \n\u2013\u00A0Tseng\n                Sep 28 \u002716 at 14:17\n            "
    ]
  },
  {
    "Id": "db8a691e-125f-4576-99f4-4318c2c1a6c2",
    "QuestionId": 311165,
    "Description": "How do you convert a byte array to a hexadecimal string, and vice versa?",
    "Votes": 1425,
    "Views": 904713,
    "Tags": [
      "c#",
      "arrays",
      "hex"
    ],
    "Discussions": [
      "\nEither:\n\npublic static string ByteArrayToString(byte[] ba)\n{\n  StringBuilder hex = new StringBuilder(ba.Length * 2);\n  foreach (byte b in ba)\n    hex.AppendFormat(\u0022{0:x2}\u0022, b);\n  return hex.ToString();\n}\n\n\nor:\n\npublic static string ByteArrayToString(byte[] ba)\n{\n  return BitConverter.ToString(ba).Replace(\u0022-\u0022,\u0022\u0022);\n}\n\n\nThere are even more variants of doing it, for example here.\n\nThe reverse conversion would go like this:\n\npublic static byte[] StringToByteArray(String hex)\n{\n  int NumberChars = hex.Length;\n  byte[] bytes = new byte[NumberChars / 2];\n  for (int i = 0; i \u003C NumberChars; i \u002B= 2)\n    bytes[i / 2] = Convert.ToByte(hex.Substring(i, 2), 16);\n  return bytes;\n}\n\n\n\n\nUsing Substring is the best option in combination with Convert.ToByte. See this answer for more information. If you need better performance, you must avoid Convert.ToByte before you can drop SubString.\n    ",
      "\nPerformance Analysis\n\nNote: new leader as of 2015-08-20.\n\nI ran each of the various conversion methods through some crude Stopwatch performance testing, a run with a random sentence (n=61, 1000 iterations) and a run with a Project Gutenburg text (n=1,238,957, 150 iterations). Here are the results, roughly from fastest to slowest. All measurements are in ticks (10,000 ticks = 1 ms) and all relative notes are compared to the [slowest] StringBuilder implementation. For the code used, see below or the test framework repo where I now maintain the code for running this.\n\nDisclaimer\n\nWARNING: Do not rely on these stats for anything concrete; they are simply a sample run of sample data. If you really need top-notch performance, please test these methods in an environment representative of your production needs with data representative of what you will use.\n\nResults\n\n\nLookup by byte unsafe (via CodesInChaos) (added to test repo by airbreather)\n\n\nText: 4,727.85 (105.2X)\nSentence: 0.28 (99.7X)\n\nLookup by byte (via CodesInChaos)\n\n\nText: 10,853.96 (45.8X faster)\nSentence: 0.65 (42.7X faster)\n\nByte Manipulation 2 (via CodesInChaos)\n\n\nText: 12,967.69 (38.4X faster)\nSentence: 0.73 (37.9X faster)\n\nByte Manipulation (via Waleed Eissa)\n\n\nText: 16,856.64 (29.5X faster)\nSentence: 0.70 (39.5X faster)\n\nLookup/Shift (via Nathan Moinvaziri)\n\n\nText: 23,201.23 (21.4X faster)\nSentence: 1.24 (22.3X faster)\n\nLookup by nibble (via Brian Lambert)\n\n\nText: 23,879.41 (20.8X faster)\nSentence: 1.15 (23.9X faster)\n\nBitConverter (via Tomalak)\n\n\nText: 113,269.34 (4.4X faster)\nSentence: 9.98 (2.8X faster)\n\n{SoapHexBinary}.ToString (via Mykroft)\n\n\nText: 178,601.39 (2.8X faster)\nSentence: 10.68 (2.6X faster)\n\n{byte}.ToString(\u0022X2\u0022) (using foreach) (derived from Will Dean\u0027s answer)\n\n\nText: 308,805.38 (2.4X faster)\nSentence: 16.89 (2.4X faster)\n\n{byte}.ToString(\u0022X2\u0022) (using {IEnumerable}.Aggregate, requires System.Linq) (via Mark)\n\n\nText: 352,828.20 (2.1X faster)\nSentence: 16.87 (2.4X faster)\n\nArray.ConvertAll (using string.Join) (via Will Dean)\n\n\nText: 675,451.57 (1.1X faster)\nSentence: 17.95 (2.2X faster)\n\nArray.ConvertAll (using string.Concat, requires .NET 4.0) (via Will Dean)\n\n\nText: 752,078.70 (1.0X faster)\nSentence: 18.28 (2.2X faster)\n\n{StringBuilder}.AppendFormat (using foreach) (via Tomalak)\n\n\nText: 672,115.77 (1.1X faster)\nSentence: 36.82 (1.1X faster)\n\n{StringBuilder}.AppendFormat (using {IEnumerable}.Aggregate, requires System.Linq) (derived from Tomalak\u0027s answer)\n\n\nText: 718,380.63 (1.0X faster)\nSentence: 39.71 (1.0X faster)\n\n\n\nLookup tables have taken the lead over byte manipulation. Basically, there is some form of precomputing what any given nibble or byte will be in hex. Then, as you rip through the data, you simply look up the next portion to see what hex string it would be. That value is then added to the resulting string output in some fashion. For a long time byte manipulation, potentially harder to read by some developers, was the top-performing approach.\n\nYour best bet is still going to be finding some representative data and trying it out in a production-like environment. If you have different memory constraints, you may prefer a method with fewer allocations to one that would be faster but consume more memory.\n\nTesting Code\n\nFeel free to play with the testing code I used. A version is included here but feel free to clone the repo and add your own methods. Please submit a pull request if you find anything interesting or want to help improve the testing framework it uses.\n\n\nAdd the new static method (Func\u003Cbyte[], string\u003E) to /Tests/ConvertByteArrayToHexString/Test.cs.\nAdd that method\u0027s name to the TestCandidates return value in that same class.\nMake sure you are running the input version you want, sentence or text, by toggling the comments in GenerateTestInput in that same class.\nHit F5 and wait for the output (an HTML dump is also generated in the /bin folder).\n\n\n\n\nstatic string ByteArrayToHexStringViaStringJoinArrayConvertAll(byte[] bytes) {\n    return string.Join(string.Empty, Array.ConvertAll(bytes, b =\u003E b.ToString(\u0022X2\u0022)));\n}\nstatic string ByteArrayToHexStringViaStringConcatArrayConvertAll(byte[] bytes) {\n    return string.Concat(Array.ConvertAll(bytes, b =\u003E b.ToString(\u0022X2\u0022)));\n}\nstatic string ByteArrayToHexStringViaBitConverter(byte[] bytes) {\n    string hex = BitConverter.ToString(bytes);\n    return hex.Replace(\u0022-\u0022, \u0022\u0022);\n}\nstatic string ByteArrayToHexStringViaStringBuilderAggregateByteToString(byte[] bytes) {\n    return bytes.Aggregate(new StringBuilder(bytes.Length * 2), (sb, b) =\u003E sb.Append(b.ToString(\u0022X2\u0022))).ToString();\n}\nstatic string ByteArrayToHexStringViaStringBuilderForEachByteToString(byte[] bytes) {\n    StringBuilder hex = new StringBuilder(bytes.Length * 2);\n    foreach (byte b in bytes)\n        hex.Append(b.ToString(\u0022X2\u0022));\n    return hex.ToString();\n}\nstatic string ByteArrayToHexStringViaStringBuilderAggregateAppendFormat(byte[] bytes) {\n    return bytes.Aggregate(new StringBuilder(bytes.Length * 2), (sb, b) =\u003E sb.AppendFormat(\u0022{0:X2}\u0022, b)).ToString();\n}\nstatic string ByteArrayToHexStringViaStringBuilderForEachAppendFormat(byte[] bytes) {\n    StringBuilder hex = new StringBuilder(bytes.Length * 2);\n    foreach (byte b in bytes)\n        hex.AppendFormat(\u0022{0:X2}\u0022, b);\n    return hex.ToString();\n}\nstatic string ByteArrayToHexViaByteManipulation(byte[] bytes) {\n    char[] c = new char[bytes.Length * 2];\n    byte b;\n    for (int i = 0; i \u003C bytes.Length; i\u002B\u002B) {\n        b = ((byte)(bytes[i] \u003E\u003E 4));\n        c[i * 2] = (char)(b \u003E 9 ? b \u002B 0x37 : b \u002B 0x30);\n        b = ((byte)(bytes[i] \u0026 0xF));\n        c[i * 2 \u002B 1] = (char)(b \u003E 9 ? b \u002B 0x37 : b \u002B 0x30);\n    }\n    return new string(c);\n}\nstatic string ByteArrayToHexViaByteManipulation2(byte[] bytes) {\n    char[] c = new char[bytes.Length * 2];\n    int b;\n    for (int i = 0; i \u003C bytes.Length; i\u002B\u002B) {\n        b = bytes[i] \u003E\u003E 4;\n        c[i * 2] = (char)(55 \u002B b \u002B (((b - 10) \u003E\u003E 31) \u0026 -7));\n        b = bytes[i] \u0026 0xF;\n        c[i * 2 \u002B 1] = (char)(55 \u002B b \u002B (((b - 10) \u003E\u003E 31) \u0026 -7));\n    }\n    return new string(c);\n}\nstatic string ByteArrayToHexViaSoapHexBinary(byte[] bytes) {\n    SoapHexBinary soapHexBinary = new SoapHexBinary(bytes);\n    return soapHexBinary.ToString();\n}\nstatic string ByteArrayToHexViaLookupAndShift(byte[] bytes) {\n    StringBuilder result = new StringBuilder(bytes.Length * 2);\n    string hexAlphabet = \u00220123456789ABCDEF\u0022;\n    foreach (byte b in bytes) {\n        result.Append(hexAlphabet[(int)(b \u003E\u003E 4)]);\n        result.Append(hexAlphabet[(int)(b \u0026 0xF)]);\n    }\n    return result.ToString();\n}\nstatic readonly uint* _lookup32UnsafeP = (uint*)GCHandle.Alloc(_Lookup32, GCHandleType.Pinned).AddrOfPinnedObject();\nstatic string ByteArrayToHexViaLookup32UnsafeDirect(byte[] bytes) {\n    var lookupP = _lookup32UnsafeP;\n    var result = new string((char)0, bytes.Length * 2);\n    fixed (byte* bytesP = bytes)\n    fixed (char* resultP = result) {\n        uint* resultP2 = (uint*)resultP;\n        for (int i = 0; i \u003C bytes.Length; i\u002B\u002B) {\n            resultP2[i] = lookupP[bytesP[i]];\n        }\n    }\n    return result;\n}\nstatic uint[] _Lookup32 = Enumerable.Range(0, 255).Select(i =\u003E {\n    string s = i.ToString(\u0022X2\u0022);\n    return ((uint)s[0]) \u002B ((uint)s[1] \u003C\u003C 16);\n}).ToArray();\nstatic string ByteArrayToHexViaLookupPerByte(byte[] bytes) {\n    var result = new char[bytes.Length * 2];\n    for (int i = 0; i \u003C bytes.Length; i\u002B\u002B)\n    {\n        var val = _Lookup32[bytes[i]];\n        result[2*i] = (char)val;\n        result[2*i \u002B 1] = (char) (val \u003E\u003E 16);\n    }\n    return new string(result);\n}\nstatic string ByteArrayToHexViaLookup(byte[] bytes) {\n    string[] hexStringTable = new string[] {\n        \u002200\u0022, \u002201\u0022, \u002202\u0022, \u002203\u0022, \u002204\u0022, \u002205\u0022, \u002206\u0022, \u002207\u0022, \u002208\u0022, \u002209\u0022, \u00220A\u0022, \u00220B\u0022, \u00220C\u0022, \u00220D\u0022, \u00220E\u0022, \u00220F\u0022,\n        \u002210\u0022, \u002211\u0022, \u002212\u0022, \u002213\u0022, \u002214\u0022, \u002215\u0022, \u002216\u0022, \u002217\u0022, \u002218\u0022, \u002219\u0022, \u00221A\u0022, \u00221B\u0022, \u00221C\u0022, \u00221D\u0022, \u00221E\u0022, \u00221F\u0022,\n        \u002220\u0022, \u002221\u0022, \u002222\u0022, \u002223\u0022, \u002224\u0022, \u002225\u0022, \u002226\u0022, \u002227\u0022, \u002228\u0022, \u002229\u0022, \u00222A\u0022, \u00222B\u0022, \u00222C\u0022, \u00222D\u0022, \u00222E\u0022, \u00222F\u0022,\n        \u002230\u0022, \u002231\u0022, \u002232\u0022, \u002233\u0022, \u002234\u0022, \u002235\u0022, \u002236\u0022, \u002237\u0022, \u002238\u0022, \u002239\u0022, \u00223A\u0022, \u00223B\u0022, \u00223C\u0022, \u00223D\u0022, \u00223E\u0022, \u00223F\u0022,\n        \u002240\u0022, \u002241\u0022, \u002242\u0022, \u002243\u0022, \u002244\u0022, \u002245\u0022, \u002246\u0022, \u002247\u0022, \u002248\u0022, \u002249\u0022, \u00224A\u0022, \u00224B\u0022, \u00224C\u0022, \u00224D\u0022, \u00224E\u0022, \u00224F\u0022,\n        \u002250\u0022, \u002251\u0022, \u002252\u0022, \u002253\u0022, \u002254\u0022, \u002255\u0022, \u002256\u0022, \u002257\u0022, \u002258\u0022, \u002259\u0022, \u00225A\u0022, \u00225B\u0022, \u00225C\u0022, \u00225D\u0022, \u00225E\u0022, \u00225F\u0022,\n        \u002260\u0022, \u002261\u0022, \u002262\u0022, \u002263\u0022, \u002264\u0022, \u002265\u0022, \u002266\u0022, \u002267\u0022, \u002268\u0022, \u002269\u0022, \u00226A\u0022, \u00226B\u0022, \u00226C\u0022, \u00226D\u0022, \u00226E\u0022, \u00226F\u0022,\n        \u002270\u0022, \u002271\u0022, \u002272\u0022, \u002273\u0022, \u002274\u0022, \u002275\u0022, \u002276\u0022, \u002277\u0022, \u002278\u0022, \u002279\u0022, \u00227A\u0022, \u00227B\u0022, \u00227C\u0022, \u00227D\u0022, \u00227E\u0022, \u00227F\u0022,\n        \u002280\u0022, \u002281\u0022, \u002282\u0022, \u002283\u0022, \u002284\u0022, \u002285\u0022, \u002286\u0022, \u002287\u0022, \u002288\u0022, \u002289\u0022, \u00228A\u0022, \u00228B\u0022, \u00228C\u0022, \u00228D\u0022, \u00228E\u0022, \u00228F\u0022,\n        \u002290\u0022, \u002291\u0022, \u002292\u0022, \u002293\u0022, \u002294\u0022, \u002295\u0022, \u002296\u0022, \u002297\u0022, \u002298\u0022, \u002299\u0022, \u00229A\u0022, \u00229B\u0022, \u00229C\u0022, \u00229D\u0022, \u00229E\u0022, \u00229F\u0022,\n        \u0022A0\u0022, \u0022A1\u0022, \u0022A2\u0022, \u0022A3\u0022, \u0022A4\u0022, \u0022A5\u0022, \u0022A6\u0022, \u0022A7\u0022, \u0022A8\u0022, \u0022A9\u0022, \u0022AA\u0022, \u0022AB\u0022, \u0022AC\u0022, \u0022AD\u0022, \u0022AE\u0022, \u0022AF\u0022,\n        \u0022B0\u0022, \u0022B1\u0022, \u0022B2\u0022, \u0022B3\u0022, \u0022B4\u0022, \u0022B5\u0022, \u0022B6\u0022, \u0022B7\u0022, \u0022B8\u0022, \u0022B9\u0022, \u0022BA\u0022, \u0022BB\u0022, \u0022BC\u0022, \u0022BD\u0022, \u0022BE\u0022, \u0022BF\u0022,\n        \u0022C0\u0022, \u0022C1\u0022, \u0022C2\u0022, \u0022C3\u0022, \u0022C4\u0022, \u0022C5\u0022, \u0022C6\u0022, \u0022C7\u0022, \u0022C8\u0022, \u0022C9\u0022, \u0022CA\u0022, \u0022CB\u0022, \u0022CC\u0022, \u0022CD\u0022, \u0022CE\u0022, \u0022CF\u0022,\n        \u0022D0\u0022, \u0022D1\u0022, \u0022D2\u0022, \u0022D3\u0022, \u0022D4\u0022, \u0022D5\u0022, \u0022D6\u0022, \u0022D7\u0022, \u0022D8\u0022, \u0022D9\u0022, \u0022DA\u0022, \u0022DB\u0022, \u0022DC\u0022, \u0022DD\u0022, \u0022DE\u0022, \u0022DF\u0022,\n        \u0022E0\u0022, \u0022E1\u0022, \u0022E2\u0022, \u0022E3\u0022, \u0022E4\u0022, \u0022E5\u0022, \u0022E6\u0022, \u0022E7\u0022, \u0022E8\u0022, \u0022E9\u0022, \u0022EA\u0022, \u0022EB\u0022, \u0022EC\u0022, \u0022ED\u0022, \u0022EE\u0022, \u0022EF\u0022,\n        \u0022F0\u0022, \u0022F1\u0022, \u0022F2\u0022, \u0022F3\u0022, \u0022F4\u0022, \u0022F5\u0022, \u0022F6\u0022, \u0022F7\u0022, \u0022F8\u0022, \u0022F9\u0022, \u0022FA\u0022, \u0022FB\u0022, \u0022FC\u0022, \u0022FD\u0022, \u0022FE\u0022, \u0022FF\u0022,\n    };\n    StringBuilder result = new StringBuilder(bytes.Length * 2);\n    foreach (byte b in bytes) {\n        result.Append(hexStringTable[b]);\n    }\n    return result.ToString();\n}\n\n\nUpdate (2010-01-13)\n\nAdded Waleed\u0027s answer to analysis. Quite fast.\n\nUpdate (2011-10-05)\n\nAdded string.Concat Array.ConvertAll variant for completeness (requires .NET 4.0). On par with string.Join version.\n\nUpdate (2012-02-05)\n\nTest repo includes more variants such as StringBuilder.Append(b.ToString(\u0022X2\u0022)). None upset the results any. foreach is faster than {IEnumerable}.Aggregate, for instance, but BitConverter still wins.\n\nUpdate (2012-04-03)\n\nAdded Mykroft\u0027s SoapHexBinary answer to analysis, which took over third place.\n\nUpdate (2013-01-15)\n\nAdded CodesInChaos\u0027s byte manipulation answer, which took over first place (by a large margin on large blocks of text).\n\nUpdate (2013-05-23)\n\nAdded Nathan Moinvaziri\u0027s lookup answer and the variant from Brian Lambert\u0027s blog. Both rather fast, but not taking the lead on the test machine I used (AMD Phenom 9750).\n\nUpdate (2014-07-31)\n\nAdded @CodesInChaos\u0027s new byte-based lookup answer. It appears to have taken the lead on both the sentence tests and the full-text tests.\n\nUpdate (2015-08-20)\n\nAdded airbreather\u0027s optimizations and unsafe variant to this answer\u0027s repo. If you want to play in the unsafe game, you can get some huge performance gains over any of the prior top winners on both short strings and large texts.\n    ",
      "\nThere\u0027s a class called SoapHexBinary that does exactly what you want.\n\nusing System.Runtime.Remoting.Metadata.W3cXsd2001;\n\npublic static byte[] GetStringToBytes(string value)\n{\n    SoapHexBinary shb = SoapHexBinary.Parse(value);\n    return shb.Value;\n}\n\npublic static string GetBytesToString(byte[] value)\n{\n    SoapHexBinary shb = new SoapHexBinary(value);\n    return shb.ToString();\n}\n\n    ",
      "\nWhen writing crypto code it\u0027s common to avoid data dependent branches and table lookups to ensure the runtime doesn\u0027t depend on the data, since data dependent timing can lead to side-channel attacks.\n\nIt\u0027s also pretty fast.\n\nstatic string ByteToHexBitFiddle(byte[] bytes)\n{\n    char[] c = new char[bytes.Length * 2];\n    int b;\n    for (int i = 0; i \u003C bytes.Length; i\u002B\u002B) {\n        b = bytes[i] \u003E\u003E 4;\n        c[i * 2] = (char)(55 \u002B b \u002B (((b-10)\u003E\u003E31)\u0026-7));\n        b = bytes[i] \u0026 0xF;\n        c[i * 2 \u002B 1] = (char)(55 \u002B b \u002B (((b-10)\u003E\u003E31)\u0026-7));\n    }\n    return new string(c);\n}\n\n\nPh\u0027nglui mglw\u0027nafh Cthulhu R\u0027lyeh wgah\u0027nagl fhtagn\n\n\n\n\n  Abandon all hope, ye who enter here\n\n\nAn explanation of the weird bit fiddling:\n\n\nbytes[i] \u003E\u003E 4 extracts the high nibble of a byte\nbytes[i] \u0026 0xF extracts the low nibble of a byte\nb - 10\nis \u003C 0 for values b \u003C 10, which will become a decimal digit\nis \u003E= 0 for values b \u003E 10, which will become a letter from A to F.\nUsing i \u003E\u003E 31 on a signed 32 bit integer extracts the sign, thanks to sign extension.\nIt will be -1 for i \u003C 0 and 0 for i \u003E= 0.\nCombining 2) and 3), shows that (b-10)\u003E\u003E31 will be 0 for letters and -1 for digits.\nLooking at the case for letters, the last summand becomes 0, and b is in the range 10 to 15. We want to map it to A(65) to F(70), which implies adding 55 (\u0027A\u0027-10).\nLooking at the case for digits, we want to adapt the last summand so it maps b from the range 0 to 9 to the range 0(48) to 9(57). This means it needs to become -7 (\u00270\u0027 - 55).\nNow we could just multiply with 7. But since -1 is represented by all bits being 1, we can instead use \u0026 -7 since (0 \u0026 -7) == 0 and (-1 \u0026 -7) == -7.\n\n\nSome further considerations:\n\n\nI didn\u0027t use a second loop variable to index into c, since measurement shows that calculating it from i is cheaper. \nUsing exactly i \u003C bytes.Length as upper bound of the loop allows the JITter to eliminate bounds checks on bytes[i], so I chose that variant.\nMaking b an int allows unnecessary conversions from and to byte.\n\n    ",
      "\nIf you want more flexibility than BitConverter, but don\u0027t want those clunky 1990s-style explicit loops, then you can do:\n\nString.Join(String.Empty, Array.ConvertAll(bytes, x =\u003E x.ToString(\u0022X2\u0022)));\n\n\nOr, if you\u0027re using .NET 4.0:\n\nString.Concat(Array.ConvertAll(bytes, x =\u003E x.ToString(\u0022X2\u0022)));\n\n\n(The latter from a comment on the original post.)\n    ",
      "\nAnother lookup table based approach. This one uses only one lookup table for each byte, instead of a lookup table per nibble.\n\nprivate static readonly uint[] _lookup32 = CreateLookup32();\n\nprivate static uint[] CreateLookup32()\n{\n    var result = new uint[256];\n    for (int i = 0; i \u003C 256; i\u002B\u002B)\n    {\n        string s=i.ToString(\u0022X2\u0022);\n        result[i] = ((uint)s[0]) \u002B ((uint)s[1] \u003C\u003C 16);\n    }\n    return result;\n}\n\nprivate static string ByteArrayToHexViaLookup32(byte[] bytes)\n{\n    var lookup32 = _lookup32;\n    var result = new char[bytes.Length * 2];\n    for (int i = 0; i \u003C bytes.Length; i\u002B\u002B)\n    {\n        var val = lookup32[bytes[i]];\n        result[2*i] = (char)val;\n        result[2*i \u002B 1] = (char) (val \u003E\u003E 16);\n    }\n    return new string(result);\n}\n\n\nI also tested variants of this using ushort, struct{char X1, X2}, struct{byte X1, X2} in the lookup table.\n\nDepending on the compilation target (x86, X64) those either had the approximately same performance or were slightly slower than this variant.\n\n\n\nAnd for even higher performance, its unsafe sibling:\n\nprivate static readonly uint[] _lookup32Unsafe = CreateLookup32Unsafe();\nprivate static readonly uint* _lookup32UnsafeP = (uint*)GCHandle.Alloc(_lookup32Unsafe,GCHandleType.Pinned).AddrOfPinnedObject();\n\nprivate static uint[] CreateLookup32Unsafe()\n{\n    var result = new uint[256];\n    for (int i = 0; i \u003C 256; i\u002B\u002B)\n    {\n        string s=i.ToString(\u0022X2\u0022);\n        if(BitConverter.IsLittleEndian)\n            result[i] = ((uint)s[0]) \u002B ((uint)s[1] \u003C\u003C 16);\n        else\n            result[i] = ((uint)s[1]) \u002B ((uint)s[0] \u003C\u003C 16);\n    }\n    return result;\n}\n\npublic static string ByteArrayToHexViaLookup32Unsafe(byte[] bytes)\n{\n    var lookupP = _lookup32UnsafeP;\n    var result = new char[bytes.Length * 2];\n    fixed(byte* bytesP = bytes)\n    fixed (char* resultP = result)\n    {\n        uint* resultP2 = (uint*)resultP;\n        for (int i = 0; i \u003C bytes.Length; i\u002B\u002B)\n        {\n            resultP2[i] = lookupP[bytesP[i]];\n        }\n    }\n    return new string(result);\n}\n\n\nOr if you consider it acceptable to write into the string directly:\n\npublic static string ByteArrayToHexViaLookup32UnsafeDirect(byte[] bytes)\n{\n    var lookupP = _lookup32UnsafeP;\n    var result = new string((char)0, bytes.Length * 2);\n    fixed (byte* bytesP = bytes)\n    fixed (char* resultP = result)\n    {\n        uint* resultP2 = (uint*)resultP;\n        for (int i = 0; i \u003C bytes.Length; i\u002B\u002B)\n        {\n            resultP2[i] = lookupP[bytesP[i]];\n        }\n    }\n    return result;\n}\n\n    ",
      "\nYou can use the BitConverter.ToString method:\n\nbyte[] bytes = {0, 1, 2, 4, 8, 16, 32, 64, 128, 256}\nConsole.WriteLine( BitConverter.ToString(bytes));\n\n\nOutput:\n\n\n  00-01-02-04-08-10-20-40-80-FF\n\n\nMore information: BitConverter.ToString Method (Byte[])\n    ",
      "\nI just encountered the very same problem today, and I came across this code:\n\nprivate static string ByteArrayToHex(byte[] barray)\n{\n    char[] c = new char[barray.Length * 2];\n    byte b;\n    for (int i = 0; i \u003C barray.Length; \u002B\u002Bi)\n    {\n        b = ((byte)(barray[i] \u003E\u003E 4));\n        c[i * 2] = (char)(b \u003E 9 ? b \u002B 0x37 : b \u002B 0x30);\n        b = ((byte)(barray[i] \u0026 0xF));\n        c[i * 2 \u002B 1] = (char)(b \u003E 9 ? b \u002B 0x37 : b \u002B 0x30);\n    }\n    return new string(c);\n}\n\n\nSource: Forum post byte[] Array to Hex String (see the post by PZahra). I modified the code a little to remove the 0x prefix.\n\nI did some performance testing to the code and it was almost eight times faster than using BitConverter.ToString() (the fastest according to patridge\u0027s post).\n    ",
      "\nThis is an answer to revision 4 of Tomalak\u0027s highly popular answer (and subsequent edits).\n\nI\u0027ll make the case that this edit is wrong, and explain why it could be reverted. Along the way, you might learn a thing or two about some internals, and see yet another example of what premature optimization really is and how it can bite you.\n\ntl;dr: Just use Convert.ToByte and String.Substring if you\u0027re in a hurry (\u0022Original code\u0022 below), it\u0027s the best combination if you don\u0027t want to re-implement Convert.ToByte. Use something more advanced (see other answers) that doesn\u0027t use Convert.ToByte if you need performance. Do not use anything else other than String.Substring in combination with Convert.ToByte, unless someone has something interesting to say about this in the comments of this answer.\n\nwarning: This answer may become obsolete if a Convert.ToByte(char[], Int32) overload is implemented in the framework. This is unlikely to happen soon.\n\nAs a general rule, I don\u0027t much like to say \u0022don\u0027t optimize prematurely\u0022, because nobody knows when \u0022premature\u0022 is. The only thing you must consider when deciding whether to optimize or not is: \u0022Do I have the time and resources to investigate optimization approaches properly?\u0022. If you don\u0027t, then it\u0027s too soon, wait until your project is more mature or until you need the performance (if there is a real need, then you will make the time). In the meantime, do the simplest thing that could possibly work instead.\n\nOriginal code:\n\n    public static byte[] HexadecimalStringToByteArray_Original(string input)\n    {\n        var outputLength = input.Length / 2;\n        var output = new byte[outputLength];\n        for (var i = 0; i \u003C outputLength; i\u002B\u002B)\n            output[i] = Convert.ToByte(input.Substring(i * 2, 2), 16);\n        return output;\n    }\n\n\nRevision 4:\n\n    public static byte[] HexadecimalStringToByteArray_Rev4(string input)\n    {\n        var outputLength = input.Length / 2;\n        var output = new byte[outputLength];\n        using (var sr = new StringReader(input))\n        {\n            for (var i = 0; i \u003C outputLength; i\u002B\u002B)\n                output[i] = Convert.ToByte(new string(new char[2] { (char)sr.Read(), (char)sr.Read() }), 16);\n        }\n        return output;\n    }\n\n\nThe revision avoids String.Substring and uses a StringReader instead. The given reason is:\n\n\n  Edit: you can improve performance for long strings by using a single\n  pass parser, like so:\n\n\nWell, looking at the reference code for String.Substring, it\u0027s clearly \u0022single-pass\u0022 already; and why shouldn\u0027t it be? It operates at byte-level, not on surrogate pairs.\n\nIt does allocate a new string however, but then you need to allocate one to pass to Convert.ToByte anyway. Furthermore, the solution provided in the revision allocates yet another object on every iteration (the two-char array); you can safely put that allocation outside the loop and reuse the array to avoid that.\n\n    public static byte[] HexadecimalStringToByteArray(string input)\n    {\n        var outputLength = input.Length / 2;\n        var output = new byte[outputLength];\n        var numeral = new char[2];\n        using (var sr = new StringReader(input))\n        {\n            for (var i = 0; i \u003C outputLength; i\u002B\u002B)\n            {\n                numeral[0] = (char)sr.Read();\n                numeral[1] = (char)sr.Read();\n                output[i] = Convert.ToByte(new string(numeral), 16);\n            }\n        }\n        return output;\n    }\n\n\nEach hexadecimal numeral represents a single octet using two digits (symbols).\n\nBut then, why call StringReader.Read twice? Just call its second overload and ask it to read two characters in the two-char array at once; and reduce the amount of calls by two.\n\n    public static byte[] HexadecimalStringToByteArray(string input)\n    {\n        var outputLength = input.Length / 2;\n        var output = new byte[outputLength];\n        var numeral = new char[2];\n        using (var sr = new StringReader(input))\n        {\n            for (var i = 0; i \u003C outputLength; i\u002B\u002B)\n            {\n                var read = sr.Read(numeral, 0, 2);\n                Debug.Assert(read == 2);\n                output[i] = Convert.ToByte(new string(numeral), 16);\n            }\n        }\n        return output;\n    }\n\n\nWhat you\u0027re left with is a string reader whose only added \u0022value\u0022 is a parallel index (internal _pos) which you could have declared yourself (as j for example), a redundant length variable (internal _length), and a redundant reference to the input string (internal _s). In other words, it\u0027s useless.\n\nIf you wonder how Read \u0022reads\u0022, just look at the code, all it does is call String.CopyTo on the input string. The rest is just book-keeping overhead to maintain values we don\u0027t need.\n\nSo, remove the string reader already, and call CopyTo yourself; it\u0027s simpler, clearer, and more efficient.\n\n    public static byte[] HexadecimalStringToByteArray(string input)\n    {\n        var outputLength = input.Length / 2;\n        var output = new byte[outputLength];\n        var numeral = new char[2];\n        for (int i = 0, j = 0; i \u003C outputLength; i\u002B\u002B, j \u002B= 2)\n        {\n            input.CopyTo(j, numeral, 0, 2);\n            output[i] = Convert.ToByte(new string(numeral), 16);\n        }\n        return output;\n    }\n\n\nDo you really need a j index that increments in steps of two parallel to i? Of course not, just multiply i by two (which the compiler should be able to optimize to an addition).\n\n    public static byte[] HexadecimalStringToByteArray_BestEffort(string input)\n    {\n        var outputLength = input.Length / 2;\n        var output = new byte[outputLength];\n        var numeral = new char[2];\n        for (int i = 0; i \u003C outputLength; i\u002B\u002B)\n        {\n            input.CopyTo(i * 2, numeral, 0, 2);\n            output[i] = Convert.ToByte(new string(numeral), 16);\n        }\n        return output;\n    }\n\n\nWhat does the solution look like now? Exactly like it was at the beginning, only instead of using String.Substring to allocate the string and copy the data to it, you\u0027re using an intermediary array to which you copy the hexadecimal numerals to, then allocate the string yourself and copy the data again from the array and into the string (when you pass it in the string constructor). The second copy might be optimized-out if the string is already in the intern pool, but then String.Substring will also be able to avoid it in these cases.\n\nIn fact, if you look at String.Substring again, you see that it uses some low-level internal knowledge of how strings are constructed to allocate the string faster than you could normally do it, and it inlines the same code used by CopyTo directly in there to avoid the call overhead.\n\nString.Substring\n\n\nWorst-case: One fast allocation, one fast copy.\nBest-case: No allocation, no copy.\n\n\nManual method\n\n\nWorst-case: Two normal allocations, one normal copy, one fast copy.\nBest-case: One normal allocation, one normal copy.\n\n\nConclusion? If you want to use Convert.ToByte(String, Int32) (because you don\u0027t want to re-implement that functionality yourself), there doesn\u0027t seem to be a way to beat String.Substring; all you do is run in circles, re-inventing the wheel (only with sub-optimal materials).\n\nNote that using Convert.ToByte and String.Substring is a perfectly valid choice if you don\u0027t need extreme performance. Remember: only opt for an alternative if you have the time and resources to investigate how it works properly.\n\nIf there was a Convert.ToByte(char[], Int32), things would be different of course (it would be possible to do what I described above and completely avoid String).\n\nI suspect that people who report better performance by \u0022avoiding String.Substring\u0022 also avoid Convert.ToByte(String, Int32), which you should really be doing if you need the performance anyway. Look at the countless other answers to discover all the different approaches to do that.\n\nDisclaimer: I haven\u0027t decompiled the latest version of the framework to verify that the reference source is up-to-date, I assume it is.\n\nNow, it all sounds good and logical, hopefully even obvious if you\u0027ve managed to get so far.  But is it true?\n\nIntel(R) Core(TM) i7-3720QM CPU @ 2.60GHz\n    Cores: 8\n    Current Clock Speed: 2600\n    Max Clock Speed: 2600\n--------------------\nParsing hexadecimal string into an array of bytes\n--------------------\nHexadecimalStringToByteArray_Original: 7,777.09 average ticks (over 10000 runs), 1.2X\nHexadecimalStringToByteArray_BestEffort: 8,550.82 average ticks (over 10000 runs), 1.1X\nHexadecimalStringToByteArray_Rev4: 9,218.03 average ticks (over 10000 runs), 1.0X\n\n\nYes!\n\nProps to Partridge for the bench framework, it\u0027s easy to hack. The input used is the following SHA-1 hash repeated 5000 times to make a 100,000 bytes long string.\n\n209113288F93A9AB8E474EA78D899AFDBB874355\n\n\nHave fun! (But optimize with moderation.)\n    ",
      "\nComplement to answer by @CodesInChaos (reversed method)\n\npublic static byte[] HexToByteUsingByteManipulation(string s)\n{\n    byte[] bytes = new byte[s.Length / 2];\n    for (int i = 0; i \u003C bytes.Length; i\u002B\u002B)\n    {\n        int hi = s[i*2] - 65;\n        hi = hi \u002B 10 \u002B ((hi \u003E\u003E 31) \u0026 7);\n\n        int lo = s[i*2 \u002B 1] - 65;\n        lo = lo \u002B 10 \u002B ((lo \u003E\u003E 31) \u0026 7) \u0026 0x0f;\n\n        bytes[i] = (byte) (lo | hi \u003C\u003C 4);\n    }\n    return bytes;\n}\n\n\nExplanation:\n\n\u0026 0x0f is to support  also lower case letters\n\nhi = hi \u002B 10 \u002B ((hi \u003E\u003E 31) \u0026 7); is the same as:\n\nhi = ch-65 \u002B 10 \u002B (((ch-65) \u003E\u003E 31) \u0026 7);\n\nFor \u00270\u0027..\u00279\u0027 it is the same as hi = ch - 65 \u002B 10 \u002B 7; which is hi = ch - 48 (this is because of 0xffffffff \u0026 7).\n\nFor \u0027A\u0027..\u0027F\u0027 it is hi = ch - 65 \u002B 10; (this is because of 0x00000000 \u0026 7).\n\nFor \u0027a\u0027..\u0027f\u0027 we have to big numbers so we must subtract 32 from default version by making some bits 0 by using \u0026 0x0f.\n\n65 is code for \u0027A\u0027\n\n48 is code for \u00270\u0027\n\n7 is the number of letters between \u00279\u0027 and \u0027A\u0027 in the ASCII table (...456789:;\u003C=\u003E?@ABCD...).\n    ",
      "\nThis problem could also be solved using a look-up table. This would require a small amount of static memory for both the encoder and decoder. This method will however be fast:\n\n\nEncoder table 512\u00A0bytes or 1024\u00A0bytes (twice\nthe size if both upper and lower case\nis needed)\nDecoder table 256\u00A0bytes or\n64\u00A0KiB (either a single char look-up\nor dual char look-up)\n\n\nMy solution uses 1024\u00A0bytes for the encoding table, and 256\u00A0bytes for decoding.\n\nDecoding\n\nprivate static readonly byte[] LookupTable = new byte[] {\n  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,\n  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,\n  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,\n  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,\n  0xFF, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,\n  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,\n  0xFF, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,\n  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,\n  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,\n  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,\n  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,\n  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,\n  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,\n  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,\n  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,\n  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF\n};\n\nprivate static byte Lookup(char c)\n{\n  var b = LookupTable[c];\n  if (b == 255)\n    throw new IOException(\u0022Expected a hex character, got \u0022 \u002B c);\n  return b;\n}\n\npublic static byte ToByte(char[] chars, int offset)\n{\n  return (byte)(Lookup(chars[offset]) \u003C\u003C 4 | Lookup(chars[offset \u002B 1]));\n}\n\n\nEncoding\n\nprivate static readonly char[][] LookupTableUpper;\nprivate static readonly char[][] LookupTableLower;\n\nstatic Hex()\n{\n  LookupTableLower = new char[256][];\n  LookupTableUpper = new char[256][];\n  for (var i = 0; i \u003C 256; i\u002B\u002B)\n  {\n    LookupTableLower[i] = i.ToString(\u0022x2\u0022).ToCharArray();\n    LookupTableUpper[i] = i.ToString(\u0022X2\u0022).ToCharArray();\n  }\n}\n\npublic static char[] ToCharLower(byte[] b, int bOffset)\n{\n  return LookupTableLower[b[bOffset]];\n}\n\npublic static char[] ToCharUpper(byte[] b, int bOffset)\n{\n  return LookupTableUpper[b[bOffset]];\n}\n\n\nComparison\n\nStringBuilderToStringFromBytes:   106148\nBitConverterToStringFromBytes:     15783\nArrayConvertAllToStringFromBytes:  54290\nByteManipulationToCharArray:        8444\nTableBasedToCharArray:              5651 *\n\n\n* this solution\n\nNote\n\nDuring decoding IOException and IndexOutOfRangeException could occur (if a character has a too high value \u003E 256). Methods for de/encoding streams or arrays should be implemented, this is just a proof of concept.\n    ",
      "\nWhy make it complex? This is simple in Visual\u00A0Studio\u00A02008:\n\nC#:\n\nstring hex = BitConverter.ToString(YourByteArray).Replace(\u0022-\u0022, \u0022\u0022);\n\n\nVB:\n\nDim hex As String = BitConverter.ToString(YourByteArray).Replace(\u0022-\u0022, \u0022\u0022)\n\n    ",
      "\nThis is a great post. I like Waleed\u0027s solution. I haven\u0027t run it through patridge\u0027s test but it seems to be quite fast. I also needed the reverse process, converting a hex string to a byte array, so I wrote it as a reversal of Waleed\u0027s solution. Not sure if it\u0027s any faster than Tomalak\u0027s original solution. Again, I did not run the reverse process through patridge\u0027s test either.\n\nprivate byte[] HexStringToByteArray(string hexString)\n{\n    int hexStringLength = hexString.Length;\n    byte[] b = new byte[hexStringLength / 2];\n    for (int i = 0; i \u003C hexStringLength; i \u002B= 2)\n    {\n        int topChar = (hexString[i] \u003E 0x40 ? hexString[i] - 0x37 : hexString[i] - 0x30) \u003C\u003C 4;\n        int bottomChar = hexString[i \u002B 1] \u003E 0x40 ? hexString[i \u002B 1] - 0x37 : hexString[i \u002B 1] - 0x30;\n        b[i / 2] = Convert.ToByte(topChar \u002B bottomChar);\n    }\n    return b;\n}\n\n    ",
      "\nNot to pile on to the many answers here, but I found a fairly optimal (~4.5x better than accepted), straightforward implementation of the hex string parser. First, output from my tests (the first batch is my implementation):\n\nGive me that string:\n04c63f7842740c77e545bb0b2ade90b384f119f6ab57b680b7aa575a2f40939f\n\nTime to parse 100,000 times: 50.4192 ms\nResult as base64: BMY/eEJ0DHflRbsLKt6Qs4TxGfarV7aAt6pXWi9Ak58=\nBitConverter\u0027d: 04-C6-3F-78-42-74-0C-77-E5-45-BB-0B-2A-DE-90-B3-84-F1-19-F6-AB-5\n7-B6-80-B7-AA-57-5A-2F-40-93-9F\n\nAccepted answer: (StringToByteArray)\nTime to parse 100000 times: 233.1264ms\nResult as base64: BMY/eEJ0DHflRbsLKt6Qs4TxGfarV7aAt6pXWi9Ak58=\nBitConverter\u0027d: 04-C6-3F-78-42-74-0C-77-E5-45-BB-0B-2A-DE-90-B3-84-F1-19-F6-AB-5\n7-B6-80-B7-AA-57-5A-2F-40-93-9F\n\nWith Mono\u0027s implementation:\nTime to parse 100000 times: 777.2544ms\nResult as base64: BMY/eEJ0DHflRbsLKt6Qs4TxGfarV7aAt6pXWi9Ak58=\nBitConverter\u0027d: 04-C6-3F-78-42-74-0C-77-E5-45-BB-0B-2A-DE-90-B3-84-F1-19-F6-AB-5\n7-B6-80-B7-AA-57-5A-2F-40-93-9F\n\nWith SoapHexBinary:\nTime to parse 100000 times: 845.1456ms\nResult as base64: BMY/eEJ0DHflRbsLKt6Qs4TxGfarV7aAt6pXWi9Ak58=\nBitConverter\u0027d: 04-C6-3F-78-42-74-0C-77-E5-45-BB-0B-2A-DE-90-B3-84-F1-19-F6-AB-5\n7-B6-80-B7-AA-57-5A-2F-40-93-9F\n\n\nThe base64 and \u0027BitConverter\u0027d\u0027 lines are there to test for correctness. Note that they are equal.\n\nThe implementation:\n\npublic static byte[] ToByteArrayFromHex(string hexString)\n{\n  if (hexString.Length % 2 != 0) throw new ArgumentException(\u0022String must have an even length\u0022);\n  var array = new byte[hexString.Length / 2];\n  for (int i = 0; i \u003C hexString.Length; i \u002B= 2)\n  {\n    array[i/2] = ByteFromTwoChars(hexString[i], hexString[i \u002B 1]);\n  }\n  return array;\n}\n\nprivate static byte ByteFromTwoChars(char p, char p_2)\n{\n  byte ret;\n  if (p \u003C= \u00279\u0027 \u0026\u0026 p \u003E= \u00270\u0027)\n  {\n    ret = (byte) ((p - \u00270\u0027) \u003C\u003C 4);\n  }\n  else if (p \u003C= \u0027f\u0027 \u0026\u0026 p \u003E= \u0027a\u0027)\n  {\n    ret = (byte) ((p - \u0027a\u0027 \u002B 10) \u003C\u003C 4);\n  }\n  else if (p \u003C= \u0027F\u0027 \u0026\u0026 p \u003E= \u0027A\u0027)\n  {\n    ret = (byte) ((p - \u0027A\u0027 \u002B 10) \u003C\u003C 4);\n  } else throw new ArgumentException(\u0022Char is not a hex digit: \u0022 \u002B p,\u0022p\u0022);\n\n  if (p_2 \u003C= \u00279\u0027 \u0026\u0026 p_2 \u003E= \u00270\u0027)\n  {\n    ret |= (byte) ((p_2 - \u00270\u0027));\n  }\n  else if (p_2 \u003C= \u0027f\u0027 \u0026\u0026 p_2 \u003E= \u0027a\u0027)\n  {\n    ret |= (byte) ((p_2 - \u0027a\u0027 \u002B 10));\n  }\n  else if (p_2 \u003C= \u0027F\u0027 \u0026\u0026 p_2 \u003E= \u0027A\u0027)\n  {\n    ret |= (byte) ((p_2 - \u0027A\u0027 \u002B 10));\n  } else throw new ArgumentException(\u0022Char is not a hex digit: \u0022 \u002B p_2, \u0022p_2\u0022);\n\n  return ret;\n}\n\n\nI tried some stuff with unsafe and moving the (clearly redundant) character-to-nibble if sequence to another method, but this was the fastest it got.\n\n(I concede that this answers half the question. I felt that the string-\u003Ebyte[] conversion was underrepresented, while the byte[]-\u003Estring angle seems to be well covered. Thus, this answer.)\n    ",
      "\nSafe versions:\n\npublic static class HexHelper\n{\n    [System.Diagnostics.Contracts.Pure]\n    public static string ToHex(this byte[] value)\n    {\n        if (value == null)\n            throw new ArgumentNullException(\u0022value\u0022);\n\n        const string hexAlphabet = @\u00220123456789ABCDEF\u0022;\n\n        var chars = new char[checked(value.Length * 2)];\n        unchecked\n        {\n            for (int i = 0; i \u003C value.Length; i\u002B\u002B)\n            {\n                chars[i * 2] = hexAlphabet[value[i] \u003E\u003E 4];\n                chars[i * 2 \u002B 1] = hexAlphabet[value[i] \u0026 0xF];\n            }\n        }\n        return new string(chars);\n    }\n\n    [System.Diagnostics.Contracts.Pure]\n    public static byte[] FromHex(this string value)\n    {\n        if (value == null)\n            throw new ArgumentNullException(\u0022value\u0022);\n        if (value.Length % 2 != 0)\n            throw new ArgumentException(\u0022Hexadecimal value length must be even.\u0022, \u0022value\u0022);\n\n        unchecked\n        {\n            byte[] result = new byte[value.Length / 2];\n            for (int i = 0; i \u003C result.Length; i\u002B\u002B)\n            {\n                // 0(48) - 9(57) -\u003E 0 - 9\n                // A(65) - F(70) -\u003E 10 - 15\n                int b = value[i * 2]; // High 4 bits.\n                int val = ((b - \u00270\u0027) \u002B (((\u00279\u0027 - b) \u003E\u003E 31) \u0026 -7)) \u003C\u003C 4;\n                b = value[i * 2 \u002B 1]; // Low 4 bits.\n                val \u002B= (b - \u00270\u0027) \u002B (((\u00279\u0027 - b) \u003E\u003E 31) \u0026 -7);\n                result[i] = checked((byte)val);\n            }\n            return result;\n        }\n    }\n}\n\n\nUnsafe versions For those who prefer performance and do not afraid of unsafeness. About 35% faster ToHex and 10% faster FromHex.\n\npublic static class HexUnsafeHelper\n{\n    [System.Diagnostics.Contracts.Pure]\n    public static unsafe string ToHex(this byte[] value)\n    {\n        if (value == null)\n            throw new ArgumentNullException(\u0022value\u0022);\n\n        const string alphabet = @\u00220123456789ABCDEF\u0022;\n\n        string result = new string(\u0027 \u0027, checked(value.Length * 2));\n        fixed (char* alphabetPtr = alphabet)\n        fixed (char* resultPtr = result)\n        {\n            char* ptr = resultPtr;\n            unchecked\n            {\n                for (int i = 0; i \u003C value.Length; i\u002B\u002B)\n                {\n                    *ptr\u002B\u002B = *(alphabetPtr \u002B (value[i] \u003E\u003E 4));\n                    *ptr\u002B\u002B = *(alphabetPtr \u002B (value[i] \u0026 0xF));\n                }\n            }\n        }\n        return result;\n    }\n\n    [System.Diagnostics.Contracts.Pure]\n    public static unsafe byte[] FromHex(this string value)\n    {\n        if (value == null)\n            throw new ArgumentNullException(\u0022value\u0022);\n        if (value.Length % 2 != 0)\n            throw new ArgumentException(\u0022Hexadecimal value length must be even.\u0022, \u0022value\u0022);\n\n        unchecked\n        {\n            byte[] result = new byte[value.Length / 2];\n            fixed (char* valuePtr = value)\n            {\n                char* valPtr = valuePtr;\n                for (int i = 0; i \u003C result.Length; i\u002B\u002B)\n                {\n                    // 0(48) - 9(57) -\u003E 0 - 9\n                    // A(65) - F(70) -\u003E 10 - 15\n                    int b = *valPtr\u002B\u002B; // High 4 bits.\n                    int val = ((b - \u00270\u0027) \u002B (((\u00279\u0027 - b) \u003E\u003E 31) \u0026 -7)) \u003C\u003C 4;\n                    b = *valPtr\u002B\u002B; // Low 4 bits.\n                    val \u002B= (b - \u00270\u0027) \u002B (((\u00279\u0027 - b) \u003E\u003E 31) \u0026 -7);\n                    result[i] = checked((byte)val);\n                }\n            }\n            return result;\n        }\n    }\n}\n\n\nBTW\nFor benchmark testing initializing alphabet every time convert function called is wrong, alphabet must be const (for string) or static readonly (for char[]). Then alphabet-based conversion of byte[] to string becomes as fast as byte manipulation versions.\n\nAnd of course test must be compiled in Release (with optimization) and with debug option \u0022Suppress JIT optimization\u0022 turned off (same for \u0022Enable Just My Code\u0022 if code must be debuggable).\n    ",
      "\nInverse function for Waleed Eissa code (Hex String To Byte Array):\n\n    public static byte[] HexToBytes(this string hexString)        \n    {\n        byte[] b = new byte[hexString.Length / 2];            \n        char c;\n        for (int i = 0; i \u003C hexString.Length / 2; i\u002B\u002B)\n        {\n            c = hexString[i * 2];\n            b[i] = (byte)((c \u003C 0x40 ? c - 0x30 : (c \u003C 0x47 ? c - 0x37 : c - 0x57)) \u003C\u003C 4);\n            c = hexString[i * 2 \u002B 1];\n            b[i] \u002B= (byte)(c \u003C 0x40 ? c - 0x30 : (c \u003C 0x47 ? c - 0x37 : c - 0x57));\n        }\n\n        return b;\n    }\n\n\nWaleed Eissa function with lower case support:\n\n    public static string BytesToHex(this byte[] barray, bool toLowerCase = true)\n    {\n        byte addByte = 0x37;\n        if (toLowerCase) addByte = 0x57;\n        char[] c = new char[barray.Length * 2];\n        byte b;\n        for (int i = 0; i \u003C barray.Length; \u002B\u002Bi)\n        {\n            b = ((byte)(barray[i] \u003E\u003E 4));\n            c[i * 2] = (char)(b \u003E 9 ? b \u002B addByte : b \u002B 0x30);\n            b = ((byte)(barray[i] \u0026 0xF));\n            c[i * 2 \u002B 1] = (char)(b \u003E 9 ? b \u002B addByte : b \u002B 0x30);\n        }\n\n        return new string(c);\n    }\n\n    ",
      "\nAs of .NET 5 RC2 you can use:\n\nConvert.ToHexString(byte[] inArray) which returns a string and\nConvert.FromHexString(string s) which returns a byte[].\n\nOverloads are available that take span parameters.\n    ",
      "\nExtension methods (disclaimer: completely untested code, BTW...):\n\npublic static class ByteExtensions\n{\n    public static string ToHexString(this byte[] ba)\n    {\n        StringBuilder hex = new StringBuilder(ba.Length * 2);\n\n        foreach (byte b in ba)\n        {\n            hex.AppendFormat(\u0022{0:x2}\u0022, b);\n        }\n        return hex.ToString();\n    }\n}\n\n\netc.. Use either of Tomalak\u0027s three solutions (with the last one being an extension method on a string).\n    ",
      "\nFrom Microsoft\u0027s developers, a nice, simple conversion:\n\npublic static string ByteArrayToString(byte[] ba) \n{\n    // Concatenate the bytes into one long string\n    return ba.Aggregate(new StringBuilder(32),\n                            (sb, b) =\u003E sb.Append(b.ToString(\u0022X2\u0022))\n                            ).ToString();\n}\n\n\nWhile the above is clean and compact, performance junkies will scream about it using enumerators. You can get peak performance with an improved version of Tomalak\u0027s original answer:\n\npublic static string ByteArrayToString(byte[] ba)   \n{   \n   StringBuilder hex = new StringBuilder(ba.Length * 2);   \n\n   for(int i=0; i \u003C ba.Length; i\u002B\u002B)       // \u003C-- Use for loop is faster than foreach   \n       hex.Append(ba[i].ToString(\u0022X2\u0022));   // \u003C-- ToString is faster than AppendFormat   \n\n   return hex.ToString();   \n} \n\n\nThis is the fastest of all the routines I\u0027ve seen posted here so far. Don\u0027t just take my word for it... performance test each routine and inspect its CIL code for yourself.\n    ",
      "\nAnd for inserting into an SQL string (if you\u0027re not using command parameters):\n\npublic static String ByteArrayToSQLHexString(byte[] Source)\n{\n    return = \u00220x\u0022 \u002B BitConverter.ToString(Source).Replace(\u0022-\u0022, \u0022\u0022);\n}\n\n    ",
      "\nIn terms of speed, this seems to be better than anything here:\n\n  public static string ToHexString(byte[] data) {\n    byte b;\n    int i, j, k;\n    int l = data.Length;\n    char[] r = new char[l * 2];\n    for (i = 0, j = 0; i \u003C l; \u002B\u002Bi) {\n      b = data[i];\n      k = b \u003E\u003E 4;\n      r[j\u002B\u002B] = (char)(k \u003E 9 ? k \u002B 0x37 : k \u002B 0x30);\n      k = b \u0026 15;\n      r[j\u002B\u002B] = (char)(k \u003E 9 ? k \u002B 0x37 : k \u002B 0x30);\n    }\n    return new string(r);\n  }\n\n    ",
      "\nI did not get the code you suggested to work, Olipro. hex[i] \u002B hex[i\u002B1] apparently returned an int.\n\nI did, however have some success by taking some hints from Waleeds code and hammering this together. It\u0027s ugly as hell but it seems to work and performs at 1/3 of the time compared to the others according to my tests (using patridges testing mechanism). Depending on input size. Switching around the ?:s to separate out 0-9 first would probably yield a slightly faster result since there are more numbers than letters.\n\npublic static byte[] StringToByteArray2(string hex)\n{\n    byte[] bytes = new byte[hex.Length/2];\n    int bl = bytes.Length;\n    for (int i = 0; i \u003C bl; \u002B\u002Bi)\n    {\n        bytes[i] = (byte)((hex[2 * i] \u003E \u0027F\u0027 ? hex[2 * i] - 0x57 : hex[2 * i] \u003E \u00279\u0027 ? hex[2 * i] - 0x37 : hex[2 * i] - 0x30) \u003C\u003C 4);\n        bytes[i] |= (byte)(hex[2 * i \u002B 1] \u003E \u0027F\u0027 ? hex[2 * i \u002B 1] - 0x57 : hex[2 * i \u002B 1] \u003E \u00279\u0027 ? hex[2 * i \u002B 1] - 0x37 : hex[2 * i \u002B 1] - 0x30);\n    }\n    return bytes;\n}\n\n    ",
      "\nThis version of ByteArrayToHexViaByteManipulation could be faster.\n\nFrom my reports:\n\n\nByteArrayToHexViaByteManipulation3: 1,68 average ticks (over 1000 runs), 17,5X\nByteArrayToHexViaByteManipulation2: 1,73 average ticks (over 1000 runs), 16,9X\nByteArrayToHexViaByteManipulation: 2,90 average ticks (over 1000 runs), 10,1X\nByteArrayToHexViaLookupAndShift: 3,22 average ticks (over 1000 runs), 9,1X\n...\n\nstatic private readonly char[] hexAlphabet = new char[]\n    {\u00270\u0027,\u00271\u0027,\u00272\u0027,\u00273\u0027,\u00274\u0027,\u00275\u0027,\u00276\u0027,\u00277\u0027,\u00278\u0027,\u00279\u0027,\u0027A\u0027,\u0027B\u0027,\u0027C\u0027,\u0027D\u0027,\u0027E\u0027,\u0027F\u0027};\nstatic string ByteArrayToHexViaByteManipulation3(byte[] bytes)\n{\n    char[] c = new char[bytes.Length * 2];\n    byte b;\n    for (int i = 0; i \u003C bytes.Length; i\u002B\u002B)\n    {\n        b = ((byte)(bytes[i] \u003E\u003E 4));\n        c[i * 2] = hexAlphabet[b];\n        b = ((byte)(bytes[i] \u0026 0xF));\n        c[i * 2 \u002B 1] = hexAlphabet[b];\n    }\n    return new string(c);\n}\n\n\n\nAnd I think this one is an optimization:\n\n    static private readonly char[] hexAlphabet = new char[]\n        {\u00270\u0027,\u00271\u0027,\u00272\u0027,\u00273\u0027,\u00274\u0027,\u00275\u0027,\u00276\u0027,\u00277\u0027,\u00278\u0027,\u00279\u0027,\u0027A\u0027,\u0027B\u0027,\u0027C\u0027,\u0027D\u0027,\u0027E\u0027,\u0027F\u0027};\n    static string ByteArrayToHexViaByteManipulation4(byte[] bytes)\n    {\n        char[] c = new char[bytes.Length * 2];\n        for (int i = 0, ptr = 0; i \u003C bytes.Length; i\u002B\u002B, ptr \u002B= 2)\n        {\n            byte b = bytes[i];\n            c[ptr] = hexAlphabet[b \u003E\u003E 4];\n            c[ptr \u002B 1] = hexAlphabet[b \u0026 0xF];\n        }\n        return new string(c);\n    }\n\n    ",
      "\nI\u0027ll enter this bit fiddling competition as I have an answer that also uses bit-fiddling to decode hexadecimals. Note that using character arrays may be even faster as calling StringBuilder methods will take time as well.\n\npublic static String ToHex (byte[] data)\n{\n    int dataLength = data.Length;\n    // pre-create the stringbuilder using the length of the data * 2, precisely enough\n    StringBuilder sb = new StringBuilder (dataLength * 2);\n    for (int i = 0; i \u003C dataLength; i\u002B\u002B) {\n        int b = data [i];\n\n        // check using calculation over bits to see if first tuple is a letter\n        // isLetter is zero if it is a digit, 1 if it is a letter\n        int isLetter = (b \u003E\u003E 7) \u0026 ((b \u003E\u003E 6) | (b \u003E\u003E 5)) \u0026 1;\n\n        // calculate the code using a multiplication to make up the difference between\n        // a digit character and an alphanumerical character\n        int code = \u00270\u0027 \u002B ((b \u003E\u003E 4) \u0026 0xF) \u002B isLetter * (\u0027A\u0027 - \u00279\u0027 - 1);\n        // now append the result, after casting the code point to a character\n        sb.Append ((Char)code);\n\n        // do the same with the lower (less significant) tuple\n        isLetter = (b \u003E\u003E 3) \u0026 ((b \u003E\u003E 2) | (b \u003E\u003E 1)) \u0026 1;\n        code = \u00270\u0027 \u002B (b \u0026 0xF) \u002B isLetter * (\u0027A\u0027 - \u00279\u0027 - 1);\n        sb.Append ((Char)code);\n    }\n    return sb.ToString ();\n}\n\npublic static byte[] FromHex (String hex)\n{\n\n    // pre-create the array\n    int resultLength = hex.Length / 2;\n    byte[] result = new byte[resultLength];\n    // set validity = 0 (0 = valid, anything else is not valid)\n    int validity = 0;\n    int c, isLetter, value, validDigitStruct, validDigit, validLetterStruct, validLetter;\n    for (int i = 0, hexOffset = 0; i \u003C resultLength; i\u002B\u002B, hexOffset \u002B= 2) {\n        c = hex [hexOffset];\n\n        // check using calculation over bits to see if first char is a letter\n        // isLetter is zero if it is a digit, 1 if it is a letter (upper \u0026 lowercase)\n        isLetter = (c \u003E\u003E 6) \u0026 1;\n\n        // calculate the tuple value using a multiplication to make up the difference between\n        // a digit character and an alphanumerical character\n        // minus 1 for the fact that the letters are not zero based\n        value = ((c \u0026 0xF) \u002B isLetter * (-1 \u002B 10)) \u003C\u003C 4;\n\n        // check validity of all the other bits\n        validity |= c \u003E\u003E 7; // changed to \u003E\u003E, maybe not OK, use UInt?\n\n        validDigitStruct = (c \u0026 0x30) ^ 0x30;\n        validDigit = ((c \u0026 0x8) \u003E\u003E 3) * (c \u0026 0x6);\n        validity |= (isLetter ^ 1) * (validDigitStruct | validDigit);\n\n        validLetterStruct = c \u0026 0x18;\n        validLetter = (((c - 1) \u0026 0x4) \u003E\u003E 2) * ((c - 1) \u0026 0x2);\n        validity |= isLetter * (validLetterStruct | validLetter);\n\n        // do the same with the lower (less significant) tuple\n        c = hex [hexOffset \u002B 1];\n        isLetter = (c \u003E\u003E 6) \u0026 1;\n        value ^= (c \u0026 0xF) \u002B isLetter * (-1 \u002B 10);\n        result [i] = (byte)value;\n\n        // check validity of all the other bits\n        validity |= c \u003E\u003E 7; // changed to \u003E\u003E, maybe not OK, use UInt?\n\n        validDigitStruct = (c \u0026 0x30) ^ 0x30;\n        validDigit = ((c \u0026 0x8) \u003E\u003E 3) * (c \u0026 0x6);\n        validity |= (isLetter ^ 1) * (validDigitStruct | validDigit);\n\n        validLetterStruct = c \u0026 0x18;\n        validLetter = (((c - 1) \u0026 0x4) \u003E\u003E 2) * ((c - 1) \u0026 0x2);\n        validity |= isLetter * (validLetterStruct | validLetter);\n    }\n\n    if (validity != 0) {\n        throw new ArgumentException (\u0022Hexadecimal encoding incorrect for input \u0022 \u002B hex);\n    }\n\n    return result;\n}\n\n\nConverted from Java code.\n    ",
      "\nFor performance I would go with drphrozens solution. A tiny optimization for the decoder could be to use a table for either char to get rid of the \u0022\u003C\u003C 4\u0022.\n\nClearly the two method calls are costly. If some kind of check is made either on input or output data (could be CRC, checksum or whatever) the if (b == 255)... could be skipped and thereby also the method calls altogether.\n\nUsing offset\u002B\u002B and offset instead of offset and offset \u002B 1 might give some theoretical benefit but I suspect the compiler handles this better than me.\n\nprivate static readonly byte[] LookupTableLow = new byte[] {\n  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,\n  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,\n  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,\n  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,\n  0xFF, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,\n  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,\n  0xFF, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,\n  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF\n};\n\nprivate static readonly byte[] LookupTableHigh = new byte[] {\n  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,\n  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,\n  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,\n  0x00, 0x10, 0x20, 0x30, 0x40, 0x50, 0x60, 0x70, 0x80, 0x90, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,\n  0xFF, 0xA0, 0xB0, 0xC0, 0xD0, 0xE0, 0xF0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,\n  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,\n  0xFF, 0xA0, 0xB0, 0xC0, 0xD0, 0xE0, 0xF0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,\n  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF\n};\n\nprivate static byte LookupLow(char c)\n{\n  var b = LookupTableLow[c];\n  if (b == 255)\n    throw new IOException(\u0022Expected a hex character, got \u0022 \u002B c);\n  return b;\n}\n\nprivate static byte LookupHigh(char c)\n{\n  var b = LookupTableHigh[c];\n  if (b == 255)\n    throw new IOException(\u0022Expected a hex character, got \u0022 \u002B c);\n  return b;\n}\n\npublic static byte ToByte(char[] chars, int offset)\n{\n  return (byte)(LookupHigh(chars[offset\u002B\u002B]) | LookupLow(chars[offset]));\n}\n\n\nThis is just off the top of my head and has not been tested or benchmarked.\n    ",
      "\nYet another variation for diversity:\n\npublic static byte[] FromHexString(string src)\n{\n    if (String.IsNullOrEmpty(src))\n        return null;\n\n    int index = src.Length;\n    int sz = index / 2;\n    if (sz \u003C= 0)\n        return null;\n\n    byte[] rc = new byte[sz];\n\n    while (--sz \u003E= 0)\n    {\n        char lo = src[--index];\n        char hi = src[--index];\n\n        rc[sz] = (byte)(\n            (\n                (hi \u003E= \u00270\u0027 \u0026\u0026 hi \u003C= \u00279\u0027) ? hi - \u00270\u0027 :\n                (hi \u003E= \u0027a\u0027 \u0026\u0026 hi \u003C= \u0027f\u0027) ? hi - \u0027a\u0027 \u002B 10 :\n                (hi \u003E= \u0027A\u0027 \u0026\u0026 hi \u003C= \u0027F\u0027) ? hi - \u0027A\u0027 \u002B 10 :\n                0\n            )\n            \u003C\u003C 4 | \n            (\n                (lo \u003E= \u00270\u0027 \u0026\u0026 lo \u003C= \u00279\u0027) ? lo - \u00270\u0027 :\n                (lo \u003E= \u0027a\u0027 \u0026\u0026 lo \u003C= \u0027f\u0027) ? lo - \u0027a\u0027 \u002B 10 :\n                (lo \u003E= \u0027A\u0027 \u0026\u0026 lo \u003C= \u0027F\u0027) ? lo - \u0027A\u0027 \u002B 10 :\n                0\n            )\n        );\n    }\n\n    return rc;          \n}\n\n    ",
      "\nNot optimized for speed, but more LINQy than most answers (.NET 4.0):\n\n\u003CExtension()\u003E\nPublic Function FromHexToByteArray(hex As String) As Byte()\n    hex = If(hex, String.Empty)\n    If hex.Length Mod 2 = 1 Then hex = \u00220\u0022 \u0026 hex\n    Return Enumerable.Range(0, hex.Length \\ 2).Select(Function(i) Convert.ToByte(hex.Substring(i * 2, 2), 16)).ToArray\nEnd Function\n\n\u003CExtension()\u003E\nPublic Function ToHexString(bytes As IEnumerable(Of Byte)) As String\n    Return String.Concat(bytes.Select(Function(b) b.ToString(\u0022X2\u0022)))\nEnd Function\n\n    ",
      "\nTwo mashups which folds the two nibble operations into one.\n\nProbably pretty efficient version:\n\npublic static string ByteArrayToString2(byte[] ba)\n{\n    char[] c = new char[ba.Length * 2];\n    for( int i = 0; i \u003C ba.Length * 2; \u002B\u002Bi)\n    {\n        byte b = (byte)((ba[i\u003E\u003E1] \u003E\u003E 4*((i\u00261)^1)) \u0026 0xF);\n        c[i] = (char)(55 \u002B b \u002B (((b-10)\u003E\u003E31)\u0026-7));\n    }\n    return new string( c );\n}\n\n\nDecadent linq-with-bit-hacking version:\n\npublic static string ByteArrayToString(byte[] ba)\n{\n    return string.Concat( ba.SelectMany( b =\u003E new int[] { b \u003E\u003E 4, b \u0026 0xF }).Select( b =\u003E (char)(55 \u002B b \u002B (((b-10)\u003E\u003E31)\u0026-7))) );\n}\n\n\nAnd reverse:\n\npublic static byte[] HexStringToByteArray( string s )\n{\n    byte[] ab = new byte[s.Length\u003E\u003E1];\n    for( int i = 0; i \u003C s.Length; i\u002B\u002B )\n    {\n        int b = s[i];\n        b = (b - \u00270\u0027) \u002B (((\u00279\u0027 - b)\u003E\u003E31)\u0026-7);\n        ab[i\u003E\u003E1] |= (byte)(b \u003C\u003C 4*((i\u00261)^1));\n    }\n    return ab;\n}\n\n    ",
      "\nAnother way is by using stackalloc to reduce GC memory pressure:\n\nstatic string ByteToHexBitFiddle(byte[] bytes)\n{\n        var c = stackalloc char[bytes.Length * 2 \u002B 1];\n        int b; \n        for (int i = 0; i \u003C bytes.Length; \u002B\u002Bi)\n        {\n            b = bytes[i] \u003E\u003E 4;\n            c[i * 2] = (char)(55 \u002B b \u002B (((b - 10) \u003E\u003E 31) \u0026 -7));\n            b = bytes[i] \u0026 0xF;\n            c[i * 2 \u002B 1] = (char)(55 \u002B b \u002B (((b - 10) \u003E\u003E 31) \u0026 -7));\n        }\n        c[bytes.Length * 2 ] = \u0027\\0\u0027;\n        return new string(c);\n}\n\n    ",
      "\nHere\u0027s my shot at it. I\u0027ve created a pair of extension classes to extend string and byte. On the large file test, the performance is comparable to Byte Manipulation 2.\n\nThe code below for ToHexString is an optimized implementation of the lookup and shift algorithm. It is almost identical to the one by Behrooz, but it turns out using a foreach to iterate and a counter is faster than an explicitly indexing for.\n\nIt comes in 2nd place behind Byte Manipulation 2 on my machine and is very readable code. The following test results are also of interest:\n\nToHexStringCharArrayWithCharArrayLookup: 41,589.69 average ticks (over 1000 runs), 1.5X\nToHexStringCharArrayWithStringLookup: 50,764.06 average ticks (over 1000 runs), 1.2X\nToHexStringStringBuilderWithCharArrayLookup: 62,812.87 average ticks (over 1000 runs), 1.0X\n\nBased on the above results it seems safe to conclude that:\n\n\nThe penalties for indexing into a string to perform the lookup vs. a\nchar array are significant in the large file test.\nThe penalties for using a StringBuilder of known capacity vs. a char\narray of known size to create the string are even more significant.\n\n\nHere\u0027s the code:\n\nusing System;\n\nnamespace ConversionExtensions\n{\n    public static class ByteArrayExtensions\n    {\n        private readonly static char[] digits = new char[] { \u00270\u0027, \u00271\u0027, \u00272\u0027, \u00273\u0027, \u00274\u0027, \u00275\u0027, \u00276\u0027, \u00277\u0027, \u00278\u0027, \u00279\u0027, \u0027A\u0027, \u0027B\u0027, \u0027C\u0027, \u0027D\u0027, \u0027E\u0027, \u0027F\u0027 };\n\n        public static string ToHexString(this byte[] bytes)\n        {\n            char[] hex = new char[bytes.Length * 2];\n            int index = 0;\n\n            foreach (byte b in bytes)\n            {\n                hex[index\u002B\u002B] = digits[b \u003E\u003E 4];\n                hex[index\u002B\u002B] = digits[b \u0026 0x0F];\n            }\n\n            return new string(hex);\n        }\n    }\n}\n\n\nusing System;\nusing System.IO;\n\nnamespace ConversionExtensions\n{\n    public static class StringExtensions\n    {\n        public static byte[] ToBytes(this string hexString)\n        {\n            if (!string.IsNullOrEmpty(hexString) \u0026\u0026 hexString.Length % 2 != 0)\n            {\n                throw new FormatException(\u0022Hexadecimal string must not be empty and must contain an even number of digits to be valid.\u0022);\n            }\n\n            hexString = hexString.ToUpperInvariant();\n            byte[] data = new byte[hexString.Length / 2];\n\n            for (int index = 0; index \u003C hexString.Length; index \u002B= 2)\n            {\n                int highDigitValue = hexString[index] \u003C= \u00279\u0027 ? hexString[index] - \u00270\u0027 : hexString[index] - \u0027A\u0027 \u002B 10;\n                int lowDigitValue = hexString[index \u002B 1] \u003C= \u00279\u0027 ? hexString[index \u002B 1] - \u00270\u0027 : hexString[index \u002B 1] - \u0027A\u0027 \u002B 10;\n\n                if (highDigitValue \u003C 0 || lowDigitValue \u003C 0 || highDigitValue \u003E 15 || lowDigitValue \u003E 15)\n                {\n                    throw new FormatException(\u0022An invalid digit was encountered. Valid hexadecimal digits are 0-9 and A-F.\u0022);\n                }\n                else\n                {\n                    byte value = (byte)((highDigitValue \u003C\u003C 4) | (lowDigitValue \u0026 0x0F));\n                    data[index / 2] = value;\n                }\n            }\n\n            return data;\n        }\n    }\n}\n\n\nBelow are the test results that I got when I put my code in @patridge\u0027s testing project on my machine. I also added a test for converting to a byte array from hexadecimal. The test runs that exercised my code are ByteArrayToHexViaOptimizedLookupAndShift and HexToByteArrayViaByteManipulation. The HexToByteArrayViaConvertToByte was taken from XXXX. The HexToByteArrayViaSoapHexBinary is the one from @Mykroft\u0027s answer.\n\n\n  Intel Pentium III Xeon processor\n\n    Cores: 4 \u003Cbr/\u003E\n    Current Clock Speed: 1576 \u003Cbr/\u003E\n    Max Clock Speed: 3092 \u003Cbr/\u003E\n\n  \n  \n  \n  Converting array of bytes into hexadecimal string representation\n  \n  \n  \n  ByteArrayToHexViaByteManipulation2: 39,366.64 average ticks (over 1000 runs), 22.4X\n  \n  ByteArrayToHexViaOptimizedLookupAndShift: 41,588.64 average ticks\n  (over 1000 runs), 21.2X\n  \n  ByteArrayToHexViaLookup: 55,509.56 average ticks (over 1000 runs), 15.9X\n  \n  ByteArrayToHexViaByteManipulation: 65,349.12 average ticks (over 1000 runs), 13.5X\n  \n  ByteArrayToHexViaLookupAndShift: 86,926.87 average ticks (over 1000\n  runs), 10.2X\n  \n  ByteArrayToHexStringViaBitConverter: 139,353.73 average\n  ticks (over 1000 runs),6.3X\n  \n  ByteArrayToHexViaSoapHexBinary: 314,598.77 average ticks (over 1000 runs), 2.8X\n  \n  ByteArrayToHexStringViaStringBuilderForEachByteToString: 344,264.63\n  average ticks (over 1000 runs), 2.6X\n  \n  ByteArrayToHexStringViaStringBuilderAggregateByteToString: 382,623.44\n  average ticks (over 1000 runs), 2.3X\n  \n  ByteArrayToHexStringViaStringBuilderForEachAppendFormat: 818,111.95\n  average ticks (over 1000 runs), 1.1X\n  \n  ByteArrayToHexStringViaStringConcatArrayConvertAll: 839,244.84 average\n  ticks (over 1000 runs), 1.1X\n  \n  ByteArrayToHexStringViaStringBuilderAggregateAppendFormat: 867,303.98\n  average ticks (over 1000 runs), 1.0X\n  \n  ByteArrayToHexStringViaStringJoinArrayConvertAll: 882,710.28 average\n  ticks (over 1000 runs), 1.0X\n  \n  \n\n    ",
      "\n                \n                You\u0027re using SubString. Doesn\u0027t this loop allocate a horrible amount of string objects?\n                \n\u2013\u00A0Wim Coenen\n                Mar 6 \u002709 at 16:36\n            ",
      "\n                \n                Honestly - until it tears down performance dramatically, I would tend to ignore this and trust the Runtime and the GC to take care of it.\n                \n\u2013\u00A0Tomalak\n                Mar 6 \u002709 at 17:11\n            ",
      "\n                \n                Because a byte is two nibbles, any hex string that validly represents a byte array must have an even character count.  A 0 should not be added anywhere - to add one would be making an assumption about invalid data that is potentially dangerous.  If anything, the StringToByteArray method should throw a FormatException if the hex string contains an odd number of characters.\n                \n\u2013\u00A0David Boike\n                Mar 9 \u002710 at 19:01\n            ",
      "\n                \n                @00jt You must make an assumption that F == 0F. Either it is the same as 0F, or the input was clipped and F is actually the start of something you have not received. It is up to your context to make those assumptions, but I believe a general purpose function should reject odd characters as invalid instead of making that assumption for the calling code.\n                \n\u2013\u00A0David Boike\n                Jan 28 \u002713 at 15:35\n            ",
      "\n                \n                @DavidBoike  The question had NOTHING to do with \u0022how to handle possibly clipped stream values\u0022 Its talking about a String.  String myValue = 10.ToString(\u0022X\u0022);  myValue is \u0022A\u0022 not \u00220A\u0022.  Now go read that string back into bytes, oops you broke it.\n                \n\u2013\u00A000jt\n                Jan 30 \u002713 at 19:25\n                        \n                            \n                        \n            ",
      "\n                \n                Would you care to test the code from Waleed\u0027s answer? It seems to be very fast. stackoverflow.com/questions/311165/\u2026\n                \n\u2013\u00A0Cristian Diaconescu\n                Dec 24 \u002709 at 21:16\n            ",
      "\n                \n                Despite making the code available for you to do the very thing you requested on your own, I updated the testing code to include Waleed answer. All grumpiness aside, it is much faster.\n                \n\u2013\u00A0patridge\n                Jan 13 \u002710 at 16:29\n            ",
      "\n                \n                @CodesInChaos Done. And it won in my tests by quite a bit as well. I don\u0027t pretend to fully understand either of the top methods yet, but they are easily hidden from direct interaction.\n                \n\u2013\u00A0patridge\n                Jan 15 \u002713 at 18:01\n            ",
      "\n                \n                This answer has no intention of answering the question of what is \u0022natural\u0022 or commonplace. The goal is to give people some basic performance benchmarks since, when you need to do these conversion, you tend to do them a lot. If someone needs raw speed, they just run the benchmarks with some appropriate test data in their desired computing environment. Then, tuck that method away into an extension method where you never look its implementation again (e.g., bytes.ToHexStringAtLudicrousSpeed()).\n                \n\u2013\u00A0patridge\n                Apr 8 \u002713 at 20:37\n            ",
      "\n                \n                Just produced a high performance lookup table based implementation. Its safe variant is about 30% faster than the current leader on my CPU. The unsafe variants are even faster. stackoverflow.com/a/24343727/445517\n                \n\u2013\u00A0CodesInChaos\n                Jun 21 \u002714 at 17:12\n            ",
      "\n                \n                SoapHexBinary is available from .NET 1.0 and is in mscorlib. Despite it\u0027s funny namespace, it does exactly what the question asked.\n                \n\u2013\u00A0Sly Gryphon\n                Jun 28 \u002711 at 6:48\n            ",
      "\n                \n                Great find!  Note that you will need to pad odd strings with a leading 0 for GetStringToBytes, like the other solution.\n                \n\u2013\u00A0Carter Medlin\n                Oct 31 \u002711 at 17:10\n            ",
      "\n                \n                Have you seen the implementation thought? The accepted answer has a better one IMHO.\n                \n\u2013\u00A0mfloryan\n                Jan 26 \u002712 at 13:42\n            ",
      "\n                \n                Interesting to see the Mono implementation here: github.com/mono/mono/blob/master/mcs/class/corlib/\u2026\n                \n\u2013\u00A0Jeremy\n                Apr 29 \u002712 at 4:40\n            ",
      "\n                \n                SoapHexBinary is not supported in .NET Core/ .NET Standard...\n                \n\u2013\u00A0juFo\n                Mar 11 at 9:12\n            ",
      "\n                \n                And hex string to byte[] array?\n                \n\u2013\u00A0AaA\n                Jan 18 \u002713 at 7:56\n            ",
      "\n                \n                \u002B1 for properly citing your source after invoking that bit of black magic. All hail Cthulhu.\n                \n\u2013\u00A0Edward\n                Aug 2 \u002713 at 20:41\n            ",
      "\n                \n                What about string to byte[]?\n                \n\u2013\u00A0Syaiful Nizam Yahya\n                Nov 6 \u002713 at 10:14\n            ",
      "\n                \n                Nice! For those who need lowercase output, the expression obviously changes to 87 \u002B b \u002B (((b-10)\u003E\u003E31)\u0026-39)\n                \n\u2013\u00A0eXavier\n                Jan 6 \u002714 at 17:36\n            ",
      "\n                \n                @AaA You said \u0022byte[] array\u0022, which literally means an array of byte arrays, or byte[][]. I was just poking fun.\n                \n\u2013\u00A0CoolOppo\n                Jun 10 \u002715 at 3:09\n            ",
      "\n                \n                Even shorter: String.Concat(Array.ConvertAll(bytes, x =\u003E x.ToString(\u0022X2\u0022))\n                \n\u2013\u00A0Nestor\n                Nov 25 \u002709 at 15:04\n            ",
      "\n                \n                Even shorter: String.Concat(bytes.Select(b =\u003E b.ToString(\u0022X2\u0022))) [.NET4]\n                \n\u2013\u00A0Allon Guralnek\n                Jun 16 \u002711 at 6:39\n                        \n                            \n                        \n            ",
      "\n                \n                Only answers half the question.\n                \n\u2013\u00A0Sly Gryphon\n                Jun 28 \u002711 at 6:50\n            ",
      "\n                \n                Why does the second one need .Net 4? String.Concat is in .Net 2.0.\n                \n\u2013\u00A0Polyfun\n                Oct 17 \u002714 at 11:42\n            ",
      "\n                \n                those \u002290\u0027s style\u0022 loops are generally faster, but by a negligible enough amount that it wont matter in most contexts. Still worth mentioning though\n                \n\u2013\u00A0Austin_Anderson\n                Oct 24 \u002717 at 19:47\n            ",
      "\n                \n                Why does creating the lookup table in the unsafe version swap the nibbles of the precomputed byte ? I thought endianness only changed ordering of entities that were formed of multiple bytes.\n                \n\u2013\u00A0Raif Atef\n                Nov 5 \u002714 at 13:13\n                        \n                            \n                        \n            ",
      "\n                \n                @RaifAtef What matters here isn\u0027t the order of the nibbles. But the order of 16 bit words in a 32 bit integer. But I\u0027m considering rewriting it so the same code can run regardless of endianness.\n                \n\u2013\u00A0CodesInChaos\n                Nov 7 \u002714 at 12:09\n            ",
      "\n                \n                Re-reading the code, I think that you did this because when you cast the char* later to a uint* and assign it (when generating the hex char), the runtime/CPU will flip the bytes (since uint is not treated the same as 2 separate 16-bit chars) so you\u0027re pre-flipping them to compensate. Am I right ? Endianness is confusing :-).\n                \n\u2013\u00A0Raif Atef\n                Nov 7 \u002714 at 13:26\n            ",
      "\n                \n                This just answer half of the question... How about from hex string to bytes?\n                \n\u2013\u00A0Narvalex\n                Mar 8 \u002717 at 17:28\n            ",
      "\n                \n                @CodesInChaos I wonder if Span can be used now instead of unsafe ??\n                \n\u2013\u00A0Konrad\n                Dec 4 \u002719 at 13:12\n            ",
      "\n                \n                Only answers half the question.\n                \n\u2013\u00A0Sly Gryphon\n                Jun 28 \u002711 at 6:49\n            ",
      "\n                \n                Where is the second part of the answer?\n                \n\u2013\u00A0Sawan\n                Dec 25 \u002712 at 9:12\n            ",
      "\n                \n                not to mention that this uses the least memory. No intermediate strings created whatsoever.\n                \n\u2013\u00A0Chochos\n                Oct 16 \u002709 at 17:36\n            ",
      "\n                \n                Only answers half the question.\n                \n\u2013\u00A0Sly Gryphon\n                Jun 28 \u002711 at 6:50\n            ",
      "\n                \n                This is great because it works on basically any version of NET, including NETMF. A winner!\n                \n\u2013\u00A0Jonesome Reinstate Monica\n                Feb 6 \u002712 at 4:26\n            ",
      "\n                \n                The accepted answer provides 2 excellent HexToByteArray methods, which represent the other half of the question. Waleed\u0027s solution answers the running question of how to do this without creating a huge number of strings in the process.\n                \n\u2013\u00A0Brendten Eickstaedt\n                Oct 10 \u002712 at 16:08\n            ",
      "\n                \n                Does new string(c) copy and re-allocate or is it smart enough to know when it can simply wrap the char[]?\n                \n\u2013\u00A0jjxtra\n                Oct 15 \u002713 at 17:24\n            ",
      "\n                \n                error : {\u0022Could not find any recognizable digits.\u0022}\n                \n\u2013\u00A0Priya Jagtap\n                Apr 21 at 20:09\n            ",
      "\n                \n                Memory usage of 256 bytes is negligible when you run code on the CLR.\n                \n\u2013\u00A0dolmen\n                Aug 21 \u002713 at 0:05\n            ",
      "\n                \n                the reason is performance, when you need high performance solution. :)\n                \n\u2013\u00A0Ricky\n                Aug 4 \u002716 at 6:28\n            ",
      "\n                \n                This code assumes the hex string uses upper case alpha chars, and blows up if the hex string uses lower case alpha.  Might want to do a \u0022uppercase\u0022 conversion on the input string to be safe.\n                \n\u2013\u00A0Marc Novakowski\n                Jan 26 \u002710 at 19:17\n            ",
      "\n                \n                That\u0027s an astute observation Marc. The code was written to reverse Waleed\u0027s solution. The ToUpper call would slow down the algorithm some, but would allow it to handle lower case alpha chars.\n                \n\u2013\u00A0Chris F\n                Jan 26 \u002710 at 20:27\n            ",
      "\n                \n                Convert.ToByte(topChar \u002B bottomChar) can be written as (byte)(topChar \u002B bottomChar)\n                \n\u2013\u00A0Amir Rezaei\n                Feb 12 \u002711 at 21:17\n                        \n                            \n                        \n            ",
      "\n                \n                To handle both cases without a large performance penalty, hexString[i] \u0026= ~0x20;\n                \n\u2013\u00A0Ben Voigt\n                Jul 31 \u002714 at 22:31\n            ",
      "\n                \n                For the followers of Knuth: I did this because I need to parse a few thousand hex strings every few minutes or so, so it\u0027s important that it be as fast as possible (in the inner loop, as it were). Tomalak\u0027s solution is not notably slower if many such parses are not occurring.\n                \n\u2013\u00A0Ben Mosher\n                May 22 \u002712 at 17:01\n            ",
      "\n                \n                You should probably test the code before you offer it up for a question like this.\n                \n\u2013\u00A0jww\n                Feb 16 \u002717 at 19:08\n            ",
      "\n                \n                The iterator is not the main problem of this code. You should benchmark b.ToSting(\u0022X2\u0022).\n                \n\u2013\u00A0dolmen\n                Aug 20 \u002713 at 23:49\n            ",
      "\n                \n                if Source == null or Source.Length == 0 we have a problem sir!\n                \n\u2013\u00A0Andrei Krasutski\n                Jun 7 \u002719 at 17:37\n            ",
      "\n                \n                Hmm, I really should optimize this for Char[] and use Char internally instead of ints...\n                \n\u2013\u00A0Maarten Bodewes\n                Jan 20 \u002714 at 23:46\n            ",
      "\n                \n                For C#, initializing the variables where they are used, instead of outside the loop, is probably preferred to let the compiler optimize. I get equivalent performance either way.\n                \n\u2013\u00A0Peteter\n                Jun 12 \u002719 at 16:50\n            ",
      "\n                \n                HexStringToByteArray(\u002209\u0022) returns 0x02 which is bad\n                \n\u2013\u00A0CoperNick\n                Jul 29 \u002713 at 10:26\n            "
    ]
  },
  {
    "Id": "9458b545-dbda-4045-9040-82c2ec42936b",
    "QuestionId": 34366305,
    "Description": "The ViewData item that has the key \u0027XXX\u0027 is of type \u0027System.Int32\u0027 but must be of type \u0027IEnumerable\u003CSelectListItem\u003E\u0027",
    "Votes": 114,
    "Views": 43952,
    "Tags": [
      "c#",
      "asp.net-mvc"
    ],
    "Discussions": [
      "\nThe error means that the value of CategoryList  is null (and as a result the DropDownListFor() method expects that the first parameter is of type IEnumerable\u003CSelectListItem\u003E).\n\nYou are not generating an input for each property of each SelectListItem in CategoryList (and nor should you) so no values for the SelectList are posted to the controller method, and therefore the value of model.CategoryList in the POST method is null. If you return the view, you must first reassign the value of CategoryList, just as you did in the GET method.\n\npublic ActionResult Create(ProjectVM model)\n{\n    if (!ModelState.IsValid)\n    {\n        model.CategoryList = new SelectList(db.Categories, \u0022ID\u0022, \u0022Name\u0022); // add this\n        return View(model);\n    }\n    // Save and redirect\n}\n\n\nTo explain the inner workings (the source code can be seen here)\n\nEach overload of DropDownList() and DropDownListFor() eventually calls the following method\n\nprivate static MvcHtmlString SelectInternal(this HtmlHelper htmlHelper, ModelMetadata metadata,\n  string optionLabel, string name, IEnumerable\u003CSelectListItem\u003E selectList, bool allowMultiple,\n  IDictionary\u003Cstring, object\u003E htmlAttributes)\n\n\nwhich checks if the selectList (the second parameter of @Html.DropDownListFor()) is null\n\n// If we got a null selectList, try to use ViewData to get the list of items.\nif (selectList == null)\n{\n    selectList = htmlHelper.GetSelectData(name);\n    usedViewData = true;\n}\n\n\nwhich in turn calls \n\nprivate static IEnumerable\u003CSelectListItem\u003E GetSelectData(this HtmlHelper htmlHelper, string name)\n\n\nwhich evaluates the the first parameter of @Html.DropDownListFor() (in this case CategoryID)\n\n....\no = htmlHelper.ViewData.Eval(name);\n....\nIEnumerable\u003CSelectListItem\u003E selectList = o as IEnumerable\u003CSelectListItem\u003E;\nif (selectList == null)\n{\n    throw new InvalidOperationException(String.Format(CultureInfo.CurrentCulture, \n        MvcResources.HtmlHelper_WrongSelectDataType,\n        name, o.GetType().FullName, \u0022IEnumerable\u003CSelectListItem\u003E\u0022));\n}\n\n\nBecause property CategoryID is typeof int, it cannot be cast to IEnumerable\u003CSelectListItem\u003E and the exception is thrown (which is defined in the MvcResources.resx file as)\n\n\u003Cdata name=\u0022HtmlHelper_WrongSelectDataType\u0022 xml:space=\u0022preserve\u0022\u003E\n    \u003Cvalue\u003EThe ViewData item that has the key \u0027{0}\u0027 is of type \u0027{1}\u0027 but must be of type \u0027{2}\u0027.\u003C/value\u003E\n\u003C/data\u003E\n\n    ",
      "\naccording to stephens (user3559349) answer, this can be useful:\n\n@Html.DropDownListFor(m =\u003E m.CategoryID, Model.CategoryList ?? new List\u003CSelectListItem\u003E(), \u0022-Please select-\u0022)\n\n\nor in ProjectVM:\n\npublic class ProjectVM\n{\n    public ProjectVM()\n    {\n        CategoryList = new List\u003CSelectListItem\u003E();\n    }\n    ...\n}\n\n    ",
      "\nMost Likely Caused some sort of error redirecting to your page and you not initializing your model\u0027s drop down lists again. \n\nMake sure that you initialize your drop downs in either the model\u0027s constructor or every time before you send said model to the page. \n\nOtherwise you will need to maintain the state of the drop down lists either through the view bag or through the hidden value helpers. \n    ",
      "\nI had the same problem, I was getting an invalid ModelState when I tried to post the form. For me, this was caused by setting CategoryId to int, when I changed it to string the ModelState was valid and the Create method worked as expected.\n    ",
      "\nOK, the poster\u0027s canned answer neatly explained why the error occurred, but not how to get it to work. I\u0027m not sure that\u0027s really an answer, but it did point me in the right direction. \n\nI ran into the same issue and found a slick way to resolve it. I\u0027ll try to capture that here. Disclaimer - I work on web pages once a year or so and really don\u0027t know what I\u0027m doing most of the time. This answer should in no way be considered an \u0022expert\u0022 answer, but it does the job with little work...\n\nGiven that I have some data object (most likely a Data Transfer Object) that I want to use a drop-down list to supply valid values for a field, like so:\n\npublic class MyDataObject\n{\n  public int id;\n  public string StrValue;\n}\n\n\nThen the ViewModel looks like this:\n\npublic class MyDataObjectVM\n{\n  public int id;\n\n  public string StrValue;\n  public List\u003CSectListItem\u003E strValues;\n}\n\n\nThe real problem here, as @Stephen so eloquently described above, is the select list isn\u0027t populated on the POST method in the controller. So your controller methods would look like this:\n\n// GET\npublic ActionResult Create()\n{\n  var dataObjectVM = GetNewMyDataObjectVM();\n  return View(dataObjectVM); // I use T4MVC, don\u0027t you?\n}\n\nprivate MyDataObjectVM GetNewMyDataObjectVM(MyDataObjectVM model = null)\n{\n  return new MyDataObjectVM\n  {\n    int id = model?.Id ?? 0,\n    string StrValue = model?.StrValue ?? \u0022\u0022, \n    var strValues = new List\u003CSelectListItem\u003E \n      { \n        new SelectListItem {Text = \u0022Select\u0022, Value = \u0022\u0022},\n        new SelectListITem {Text = \u0022Item1\u0022, Value = \u0022Item1\u0022},\n        new SelectListItem {Text = \u0022Item2\u0022, Value = \u0022Item2\u0022}\n      };\n  };\n}\n\n// POST\npublic ActionResult Create(FormCollection formValues)\n{\n  var dataObject = new MyDataObject();\n\n  try\n  {\n    UpdateModel(dataObject, formValues);\n    AddObjectToObjectStore(dataObject);\n\n    return RedirectToAction(Actions.Index);\n  }\n  catch (Exception ex)\n  {\n    // fill in the drop-down list for the view model\n    var dataObjectVM = GetNewMyDataObjectVM();\n    ModelState.AddModelError(\u0022\u0022, ex.Message);\n\n    return View(dataObjectVM);\n  )\n}\n\n\nThere you have it. This is NOT working code, I copy/pasted and edited to make it simple, but you get the idea. If the data members in both the original data model and the derived view model have the same name, UpdateModel() does an awesome job of filling in just the right data for you from the FormCollection values.\n\nI\u0027m posting this here so I can find the answer when I inevitably run into this issue again -- hopefully it will help someone else out as well.\n    ",
      "\nIn my case the first ID in my list was zero, once I changed the ID to start from 1, it worked.\n    ",
      "\n                \n                @Shyju, Yes, I asked and answered it (as community wiki) purely for the purposes of dupe-hammering many other similar question on SO which remain unanswered or unaccepted. But I see the revenge voters have already started - the first one was less than 2 seconds after posting - not enough time to even read it let alone the answer.\n                \n\u2013\u00A0user3559349\n                Dec 19 \u002715 at 1:49\n                        \n                            \n                        \n            ",
      "\n                \n                I see. There are 100\u0027s  of questions with the same problem. Usually the people who ask those questions does not do proper search ( or they copied and pasted an existing answer word by word, but did not work!) So i am not sure this might really help.  :) Nicely written BTW.\n                \n\u2013\u00A0Shyju\n                Dec 19 \u002715 at 2:15\n            ",
      "\n                \n                @Stephen this is not right way u are asking and u are answering\n                \n\u2013\u00A0Dilip Oganiya\n                Dec 19 \u002715 at 5:45\n            ",
      "\n                \n                @DilipN, What do you mean not the right way? Its actually encouraged on SO. You should read this and spend some time on meta.\n                \n\u2013\u00A0user3559349\n                Dec 19 \u002715 at 5:46\n            ",
      "\n                \n                @DilipN, Because I will use it to mark numerous similar questions as a duplicates which have either been  either been left unanswered, or answered but not accepted so they can be closed out (and so others do not waste their time). I have also made it a community wiki so anyone can edit and improve it over time.\n                \n\u2013\u00A0user3559349\n                Dec 19 \u002715 at 5:54\n            "
    ]
  },
  {
    "Id": "352804ab-fa67-48a5-aa39-d005b39bc286",
    "QuestionId": 273313,
    "Description": "Randomize a List\u003CT\u003E",
    "Votes": 908,
    "Views": 473292,
    "Tags": [
      "c#",
      "generic-list"
    ],
    "Discussions": [
      "\nShuffle any (I)List with an extension method based on the Fisher-Yates shuffle:\n\nprivate static Random rng = new Random();  \n\npublic static void Shuffle\u003CT\u003E(this IList\u003CT\u003E list)  \n{  \n    int n = list.Count;  \n    while (n \u003E 1) {  \n        n--;  \n        int k = rng.Next(n \u002B 1);  \n        T value = list[k];  \n        list[k] = list[n];  \n        list[n] = value;  \n    }  \n}\n\n\nUsage:\n\nList\u003CProduct\u003E products = GetProducts();\nproducts.Shuffle();\n\n\nThe code above uses the much criticised System.Random method to select swap candidates. It\u0027s fast but not as random as it should be. If you need a better quality of randomness in your shuffles use the random number generator in System.Security.Cryptography like so:\n\nusing System.Security.Cryptography;\n...\npublic static void Shuffle\u003CT\u003E(this IList\u003CT\u003E list)\n{\n    RNGCryptoServiceProvider provider = new RNGCryptoServiceProvider();\n    int n = list.Count;\n    while (n \u003E 1)\n    {\n        byte[] box = new byte[1];\n        do provider.GetBytes(box);\n        while (!(box[0] \u003C n * (Byte.MaxValue / n)));\n        int k = (box[0] % n);\n        n--;\n        T value = list[k];\n        list[k] = list[n];\n        list[n] = value;\n    }\n}\n\n\nA simple comparison is available at this blog (WayBack Machine).\n\nEdit: Since writing this answer a couple years back, many people have commented or written to me, to point out the big silly flaw in my comparison. They are of course right. There\u0027s nothing wrong with System.Random if it\u0027s used in the way it was intended. In my first example above, I instantiate the rng variable inside of the Shuffle method, which is asking for trouble if the method is going to be called repeatedly. Below is a fixed, full example based on a really useful comment received today from @weston here on SO.\n\nProgram.cs:\n\nusing System;\nusing System.Collections.Generic;\nusing System.Threading;\n\nnamespace SimpleLottery\n{\n  class Program\n  {\n    private static void Main(string[] args)\n    {\n      var numbers = new List\u003Cint\u003E(Enumerable.Range(1, 75));\n      numbers.Shuffle();\n      Console.WriteLine(\u0022The winning numbers are: {0}\u0022, string.Join(\u0022,  \u0022, numbers.GetRange(0, 5)));\n    }\n  }\n\n  public static class ThreadSafeRandom\n  {\n      [ThreadStatic] private static Random Local;\n\n      public static Random ThisThreadsRandom\n      {\n          get { return Local ?? (Local = new Random(unchecked(Environment.TickCount * 31 \u002B Thread.CurrentThread.ManagedThreadId))); }\n      }\n  }\n\n  static class MyExtensions\n  {\n    public static void Shuffle\u003CT\u003E(this IList\u003CT\u003E list)\n    {\n      int n = list.Count;\n      while (n \u003E 1)\n      {\n        n--;\n        int k = ThreadSafeRandom.ThisThreadsRandom.Next(n \u002B 1);\n        T value = list[k];\n        list[k] = list[n];\n        list[n] = value;\n      }\n    }\n  }\n}\n\n    ",
      "\nIf we only need to shuffle items in a completely random order (just to mix the items in a list), I prefer this simple yet effective code that orders items by guid...\n\nvar shuffledcards = cards.OrderBy(a =\u003E Guid.NewGuid()).ToList();\n\n    ",
      "\nI\u0027m bit surprised by all the clunky versions of this simple algorithm here. Fisher-Yates (or Knuth shuffle) is bit tricky but very compact. Why is it tricky? Because your need to pay attention to whether your random number generator r(a,b) returns value where b is inclusive or exclusive. I\u0027ve also edited Wikipedia description so people don\u0027t blindly follow pseudocode there and create hard to detect bugs. For .Net, Random.Next(a,b) returns number exclusive of b so without further ado, here\u0027s how it can be implemented in C#/.Net:\n\npublic static void Shuffle\u003CT\u003E(this IList\u003CT\u003E list, Random rnd)\n{\n    for(var i=list.Count; i \u003E 0; i--)\n        list.Swap(0, rnd.Next(0, i));\n}\n\npublic static void Swap\u003CT\u003E(this IList\u003CT\u003E list, int i, int j)\n{\n    var temp = list[i];\n    list[i] = list[j];\n    list[j] = temp;\n}\n\n\nTry this code.\n    ",
      "\nExtension method for IEnumerable:\n\npublic static IEnumerable\u003CT\u003E Randomize\u003CT\u003E(this IEnumerable\u003CT\u003E source)\n{\n    Random rnd = new Random();\n    return source.OrderBy\u003CT, int\u003E((item) =\u003E rnd.Next());\n}\n\n    ",
      "\nIdea is get anonymous object with item and random order and then reorder items by this order and return value:\n\nvar result = items.Select(x =\u003E new { value = x, order = rnd.Next() })\n            .OrderBy(x =\u003E x.order).Select(x =\u003E x.value).ToList()\n\n    ",
      "\n    public static List\u003CT\u003E Randomize\u003CT\u003E(List\u003CT\u003E list)\n    {\n        List\u003CT\u003E randomizedList = new List\u003CT\u003E();\n        Random rnd = new Random();\n        while (list.Count \u003E 0)\n        {\n            int index = rnd.Next(0, list.Count); //pick a random item from the master list\n            randomizedList.Add(list[index]); //place it at the end of the randomized list\n            list.RemoveAt(index);\n        }\n        return randomizedList;\n    }\n\n    ",
      "\nEDIT\nThe RemoveAt is a weakness in my previous version. This solution overcomes that.\n\npublic static IEnumerable\u003CT\u003E Shuffle\u003CT\u003E(\n        this IEnumerable\u003CT\u003E source,\n        Random generator = null)\n{\n    if (generator == null)\n    {\n        generator = new Random();\n    }\n\n    var elements = source.ToArray();\n    for (var i = elements.Length - 1; i \u003E= 0; i--)\n    {\n        var swapIndex = generator.Next(i \u002B 1);\n        yield return elements[swapIndex];\n        elements[swapIndex] = elements[i];\n    }\n}\n\n\nNote the optional Random generator, if the base framework implementation of Random is not thread-safe or cryptographically strong enough for your needs, you can inject your implementation into the operation.\n\nA suitable implementation for a thread-safe cryptographically strong Random implementation can be found in this answer.\n\n\n\nHere\u0027s an idea, extend IList in a (hopefully) efficient way.\n\npublic static IEnumerable\u003CT\u003E Shuffle\u003CT\u003E(this IList\u003CT\u003E list)\n{\n    var choices = Enumerable.Range(0, list.Count).ToList();\n    var rng = new Random();\n    for(int n = choices.Count; n \u003E 1; n--)\n    {\n        int k = rng.Next(n);\n        yield return list[choices[k]];\n        choices.RemoveAt(k);\n    }\n\n    yield return list[choices[0]];\n}\n\n\n\n    ",
      "\nYou can achieve that be using this simple extension method\n\npublic static class IEnumerableExtensions\n{\n\n    public static IEnumerable\u003Ct\u003E Randomize\u003Ct\u003E(this IEnumerable\u003Ct\u003E target)\n    {\n        Random r = new Random();\n\n        return target.OrderBy(x=\u003E(r.Next()));\n    }        \n}\n\n\nand you can use it by doing the following\n\n// use this on any collection that implements IEnumerable!\n// List, Array, HashSet, Collection, etc\n\nList\u003Cstring\u003E myList = new List\u003Cstring\u003E { \u0022hello\u0022, \u0022random\u0022, \u0022world\u0022, \u0022foo\u0022, \u0022bar\u0022, \u0022bat\u0022, \u0022baz\u0022 };\n\nforeach (string s in myList.Randomize())\n{\n    Console.WriteLine(s);\n}\n\n    ",
      "\nThis is my preferred method of a shuffle when it\u0027s desirable to not modify the original. It\u0027s a variant of the Fisher\u2013Yates \u0022inside-out\u0022 algorithm that works on any enumerable sequence (the length of source does not need to be known from start).\n\npublic static IList\u003CT\u003E NextList\u003CT\u003E(this Random r, IEnumerable\u003CT\u003E source)\n{\n  var list = new List\u003CT\u003E();\n  foreach (var item in source)\n  {\n    var i = r.Next(list.Count \u002B 1);\n    if (i == list.Count)\n    {\n      list.Add(item);\n    }\n    else\n    {\n      var temp = list[i];\n      list[i] = item;\n      list.Add(temp);\n    }\n  }\n  return list;\n}\n\n\nThis algorithm can also be implemented by allocating a range from 0 to length - 1 and randomly exhausting the indices by swapping the randomly chosen index with the last index until all indices have been chosen exactly once. This above code accomplishes the exact same thing but without the additional allocation. Which is pretty neat.\n\nWith regards to the Random class it\u0027s a general purpose number generator (and If I was running a lottery I\u0027d consider using something different). It also relies on a time based seed value by default. A small alleviation of the problem is to seed the Random class with the RNGCryptoServiceProvider or you could use the RNGCryptoServiceProvider in a method similar to this (see below) to generate uniformly chosen random double floating point values but running a lottery pretty much requires understanding randomness and the nature of the randomness source.\n\nvar bytes = new byte[8];\n_secureRng.GetBytes(bytes);\nvar v = BitConverter.ToUInt64(bytes, 0);\nreturn (double)v / ((double)ulong.MaxValue \u002B 1);\n\n\nThe point of generating a random double (between 0 and 1 exclusively) is to use to scale to an integer solution. If you need to pick something from a list based on a random double x that\u0027s always going to be 0 \u003C= x \u0026\u0026 x \u003C 1 is straight forward.\n\nreturn list[(int)(x * list.Count)];\n\n\nEnjoy!\n    ",
      "\nIf you don\u0027t mind using two Lists, then this is probably the easiest way to do it, but probably not the most efficient or unpredictable one: \n\nList\u003Cint\u003E xList = new List\u003Cint\u003E() { 1, 2, 3, 4, 5 };\nList\u003Cint\u003E deck = new List\u003Cint\u003E();\n\nforeach (int xInt in xList)\n    deck.Insert(random.Next(0, deck.Count \u002B 1), xInt);\n\n    ",
      "\nIf you have a fixed number (75), you could create an array with 75 elements, then enumerate your list, moving the elements to randomized positions in the array.  You can generate the mapping of list number to array index using the Fisher-Yates shuffle.\n    ",
      "\nI usually use:\n\nvar list = new List\u003CT\u003E ();\nfillList (list);\nvar randomizedList = new List\u003CT\u003E ();\nvar rnd = new Random ();\nwhile (list.Count != 0)\n{\n    var index = rnd.Next (0, list.Count);\n    randomizedList.Add (list [index]);\n    list.RemoveAt (index);\n}\n\n    ",
      "\nJust wanted to suggest a variant using an IComparer\u003CT\u003E and List.Sort():\npublic class RandomIntComparer : IComparer\u003Cint\u003E\n{\n    private readonly Random _random = new Random();\n    \n    public int Compare(int x, int y)\n    {\n        return _random.Next(-1, 2);\n    }\n}\n\nUsage:\nlist.Sort(new RandomIntComparer());\n\n    ",
      "\n    List\u003CT\u003E OriginalList = new List\u003CT\u003E();\n    List\u003CT\u003E TempList = new List\u003CT\u003E();\n    Random random = new Random();\n    int length = OriginalList.Count;\n    int TempIndex = 0;\n\n    while (length \u003E 0) {\n        TempIndex = random.Next(0, length);  // get random value between 0 and original length\n        TempList.Add(OriginalList[TempIndex]); // add to temp list\n        OriginalList.RemoveAt(TempIndex); // remove from original list\n        length = OriginalList.Count;  // get new list \u003CT\u003E length.\n    }\n\n    OriginalList = new List\u003CT\u003E();\n    OriginalList = TempList; // copy all items from temp list to original list.\n\n    ",
      "\nHere\u0027s an efficient Shuffler that returns a byte array of shuffled values. It never shuffles more than is needed. It can be restarted from where it previously left off. My actual implementation (not shown) is a MEF component that allows a user specified replacement shuffler.\n\n    public byte[] Shuffle(byte[] array, int start, int count)\n    {\n        int n = array.Length - start;\n        byte[] shuffled = new byte[count];\n        for(int i = 0; i \u003C count; i\u002B\u002B, start\u002B\u002B)\n        {\n            int k = UniformRandomGenerator.Next(n--) \u002B start;\n            shuffled[i] = array[k];\n            array[k] = array[start];\n            array[start] = shuffled[i];\n        }\n        return shuffled;\n    }\n\n\n\u0060\n    ",
      "\nHere\u0027s a thread-safe way to do this:\n\n\n\npublic static class EnumerableExtension\n{\n    private static Random globalRng = new Random();\n\n    [ThreadStatic]\n    private static Random _rng;\n\n    private static Random rng \n    {\n        get\n        {\n            if (_rng == null)\n            {\n                int seed;\n                lock (globalRng)\n                {\n                    seed = globalRng.Next();\n                }\n                _rng = new Random(seed);\n             }\n             return _rng;\n         }\n    }\n\n    public static IEnumerable\u003CT\u003E Shuffle\u003CT\u003E(this IEnumerable\u003CT\u003E items)\n    {\n        return items.OrderBy (i =\u003E rng.Next());\n    }\n}\n\n    ",
      "\n public Deck(IEnumerable\u003CCard\u003E initialCards) \n    {\n    cards = new List\u003CCard\u003E(initialCards);\n    public void Shuffle() \n     }\n    {\n        List\u003CCard\u003E NewCards = new List\u003CCard\u003E();\n        while (cards.Count \u003E 0) \n        {\n            int CardToMove = random.Next(cards.Count);\n            NewCards.Add(cards[CardToMove]);\n            cards.RemoveAt(CardToMove);\n        }\n        cards = NewCards;\n    }\n\npublic IEnumerable\u003Cstring\u003E GetCardNames() \n\n{\n    string[] CardNames = new string[cards.Count];\n    for (int i = 0; i \u003C cards.Count; i\u002B\u002B)\n    CardNames[i] = cards[i].Name;\n    return CardNames;\n}\n\nDeck deck1;\nDeck deck2;\nRandom random = new Random();\n\npublic Form1() \n{\n\nInitializeComponent();\nResetDeck(1);\nResetDeck(2);\nRedrawDeck(1);\n RedrawDeck(2);\n\n}\n\n\n\n private void ResetDeck(int deckNumber) \n    {\n    if (deckNumber == 1) \n{\n      int numberOfCards = random.Next(1, 11);\n      deck1 = new Deck(new Card[] { });\n      for (int i = 0; i \u003C numberOfCards; i\u002B\u002B)\n           deck1.Add(new Card((Suits)random.Next(4),(Values)random.Next(1, 14)));\n       deck1.Sort();\n}\n\n\n   else\n    deck2 = new Deck();\n }\n\nprivate void reset1_Click(object sender, EventArgs e) {\nResetDeck(1);\nRedrawDeck(1);\n\n}\n\nprivate void shuffle1_Click(object sender, EventArgs e) \n{\n    deck1.Shuffle();\n    RedrawDeck(1);\n\n}\n\nprivate void moveToDeck1_Click(object sender, EventArgs e) \n{\n\n    if (listBox2.SelectedIndex \u003E= 0)\n    if (deck2.Count \u003E 0) {\n    deck1.Add(deck2.Deal(listBox2.SelectedIndex));\n\n}\n\n    RedrawDeck(1);\n    RedrawDeck(2);\n\n}\n\n    ",
      "\nA simple modification of the accepted answer that returns a new list instead of working in-place, and accepts the more general IEnumerable\u003CT\u003E as many other Linq methods do.\n\nprivate static Random rng = new Random();\n\n/// \u003Csummary\u003E\n/// Returns a new list where the elements are randomly shuffled.\n/// Based on the Fisher-Yates shuffle, which has O(n) complexity.\n/// \u003C/summary\u003E\npublic static IEnumerable\u003CT\u003E Shuffle\u003CT\u003E(this IEnumerable\u003CT\u003E list) {\n    var source = list.ToList();\n    int n = source.Count;\n    var shuffled = new List\u003CT\u003E(n);\n    shuffled.AddRange(source);\n    while (n \u003E 1) {\n        n--;\n        int k = rng.Next(n \u002B 1);\n        T value = shuffled[k];\n        shuffled[k] = shuffled[n];\n        shuffled[n] = value;\n    }\n    return shuffled;\n}\n\n    ",
      "\nI have found an interesting solution online.\n\nCourtesy: https://improveandrepeat.com/2018/08/a-simple-way-to-shuffle-your-lists-in-c/\n\nvar shuffled = myList.OrderBy(x =\u003E Guid.NewGuid()).ToList();\n    ",
      "\nHere is an implementation of the Fisher-Yates shuffle that allows specification of the number of elements to return; hence, it is not necessary to first sort the whole collection before taking your desired number of elements.\nThe sequence of swapping elements is reversed from default; and proceeds from the first element to the last element, so that retrieving a subset of the collection yields the same (partial) sequence as shuffling the whole collection:\ncollection.TakeRandom(5).SequenceEqual(collection.Shuffle().Take(5)); // true\n\nThis algorithm is based on Durstenfeld\u0027s (modern) version of the Fisher-Yates shuffle on Wikipedia.\npublic static IList\u003CT\u003E TakeRandom\u003CT\u003E(this IEnumerable\u003CT\u003E collection, int count, Random random) =\u003E shuffle(collection, count, random);\npublic static IList\u003CT\u003E Shuffle\u003CT\u003E(this IEnumerable\u003CT\u003E collection, Random random) =\u003E shuffle(collection, null, random);\nprivate static IList\u003CT\u003E shuffle\u003CT\u003E(IEnumerable\u003CT\u003E collection, int? take, Random random)\n{\n    var a = collection.ToArray();\n    var n = a.Length;\n    if (take \u003C= 0 || take \u003E n) throw new ArgumentException(\u0022Invalid number of elements to return.\u0022);\n    var end = take ?? n;\n    for (int i = 0; i \u003C end; i\u002B\u002B)\n    {\n        var j = random.Next(i, n);\n        (a[i], a[j]) = (a[j], a[i]);\n    }\n\n    if (take.HasValue) return new ArraySegment\u003CT\u003E(a, 0, take.Value);\n    return a;\n}\n\n    ",
      "\nYour question is how to randomize a list. This means:\n\nAll unique combinations should be possible of happening\nAll unique combinations should occur with the same distribution (AKA being non-biased).\n\nA large number of the answers posted for this question do NOT satisfy the two requirements above for being \u0022random\u0022.\nHere\u0027s a compact, non-biased pseudo-random function following the Fisher-Yates shuffle method.\npublic static void Shuffle\u003CT\u003E(this IList\u003CT\u003E list, Random rnd)\n{\n    for (var i = list.Count-1; i \u003E 0; i--)\n    {\n        var randomIndex = rnd.Next(i \u002B 1); //maxValue (i \u002B 1) is EXCLUSIVE\n        list.Swap(i, randomIndex); \n    }\n}\n\npublic static void Swap\u003CT\u003E(this IList\u003CT\u003E list, int indexA, int indexB)\n{\n   var temp = list[indexA];\n   list[indexA] = list[indexB];\n   list[indexB] = temp;\n}\n\n    ",
      "\nOne can use the Shuffle extension methond from morelinq package, it works on IEnumerables\n\ninstall-package morelinq\n\nusing MoreLinq;\n...    \nvar randomized = list.Shuffle();\n\n    ",
      "\nprivate List\u003CGameObject\u003E ShuffleList(List\u003CGameObject\u003E ActualList) {\n\n\n    List\u003CGameObject\u003E newList = ActualList;\n    List\u003CGameObject\u003E outList = new List\u003CGameObject\u003E();\n\n    int count = newList.Count;\n\n    while (newList.Count \u003E 0) {\n\n        int rando = Random.Range(0, newList.Count);\n\n        outList.Add(newList[rando]);\n\n        newList.RemoveAt(rando);\n\n     \n\n    }\n\n    return (outList);\n\n}\n\nusage :\nList\u003CGameObject\u003E GetShuffle = ShuffleList(ActualList);\n\n    ",
      "\nOld post for sure, but I just use a GUID.  \n\nItems = Items.OrderBy(o =\u003E Guid.NewGuid().ToString()).ToList();\n\n\nA GUID is always unique, and since it is regenerated every time the result changes each time.  \n    ",
      "\nA very simple approach to this kind of problem is to use a number of random element swap in the list.\n\nIn pseudo-code this would look like this:\n\ndo \n    r1 = randomPositionInList()\n    r2 = randomPositionInList()\n    swap elements at index r1 and index r2 \nfor a certain number of times\n\n    ",
      "\n                \n                What if list.Count is \u003E Byte.MaxValue? If n = 1000, then 255 / 1000 = 0, so the do loop will be an infinite loop since box[0] \u003C 0 is always false.\n                \n\u2013\u00A0AndrewS\n                Jun 7 \u002711 at 10:47\n            ",
      "\n                \n                I would like to point out, that the comparison is flawed. Using \u003Ccode\u003Enew Random()\u003C/code\u003E in a loop is the problem, not the randomness of \u003Ccode\u003ERandom\u003C/code\u003E Explanation\n                \n\u2013\u00A0Sven\n                Sep 29 \u002711 at 13:43\n            ",
      "\n                \n                It is a good idea to pass an instance of Random to the Shuffle method rather than create it inside as if you are calling Shuffle lots of times in quick succession (e.g. shuffling lots of short lists), the lists will all be shuffled in the same way (e.g. first item always gets moved to position 3).\n                \n\u2013\u00A0Mark Heath\n                Feb 7 \u002712 at 22:43\n            ",
      "\n                \n                Just making Random rng = new Random(); a static would solve the problem in the comparison post. As each subsequent call would follow on from the previous calls last random result.\n                \n\u2013\u00A0weston\n                Nov 28 \u002712 at 13:58\n            ",
      "\n                \n                #2, it\u0027s not clear that the version with the Crypto generator works because the max range of a byte is 255, so any list larger than that will not shuffle correctly.\n                \n\u2013\u00A0Mark Sowul\n                May 8 \u002713 at 14:37\n            ",
      "\n                \n                GUIDs are meant to be unique not random. Part of it is machine-based and another part time-based and only a small portion is random. blogs.msdn.com/b/oldnewthing/archive/2008/06/27/8659071.aspx\n                \n\u2013\u00A0Despertar\n                May 5 \u002713 at 7:00\n            ",
      "\n                \n                This is a nice elegant solution. If you want something other than a guid to generate randomness, just order by something else. Eg: var shuffledcards = cards.OrderBy(a =\u003E rng.Next()); compilr.com/grenade/sandbox/Program.cs\n                \n\u2013\u00A0grenade\n                May 27 \u002713 at 10:54\n                        \n                            \n                        \n            ",
      "\n                \n                Please no. This is wrong. \u0022ordering by random\u0022 is totally NOT a shuffle: you introduce a bias and, worse, you risk to go in infinite loops\n                \n\u2013\u00A0Vito De Tullio\n                Aug 16 \u002713 at 10:07\n            ",
      "\n                \n                @VitoDeTullio: You are misremembering. You risk infinite loops when you provide a random comparison function; a comparison function is required to produce a consistent total order. A random key is fine. This suggestion is wrong because guids are not guaranteed to be random, not because the technique of sorting by a random key is wrong.\n                \n\u2013\u00A0Eric Lippert\n                Sep 13 \u002713 at 21:30\n            ",
      "\n                \n                @Doug: NewGuid only guarantees that it gives you a unique GUID. It makes no guarantees about randomness. If you\u0027re using a GUID for a purpose other than creating a unique value, you\u0027re doing it wrong.\n                \n\u2013\u00A0Eric Lippert\n                Sep 13 \u002713 at 21:31\n            ",
      "\n                \n                @Donuts - no. If you do that you will add bias in shuffle.\n                \n\u2013\u00A0Shital Shah\n                Jul 19 \u002714 at 7:16\n            ",
      "\n                \n                By separating Swap\u003CT\u003E out to a separate method, seems like you cause a lot of unnecessary T allocations for temp.\n                \n\u2013\u00A0Clay\n                Dec 3 \u002715 at 14:52\n            ",
      "\n                \n                I\u0027d argue that LINQ could potentially slow the performance of the shuffling down, and that would be a reason not to use it, especially given the relative simplicity of the code.\n                \n\u2013\u00A0Elianora\n                Feb 12 \u002716 at 1:26\n                        \n                            \n                        \n            ",
      "\n                \n                When i = list.Count - 1, i.e. the last iteration, rnd.Next(i, list.Count) will give you i back. You therefore need i \u003C list.Count -1 as the loop condition. Well, you don\u0027t \u0027need\u0027 it, but it saves 1 iteration ;)\n                \n\u2013\u00A0Pod\n                May 28 \u002716 at 20:14\n                        \n                            \n                        \n            ",
      "\n                \n                This code does not work as expected. The last number is always 0 or list.Count-1.\n                \n\u2013\u00A0Oneiros\n                Jan 3 at 17:52\n            ",
      "\n                \n                Note that this is not thread-safe, even if used on a thread-safe list\n                \n\u2013\u00A0BlueRaja - Danny Pflughoeft\n                Sep 25 \u002712 at 3:05\n            ",
      "\n                \n                There are two significant problems with this algorithm: -- OrderBy uses a QuickSort variant to sort the items by their (ostensibly random) keys. QuickSort performance is O(N log N); in contrast, a Fisher-Yates shuffle is O(N). For a collection of 75 elements, this may not be a big deal, but the difference will become pronounced for larger collections.\n                \n\u2013\u00A0John Beyer\n                Jun 26 \u002713 at 16:47\n            ",
      "\n                \n                ...  -- Random.Next() may produce a reasonably pseudo-random distribution of values, but it does not guarantee that the values will be unique. The probability of duplicate keys grows (non-linearly) with N until it reaches certainty when N reaches 2^32\u002B1. The OrderBy QuickSort is a stable sort; thus, if multiple elements happen to get assigned the same pseudo-random index value, then their order in the output sequence will be the same as in the input sequence; thus, a bias is introduced into the \u0022shuffle\u0022.\n                \n\u2013\u00A0John Beyer\n                Jun 26 \u002713 at 17:06\n                        \n                            \n                        \n            ",
      "\n                \n                @JohnBeyer: There are far, far greater problems than that source of bias. There are only four billion possible seeds to Random, which is far, far less than the number of possible shuffles of a moderately sized set. Only a tiny fraction of the possible shuffles can be generated. That bias dwarfs the bias due to accidental collisions.\n                \n\u2013\u00A0Eric Lippert\n                Sep 13 \u002713 at 21:33\n            ",
      "\n                \n                best one liner solution\n                \n\u2013\u00A0vipin8169\n                Mar 8 \u002719 at 7:47\n            ",
      "\n                \n                You\u0027re missing a semicolon on the end fyi\n                \n\u2013\u00A0reggaeguitar\n                Apr 17 at 17:47\n            ",
      "\n                \n                If anyone is unsure about rnd add this prior to the code above  Random rnd = new Random();\n                \n\u2013\u00A0Greg Trevellick\n                May 14 at 9:28\n            ",
      "\n                \n                See stackoverflow.com/questions/4412405/\u2026\n                \n\u2013\u00A0nawfal\n                May 30 \u002713 at 23:54\n            ",
      "\n                \n                Shouldn\u0027t you do something like var listCopy = list.ToList() to avoid popping all of the items off the incoming list? I don\u0027t really see why you would want to mutate those lists to empty.\n                \n\u2013\u00A0Chris Marisic\n                Sep 17 \u002714 at 17:38\n            ",
      "\n                \n                See stackoverflow.com/questions/4412405/\u2026. you must be aware already.\n                \n\u2013\u00A0nawfal\n                May 30 \u002713 at 23:55\n            ",
      "\n                \n                @nawfal see my improved implementation.\n                \n\u2013\u00A0Jodrell\n                Jul 9 \u002714 at 7:46\n            ",
      "\n                \n                hmm fair enough. Is it GetNext or Next?\n                \n\u2013\u00A0nawfal\n                Jul 9 \u002714 at 7:57\n            ",
      "\n                \n                I would keep the Random class instance outside the function as a static variable.  Otherwise you might get the same randomization seed from the timer if called in quick succession.\n                \n\u2013\u00A0Lemonseed\n                Jun 2 \u002716 at 16:11\n            ",
      "\n                \n                An interesting note - if you instantiate the Random class rapidly within a loop, say between 0 ms and 200 ms of eachother, then you have a very high chance of getting the same randomization seed - which then results in repeating results. You can however get around this via using  Random rand = new Random(Guid.NewGuid().GetHashCode());  This effectively forces the randomization to be derived from the Guid.NewGuid()\n                \n\u2013\u00A0Baaleos\n                Feb 16 \u002718 at 16:28\n            ",
      "\n                \n                list.RemoveAt is an O(n) operation, which makes this implementation prohibitively slow.\n                \n\u2013\u00A0George Polevoy\n                May 14 \u002717 at 21:09\n            ",
      "\n                \n                Welcome to Stack Overflow! Please consider adding some explanation to your answer, rather than just a huge block of code. Our goal here is to educate people so that they understand the answer and can apply it in other situations. If you comment your code and add an explanation, you will make your answer more helpful not just to the person who asked the question this time, but to anyone in the future who may be having the same problem.\n                \n\u2013\u00A0starsplusplus\n                Jun 16 \u002714 at 19:14\n            ",
      "\n                \n                Most of this code is entirely irrelevant to the question, and the only useful part basically repeats Adam Tegen\u0027s answer from almost 6 years ago.\n                \n\u2013\u00A0T.C.\n                Jun 16 \u002714 at 19:16\n                        \n                            \n                        \n            ",
      "\n                \n                Note that the first requirement will depend on the PRNG (or other RNG) at least as much as it depends on the shuffling method.  For example, if the PRNG\u0027s period is less than the number of permutations on the list, then there are some permutations that PRNG can\u0027t choose.  (This is with the understanding that for some applications and for a big enough list, it\u0027s generally more important to have shuffles act random than to choose from among all permutations.)\n                \n\u2013\u00A0Peter O.\n                Aug 12 at 8:08\n                        \n                            \n                        \n            ",
      "\n                \n                Sub-optimal variant of fisher-yates, that also destroys source list. The accepted answer is the best way, no need to post more ways to do this.\n                \n\u2013\u00A0Lasse V. Karlsen\n                Nov 6 at 7:41\n            ",
      "\n                \n                Compact, but do you have a reference on the sorting of consecutive newGuids to be high quality random? Some versions of quid/uuid have time stamps and other non-random parts.\n                \n\u2013\u00A0Johan Lundberg\n                Dec 10 \u002715 at 14:47\n            ",
      "\n                \n                This answer has already been given, and worse it is designed for uniqueness not randomness.\n                \n\u2013\u00A0Alex Angas\n                Jan 4 \u002716 at 22:21\n            ",
      "\n                \n                One problem with this approach is knowing when to stop. It also has a tendency to exaggerate any biases in the pseudo-random number generator.\n                \n\u2013\u00A0Mark Bessey\n                Nov 7 \u002708 at 19:58\n            ",
      "\n                \n                Yes. Highly inefficient. There is no reason to use an approach like this when better, faster approaches exist that are just as simple.\n                \n\u2013\u00A0PeterAllenWebb\n                Nov 7 \u002708 at 21:25\n            ",
      "\n                \n                not very efficient or effective... Running it N times would likely leave many elements in their original position.\n                \n\u2013\u00A0NSjonas\n                Dec 7 \u002712 at 21:46\n            "
    ]
  },
  {
    "Id": "c604451e-23b8-4e48-b0c0-2bdc633292c6",
    "QuestionId": 40373595,
    "Description": "The model item passed into the dictionary is of type .. but this dictionary requires a model item of type",
    "Votes": 84,
    "Views": 96965,
    "Tags": [
      "c#",
      "asp.net-mvc"
    ],
    "Discussions": [
      "\nThe error means that you\u0027re navigating to a view whose model is declared as typeof Foo (by using @model Foo), but you actually passed it a model which is typeof Bar (note the term dictionary is used because a model is passed to the view via a ViewDataDictionary).\n\nThe error can be caused by\n\nPassing the wrong model from a controller method to a view (or partial view)\n\nCommon examples include using a query that creates an anonymous object (or collection of anonymous objects) and passing it to the view\n\n\n\nvar model = db.Foos.Select(x =\u003E new\n{\n    ID = x.ID,\n    Name = x.Name\n};\nreturn View(model); // passes an anonymous object to a view declared with @model Foo\n\n\nor passing a collection of objects to a view that expect a single object\n\nvar model = db.Foos.Where(x =\u003E x.ID == id);\nreturn View(model); // passes IEnumerable\u003CFoo\u003E to a view declared with @model Foo\n\n\nThe error can be easily identified at compile time by explicitly declaring the model type in the controller to match the model in the view rather than using var.\n\nPassing the wrong model from a view to a partial view\n\nGiven the following model\n\npublic class Foo\n{\n    public Bar MyBar { get; set; }\n}\n\n\nand a main view declared with @model Foo and a partial view declared with @model Bar, then\n\nFoo model = db.Foos.Where(x =\u003E x.ID == id).Include(x =\u003E x.Bar).FirstOrDefault();\nreturn View(model);\n\n\nwill return the correct model to the main view. However the exception will be thrown if the view includes\n\n@Html.Partial(\u0022_Bar\u0022) // or @{ Html.RenderPartial(\u0022_Bar\u0022); }\n\n\nBy default, the model passed to the partial view is the model declared in the main view and you need to use\n\n@Html.Partial(\u0022_Bar\u0022, Model.MyBar) // or @{ Html.RenderPartial(\u0022_Bar\u0022, Model.MyBar); }\n\n\nto pass the instance of Bar to the partial view.  Note also that if the value of MyBar is null (has not been initialized), then by default Foo will be passed to the partial, in which case, it needs to be\n\n@Html.Partial(\u0022_Bar\u0022, new Bar())\n\n\nDeclaring a model in a layout\n\nIf a layout file includes a model declaration, then all views that use that layout must declare the same model, or a model that derives from that model.\n\nIf you want to include the html for a separate model in a Layout, then in the Layout, use @Html.Action(...) to call a [ChildActionOnly] method initializes that model and returns a partial view for it.\n    ",
      "\nThis question already has a great answer, but I ran into the same error, in a different scenario: displaying a List in an EditorTemplate.\n\nI have a model like this:\n\npublic class Foo\n{\n    public string FooName { get; set; }\n    public List\u003CBar\u003E Bars { get; set; }\n}\n\npublic class Bar\n{\n    public string BarName { get; set; }\n}\n\n\nAnd this is my main view: \n\n@model Foo\n\n@Html.TextBoxFor(m =\u003E m.Name, new { @class = \u0022form-control\u0022 })  \n@Html.EditorFor(m =\u003E m.Bars)\n\n\nAnd this is my Bar EditorTemplate (Bar.cshtml)\n\n@model List\u003CBar\u003E\n\n\u003Cdiv class=\u0022some-style\u0022\u003E\n    @foreach (var item in Model)\n    {\n        \u003Clabel\u003E@item.BarName\u003C/label\u003E\n    }\n\u003C/div\u003E\n\n\nAnd I got this error:\n\n\n  The model item passed into the dictionary is of type \u0027Bar\u0027, but this\n  dictionary requires a model item of type\n  \u0027System.Collections.Generic.List\u00601[Bar]\n\n\n\n\nThe reason for this error is that EditorFor already iterates the List for you, so if you pass a collection to it, it would display the editor template once for each item in the collection.\n\nThis is how I fixed this problem:\n\nBrought the styles outside of the editor template, and into the main view:\n\n@model Foo\n\n@Html.TextBoxFor(m =\u003E m.Name, new { @class = \u0022form-control\u0022 })  \n\u003Cdiv class=\u0022some-style\u0022\u003E\n    @Html.EditorFor(m =\u003E m.Bars)\n\u003C/div\u003E\n\n\nAnd changed the EditorTemplate (Bar.cshtml) to this:\n\n@model Bar\n\n\u003Clabel\u003E@Model.BarName\u003C/label\u003E\n\n    ",
      "\nObserve if the view has the model required:\n\nView\n\n@model IEnumerable\u003CWFAccess.Models.ViewModels.SiteViewModel\u003E\n\n\u003Cdiv class=\u0022row\u0022\u003E\n    \u003Ctable class=\u0022table table-striped table-hover table-width-custom\u0022\u003E\n        \u003Cthead\u003E\n            \u003Ctr\u003E\n....\n\n\nController\n\n[HttpGet]\npublic ActionResult ListItems()\n{\n    SiteStore site = new SiteStore();\n    site.GetSites();\n\n    IEnumerable\u003CSiteViewModel\u003E sites =\n        site.SitesList.Select(s =\u003E new SiteViewModel\n        {\n            Id = s.Id,\n            Type = s.Type\n        });\n\n    return PartialView(\u0022_ListItems\u0022, sites);\n}\n\n\nIn my case I Use a partial view but runs in normal views\n    ",
      "\n                \n                \u002B1 for \u0022Note also that if the value of MyBar is null (has not been initialized), then by default Foo will be passed to the partial, in which case, it needs to be\u0022. Very important note.\n                \n\u2013\u00A0Smix\n                Mar 8 \u002718 at 6:48\n            ",
      "\n                \n                I\u0027m getting the same error by having a Partial View within a Layout, with no model type defined. The Partial View crashes because it receives the model from the index page when none is defined nor needed, and if I set the partial model to IndexModel, then the ViewData property is null!?? How to fix this scenario? Moving the partial into the layout does work but I want to understand how it works.\n                \n\u2013\u00A0Etienne Charland\n                Mar 4 \u002719 at 7:59\n                        \n                            \n                        \n            ",
      "\n                \n                I ran into the same error when my partial view had \u0022@page\u0022 at the top without \u0022@model\u0022. removing \u0022@page\u0022 solved the problem.\n                \n\u2013\u00A0EKanadily\n                Jun 7 \u002719 at 14:07\n            ",
      "\n                \n                If you want to intentionally send a null model to the partial view when Model.MyBar is null, you can do this:  @Html.Partial(\u0022_Bar\u0022, Model.MyBar, new System.Web.Mvc.ViewDataDictionary())  Source: https://stackoverflow.com/a/713921/4888725\n                \n\u2013\u00A0Kirk Grover\n                Jul 9 \u002719 at 19:21\n                        \n                            \n                        \n            ",
      "\n                \n                @Smix this is a VERY helpful comment. Just ran into this.\n                \n\u2013\u00A0contactmatt\n                Nov 20 at 3:13\n            ",
      "\n                \n                Awesome, you just saved me after half an hour scratching my head. Works for ASP.NET Core 3.1 MVC, too.\n                \n\u2013\u00A0Uwe Keim\n                Apr 16 at 11:35\n            ",
      "\n                \n                What does this have to do with the question?\n                \n\u2013\u00A0user3559349\n                Nov 17 \u002717 at 20:45\n            ",
      "\n                \n                @StephenMuecke this champs - The model item passed into the dictionary is of type Bar but this dictionary requires a model item of type Foo\n                \n\u2013\u00A0CelzioBR\n                Nov 21 \u002717 at 13:37\n                        \n                            \n                        \n            "
    ]
  },
  {
    "Id": "6620b3bf-1421-4ef3-84f5-fa55178430fc",
    "QuestionId": 158706,
    "Description": "How do I properly clean up Excel interop objects?",
    "Votes": 762,
    "Views": 317895,
    "Tags": [
      "c#",
      "excel",
      "interop",
      "com-interop"
    ],
    "Discussions": [
      "\nExcel does not quit because your application is still holding references to COM objects.\n\nI guess you\u0027re invoking at least one member of a COM object without assigning it to a variable.\n\nFor me it was the excelApp.Worksheets object which I directly used without assigning it to a variable:\n\nWorksheet sheet = excelApp.Worksheets.Open(...);\n...\nMarshal.ReleaseComObject(sheet);\n\n\nI didn\u0027t know that internally C# created a wrapper for the Worksheets COM object which didn\u0027t get released by my code (because I wasn\u0027t aware of it) and was the cause why Excel was not unloaded.\n\nI found the solution to my problem on this page, which also has a nice rule for the usage of COM objects in C#:\n\n\n  Never use two dots with COM objects.\n\n\n\n\nSo with this knowledge the right way of doing the above is:\n\nWorksheets sheets = excelApp.Worksheets; // \u003C-- The important part\nWorksheet sheet = sheets.Open(...);\n...\nMarshal.ReleaseComObject(sheets);\nMarshal.ReleaseComObject(sheet);\n\n\nPOST MORTEM UPDATE:\n\nI want every reader to read this answer by Hans Passant very carefully as it explains the trap I and lots of other developers stumbled into. When I wrote this answer years ago I didn\u0027t know about the effect the debugger has to the garbage collector and drew the wrong conclusions. I keep my answer unaltered for the sake of history but please read this link and don\u0027t go the way of \u0022the two dots\u0022: Understanding garbage collection in .NET and Clean up Excel Interop Objects with IDisposable\n    ",
      "\nYou can actually release your Excel Application object cleanly, but you do have to take care. \n\nThe advice to maintain a named reference for absolutely every COM object you access and then explicitly release it via Marshal.FinalReleaseComObject() is correct in theory, but, unfortunately, very difficult to manage in practice. If one ever slips anywhere and uses \u0022two dots\u0022, or iterates cells via a for each loop, or any other similar kind of command, then you\u0027ll have unreferenced COM objects and risk a hang. In this case, there would be no way to find the cause in the code; you would have to review all your code by eye and hopefully find the cause, a task that could be nearly impossible for a large project.\n\nThe good news is that you do not actually have to maintain a named variable reference to every COM object you use. Instead, call GC.Collect() and then GC.WaitForPendingFinalizers() to release all the (usually minor) objects to which you do not hold a reference, and then explicitly release the objects to which you do hold a named variable reference. \n\nYou should also release your named references in reverse order of importance: range objects first, then worksheets, workbooks, and then finally your Excel Application object.\n\nFor example, assuming that you had a Range object variable named xlRng, a Worksheet variable named xlSheet, a Workbook variable named xlBook and an Excel Application variable named xlApp, then your cleanup code could look something like the following:\n\n// Cleanup\nGC.Collect();\nGC.WaitForPendingFinalizers();\n\nMarshal.FinalReleaseComObject(xlRng);\nMarshal.FinalReleaseComObject(xlSheet);\n\nxlBook.Close(Type.Missing, Type.Missing, Type.Missing);\nMarshal.FinalReleaseComObject(xlBook);\n\nxlApp.Quit();\nMarshal.FinalReleaseComObject(xlApp);\n\n\nIn most code examples you\u0027ll see for cleaning up COM objects from .NET, the GC.Collect() and GC.WaitForPendingFinalizers() calls are made TWICE as in:\n\nGC.Collect();\nGC.WaitForPendingFinalizers();\nGC.Collect();\nGC.WaitForPendingFinalizers();\n\n\nThis should not be required, however, unless you are using Visual Studio Tools for Office (VSTO), which uses finalizers that cause an entire graph of objects to be promoted in the finalization queue. Such objects would not be released until the next garbage collection. However, if you are not using VSTO, you should be able to call GC.Collect() and GC.WaitForPendingFinalizers() just once.\n\nI know that explicitly calling GC.Collect() is a no-no (and certainly doing it twice sounds very painful), but there is no way around it, to be honest. Through normal operations you will generate hidden objects to which you hold no reference that you, therefore, cannot release through any other means other than calling GC.Collect().\n\nThis is a complex topic, but this really is all there is to it. Once you establish this template for your cleanup procedure you can code normally, without the need for wrappers, etc. :-)\n\nI have a tutorial on this here:\n\nAutomating Office Programs with VB.Net / COM Interop\n\nIt\u0027s written for VB.NET, but don\u0027t be put off by that, the principles are exactly the same as when using C#.\n    ",
      "\nPreface: my answer contains two solutions, so be careful when reading and don\u0027t miss anything.\n\nThere are different ways and advice of how to make Excel instance unload, such as:  \n\n\nReleasing EVERY com object explicitly\nwith Marshal.FinalReleaseComObject()\n(not forgetting about implicitly\ncreated com-objects). To release\nevery created com object, you may use\nthe rule of 2 dots mentioned here:\nHow do I properly clean up Excel interop objects?\nCalling GC.Collect() and\nGC.WaitForPendingFinalizers() to make\nCLR release unused com-objects * (Actually, it works, see my second solution for details)\nChecking if com-server-application\nmaybe shows a message box waiting for\nthe user to answer (though I am not\nsure it can prevent Excel from\nclosing, but I heard about it a few\ntimes)\nSending WM_CLOSE message to the main\nExcel window\nExecuting the function that works\nwith Excel in a separate AppDomain.\nSome people believe Excel instance\nwill be shut, when AppDomain is\nunloaded.\nKilling all excel instances which were instantiated after our excel-interoping code started.\n\n\nBUT! Sometimes all these options just don\u0027t help or can\u0027t be appropriate!\n\nFor example, yesterday I found out that in one of my functions (which works with excel) Excel keeps running after the function ends. I tried everything! I thoroughly checked the whole function 10 times and added Marshal.FinalReleaseComObject() for everything! I also had GC.Collect() and GC.WaitForPendingFinalizers(). I checked for hidden message boxes. I tried to send WM_CLOSE message to the main Excel window. I executed my function in a separate AppDomain and unloaded that domain. Nothing helped! The option with closing all excel instances is inappropriate, because if the user starts another Excel instance manually, during execution of my function which works also with Excel, then that instance will also be closed by my function. I bet the user will not be happy! So, honestly, this is a lame option (no offence guys). So I spent a couple of hours before I found a good (in my humble opinion) solution: Kill excel process by hWnd of its main window (it\u0027s the first solution).\n\nHere is the simple code:\n\n[DllImport(\u0022user32.dll\u0022)]\nprivate static extern uint GetWindowThreadProcessId(IntPtr hWnd, out uint lpdwProcessId);\n\n/// \u003Csummary\u003E Tries to find and kill process by hWnd to the main window of the process.\u003C/summary\u003E\n/// \u003Cparam name=\u0022hWnd\u0022\u003EHandle to the main window of the process.\u003C/param\u003E\n/// \u003Creturns\u003ETrue if process was found and killed. False if process was not found by hWnd or if it could not be killed.\u003C/returns\u003E\npublic static bool TryKillProcessByMainWindowHwnd(int hWnd)\n{\n    uint processID;\n    GetWindowThreadProcessId((IntPtr)hWnd, out processID);\n    if(processID == 0) return false;\n    try\n    {\n        Process.GetProcessById((int)processID).Kill();\n    }\n    catch (ArgumentException)\n    {\n        return false;\n    }\n    catch (Win32Exception)\n    {\n        return false;\n    }\n    catch (NotSupportedException)\n    {\n        return false;\n    }\n    catch (InvalidOperationException)\n    {\n        return false;\n    }\n    return true;\n}\n\n/// \u003Csummary\u003E Finds and kills process by hWnd to the main window of the process.\u003C/summary\u003E\n/// \u003Cparam name=\u0022hWnd\u0022\u003EHandle to the main window of the process.\u003C/param\u003E\n/// \u003Cexception cref=\u0022ArgumentException\u0022\u003E\n/// Thrown when process is not found by the hWnd parameter (the process is not running). \n/// The identifier of the process might be expired.\n/// \u003C/exception\u003E\n/// \u003Cexception cref=\u0022Win32Exception\u0022\u003ESee Process.Kill() exceptions documentation.\u003C/exception\u003E\n/// \u003Cexception cref=\u0022NotSupportedException\u0022\u003ESee Process.Kill() exceptions documentation.\u003C/exception\u003E\n/// \u003Cexception cref=\u0022InvalidOperationException\u0022\u003ESee Process.Kill() exceptions documentation.\u003C/exception\u003E\npublic static void KillProcessByMainWindowHwnd(int hWnd)\n{\n    uint processID;\n    GetWindowThreadProcessId((IntPtr)hWnd, out processID);\n    if (processID == 0)\n        throw new ArgumentException(\u0022Process has not been found by the given main window handle.\u0022, \u0022hWnd\u0022);\n    Process.GetProcessById((int)processID).Kill();\n}\n\n\nAs you can see I provided two methods, according to Try-Parse pattern (I think it is appropriate here): one method doesn\u0027t throw the exception if the Process could not be killed (for example the process doesn\u0027t exist anymore), and another method throws the exception if the Process was not killed. The only weak place in this code is security permissions. Theoretically, the user may not have permissions to kill the process, but in 99.99% of all cases, user has such permissions. I also tested it with a guest account - it works perfectly.\n\nSo, your code, working with Excel, can look like this:\n\nint hWnd = xl.Application.Hwnd;\n// ...\n// here we try to close Excel as usual, with xl.Quit(),\n// Marshal.FinalReleaseComObject(xl) and so on\n// ...\nTryKillProcessByMainWindowHwnd(hWnd);\n\n\nVoila! Excel is terminated! :)\n\nOk, let\u0027s go back to the second solution, as I promised in the beginning of the post.\nThe second solution is to call GC.Collect() and GC.WaitForPendingFinalizers(). Yes, they actually work, but you need to be careful here!\nMany people say (and I said) that calling GC.Collect() doesn\u0027t help. But the reason it wouldn\u0027t help is if there are still references to COM objects! One of the most popular reasons for GC.Collect() not being helpful is running the project in Debug-mode. In debug-mode objects that are not really referenced anymore will not be garbage collected until the end of the method.\nSo, if you tried GC.Collect() and GC.WaitForPendingFinalizers() and it didn\u0027t help, try to do the following:  \n\n1) Try to run your project in Release mode and check if Excel closed correctly  \n\n2) Wrap the method of working with Excel in a separate method.\nSo, instead of something like this:\n\nvoid GenerateWorkbook(...)\n{\n  ApplicationClass xl;\n  Workbook xlWB;\n  try\n  {\n    xl = ...\n    xlWB = xl.Workbooks.Add(...);\n    ...\n  }\n  finally\n  {\n    ...\n    Marshal.ReleaseComObject(xlWB)\n    ...\n    GC.Collect();\n    GC.WaitForPendingFinalizers();\n  }\n}\n\n\nyou write:\n\nvoid GenerateWorkbook(...)\n{\n  try\n  {\n    GenerateWorkbookInternal(...);\n  }\n  finally\n  {\n    GC.Collect();\n    GC.WaitForPendingFinalizers();\n  }\n}\n\nprivate void GenerateWorkbookInternal(...)\n{\n  ApplicationClass xl;\n  Workbook xlWB;\n  try\n  {\n    xl = ...\n    xlWB = xl.Workbooks.Add(...);\n    ...\n  }\n  finally\n  {\n    ...\n    Marshal.ReleaseComObject(xlWB)\n    ...\n  }\n}\n\n\nNow, Excel will close =)\n    ",
      "\nUPDATE: Added C# code, and link to Windows Jobs\n\nI spent sometime trying to figure out this problem, and at the time XtremeVBTalk was the most active and responsive.  Here is a link to my original post, Closing an Excel Interop process cleanly, even if your application crashes. Below is a summary of the post, and the code copied to this post. \n\n\nClosing the Interop process with Application.Quit() and Process.Kill() works for the most part, but fails if the applications crashes catastrophically. I.e. if the app crashes, the Excel process will still be running loose.\nThe solution is to let the OS handle the cleanup of your processes through Windows Job Objects using Win32 calls.  When your main application dies, the associated processes (i.e. Excel) will get terminated as well.  \n\n\nI found this to be a clean solution because the OS is doing real work of cleaning up.  All you have to do is register the Excel process.\n\nWindows Job Code\n\nWraps the Win32 API Calls to register Interop processes.\n\npublic enum JobObjectInfoType\n{\n    AssociateCompletionPortInformation = 7,\n    BasicLimitInformation = 2,\n    BasicUIRestrictions = 4,\n    EndOfJobTimeInformation = 6,\n    ExtendedLimitInformation = 9,\n    SecurityLimitInformation = 5,\n    GroupInformation = 11\n}\n\n[StructLayout(LayoutKind.Sequential)]\npublic struct SECURITY_ATTRIBUTES\n{\n    public int nLength;\n    public IntPtr lpSecurityDescriptor;\n    public int bInheritHandle;\n}\n\n[StructLayout(LayoutKind.Sequential)]\nstruct JOBOBJECT_BASIC_LIMIT_INFORMATION\n{\n    public Int64 PerProcessUserTimeLimit;\n    public Int64 PerJobUserTimeLimit;\n    public Int16 LimitFlags;\n    public UInt32 MinimumWorkingSetSize;\n    public UInt32 MaximumWorkingSetSize;\n    public Int16 ActiveProcessLimit;\n    public Int64 Affinity;\n    public Int16 PriorityClass;\n    public Int16 SchedulingClass;\n}\n\n[StructLayout(LayoutKind.Sequential)]\nstruct IO_COUNTERS\n{\n    public UInt64 ReadOperationCount;\n    public UInt64 WriteOperationCount;\n    public UInt64 OtherOperationCount;\n    public UInt64 ReadTransferCount;\n    public UInt64 WriteTransferCount;\n    public UInt64 OtherTransferCount;\n}\n\n[StructLayout(LayoutKind.Sequential)]\nstruct JOBOBJECT_EXTENDED_LIMIT_INFORMATION\n{\n    public JOBOBJECT_BASIC_LIMIT_INFORMATION BasicLimitInformation;\n    public IO_COUNTERS IoInfo;\n    public UInt32 ProcessMemoryLimit;\n    public UInt32 JobMemoryLimit;\n    public UInt32 PeakProcessMemoryUsed;\n    public UInt32 PeakJobMemoryUsed;\n}\n\npublic class Job : IDisposable\n{\n    [DllImport(\u0022kernel32.dll\u0022, CharSet = CharSet.Unicode)]\n    static extern IntPtr CreateJobObject(object a, string lpName);\n\n    [DllImport(\u0022kernel32.dll\u0022)]\n    static extern bool SetInformationJobObject(IntPtr hJob, JobObjectInfoType infoType, IntPtr lpJobObjectInfo, uint cbJobObjectInfoLength);\n\n    [DllImport(\u0022kernel32.dll\u0022, SetLastError = true)]\n    static extern bool AssignProcessToJobObject(IntPtr job, IntPtr process);\n\n    private IntPtr m_handle;\n    private bool m_disposed = false;\n\n    public Job()\n    {\n        m_handle = CreateJobObject(null, null);\n\n        JOBOBJECT_BASIC_LIMIT_INFORMATION info = new JOBOBJECT_BASIC_LIMIT_INFORMATION();\n        info.LimitFlags = 0x2000;\n\n        JOBOBJECT_EXTENDED_LIMIT_INFORMATION extendedInfo = new JOBOBJECT_EXTENDED_LIMIT_INFORMATION();\n        extendedInfo.BasicLimitInformation = info;\n\n        int length = Marshal.SizeOf(typeof(JOBOBJECT_EXTENDED_LIMIT_INFORMATION));\n        IntPtr extendedInfoPtr = Marshal.AllocHGlobal(length);\n        Marshal.StructureToPtr(extendedInfo, extendedInfoPtr, false);\n\n        if (!SetInformationJobObject(m_handle, JobObjectInfoType.ExtendedLimitInformation, extendedInfoPtr, (uint)length))\n            throw new Exception(string.Format(\u0022Unable to set information.  Error: {0}\u0022, Marshal.GetLastWin32Error()));\n    }\n\n    #region IDisposable Members\n\n    public void Dispose()\n    {\n        Dispose(true);\n        GC.SuppressFinalize(this);\n    }\n\n    #endregion\n\n    private void Dispose(bool disposing)\n    {\n        if (m_disposed)\n            return;\n\n        if (disposing) {}\n\n        Close();\n        m_disposed = true;\n    }\n\n    public void Close()\n    {\n        Win32.CloseHandle(m_handle);\n        m_handle = IntPtr.Zero;\n    }\n\n    public bool AddProcess(IntPtr handle)\n    {\n        return AssignProcessToJobObject(m_handle, handle);\n    }\n\n}\n\n\nNote about Constructor code\n\n\nIn the constructor, the info.LimitFlags = 0x2000; is called. 0x2000 is the JOB_OBJECT_LIMIT_KILL_ON_JOB_CLOSE enum value, and this value is defined by MSDN as:\n\n\n\n  Causes all processes associated with the job to terminate when the\n  last handle to the job is closed.\n\n\nExtra Win32 API Call to get the Process ID (PID)\n\n    [DllImport(\u0022user32.dll\u0022, SetLastError = true)]\n    public static extern uint GetWindowThreadProcessId(IntPtr hWnd, out uint lpdwProcessId);\n\n\nUsing the code\n\n    Excel.Application app = new Excel.ApplicationClass();\n    Job job = new Job();\n    uint pid = 0;\n    Win32.GetWindowThreadProcessId(new IntPtr(app.Hwnd), out pid);\n    job.AddProcess(Process.GetProcessById((int)pid).Handle);\n\n    ",
      "\nThis worked for a project I was working on:\n\nexcelApp.Quit();\nMarshal.ReleaseComObject (excelWB);\nMarshal.ReleaseComObject (excelApp);\nexcelApp = null;\n\n\nWe learned that it was important to set every reference to an Excel COM object to null when you were done with it. This included Cells, Sheets, and everything.\n    ",
      "\nFirst - you never have to call Marshal.ReleaseComObject(...) or Marshal.FinalReleaseComObject(...) when doing Excel interop. It is a confusing anti-pattern, but any information about this, including from Microsoft, that indicates you have to manually release COM references from .NET is incorrect. The fact is that the .NET runtime and garbage collector correctly keep track of and clean up COM references. For your code, this means you can remove the whole \u0060while (...) loop at the top.\n\nSecond, if you want to ensure that the COM references to an out-of-process COM object are cleaned up when your process ends (so that the Excel process will close), you need to ensure that the garbage collector runs. You do this correctly with calls to GC.Collect() and GC.WaitForPendingFinalizers(). Calling this twice is safe, and ensures that cycles are definitely cleaned up too (though I\u0027m not sure it\u0027s needed, and would appreciate an example that shows this).\n\nThird, when running under the debugger, local references will be artificially kept alive until the end of the method (so that local variable inspection works). So  GC.Collect() calls are not effective for cleaning object like rng.Cells from the same method. You should split the code doing the COM interop from the GC cleanup into separate methods. (This was a key discovery for me, from one part of the answer posted here by @nightcoder.)\n\nThe general pattern would thus be:\n\nSub WrapperThatCleansUp()\n\n    \u0027 NOTE: Don\u0027t call Excel objects in here... \n    \u0027       Debugger would keep alive until end, preventing GC cleanup\n\n    \u0027 Call a separate function that talks to Excel\n    DoTheWork()\n\n    \u0027 Now let the GC clean up (twice, to clean up cycles too)\n    GC.Collect()    \n    GC.WaitForPendingFinalizers()\n    GC.Collect()    \n    GC.WaitForPendingFinalizers()\n\nEnd Sub\n\nSub DoTheWork()\n    Dim app As New Microsoft.Office.Interop.Excel.Application\n    Dim book As Microsoft.Office.Interop.Excel.Workbook = app.Workbooks.Add()\n    Dim worksheet As Microsoft.Office.Interop.Excel.Worksheet = book.Worksheets(\u0022Sheet1\u0022)\n    app.Visible = True\n    For i As Integer = 1 To 10\n        worksheet.Cells.Range(\u0022A\u0022 \u0026 i).Value = \u0022Hello\u0022\n    Next\n    book.Save()\n    book.Close()\n    app.Quit()\n\n    \u0027 NOTE: No calls the Marshal.ReleaseComObject() are ever needed\nEnd Sub\n\n\nThere is a lot of false information and confusion about this issue, including many posts on MSDN and on Stack Overflow (and especially this question!).\n\nWhat finally convinced me to have a closer look and figure out the right advice was blog post Marshal.ReleaseComObject Considered Dangerous together with finding the issue with references kept alive under the debugger that was confusing my earlier testing.\n    ",
      "\nAnything that is in the Excel namespace needs to be released. Period\n\nYou can\u0027t be doing:\n\nWorksheet ws = excel.WorkBooks[1].WorkSheets[1];\n\n\nYou have to be doing\n\nWorkbooks books = excel.WorkBooks;\nWorkbook book = books[1];\nSheets sheets = book.WorkSheets;\nWorksheet ws = sheets[1];\n\n\nfollowed by the releasing of the objects.\n    ",
      "\nI found a useful generic template that can help implement the correct disposal pattern for COM objects, that need Marshal.ReleaseComObject called when they go out of scope:\n\nUsage:\n\nusing (AutoReleaseComObject\u003CApplication\u003E excelApplicationWrapper = new AutoReleaseComObject\u003CApplication\u003E(new Application()))\n{\n    try\n    {\n        using (AutoReleaseComObject\u003CWorkbook\u003E workbookWrapper = new AutoReleaseComObject\u003CWorkbook\u003E(excelApplicationWrapper.ComObject.Workbooks.Open(namedRangeBase.FullName, false, false, missing, missing, missing, true, missing, missing, true, missing, missing, missing, missing, missing)))\n        {\n           // do something with your workbook....\n        }\n    }\n    finally\n    {\n         excelApplicationWrapper.ComObject.Quit();\n    } \n}\n\n\nTemplate:\n\npublic class AutoReleaseComObject\u003CT\u003E : IDisposable\n{\n    private T m_comObject;\n    private bool m_armed = true;\n    private bool m_disposed = false;\n\n    public AutoReleaseComObject(T comObject)\n    {\n        Debug.Assert(comObject != null);\n        m_comObject = comObject;\n    }\n\n#if DEBUG\n    ~AutoReleaseComObject()\n    {\n        // We should have been disposed using Dispose().\n        Debug.WriteLine(\u0022Finalize being called, should have been disposed\u0022);\n\n        if (this.ComObject != null)\n        {\n            Debug.WriteLine(string.Format(\u0022ComObject was not null:{0}, name:{1}.\u0022, this.ComObject, this.ComObjectName));\n        }\n\n        //Debug.Assert(false);\n    }\n#endif\n\n    public T ComObject\n    {\n        get\n        {\n            Debug.Assert(!m_disposed);\n            return m_comObject;\n        }\n    }\n\n    private string ComObjectName\n    {\n        get\n        {\n            if(this.ComObject is Microsoft.Office.Interop.Excel.Workbook)\n            {\n                return ((Microsoft.Office.Interop.Excel.Workbook)this.ComObject).Name;\n            }\n\n            return null;\n        }\n    }\n\n    public void Disarm()\n    {\n        Debug.Assert(!m_disposed);\n        m_armed = false;\n    }\n\n    #region IDisposable Members\n\n    public void Dispose()\n    {\n        Dispose(true);\n#if DEBUG\n        GC.SuppressFinalize(this);\n#endif\n    }\n\n    #endregion\n\n    protected virtual void Dispose(bool disposing)\n    {\n        if (!m_disposed)\n        {\n            if (m_armed)\n            {\n                int refcnt = 0;\n                do\n                {\n                    refcnt = System.Runtime.InteropServices.Marshal.ReleaseComObject(m_comObject);\n                } while (refcnt \u003E 0);\n\n                m_comObject = default(T);\n            }\n\n            m_disposed = true;\n        }\n    }\n}\n\n\nReference:\n\nhttp://www.deez.info/sengelha/2005/02/11/useful-idisposable-class-3-autoreleasecomobject/\n    ",
      "\nI cant believe this problem has haunted the world for 5 years.... If you have created an application, you need to shut it down first before removing the link.\n\nobjExcel = new Excel.Application();  \nobjBook = (Excel.Workbook)(objExcel.Workbooks.Add(Type.Missing)); \n\n\nwhen closing\n\nobjBook.Close(true, Type.Missing, Type.Missing); \nobjExcel.Application.Quit();\nobjExcel.Quit(); \n\n\nWhen you new an excel application, it opens a excel program in the background. You need to command that excel program to quit before you release the link because that excel program is not part of your direct control. Therefore, it will stay open if the link is released!\n\nGood programming everyone~~\n    ",
      "\nCommon developers, none of your solutions worked for me, \nso I decide to implement a new trick.\n\nFirst let specify \u0022What is our goal?\u0022 =\u003E \u0022Not to see excel object after our job in task manager\u0022 \n\nOk. Let no to challenge and start destroying it, but consider not to destroy other instance os Excel which are running in parallel.\n\nSo , get the list of current processors and fetch PID of EXCEL processes , then once your job is done, we have a new guest in processes list with a unique PID ,find and destroy just that one.\n\n\u003C keep in mind any new excel process during your excel job will be detected as new and destroyed \u003E\n \u003C A better solution is to capture PID of new created excel object and just destroy that\u003E\n\nProcess[] prs = Process.GetProcesses();\nList\u003Cint\u003E excelPID = new List\u003Cint\u003E();\nforeach (Process p in prs)\n   if (p.ProcessName == \u0022EXCEL\u0022)\n       excelPID.Add(p.Id);\n\n.... // your job \n\nprs = Process.GetProcesses();\nforeach (Process p in prs)\n   if (p.ProcessName == \u0022EXCEL\u0022 \u0026\u0026 !excelPID.Contains(p.Id))\n       p.Kill();\n\n\nThis resolves my issue, hope yours too.\n    ",
      "\nThis sure seems like it has been over-complicated. From my experience, there are just three key things to get Excel to close properly:\n\n1: make sure there are no remaining references to the excel application you created (you should only have one anyway; set it to null)\n\n2: call GC.Collect()\n\n3: Excel has to be closed, either by the user manually closing the program, or by you calling Quit on the Excel object. (Note that Quit will function just as if the user tried to close the program, and will present a confirmation dialog if there are unsaved changes, even if Excel is not visible. The user could press cancel, and then Excel will not have been closed.)\n\n1 needs to happen before 2, but 3 can happen anytime.\n\nOne way to implement this is to wrap the interop Excel object with your own class, create the interop instance in the constructor, and implement IDisposable with Dispose looking something like\n\nif (!mDisposed) {\n   mExcel = null;\n   GC.Collect();\n   mDisposed = true;\n}\n\n\nThat will clean up excel from your program\u0027s side of things. Once Excel is closed (manually by the user or by you calling Quit) the process will go away. If the program has already been closed, then the process will disappear on the GC.Collect() call.\n\n(I\u0027m not sure how important it is, but you may want a GC.WaitForPendingFinalizers() call after the GC.Collect() call but it is not strictly necessary to get rid of the Excel process.)\n\nThis has worked for me without issue for years. Keep in mind though that while this works, you actually have to close gracefully for it to work. You will still get accumulating excel.exe processes if you interrupt your program before Excel is cleaned up (usually by hitting \u0022stop\u0022 while your program is being debugged).\n    ",
      "\nTo add to reasons why Excel does not close, even when you create direct refrences to each object upon read, creation, is the \u0027For\u0027 loop.\n\nFor Each objWorkBook As WorkBook in objWorkBooks \u0027local ref, created from ExcelApp.WorkBooks to avoid the double-dot\n   objWorkBook.Close \u0027or whatever\n   FinalReleaseComObject(objWorkBook)\n   objWorkBook = Nothing\nNext \n\n\u0027The above does not work, and this is the workaround:\n\nFor intCounter As Integer = 1 To mobjExcel_WorkBooks.Count\n   Dim objTempWorkBook As Workbook = mobjExcel_WorkBooks.Item(intCounter)\n   objTempWorkBook.Saved = True\n   objTempWorkBook.Close(False, Type.Missing, Type.Missing)\n   FinalReleaseComObject(objTempWorkBook)\n   objTempWorkBook = Nothing\nNext\n\n    ",
      "\nI\u0027ve traditionally followed the advice found in VVS\u0027s answer.  However, in an effort to keep this answer up-to-date with the latest options, I think all my future projects will use the \u0022NetOffice\u0022 library.\n\nNetOffice is a complete replacement for the Office PIAs and is completely version-agnostic. It\u0027s a collection of Managed COM wrappers that can handle the cleanup that often causes such headaches when working with Microsoft Office in .NET.\n\nSome key features are:\n\n\nMostly version-independent (and version-dependant features are documented)\nNo dependencies\nNo PIA\nNo registration\nNo VSTO\n\n\nI am in no way affiliated with the project; I just genuinely appreciate the stark reduction in headaches.\n    ",
      "\nThe accepted answer here is correct, but also take note that not only \u0022two dot\u0022 references need to be avoided, but also objects that are retrieved via the index.  You also do not need to wait until you are finished with the program to clean up these objects, it\u0027s best to create functions that will clean them up as soon as you\u0027re finished with them, when possible.  Here is a function I created that assigns some properties of a Style object called xlStyleHeader:\n\npublic Excel.Style xlStyleHeader = null;\n\nprivate void CreateHeaderStyle()\n{\n    Excel.Styles xlStyles = null;\n    Excel.Font xlFont = null;\n    Excel.Interior xlInterior = null;\n    Excel.Borders xlBorders = null;\n    Excel.Border xlBorderBottom = null;\n\n    try\n    {\n        xlStyles = xlWorkbook.Styles;\n        xlStyleHeader = xlStyles.Add(\u0022Header\u0022, Type.Missing);\n\n        // Text Format\n        xlStyleHeader.NumberFormat = \u0022@\u0022;\n\n        // Bold\n        xlFont = xlStyleHeader.Font;\n        xlFont.Bold = true;\n\n        // Light Gray Cell Color\n        xlInterior = xlStyleHeader.Interior;\n        xlInterior.Color = 12632256;\n\n        // Medium Bottom border\n        xlBorders = xlStyleHeader.Borders;\n        xlBorderBottom = xlBorders[Excel.XlBordersIndex.xlEdgeBottom];\n        xlBorderBottom.Weight = Excel.XlBorderWeight.xlMedium;\n    }\n    catch (Exception ex)\n    {\n        throw ex;\n    }\n    finally\n    {\n        Release(xlBorderBottom);\n        Release(xlBorders);\n        Release(xlInterior);\n        Release(xlFont);\n        Release(xlStyles);\n    }\n}\n\nprivate void Release(object obj)\n{\n    // Errors are ignored per Microsoft\u0027s suggestion for this type of function:\n    // http://support.microsoft.com/default.aspx/kb/317109\n    try\n    {\n        System.Runtime.InteropServices.Marshal.ReleaseComObject(obj);\n    }\n    catch { } \n}\n\n\nNotice that I had to set xlBorders[Excel.XlBordersIndex.xlEdgeBottom] to a variable in order to clean that up (Not because of the two dots, which refer to an enumeration which does not need to be released, but because the object I\u0027m referring to is actually a Border object that does need to be released).\n\nThis sort of thing is not really necessary in standard applications, which do a great job of cleaning up after themselves, but in ASP.NET applications, if you miss even one of these, no matter how often you call the garbage collector, Excel will still be running on your server.  \n\nIt requires a lot of attention to detail and many test executions while monitoring the Task Manager when writing this code, but doing so saves you the hassle of desperately searching through pages of code to find the one instance you missed.  This is especially important when working in loops, where you need to release EACH INSTANCE of an object, even though it uses the same variable name each time it loops.\n    ",
      "\nAfter trying\n\n\nRelease COM objects in reverse order\nAdd GC.Collect() and GC.WaitForPendingFinalizers() twice at the end\nNo more than two dots\nClose workbook and quit application\nRun in release mode\n\n\nthe final solution that works for me is to move one set of\n\nGC.Collect();\nGC.WaitForPendingFinalizers();\n\n\nthat we added to the end of the function to a wrapper, as follows:\n\nprivate void FunctionWrapper(string sourcePath, string targetPath)\n{\n    try\n    {\n        FunctionThatCallsExcel(sourcePath, targetPath);\n    }\n    finally\n    {\n        GC.Collect();\n        GC.WaitForPendingFinalizers();\n    }\n}\n\n    ",
      "\nI followed this exactly... But I still ran into issues 1 out of 1000 times. Who knows why. Time to bring out the hammer...\n\nRight after the Excel Application class is instantiated I get a hold of the Excel process that was just created.\n\nexcel = new Microsoft.Office.Interop.Excel.Application();\nvar process = Process.GetProcessesByName(\u0022EXCEL\u0022).OrderByDescending(p =\u003E p.StartTime).First();\n\n\nThen once I\u0027ve done all the above COM clean-up, I make sure that process isn\u0027t running. If it is still running, kill it!\n\nif (!process.HasExited)\n   process.Kill();\n\n    ",
      "\n\u00A8\u00B0\u00BA\u00A4\u00F8\u201E\u00B8 Shoot Excel proc and chew bubble gum \u00B8\u201E\u00F8\u00A4\u00BA\u00B0\u00A8\n\npublic class MyExcelInteropClass\n{\n    Excel.Application xlApp;\n    Excel.Workbook xlBook;\n\n    public void dothingswithExcel() \n    {\n        try { /* Do stuff manipulating cells sheets and workbooks ... */ }\n        catch {}\n        finally {KillExcelProcess(xlApp);}\n    }\n\n    static void KillExcelProcess(Excel.Application xlApp)\n    {\n        if (xlApp != null)\n        {\n            int excelProcessId = 0;\n            GetWindowThreadProcessId(xlApp.Hwnd, out excelProcessId);\n            Process p = Process.GetProcessById(excelProcessId);\n            p.Kill();\n            xlApp = null;\n        }\n    }\n\n    [DllImport(\u0022user32.dll\u0022)]\n    static extern int GetWindowThreadProcessId(int hWnd, out int lpdwProcessId);\n}\n\n    ",
      "\nYou need to be aware that Excel is very sensitive to the culture you are running under as well.\n\nYou may find that you need to set the culture to EN-US before calling Excel functions.\nThis does not apply to all functions - but some of them.\n\n    CultureInfo en_US = new System.Globalization.CultureInfo(\u0022en-US\u0022); \n    System.Threading.Thread.CurrentThread.CurrentCulture = en_US;\n    string filePathLocal = _applicationObject.ActiveWorkbook.Path;\n    System.Threading.Thread.CurrentThread.CurrentCulture = orgCulture;\n\n\nThis applies even if you are using VSTO.\n\nFor details: http://support.microsoft.com/default.aspx?scid=kb;en-us;Q320369\n    ",
      "\n\u0022Never use two dots with COM objects\u0022 is a great rule of thumb to avoid leakage of COM references, but Excel PIA can lead to leakage in more ways than apparent at first sight.\nOne of these ways is subscribing to any event exposed by any of the Excel object model\u0027s COM objects.\nFor example, subscribing to the Application class\u0027s WorkbookOpen event.\nSome theory on COM events\nCOM classes expose a group of events through call-back interfaces. In order to subscribe to events, the client code can simply register an object implementing the call-back interface and the COM class will invoke its methods in response to specific events. Since the call-back interface is a COM interface, it is the duty of the implementing object to decrement the reference count of any COM object it receives (as a parameter) for any of the event handlers.\nHow Excel PIA expose COM Events\nExcel PIA exposes COM events of Excel Application class as conventional .NET events. Whenever the client code subscribes to a .NET event (emphasis on \u0027a\u0027), PIA creates an instance of a class implementing the call-back interface and registers it with Excel.\nHence, a number of call-back objects get registered with Excel in response to different subscription requests from the .NET code. One call-back object per event subscription.\nA call-back interface for event handling means that, PIA has to subscribe to all interface events for every .NET event subscription request. It cannot pick and choose. On receiving an event call-back, the call-back object checks if the associated .NET event handler is interested in the current event or not and then either invokes the handler or silently ignores the call-back.\nEffect on COM instance reference counts\nAll these call-back objects do not decrement the reference count of any of the COM objects they receive (as parameters) for any of the call-back methods (even for the ones that are silently ignored). They rely solely on the CLR garbage collector to free up the COM objects.\nSince GC run is non-deterministic, this can lead to the holding off of Excel process for a longer duration than desired and create an impression of a \u0027memory leak\u0027.\nSolution\nThe only solution as of now is to avoid the PIA\u2019s event provider for the COM class and write your own event provider which deterministically releases COM objects.\nFor the Application class, this can be done by implementing the AppEvents interface and then registering the implementation with Excel by using IConnectionPointContainer interface. The Application class (and for that matter all COM objects exposing events using callback mechanism) implements the IConnectionPointContainer interface.\n    ",
      "\nAs others have pointed out, you need to create an explicit reference for every Excel object you use, and call Marshal.ReleaseComObject on that reference, as described in this KB article.  You also need to use try/finally to ensure ReleaseComObject is always called, even when an exception is thrown.  I.e. instead of:\n\nWorksheet sheet = excelApp.Worksheets(1)\n... do something with sheet\n\n\nyou need to do something like:\n\nWorksheets sheets = null;\nWorksheet sheet = null\ntry\n{ \n    sheets = excelApp.Worksheets;\n    sheet = sheets(1);\n    ...\n}\nfinally\n{\n    if (sheets != null) Marshal.ReleaseComObject(sheets);\n    if (sheet != null) Marshal.ReleaseComObject(sheet);\n}\n\n\nYou also need to call Application.Quit before releasing the Application object if you want Excel to close.\n\nAs you can see, this quickly becomes extremely unwieldy as soon as you try to do anything even moderately complex.  I have successfully developed .NET applications with a simple wrapper class that wraps a few simple manipulations of the Excel object model (open a workbook, write to a Range, save/close the workbook etc).  The wrapper class implements IDisposable, carefully implements Marshal.ReleaseComObject on every object it uses, and does not pubicly expose any Excel objects to the rest of the app.\n\nBut this approach doesn\u0027t scale well for more complex requirements.  \n\nThis is a big deficiency of .NET COM Interop.  For more complex scenarios, I would seriously consider writing an ActiveX DLL in VB6 or other unmanaged language to which you can delegate all interaction with out-proc COM objects such as Office.  You can then reference this ActiveX DLL from your .NET application, and things will be much easier as you will only need to release this one reference.\n    ",
      "\nWhen all the stuff above didn\u0027t work, try giving Excel some time to close its sheets:\n\napp.workbooks.Close();\nThread.Sleep(500); // adjust, for me it works at around 300\u002B\napp.Quit();\n\n...\nFinalReleaseComObject(app);\n\n    ",
      "\nMake sure that you release all objects related to Excel!\n\nI spent a few hours by trying several ways. All are great ideas but I finally found my mistake: If you don\u0027t release all objects, none of the ways above can help you like in my case. Make sure you release all objects including range one!\n\nExcel.Range rng = (Excel.Range)worksheet.Cells[1, 1];\nworksheet.Paste(rng, false);\nreleaseObject(rng);\n\n\nThe options are together here.\n    ",
      "\nA great article on releasing COM objects is 2.5 Releasing COM Objects (MSDN).\n\nThe method that I would advocate is to null your Excel.Interop references if they are non-local variables, and then call GC.Collect() and GC.WaitForPendingFinalizers() twice. Locally scoped Interop variables will be taken care of automatically.\n\nThis removes the need to keep a named reference for every COM object.\n\nHere\u0027s an example taken from the article:\n\npublic class Test {\n\n    // These instance variables must be nulled or Excel will not quit\n    private Excel.Application xl;\n    private Excel.Workbook book;\n\n    public void DoSomething()\n    {\n        xl = new Excel.Application();\n        xl.Visible = true;\n        book = xl.Workbooks.Add(Type.Missing);\n\n        // These variables are locally scoped, so we need not worry about them.\n        // Notice I don\u0027t care about using two dots.\n        Excel.Range rng = book.Worksheets[1].UsedRange;\n    }\n\n    public void CleanUp()\n    {\n        book = null;\n        xl.Quit();\n        xl = null;\n\n        GC.Collect();\n        GC.WaitForPendingFinalizers();\n        GC.Collect();\n        GC.WaitForPendingFinalizers();\n    }\n}\n\n\nThese words are straight from the article:\n\n\n  In almost all situations, nulling the RCW reference and forcing a garbage collection will clean up properly. If you also call GC.WaitForPendingFinalizers, garbage collection will be as deterministic as you can make it. That is, you\u0027ll be pretty sure exactly when the object has been cleaned up\u2014on the return from the second call to WaitForPendingFinalizers. As an alternative, you can use Marshal.ReleaseComObject. However, note that you are very unlikely to ever need to use this method.\n\n    ",
      "\nThe two dots rule did not work for me. In my case I created a method to clean my resources as follows:\n\nprivate static void Clean()\n{\n    workBook.Close();\n    Marshall.ReleaseComObject(workBook);\n    excel.Quit();\n    CG.Collect();\n    CG.WaitForPendingFinalizers();\n}\n\n    ",
      "\nMy solution\n\n[DllImport(\u0022user32.dll\u0022)]\nstatic extern int GetWindowThreadProcessId(int hWnd, out int lpdwProcessId);\n\nprivate void GenerateExcel()\n{\n    var excel = new Microsoft.Office.Interop.Excel.Application();\n    int id;\n    // Find the Excel Process Id (ath the end, you kill him\n    GetWindowThreadProcessId(excel.Hwnd, out id);\n    Process excelProcess = Process.GetProcessById(id);\n\ntry\n{\n    // Your code\n}\nfinally\n{\n    excel.Quit();\n\n    // Kill him !\n    excelProcess.Kill();\n}\n\n    ",
      "\nYou should be very careful using Word/Excel interop applications. After trying all the solutions we still had a lot of \u0022WinWord\u0022 process left open on server (with more than 2000 users).\n\nAfter working on the problem for hours, I realized that if I open more than a couple of documents using Word.ApplicationClass.Document.Open() on different threads simultaneously, IIS worker process (w3wp.exe) would crash leaving all WinWord processes open!\n\nSo I guess there is no absolute solution to this problem, but switching to other methods such as Office Open XML development.\n    ",
      "\nThe accepted answer did not work for me. The following code in the destructor did the job.\n\nif (xlApp != null)\n{\n    xlApp.Workbooks.Close();\n    xlApp.Quit();\n}\n\nSystem.Diagnostics.Process[] processArray = System.Diagnostics.Process.GetProcessesByName(\u0022EXCEL\u0022);\nforeach (System.Diagnostics.Process process in processArray)\n{\n    if (process.MainWindowTitle.Length == 0) { process.Kill(); }\n}\n\n    ",
      "\nI am currently working on Office automation and have stumbled across a solution for this that works every time for me. It is simple and does not involve killing any processes.\n\nIt seems that by merely looping through the current active processes, and in any way \u0027accessing\u0027 an open Excel process, any stray hanging instance of Excel will be removed. The below code simply checks for processes where the name is \u0027Excel\u0027, then writes the MainWindowTitle property of the process to a string. This \u0027interaction\u0027 with the process seems to make Windows catch up and abort the frozen instance of Excel. \n\nI run the below method just before the add-in which I am developing quits, as it fires it unloading event. It removes any hanging instances of Excel every time. In all honesty I am not entirely sure why this works, but it works well for me and could be placed at the end of any Excel application without having to worry about double dots, Marshal.ReleaseComObject, nor killing processes. I would be very interested in any suggestions as to why this is effective.\n\npublic static void SweepExcelProcesses()\n{           \n            if (Process.GetProcessesByName(\u0022EXCEL\u0022).Length != 0)\n            {\n                Process[] processes = Process.GetProcesses();\n                foreach (Process process in processes)\n                {\n                    if (process.ProcessName.ToString() == \u0022excel\u0022)\n                    {                           \n                        string title = process.MainWindowTitle;\n                    }\n                }\n            }\n}\n\n    ",
      "\nI think that some of that is just the way that the framework handles Office applications, but I could be wrong. On some days, some applications clean up the processes immediately, and other days it seems to wait until the application closes. In general, I quit paying attention to the details and just make sure that there aren\u0027t any extra processes floating around at the end of the day.\n\nAlso, and maybe I\u0027m over simplifying things, but I think you can just...\n\nobjExcel = new Excel.Application();\nobjBook = (Excel.Workbook)(objExcel.Workbooks.Add(Type.Missing));\nDoSomeStuff(objBook);\nSaveTheBook(objBook);\nobjBook.Close(false, Type.Missing, Type.Missing);\nobjExcel.Quit();\n\n\nLike I said earlier, I don\u0027t tend to pay attention to the details of when the Excel process appears or disappears, but that usually works for me.  I also don\u0027t like to keep Excel processes around for anything other than the minimal amount of time, but I\u0027m probably just being paranoid on that.\n    ",
      "\nAs some have probably already written, it\u0027s not just important how you close the Excel (object); it\u0027s also important how you open it and also by the type of the project.\n\nIn a WPF application, basically the same code is working without or with very few problems.\n\nI have a project in which the same Excel file is being processed several times for different parameter value - e.g. parsing it based on values inside a generic list. \n\nI put all Excel-related functions into the base class, and parser into a subclass (different parsers use common Excel functions). I didn\u0027t want that Excel is opened and closed again for each item in a generic list, so I\u0027ve opened it only once in the base class and close it in the subclass. I had problems when moving the code into a desktop application. I\u0027ve tried many of the above mentioned solutions. GC.Collect() was already implemented before, twice as suggested.\n\nThen I\u0027ve decided that I will move the code for opening Excel to a subclass. Instead of opening only once, now I create a new object (base class) and open Excel for every item and close it at the end. There is some performance penalty, but based on several tests Excel processes are closing without problems (in debug mode), so also temporary files are removed. I will continue with testing and write some more if I will get some updates.\n\nThe bottom line is: You must also check the initialize code, especially if you have many classes, etc.\n    ",
      "\n                \n                Then I suggest not using Excel from COM and save yourself all of the trouble. The Excel 2007 formats can be used without ever opening Excel, gorgeous.\n                \n\u2013\u00A0user7116\n                Dec 18 \u002709 at 17:35\n            ",
      "\n                \n                I did not understand what \u0022two dots\u0022 mean. Can you please explain?\n                \n\u2013\u00A0A9S6\n                Jan 27 \u002710 at 13:18\n            ",
      "\n                \n                This means, you shouldn\u0027t use the pattern comObject.Property.PropertiesProperty (you see the two dots?). Instead assign comObject.Property to a variable and use and dispose that variable.  A more formal version of the above rule could be sth. like \u0022Assign com object to variables before you use them. This includes com objects that are properties of another com object.\u0022\n                \n\u2013\u00A0VVS\n                Feb 4 \u002710 at 10:37\n            ",
      "\n                \n                @Nick: Actually, you don\u0027t need any kind of cleanup, since the garbage collector will do it for you. The only thing you need to do is to assign every COM object to its own variable so the GC knows of it.\n                \n\u2013\u00A0VVS\n                Oct 18 \u002710 at 7:42\n                        \n                            \n                        \n            ",
      "\n                \n                @VSS thats bollocks, the GC cleans up everything since the wrapper variables are made by the .net framework. It just might take forever for the GC to clean it up. Calling GC.Collect after heavy interop isn\u0027t a bad idear.\n                \n\u2013\u00A0CodingBarfield\n                Aug 11 \u002711 at 8:28\n            ",
      "\n                \n                A related discussion can be found on the ExtremeVBTalk .NET Office Automation forum, here: xtremevbtalk.com/showthread.php?t=303928.\n                \n\u2013\u00A0Mike Rosenblum\n                Jan 24 \u002709 at 15:15\n            ",
      "\n                \n                And if all else fails, then Process.Kill() can be used (as a last resort) as described here: stackoverflow.com/questions/51462/\u2026\n                \n\u2013\u00A0Mike Rosenblum\n                Feb 7 \u002709 at 18:56\n            ",
      "\n                \n                Glad it worked Richard. :-)  And here is a subtle example where simply avoiding \u0022two dots\u0022 is not sufficient to prevent a problem: stackoverflow.com/questions/4964663/\u2026\n                \n\u2013\u00A0Mike Rosenblum\n                Feb 13 \u002711 at 17:22\n            ",
      "\n                \n                Here\u0027s an opinion on this from Misha Shneerson of Microsoft on the topic, within the comment date Oct. 7, 2010. (blogs.msdn.com/b/csharpfaq/archive/2010/09/28/\u2026)\n                \n\u2013\u00A0Mike Rosenblum\n                Apr 24 \u002711 at 2:00\n            ",
      "\n                \n                I\u0027m hoping this helps a persistent problem we\u0027re having. Is it safe to do the garbage collection and release calls within a finally block?\n                \n\u2013\u00A0Brett Green\n                May 19 \u002715 at 18:01\n                        \n                            \n                        \n            ",
      "\n                \n                sad that the thread is already so old that your excellent answer appears that far below, which I think is the only reason for it not being upvoted more times...\n                \n\u2013\u00A0chiccodoro\n                May 4 \u002710 at 16:32\n            ",
      "\n                \n                I have to admit, when I first read your answer, I thought it was a giant kludge.  After about 6 hours of wrestling with this (everything is released, I\u0027ve got no double dots, etc..), I now think your answer is genius.\n                \n\u2013\u00A0Mark\n                Aug 27 \u002710 at 15:53\n            ",
      "\n                \n                Thanks for this.  Been wrestling with an Excel that wouldn\u0027t close no matter what for a couple of days before I found this.  Excellent.\n                \n\u2013\u00A0BBlake\n                Oct 19 \u002710 at 15:27\n            ",
      "\n                \n                @nightcoder: awesome answer, really detailed. Your comments with respect to debug mode are very true and important that you pointed this out. The same code in release mode can often be fine. Process.Kill however, is only good when using automation, not when your program is running within Excel, e.g., as a managed COM add-in.\n                \n\u2013\u00A0Mike Rosenblum\n                Dec 29 \u002711 at 18:10\n            ",
      "\n                \n                @DanM: Your approach is 100% correct and will never fail. By keeping all your variables local to the method, all references are effectively unreachable by .NET code. This means that when your finally section calls GC.Collect(), the finalizers for all your COM objects will get called with certainty. Each finalizer then calls Marshal.FinalReleaseComObject on the object being finalized. Your approach is therefore simple and fool-proof. Have no fear using this. (Only caveat: if using VSTO, which I doubt that you are, you would need to call GC.Collect() \u0026 GC.WaitForPendingFinalizers TWICE.)\n                \n\u2013\u00A0Mike Rosenblum\n                Dec 29 \u002711 at 18:14\n                        \n                            \n                        \n            ",
      "\n                \n                Explicitly killing an out-of-process COM server (that might be serving other COM clients) is a dreadful idea. If you are resorting to this it\u0027s because your COM protocol is broken. COM servers should not be treated as a regular windowed-app\n                \n\u2013\u00A0MickyD\n                Mar 16 \u002715 at 3:32\n            ",
      "\n                \n                Virtually ALL ANSWERS ON THIS PAGE ARE WRONG EXCEPT THIS ONE.  They work but are way too much work.  IGNORE the \u00222 DOTS\u0022 rule.  Let the GC do your work for you. Supplementary evidence from .Net GURU Hans Passant : stackoverflow.com/a/25135685/3852958\n                \n\u2013\u00A0Alan Baljeu\n                Oct 13 \u002718 at 15:13\n                        \n                            \n                        \n            ",
      "\n                \n                Govert, what a relief to find the correct way to do it. Thank you.\n                \n\u2013\u00A0Dietrich Baumgarten\n                Sep 28 \u002719 at 16:34\n            ",
      "\n                \n                How aobut xlRange.Interior.Color for example.\n                \n\u2013\u00A0HAdes\n                Oct 1 \u002708 at 17:48\n            ",
      "\n                \n                Interior needs to be release (its in the namespace)... Color on the other hand doesn\u0027t (cause its from System.Drawing.Color, iirc)\n                \n\u2013\u00A0MagicKat\n                Oct 1 \u002708 at 17:56\n            ",
      "\n                \n                actually Color is a Excel color not a .Net color. you just pass a Long.  Also workbooks def. need to be released, worksheets... less so.\n                \n\u2013\u00A0Anonymous Type\n                Mar 2 \u002710 at 21:16\n            ",
      "\n                \n                That is not true, the two-dot-bad, one-dot-good rule is nonsense. Also, you don\u0027t have to release Workbooks, Worksheets, Ranges, that is the job of the GC. The only thing that you must never forget is to call Quit on the one and only Excel.Application object. After calling Quit, null the Excel.Application object and call GC.Collect(); GC.WaitForPendingFinalizers(); twice.\n                \n\u2013\u00A0Dietrich Baumgarten\n                Sep 28 \u002719 at 16:30\n            ",
      "\n                \n                yup this one is good. I think this code can be updated though now that FinalReleaseCOMObject is available.\n                \n\u2013\u00A0Anonymous Type\n                Mar 2 \u002710 at 21:22\n            ",
      "\n                \n                It\u0027s still annoying to have a using block for each object. See here stackoverflow.com/questions/2191489/\u2026 for an alternative.\n                \n\u2013\u00A0Henrik\n                Jun 27 \u002712 at 14:16\n            ",
      "\n                \n                No, you don\u0027t, especially if you want to allow user interaction with the COM application (Excel in this case--OP doesn\u0027t specify whether user interaction is intended, but makes no reference to shutting it down). You just have to get the caller to let go for the user to be able to quit Excel when closing, say, a single file.\n                \n\u2013\u00A0downwitch\n                Mar 19 \u002715 at 22:31\n            ",
      "\n                \n                this worked perfectly for me - crashed when I only had objExcel.Quit(), but when I also did objExcel.Application.Quit() beforehand, closed cleanly.\n                \n\u2013\u00A0mcmillab\n                Nov 16 \u002715 at 23:46\n            ",
      "\n                \n                ....this is a bit of a sledghammer approach? - it is similar to what I\u0027m also using :( but need to change. The problem with using this approach is that often when opening excel, on the machine where this ran, it has the alert in left hand bar, saying something like \u0022Excel was closed down incorrectly\u0022 : not very elegant. I think one of the earlier suggestions in this thread is to be preferred.\n                \n\u2013\u00A0whytheq\n                Jun 6 \u002716 at 18:57\n            ",
      "\n                \n                This answer works and is infinitely more convenient than the accepted answer. No worries about \u0022two dots\u0022 with COM objects, no use of Marshal.\n                \n\u2013\u00A0andrew.cuthbert\n                Feb 26 \u002715 at 6:51\n            ",
      "\n                \n                And another reason, re-using a reference without releasing the previous value first.\n                \n\u2013\u00A0Grimfort\n                Dec 6 \u002710 at 15:02\n            ",
      "\n                \n                Thank you. I was also using a \u0022for each\u0022 your solution worked for me.\n                \n\u2013\u00A0Chad Braun-Duin\n                Jan 14 \u002711 at 13:41\n            ",
      "\n                \n                \u002B1 Thanks. Plus, note that if you have an object for an Excel range, and you want to change the range during the lifetime of the object, I found that I had to ReleaseComObject before reassigning it, which makes the code a little untidy!\n                \n\u2013\u00A0AjV Jsy\n                Oct 10 \u002714 at 16:26\n            ",
      "\n                \n                This should be marked as the answer, really. NetOffice abstracts all this complexity away.\n                \n\u2013\u00A0C. Augusto Proiete\n                Dec 3 \u002715 at 2:20\n            ",
      "\n                \n                I\u0027ve been using NetOffice for a considerable amount of time writing an excel add-in and it worked perfectly. The only thing to consider is that if you don\u0027t dispose used objects explicitly, it will do it when you exit the application (because it keeps track of them anyway). So the rule of thumb with NetOffice is always to use \u0022using\u0022 pattern with every Excel object like cell, range or sheet etc.\n                \n\u2013\u00A0Stas Ivanov\n                Feb 10 \u002717 at 8:34\n            ",
      "\n                \n                Inside Release, check for Null (Joe\u0027s answer). That will avoid unnecessary null exceptions. I have tested a LOT of methods. This is the only way to effectively release Excel.\n                \n\u2013\u00A0Gerhard Powell\n                Feb 26 \u002715 at 17:49\n            ",
      "\n                \n                I found I did not need to nullify ComObjects, only Quit() - Close() and FinalReleaseComObject.  I can\u0027t believe this is all that was missing on my end to get it to work. Great!\n                \n\u2013\u00A0Carol\n                Mar 1 \u002716 at 21:26\n                        \n                            \n                        \n            ",
      "\n                \n                I hate arbitrary waits.  But \u002B1 because you are right about needding to wait for the workbooks to close.  An alternative is to poll the workbooks collection in a loop and use the arbitrary wait as the loop timeout.\n                \n\u2013\u00A0dFlat\n                Jul 14 \u002711 at 2:20\n            ",
      "\n                \n                Very good point! I think because I am using Office 2007 there is some clean-up done on my behalf. I have used the advise further up but have not stored variables as you have suggested here and EXCEL.EXE does exit but I could just be lucky and if I have any further problems I will definitely look at this part of my code =)\n                \n\u2013\u00A0Coops\n                Nov 26 \u002712 at 13:39\n            ",
      "\n                \n                social.msdn.microsoft.com/Forums/en-US/\u2026\n                \n\u2013\u00A0Martin\n                Sep 5 \u002714 at 11:47\n            "
    ]
  },
  {
    "Id": "32eb0da4-6de1-4e5a-9777-950b7f5b6e4d",
    "QuestionId": 6620165,
    "Description": "How can I parse JSON with C#?",
    "Votes": 478,
    "Views": 1172254,
    "Tags": [
      "c#",
      "json",
      "parsing",
      "json.net",
      "deserialization"
    ],
    "Discussions": [
      "\nI am assuming you are not using Json.NET (Newtonsoft.Json NuGet package). If this the case, then you should try it.\nIt has the following features:\n\nLINQ to JSON\nThe JsonSerializer for quickly converting your .NET objects to JSON and back again\nJson.NET can optionally produce well formatted, indented JSON for debugging or display\nAttributes like JsonIgnore and JsonProperty can be added to a class to customize how a class is serialized\nAbility to convert JSON to and from XML\nSupports multiple platforms: .NET, Silverlight and the Compact Framework\n\nLook at the example below. In this example, JsonConvert class is used to convert an object to and from JSON. It has two static methods for this purpose. They are SerializeObject(Object obj) and DeserializeObject\u003CT\u003E(String json):\nProduct product = new Product();\nproduct.Name = \u0022Apple\u0022;\nproduct.Expiry = new DateTime(2008, 12, 28);\nproduct.Price = 3.99M;\nproduct.Sizes = new string[] { \u0022Small\u0022, \u0022Medium\u0022, \u0022Large\u0022 };\n\nstring json = JsonConvert.SerializeObject(product);\n//{\n//  \u0022Name\u0022: \u0022Apple\u0022,\n//  \u0022Expiry\u0022: \u00222008-12-28T00:00:00\u0022,\n//  \u0022Price\u0022: 3.99,\n//  \u0022Sizes\u0022: [\n//    \u0022Small\u0022,\n//    \u0022Medium\u0022,\n//    \u0022Large\u0022\n//  ]\n//}\n\nProduct deserializedProduct = JsonConvert.DeserializeObject\u003CProduct\u003E(json);\n\n    ",
      "\nAs was answered here - Deserialize JSON into C# dynamic object?\n\nIt\u0027s pretty simple using Json.NET:\n\ndynamic stuff = JsonConvert.DeserializeObject(\u0022{ \u0027Name\u0027: \u0027Jon Smith\u0027, \u0027Address\u0027: { \u0027City\u0027: \u0027New York\u0027, \u0027State\u0027: \u0027NY\u0027 }, \u0027Age\u0027: 42 }\u0022);\n\nstring name = stuff.Name;\nstring address = stuff.Address.City;\n\n\nOr using Newtonsoft.Json.Linq :\n\ndynamic stuff = JObject.Parse(\u0022{ \u0027Name\u0027: \u0027Jon Smith\u0027, \u0027Address\u0027: { \u0027City\u0027: \u0027New York\u0027, \u0027State\u0027: \u0027NY\u0027 }, \u0027Age\u0027: 42 }\u0022);\n\nstring name = stuff.Name;\nstring address = stuff.Address.City;\n\n    ",
      "\nHere are some options without using third party libraries:\n\n// For that you will need to add reference to System.Runtime.Serialization\nvar jsonReader = JsonReaderWriterFactory.CreateJsonReader(Encoding.UTF8.GetBytes(@\u0022{ \u0022\u0022Name\u0022\u0022: \u0022\u0022Jon Smith\u0022\u0022, \u0022\u0022Address\u0022\u0022: { \u0022\u0022City\u0022\u0022: \u0022\u0022New York\u0022\u0022, \u0022\u0022State\u0022\u0022: \u0022\u0022NY\u0022\u0022 }, \u0022\u0022Age\u0022\u0022: 42 }\u0022), new System.Xml.XmlDictionaryReaderQuotas());\n\n// For that you will need to add reference to System.Xml and System.Xml.Linq\nvar root = XElement.Load(jsonReader);\nConsole.WriteLine(root.XPathSelectElement(\u0022//Name\u0022).Value);\nConsole.WriteLine(root.XPathSelectElement(\u0022//Address/State\u0022).Value);\n\n// For that you will need to add reference to System.Web.Helpers\ndynamic json = System.Web.Helpers.Json.Decode(@\u0022{ \u0022\u0022Name\u0022\u0022: \u0022\u0022Jon Smith\u0022\u0022, \u0022\u0022Address\u0022\u0022: { \u0022\u0022City\u0022\u0022: \u0022\u0022New York\u0022\u0022, \u0022\u0022State\u0022\u0022: \u0022\u0022NY\u0022\u0022 }, \u0022\u0022Age\u0022\u0022: 42 }\u0022);\nConsole.WriteLine(json.Name);\nConsole.WriteLine(json.Address.State);\n\n\nSee the link for more information about System.Web.Helpers.Json.\n\nUpdate: Nowadays the easiest way to get the Web.Helpers is to use the NuGet package.\n\n\n\nIf you don\u0027t care about earlier windows versions you can use the classes of the Windows.Data.Json namespace:\n\n// minimum supported version: Win 8\nJsonObject root = Windows.Data.Json.JsonValue.Parse(jsonString).GetObject();\nConsole.WriteLine(root[\u0022Name\u0022].GetString());\nConsole.WriteLine(root[\u0022Address\u0022].GetObject()[\u0022State\u0022].GetString());\n\n    ",
      "\nIf .NET 4 is available to you, check out: http://visitmix.com/writings/the-rise-of-json (archive.org)\n\nHere is a snippet from that site:\n\nWebClient webClient = new WebClient();\ndynamic result = JsonValue.Parse(webClient.DownloadString(\u0022https://api.foursquare.com/v2/users/self?oauth_token=XXXXXXX\u0022));\nConsole.WriteLine(result.response.user.firstName);\n\n\nThat last Console.WriteLine is pretty sweet...\n    ",
      "\nAnother native solution to this, which doesn\u0027t require any 3rd party libraries but a reference to System.Web.Extensions is the JavaScriptSerializer. This is not a new but a very unknown built-in features there since 3.5.\n\nusing System.Web.Script.Serialization;\n\n\n..\n\nJavaScriptSerializer serializer = new JavaScriptSerializer();\nobjectString = serializer.Serialize(new MyObject());\n\n\nand back\n\nMyObject o = serializer.Deserialize\u003CMyObject\u003E(objectString)\n\n    ",
      "\nYou could also have a look at the DataContractJsonSerializer\n    ",
      "\nSystem.Json works now...\n\nInstall nuget https://www.nuget.org/packages/System.Json\n\nPM\u003E Install-Package System.Json -Version 4.5.0\n\n\nSample:\n\n// PM\u003EInstall-Package System.Json -Version 4.5.0\n\nusing System;\nusing System.Json;\n\nnamespace NetCoreTestConsoleApp\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // Note that JSON keys are case sensitive, a is not same as A.\n\n            // JSON Sample\n            string jsonString = \u0022{\\\u0022a\\\u0022: 1,\\\u0022b\\\u0022: \\\u0022string value\\\u0022,\\\u0022c\\\u0022:[{\\\u0022Value\\\u0022: 1}, {\\\u0022Value\\\u0022: 2,\\\u0022SubObject\\\u0022:[{\\\u0022SubValue\\\u0022:3}]}]}\u0022;\n\n            // You can use the following line in a beautifier/JSON formatted for better view\n            // {\u0022a\u0022: 1,\u0022b\u0022: \u0022string value\u0022,\u0022c\u0022:[{\u0022Value\u0022: 1}, {\u0022Value\u0022: 2,\u0022SubObject\u0022:[{\u0022SubValue\u0022:3}]}]}\n\n            /* Formatted jsonString for viewing purposes:\n            {\n               \u0022a\u0022:1,\n               \u0022b\u0022:\u0022string value\u0022,\n               \u0022c\u0022:[\n                  {\n                     \u0022Value\u0022:1\n                  },\n                  {\n                     \u0022Value\u0022:2,\n                     \u0022SubObject\u0022:[\n                        {\n                           \u0022SubValue\u0022:3\n                        }\n                     ]\n                  }\n               ]\n            }\n            */\n\n            // Verify your JSON if you get any errors here\n            JsonValue json = JsonValue.Parse(jsonString);\n\n            // int test\n            if (json.ContainsKey(\u0022a\u0022))\n            {\n                int a = json[\u0022a\u0022]; // type already set to int\n                Console.WriteLine(\u0022json[\\\u0022a\\\u0022]\u0022 \u002B \u0022 = \u0022 \u002B a);\n            }\n\n            // string test\n            if (json.ContainsKey(\u0022b\u0022))\n            {\n                string b = json[\u0022b\u0022];  // type already set to string\n                Console.WriteLine(\u0022json[\\\u0022b\\\u0022]\u0022 \u002B \u0022 = \u0022 \u002B b);\n            }\n\n            // object array test\n            if (json.ContainsKey(\u0022c\u0022) \u0026\u0026 json[\u0022c\u0022].JsonType == JsonType.Array)\n            {\n                // foreach loop test\n                foreach (JsonValue j in json[\u0022c\u0022])\n                {\n                    Console.WriteLine(\u0022j[\\\u0022Value\\\u0022]\u0022 \u002B \u0022 = \u0022 \u002B j[\u0022Value\u0022].ToString());\n                }\n\n                // multi level key test\n                Console.WriteLine(\u0022json[\\\u0022c\\\u0022][0][\\\u0022Value\\\u0022]\u0022 \u002B \u0022 = \u0022 \u002B json[\u0022c\u0022][0][\u0022Value\u0022].ToString());\n                Console.WriteLine(\u0022json[\\\u0022c\\\u0022][0][\\\u0022Value\\\u0022]\u0022 \u002B \u0022 = \u0022 \u002B json[\u0022c\u0022][1][\u0022Value\u0022].ToString());\n                Console.WriteLine(\u0022json[\\\u0022c\\\u0022][1][\\\u0022SubObject\\\u0022][0][\\\u0022SubValue\\\u0022]\u0022 \u002B \u0022 = \u0022 \u002B json[\u0022c\u0022][1][\u0022SubObject\u0022][0][\u0022SubValue\u0022].ToString());\n            }\n\n            Console.WriteLine();\n            Console.Write(\u0022Press any key to exit.\u0022);\n            Console.ReadKey();\n        }\n    }\n}\n\n    ",
      "\nSystem.Text.Json\n\n.NET core 3.0 comes with System.Text.Json built-in which means you can deserialize/serialize JSON without using a third-party library.  \n\nTo serialize your class(es) to JSON string:\n\nvar json = JsonSerializer.Serialize(order);\n\n\nTo deserialize the JSON into a strongly typed class:\n\nvar order = JsonSerializer.Deserialize\u003COrder\u003E(json);\n\n\nSo if you have a class like below:\n\npublic class Order\n{\n    public int Id { get; set; }\n    public string OrderNumber { get; set; }\n    public decimal Balance { get; set; }\n    public DateTime Opened { get; set; }\n}\n\nvar json = JsonSerializer.Serialize(order);\n// creates JSON ==\u003E\n{\n    \u0022id\u0022: 123456,\n    \u0022orderNumber\u0022: \u0022ABC-123-456\u0022,\n    \u0022balance\u0022: 9876.54,\n    \u0022opened\u0022: \u00222019-10-21T23:47:16.85\u0022,\n};\n\nvar order = JsonSerializer.Deserialize\u003COrder\u003E(json);\n// ==\u003E creates the above class\n\n\n\n\nOne thing to note is that System.Text.Json does not automatically handle camelCase JSON properties when using your own code (however, it does when using MVC/WebAPI requests and the model binder). \n\nTo resolve this you need to pass JsonSerializerOptions as a parameter. \n\nJsonSerializerOptions options = new JsonSerializerOptions\n{        \n    PropertyNamingPolicy = JsonNamingPolicy.CamelCase,  // set camelCase       \n    WriteIndented = true                                // write pretty json\n};\n\n// pass options to serializer\nvar json = JsonSerializer.Serialize(order, options);\n// pass options to deserializer\nvar order = JsonSerializer.Deserialize\u003COrder\u003E(json, options);\n\n\nSystem.Text.Json is also available for .Net Framework and .Net Standard as a Nu-get package System.Text.Json\n    ",
      "\nTry the following code:\n\nHttpWebRequest request = (HttpWebRequest)WebRequest.Create(\u0022URL\u0022);\nJArray array = new JArray();\nusing (var twitpicResponse = (HttpWebResponse)request.GetResponse())\nusing (var reader = new StreamReader(twitpicResponse.GetResponseStream()))\n{\n    JavaScriptSerializer js = new JavaScriptSerializer();\n    var objText = reader.ReadToEnd();\n\n    JObject joResponse = JObject.Parse(objText);\n    JObject result = (JObject)joResponse[\u0022result\u0022];\n    array = (JArray)result[\u0022Detail\u0022];\n    string statu = array[0][\u0022dlrStat\u0022].ToString();\n}\n\n    ",
      "\nUse this tool to generate a class based in your json:\n\nhttp://json2csharp.com/\n\nAnd then use the class to deserialize your json. Example:\n\npublic class Account\n{\n    public string Email { get; set; }\n    public bool Active { get; set; }\n    public DateTime CreatedDate { get; set; }\n    public IList\u003Cstring\u003E Roles { get; set; }\n}\n\n\nstring json = @\u0022{\n  \u0027Email\u0027: \u0027james@example.com\u0027,\n  \u0027Active\u0027: true,\n  \u0027CreatedDate\u0027: \u00272013-01-20T00:00:00Z\u0027,\n  \u0027Roles\u0027: [\n    \u0027User\u0027,\n    \u0027Admin\u0027\n  ]\n}\u0022;\n\nAccount account = JsonConvert.DeserializeObject\u003CAccount\u003E(json);\n\nConsole.WriteLine(account.Email);\n// james@example.com\n\n\nReferences:\nhttps://forums.asp.net/t/1992996.aspx?Nested\u002BJson\u002BDeserialization\u002Bto\u002BC\u002Bobject\u002Band\u002Busing\u002Bthat\u002Bobject\nhttps://www.newtonsoft.com/json/help/html/DeserializeObject.htm\n    ",
      "\nThe following from the msdn site should I think help provide some native functionality for what you are looking for. Please note it is specified for Windows 8. One such example from the site is listed below.\n\nJsonValue jsonValue = JsonValue.Parse(\u0022{\\\u0022Width\\\u0022: 800, \\\u0022Height\\\u0022: 600, \\\u0022Title\\\u0022: \\\u0022View from 15th Floor\\\u0022, \\\u0022IDs\\\u0022: [116, 943, 234, 38793]}\u0022);\ndouble width = jsonValue.GetObject().GetNamedNumber(\u0022Width\u0022);\ndouble height = jsonValue.GetObject().GetNamedNumber(\u0022Height\u0022);\nstring title = jsonValue.GetObject().GetNamedString(\u0022Title\u0022);\nJsonArray ids = jsonValue.GetObject().GetNamedArray(\u0022IDs\u0022);\n\n\nIt utilizes the Windows.Data.JSON namespace.\n    ",
      "\nIf JSON is dynamic as below\n{\n \u0022Items\u0022: [{\n        \u0022Name\u0022: \u0022Apple\u0022,\n        \u0022Price\u0022: 12.3\n    },\n    {\n        \u0022Name\u0022: \u0022Grape\u0022,\n        \u0022Price\u0022: 3.21\n    }\n   ],\n   \u0022Date\u0022: \u002221/11/2010\u0022\n}\n\nThen, Once you install NewtonSoft.Json from NuGet  and include it in your project, you can serialize it as\nstring jsonString = \u0022{\\\u0022Items\\\u0022: [{\\\u0022Name\\\u0022: \\\u0022Apple\\\u0022,\\\u0022Price\\\u0022: 12.3},{\\\u0022Name\\\u0022: \\\u0022Grape\\\u0022,\\\u0022Price\\\u0022: 3.21}],\\\u0022Date\\\u0022: \\\u002221/11/2010\\\u0022}\u0022;\n\n        dynamic DynamicData = JsonConvert.DeserializeObject(jsonString);\n\n        Console.WriteLine(   DynamicData.Date); // \u002221/11/2010\u0022\n        Console.WriteLine(DynamicData.Items.Count); // 2\n        Console.WriteLine(DynamicData.Items[0].Name); // \u0022Apple\u0022\n\nSource: How to read JSON data in C# (Example using Console app \u0026 ASP.NET MVC)?\n    ",
      "\nYou can use following extentions\n\npublic static class JsonExtensions\n{\n    public static T ToObject\u003CT\u003E(this string jsonText)\n    {\n        return JsonConvert.DeserializeObject\u003CT\u003E(jsonText);\n    }\n\n    public static string ToJson\u003CT\u003E(this T obj)\n    {\n        return JsonConvert.SerializeObject(obj);\n    } \n}\n\n    ",
      "\nI think the best answer that I\u0027ve seen has been @MD_Sayem_Ahmed.\n\nYour question is \u0022How can I parse Json with C#\u0022, but it seems like you are wanting to decode Json.  If you are wanting to decode it, Ahmed\u0027s answer is good.\n\nIf you are trying to accomplish this in ASP.NET Web Api, the easiest way is to create a data transfer object that holds the data you want to assign:\n\npublic class MyDto{\n    public string Name{get; set;}\n    public string Value{get; set;}\n}\n\n\nYou have simply add the application/json header to your request (if you are using Fiddler, for example).\nYou would then use this in ASP.NET Web API as follows:\n\n//controller method -- assuming you want to post and return data\npublic MyDto Post([FromBody] MyDto myDto){\n   MyDto someDto = myDto;\n   /*ASP.NET automatically converts the data for you into this object \n    if you post a json object as follows:\n{\n    \u0022Name\u0022: \u0022SomeName\u0022,\n      \u0022Value\u0022: \u0022SomeValue\u0022\n}\n*/\n   //do some stuff\n}\n\n\nThis helped me a lot when I was working in my Web Api and made my life super easy.\n    ",
      "\n         string json = @\u0022{\n            \u0027Name\u0027: \u0027Wide Web\u0027,\n            \u0027Url\u0027: \u0027www.wideweb.com.br\u0027}\u0022;\n\n        JavaScriptSerializer jsonSerializer = new JavaScriptSerializer();\n        dynamic j = jsonSerializer.Deserialize\u003Cdynamic\u003E(json);\n        string name = j[\u0022Name\u0022].ToString();\n        string url = j[\u0022Url\u0022].ToString();\n\n    ",
      "\nvar result = controller.ActioName(objParams);\nIDictionary\u003Cstring, object\u003E data = (IDictionary\u003Cstring, object\u003E)new System.Web.Routing.RouteValueDictionary(result.Data);\nAssert.AreEqual(\u0022Table already exists.\u0022, data[\u0022Message\u0022]);\n\n    ",
      "\n using (var ms = new MemoryStream(Encoding.Unicode.GetBytes(user)))\n {\n    // Deserialization from JSON  \n    DataContractJsonSerializer deserializer = new DataContractJsonSerializer(typeof(UserListing))\n    DataContractJsonSerializer(typeof(UserListing));\n    UserListing response = (UserListing)deserializer.ReadObject(ms);\n\n }\n\n public class UserListing\n {\n    public List\u003CUserList\u003E users { get; set; }      \n }\n\n public class UserList\n {\n    public string FirstName { get; set; }       \n    public string LastName { get; set; } \n }\n\n    ",
      "\n                \n                Can I deserialize to a var type variable, in the case I dont know the complete structure of my objective? Specifically, I\u0027m consuming Rally User Stories, and I want to convert them to objects.\n                \n\u2013\u00A0Pedro Dusso\n                Mar 11 \u002713 at 10:52\n            ",
      "\n                \n                @VANDERWEYENJonathan - in a modern web browser, JSON.parse(string) and JSON.stringify(object) both handle dates as ISO8601 strings, which is the format depicted in the above answer. You might want to update your standard before people decide it\u0027s irrelevant. People need dates a lot more than they need your standard.\n                \n\u2013\u00A0Peter Wone\n                Mar 18 \u002714 at 12:36\n                        \n                            \n                        \n            ",
      "\n                \n                @PeterWone: No, JSON.parse(\u0027{\u0022Expiry\u0022: \u00222008-12-28T00:00:00\u0022}\u0027).Expiry returns the string \u00222008-12-28T00:00:00\u0022, not a date. it can be turned into a Date via new Date(str), but JSON.parse knows nothing about dates. You\u0027d have to pass in a reviver that checked each and every string value against a pattern.\n                \n\u2013\u00A0T.J. Crowder\n                Sep 27 \u002715 at 16:23\n            ",
      "\n                \n                Since 3.703 seconds is the same as 3s and 703ms and the separator is a decimal point I put it to you that this is seconds to three decimal places.\n                \n\u2013\u00A0Peter Wone\n                Sep 28 \u002715 at 21:55\n            ",
      "\n                \n                Why does everyone have such problem with including relevant require, include, import or using statements in their answers. Would that one line hurt?\n                \n\u2013\u00A0Tom\u00E1\u0161 Zato - Reinstate Monica\n                Sep 26 \u002717 at 15:28\n            ",
      "\n                \n                @MaxHodges, you are right. I just used inline \u0022magic strings\u0022 for demonstrating how to parse JSON string values. Didn\u0027t want it to look complex with escaping double quotes. In real code we usually have JSON strings obtained from somewhere as variables or passed as parameters.\n                \n\u2013\u00A0Dmitry Pavlov\n                Jan 3 \u002716 at 20:26\n            ",
      "\n                \n                Without .net 4 you don\u0027t have \u0027dynamic\u0027 keyword. You can use \u0027var stuff\u0027 for declaration and instead of \u0027stuff.Name\u0027 and \u0027stuff.Address.City\u0027 you have \u0027stuff[\u0022Name\u0022]\u0027 and \u0027stuff[\u0022Address\u0022][\u0022City\u0022]\u0027 respectively.\n                \n\u2013\u00A0Fil\n                Jul 17 \u002717 at 22:57\n            ",
      "\n                \n                @Fil That gives you a value of type object, and you can\u0027t use indexing on  a object.\n                \n\u2013\u00A0Alex\n                Jul 18 \u002717 at 8:15\n            ",
      "\n                \n                @Alex i\u0027m pretty sure the Newtonsoft.Json variant returns a JObject. also, don\u0027t use Json.NET, even VS uses Newtonsoft.Json by now. can now even be used in VSIX without adding it to the package\n                \n\u2013\u00A0Patrick Beynio\n                Jun 28 at 23:18\n            ",
      "\n                \n                Why I don\u0027t see System.Web.Helpers in my ASP.NET web site (4.5)? XElement, XPathSelectElement are not known for my VisualStudio. How to educate it?\n                \n\u2013\u00A0Budda\n                Aug 5 \u002714 at 4:50\n            ",
      "\n                \n                Well, you have to add references for the corresponding libraries (as written in the comments above), see this article for more info. Also, this question might be of interest.\n                \n\u2013\u00A0qqbenq\n                Aug 5 \u002714 at 9:29\n                        \n                            \n                        \n            ",
      "\n                \n                I used the Web.Helpers method described here but ran into an issue that was solved by this post: stackoverflow.com/questions/7066726/\u2026\n                \n\u2013\u00A0Alex\n                Jan 20 \u002715 at 15:50\n            ",
      "\n                \n                it working with WPF.By using following namespace                                using System.Runtime.Serialization.Json; using System.Xml.XPath; using System.Xml.Linq;\n                \n\u2013\u00A0Shahid Neermunda\n                Feb 26 \u002716 at 8:11\n                        \n                            \n                        \n            ",
      "\n                \n                Json.Net is hardly a third party component anymore. Microsoft use it themselves these days. It\u0027s the default serilizer on Web API.\n                \n\u2013\u00A0Liam\n                Aug 5 \u002716 at 9:06\n            ",
      "\n                \n                Sorry, looks like things have changed since I initially answered. I\u0027ll have to take a look around and see which library is the correct one...\n                \n\u2013\u00A0ElonU Webdev\n                Dec 7 \u002712 at 14:04\n            ",
      "\n                \n                Looking forward to you finding this library. Edit : is it this one: dynamicjson.codeplex.com ?\n                \n\u2013\u00A0user989056\n                Dec 7 \u002712 at 14:09\n                        \n                            \n                        \n            ",
      "\n                \n                I dont know what class ElonU meant here, but there is \u0022JsonValue\u0022 in Windows.Data.Json (which is only for Windows 8 and above - weird) and also the same \u0022JsonValue\u0022 in System.Json which is still in preview and God alone knows if it will ever come out. MS confuses me when it comes to Json.\n                \n\u2013\u00A0nawfal\n                Aug 3 \u002715 at 17:17\n            ",
      "\n                \n                This is very nice, but it needs the web comonents, so unfortunately it doesn\u0027t work in .NET 4.0 Client Profile, which is the last .NET version for Windows XP. Full installation of .NET is possible, but many people stick just with Client Profile. In contrast, System.Runtime.Serialization.Json.DataContractJsonSerializer is suppoerted even in the Client Profile.\n                \n\u2013\u00A0Al Kepp\n                Feb 4 \u002715 at 21:23\n            ",
      "\n                \n                @fr34kyn01535: Windows XP has the second most marketshare on desktop. It\u0027s relevant.\n                \n\u2013\u00A0DonkeyMaster\n                Apr 15 \u002715 at 15:30\n            ",
      "\n                \n                When I used JavaScriptSerializer to deseriarlize my object, it worked but it deserialized my date incorrectly. It should have been 4/19/2018 12:00AM but deserialized to 4/18/2018 08:00PM. NewtonSoft.Json.JsonConvert deserialized it as expected.\n                \n\u2013\u00A0Rich\n                Apr 19 \u002718 at 20:32\n                        \n                            \n                        \n            ",
      "\n                \n                this is better as it is compatible with .NET 3.5\n                \n\u2013\u00A0Mahmoud Fayez\n                Feb 8 \u002713 at 2:15\n            ",
      "\n                \n                it is also quite faster than JavaScriptSerializer,\n                \n\u2013\u00A0David\n                Dec 16 \u002716 at 19:31\n            ",
      "\n                \n                Trying to find an example of how to correctly use the modern System.Json has brought me here, after countless results for Json.NET/Newtonsoft.Json/\u0022Newtson.Json\u0022 and older iterations of System.Json long since deprecated. Thank you for this.\n                \n\u2013\u00A0monkey0506\n                Nov 17 \u002719 at 6:04\n            ",
      "\n                \n                This helped me in a huge way.  Thank you very much.\n                \n\u2013\u00A0MAK\n                Feb 4 at 15:04\n            ",
      "\n                \n                for dotnet-core, from terminal do: \u0022dotnet add package System.Json --version 4.5.0\u0022\n                \n\u2013\u00A0Shaybc\n                Jun 20 at 11:25\n            ",
      "\n                \n                What if you don\u0027t have a class? What if you only vaguely know what the json data is going to contain? Or if the keys exist at all?\n                \n\u2013\u00A0Cherona\n                Apr 15 at 5:54\n            ",
      "\n                \n                @Cherona use JsonDocument.Parse.\n                \n\u2013\u00A0haldo\n                Apr 15 at 12:06\n            ",
      "\n                \n                Is this line doing anything...JavaScriptSerializer js = new JavaScriptSerializer(); Thanks in advance.\n                \n\u2013\u00A0Chris Catignani\n                Mar 30 at 14:32\n            ",
      "\n                \n                Nice, but \u0022Minimum supported client: Windows 8\u0022\n                \n\u2013\u00A0watbywbarif\n                Mar 10 \u002715 at 7:05\n            ",
      "\n                \n                i think its no more supported and now there is newtonsoft json dll    icouldnt find  windows.data.json\n                \n\u2013\u00A0virtouso\n                Mar 12 \u002715 at 2:32\n            ",
      "\n                \n                @virtouso, as watbywbarif pointed out it\u0027s actually rather new, however minimal support from Microsoft, only works within Windows 8.\n                \n\u2013\u00A0TargetofGravity\n                Mar 13 \u002715 at 4:38\n                        \n                            \n                        \n            ",
      "\n                \n                You better explain your solution instead of just posting some row of code. You may read How do I write a good answer.\n                \n\u2013\u00A0Massimiliano Kraus\n                Aug 9 \u002717 at 12:40\n            ",
      "\n                \n                Don\u0027t forget to include System.Web in your project references.\n                \n\u2013\u00A0Ohad Cohen\n                Nov 8 \u002717 at 12:37\n            "
    ]
  },
  {
    "Id": "611b83a4-1a79-488f-b5bc-ef44c76cc288",
    "QuestionId": 36239705,
    "Description": "Serialize and Deserialize Json and Json Array in Unity",
    "Votes": 101,
    "Views": 153576,
    "Tags": [
      "c#",
      "json",
      "unity3d"
    ],
    "Discussions": [
      "\nUnity added JsonUtility to their API after 5.3.3 Update. Forget about all the 3rd party libraries unless you are doing something more complicated. JsonUtility is faster than other Json libraries. Update to Unity 5.3.3 version or above then try the solution below.\n\nJsonUtility is a lightweight API. Only simple types are supported. It does not support collections such as Dictionary. One exception is List. It supports List and List array!\n\nIf you need to serialize a Dictionary or do something other than simply serializing and deserializing simple datatypes, use a third-party API. Otherwise, continue reading.\n\nExample class to serialize:\n\n[Serializable]\npublic class Player\n{\n    public string playerId;\n    public string playerLoc;\n    public string playerNick;\n}\n\n\n1. ONE DATA OBJECT (NON-ARRAY JSON)\n\nSerializing Part A:\n\nSerialize to Json with the public static string ToJson(object obj); method.\n\nPlayer playerInstance = new Player();\nplayerInstance.playerId = \u00228484239823\u0022;\nplayerInstance.playerLoc = \u0022Powai\u0022;\nplayerInstance.playerNick = \u0022Random Nick\u0022;\n\n//Convert to JSON\nstring playerToJson = JsonUtility.ToJson(playerInstance);\nDebug.Log(playerToJson);\n\n\nOutput:\n\n{\u0022playerId\u0022:\u00228484239823\u0022,\u0022playerLoc\u0022:\u0022Powai\u0022,\u0022playerNick\u0022:\u0022Random Nick\u0022}\n\n\n\n\nSerializing Part B:\n\nSerialize to Json with the public static string ToJson(object obj, bool prettyPrint); method overload. Simply passing true to the JsonUtility.ToJson function will format the data. Compare the output below to the output above.\n\nPlayer playerInstance = new Player();\nplayerInstance.playerId = \u00228484239823\u0022;\nplayerInstance.playerLoc = \u0022Powai\u0022;\nplayerInstance.playerNick = \u0022Random Nick\u0022;\n\n//Convert to JSON\nstring playerToJson = JsonUtility.ToJson(playerInstance, true);\nDebug.Log(playerToJson);\n\n\nOutput:\n\n{\n    \u0022playerId\u0022: \u00228484239823\u0022,\n    \u0022playerLoc\u0022: \u0022Powai\u0022,\n    \u0022playerNick\u0022: \u0022Random Nick\u0022\n}\n\n\n\n\nDeserializing Part A:\n\nDeserialize json with the public static T FromJson(string json); method overload.\n\nstring jsonString = \u0022{\\\u0022playerId\\\u0022:\\\u00228484239823\\\u0022,\\\u0022playerLoc\\\u0022:\\\u0022Powai\\\u0022,\\\u0022playerNick\\\u0022:\\\u0022Random Nick\\\u0022}\u0022;\nPlayer player = JsonUtility.FromJson\u003CPlayer\u003E(jsonString);\nDebug.Log(player.playerLoc);\n\n\nDeserializing Part B:\n\nDeserialize json with the public static object FromJson(string json, Type type); method overload.\n\nstring jsonString = \u0022{\\\u0022playerId\\\u0022:\\\u00228484239823\\\u0022,\\\u0022playerLoc\\\u0022:\\\u0022Powai\\\u0022,\\\u0022playerNick\\\u0022:\\\u0022Random Nick\\\u0022}\u0022;\nPlayer player = (Player)JsonUtility.FromJson(jsonString, typeof(Player));\nDebug.Log(player.playerLoc);\n\n\n\n\nDeserializing Part C:\n\nDeserialize json with the public static void FromJsonOverwrite(string json, object objectToOverwrite); method. When JsonUtility.FromJsonOverwrite is used, no new instance of that Object you are deserializing to will be created. It will simply re-use the instance you pass in and overwrite its values.\n\nThis is efficient and should be used if possible.\n\nPlayer playerInstance;\nvoid Start()\n{\n    //Must create instance once\n    playerInstance = new Player();\n    deserialize();\n}\n\nvoid deserialize()\n{\n    string jsonString = \u0022{\\\u0022playerId\\\u0022:\\\u00228484239823\\\u0022,\\\u0022playerLoc\\\u0022:\\\u0022Powai\\\u0022,\\\u0022playerNick\\\u0022:\\\u0022Random Nick\\\u0022}\u0022;\n\n    //Overwrite the values in the existing class instance \u0022playerInstance\u0022. Less memory Allocation\n    JsonUtility.FromJsonOverwrite(jsonString, playerInstance);\n    Debug.Log(playerInstance.playerLoc);\n}\n\n\n\n\n2. MULTIPLE DATA(ARRAY JSON)\n\nYour Json contains multiple data objects. For example playerId appeared more than once. Unity\u0027s JsonUtility does not support array as it is still new but you can use a helper class from this person to get array working with JsonUtility.\n\nCreate a class called JsonHelper. Copy the JsonHelper directly from below.\n\npublic static class JsonHelper\n{\n    public static T[] FromJson\u003CT\u003E(string json)\n    {\n        Wrapper\u003CT\u003E wrapper = JsonUtility.FromJson\u003CWrapper\u003CT\u003E\u003E(json);\n        return wrapper.Items;\n    }\n\n    public static string ToJson\u003CT\u003E(T[] array)\n    {\n        Wrapper\u003CT\u003E wrapper = new Wrapper\u003CT\u003E();\n        wrapper.Items = array;\n        return JsonUtility.ToJson(wrapper);\n    }\n\n    public static string ToJson\u003CT\u003E(T[] array, bool prettyPrint)\n    {\n        Wrapper\u003CT\u003E wrapper = new Wrapper\u003CT\u003E();\n        wrapper.Items = array;\n        return JsonUtility.ToJson(wrapper, prettyPrint);\n    }\n\n    [Serializable]\n    private class Wrapper\u003CT\u003E\n    {\n        public T[] Items;\n    }\n}\n\n\nSerializing Json Array:\n\nPlayer[] playerInstance = new Player[2];\n\nplayerInstance[0] = new Player();\nplayerInstance[0].playerId = \u00228484239823\u0022;\nplayerInstance[0].playerLoc = \u0022Powai\u0022;\nplayerInstance[0].playerNick = \u0022Random Nick\u0022;\n\nplayerInstance[1] = new Player();\nplayerInstance[1].playerId = \u0022512343283\u0022;\nplayerInstance[1].playerLoc = \u0022User2\u0022;\nplayerInstance[1].playerNick = \u0022Rand Nick 2\u0022;\n\n//Convert to JSON\nstring playerToJson = JsonHelper.ToJson(playerInstance, true);\nDebug.Log(playerToJson);\n\n\nOutput:\n\n{\n    \u0022Items\u0022: [\n        {\n            \u0022playerId\u0022: \u00228484239823\u0022,\n            \u0022playerLoc\u0022: \u0022Powai\u0022,\n            \u0022playerNick\u0022: \u0022Random Nick\u0022\n        },\n        {\n            \u0022playerId\u0022: \u0022512343283\u0022,\n            \u0022playerLoc\u0022: \u0022User2\u0022,\n            \u0022playerNick\u0022: \u0022Rand Nick 2\u0022\n        }\n    ]\n}\n\n\n\n\nDeserializing Json Array:\n\nstring jsonString = \u0022{\\r\\n    \\\u0022Items\\\u0022: [\\r\\n        {\\r\\n            \\\u0022playerId\\\u0022: \\\u00228484239823\\\u0022,\\r\\n            \\\u0022playerLoc\\\u0022: \\\u0022Powai\\\u0022,\\r\\n            \\\u0022playerNick\\\u0022: \\\u0022Random Nick\\\u0022\\r\\n        },\\r\\n        {\\r\\n            \\\u0022playerId\\\u0022: \\\u0022512343283\\\u0022,\\r\\n            \\\u0022playerLoc\\\u0022: \\\u0022User2\\\u0022,\\r\\n            \\\u0022playerNick\\\u0022: \\\u0022Rand Nick 2\\\u0022\\r\\n        }\\r\\n    ]\\r\\n}\u0022;\n\nPlayer[] player = JsonHelper.FromJson\u003CPlayer\u003E(jsonString);\nDebug.Log(player[0].playerLoc);\nDebug.Log(player[1].playerLoc);\n\n\nOutput:\n\n\n  Powai\n  \n  User2\n\n\n\n\nIf this is a Json array from the server and you did not create it by hand:\n\nYou may have to Add {\u0022Items\u0022: in front of the received string then add } at the end of it.\n\nI made a simple function for this:\n\nstring fixJson(string value)\n{\n    value = \u0022{\\\u0022Items\\\u0022:\u0022 \u002B value \u002B \u0022}\u0022;\n    return value;\n}\n\n\nthen you can use it:\n\nstring jsonString = fixJson(yourJsonFromServer);\nPlayer[] player = JsonHelper.FromJson\u003CPlayer\u003E(jsonString);\n\n\n\n\n3.Deserialize json string without class \u0026\u0026 De-serializing Json with numeric properties\n\nThis is a Json that starts with a number or numeric properties.\n\nFor example:\n\n{ \n\u0022USD\u0022 : {\u002215m\u0022 : 1740.01, \u0022last\u0022 : 1740.01, \u0022buy\u0022 : 1740.01, \u0022sell\u0022 : 1744.74, \u0022symbol\u0022 : \u0022$\u0022}, \n\n\u0022ISK\u0022 : {\u002215m\u0022 : 179479.11, \u0022last\u0022 : 179479.11, \u0022buy\u0022 : 179479.11, \u0022sell\u0022 : 179967, \u0022symbol\u0022 : \u0022kr\u0022},\n\n\u0022NZD\u0022 : {\u002215m\u0022 : 2522.84, \u0022last\u0022 : 2522.84, \u0022buy\u0022 : 2522.84, \u0022sell\u0022 : 2529.69, \u0022symbol\u0022 : \u0022$\u0022}\n}\n\n\nUnity\u0027s JsonUtility does not support this because the \u002215m\u0022 property starts with a number. A class variable cannot start with an integer.\n\nDownload SimpleJSON.cs from Unity\u0027s wiki.\n\nTo get the \u002215m\u0022 property of USD:\n\nvar N = JSON.Parse(yourJsonString);\nstring price = N[\u0022USD\u0022][\u002215m\u0022].Value;\nDebug.Log(price);\n\n\nTo get the \u002215m\u0022 property of ISK:\n\nvar N = JSON.Parse(yourJsonString);\nstring price = N[\u0022ISK\u0022][\u002215m\u0022].Value;\nDebug.Log(price);\n\n\nTo get the \u002215m\u0022 property of NZD:\n\nvar N = JSON.Parse(yourJsonString);\nstring price = N[\u0022NZD\u0022][\u002215m\u0022].Value;\nDebug.Log(price);\n\n\nThe rest of the Json properties that doesn\u0027t start with a numeric digit can be handled by Unity\u0027s JsonUtility.\n\n\n\n4.TROUBLESHOOTING JsonUtility:\n\nProblems when serializing with JsonUtility.ToJson?\n\nGetting empty string or  \u0022{}\u0022  with JsonUtility.ToJson?\n\nA. Make sure that the class is not an array. If it is, use the helper class above with JsonHelper.ToJson instead of JsonUtility.ToJson.\n\nB. Add [Serializable] to the top of the class you are serializing. \n\nC. Remove property from the class. For example, in the variable, public string playerId { get; set; } remove { get; set; }. Unity cannot serialize this.\n\nProblems when deserializing with JsonUtility.FromJson?\n\nA. If you get Null, make sure that the Json is not a Json array. If it is, use the helper class above with JsonHelper.FromJson instead of JsonUtility.FromJson.\n\nB. If you get NullReferenceException while deserializing, add [Serializable] to the top of the class.\n\nC.Any other problems, verify that your json is valid. Go to this site here and paste the json. It should show you if the json is valid. It should also generate the proper class with the Json. Just make sure to remove  remove { get; set; } from each variable and also add [Serializable] to the top of each  class generated.\n\n\n\nNewtonsoft.Json:\n\nIf for some reason Newtonsoft.Json must be used then check out the forked version for Unity here. Note that you may experience crash if certain feature is used. Be careful.\n\n\n\nTo answer your question:\n\nYour original data is\n\n [{\u0022playerId\u0022:\u00221\u0022,\u0022playerLoc\u0022:\u0022Powai\u0022},{\u0022playerId\u0022:\u00222\u0022,\u0022playerLoc\u0022:\u0022Andheri\u0022},{\u0022playerId\u0022:\u00223\u0022,\u0022playerLoc\u0022:\u0022Churchgate\u0022}]\n\n\nAdd {\u0022Items\u0022: in front of it then add } at the end of it. \n\nCode to do this:\n\nserviceData = \u0022{\\\u0022Items\\\u0022:\u0022 \u002B serviceData \u002B \u0022}\u0022;\n\n\nNow you have:\n\n {\u0022Items\u0022:[{\u0022playerId\u0022:\u00221\u0022,\u0022playerLoc\u0022:\u0022Powai\u0022},{\u0022playerId\u0022:\u00222\u0022,\u0022playerLoc\u0022:\u0022Andheri\u0022},{\u0022playerId\u0022:\u00223\u0022,\u0022playerLoc\u0022:\u0022Churchgate\u0022}]}\n\n\nTo serialize the multiple data from php as arrays, you can now do\n\npublic player[] playerInstance;\nplayerInstance = JsonHelper.FromJson\u003Cplayer\u003E(serviceData);\n\n\nplayerInstance[0] is your first data\n\nplayerInstance[1] is your second data\n\nplayerInstance[2] is your third data\n\nor data inside the class with playerInstance[0].playerLoc, playerInstance[1].playerLoc, playerInstance[2].playerLoc ......\n\nYou can use playerInstance.Length to check the length before accessing it.\n\nNOTE:  Remove { get; set; } from the player class. If you have { get; set; }, it won\u0027t work. Unity\u0027s JsonUtility does NOT work with class members that are defined as properties.\n    ",
      "\nAssume you got a JSON like this\n\n[\n    {\n        \u0022type\u0022: \u0022qrcode\u0022,\n        \u0022symbol\u0022: [\n            {\n                \u0022seq\u0022: 0,\n                \u0022data\u0022: \u0022HelloWorld9887725216\u0022,\n                \u0022error\u0022: null\n            }\n        ]\n    }\n]\n\n\nTo parse the above JSON in unity, you can create JSON model like this.\n\n[System.Serializable]\npublic class QrCodeResult\n{\n    public QRCodeData[] result;\n}\n\n[System.Serializable]\npublic class Symbol\n{\n    public int seq;\n    public string data;\n    public string error;\n}\n\n[System.Serializable]\npublic class QRCodeData\n{\n    public string type;\n    public Symbol[] symbol;\n}\n\n\nAnd then simply parse in the following manner...\n\nvar myObject = JsonUtility.FromJson\u003CQrCodeResult\u003E(\u0022{\\\u0022result\\\u0022:\u0022 \u002B jsonString.ToString() \u002B \u0022}\u0022);\n\n\nNow you can modify the JSON/CODE according to your need.\nhttps://docs.unity3d.com/Manual/JSONSerialization.html\n    ",
      "\nyou  have to add [System.Serializable] to PlayerItem class ,like this:\n\nusing System;\n[System.Serializable]\npublic class PlayerItem   {\n    public string playerId;\n    public string playerLoc;\n    public string playerNick;\n}\n\n    ",
      "\nTo Read JSON File, refer this simple example\n\nYour JSON File (StreamingAssets/Player.json)\n\n{\n    \u0022Name\u0022: \u0022MyName\u0022,\n    \u0022Level\u0022: 4\n}\n\n\nC# Script\n\npublic class Demo\n{\n    public void ReadJSON()\n    {\n        string path = Application.streamingAssetsPath \u002B \u0022/Player.json\u0022;\n        string JSONString = File.ReadAllText(path);\n        Player player = JsonUtility.FromJson\u003CPlayer\u003E(JSONString);\n        Debug.Log(player.Name);\n    }\n}\n\n[System.Serializable]\npublic class Player\n{\n    public string Name;\n    public int Level;\n}\n\n    ",
      "\nDon\u0027t trim the [] and you should be fine. [] identify a JSON array which is exactly what you require to be able to iterate its elements.\n    ",
      "\nLike @Maximiliangerhardt said, MiniJson do not have the capability to deserialize properly. I used JsonFx and works like a charm. Works with the []\n\nplayer[] p = JsonReader.Deserialize\u003Cplayer[]\u003E(serviceData);\nDebug.Log(p[0].playerId \u002B\u0022 \u0022\u002B p[0].playerLoc\u002B\u0022--\u0022\u002B p[1].playerId \u002B \u0022 \u0022 \u002B p[1].playerLoc\u002B\u0022--\u0022\u002B p[2].playerId \u002B \u0022 \u0022 \u002B p[2].playerLoc);\n\n    ",
      "\nYou can use Newtonsoft.Json just add Newtonsoft.dll to your project and use below script\n\nusing System;\nusing Newtonsoft.Json;\nusing UnityEngine;\n\npublic class NewBehaviourScript : MonoBehaviour\n{\n\n    [Serializable]\n    public class Person\n    {\n        public string id;\n        public string name;\n    }\n    public Person[] person;\n\n    private void Start()\n    {\n       var myjson = JsonConvert.SerializeObject(person);\n\n        print(myjson);\n\n    }\n}\n\n\n\n\nanother solution is using JsonHelper\n\nusing System;\nusing Newtonsoft.Json;\nusing UnityEngine;\n\npublic class NewBehaviourScript : MonoBehaviour\n{\n\n    [Serializable]\n    public class Person\n    {\n        public string id;\n        public string name;\n    }\n    public Person[] person;\n\n    private void Start()\n    {\n        var myjson = JsonHelper.ToJson(person);\n\n        print(myjson);\n\n    }\n}\n\n\n\n    ",
      "\nIF you are using Vector3 this is what i did \n\n1- I create a class Name it Player \n\nusing System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n[Serializable]\npublic class Player\n{\n    public Vector3[] Position;\n\n}\n\n\n2- then i call it like this \n\nif ( _ispressed == true)\n        {\n            Player playerInstance = new Player();\n            playerInstance.Position = newPos;\n            string jsonData = JsonUtility.ToJson(playerInstance);\n\n            reference.Child(\u0022Position\u0022 \u002B Random.Range(0, 1000000)).SetRawJsonValueAsync(jsonData);\n            Debug.Log(jsonData);\n            _ispressed = false;\n        }\n\n\n3- and this is the result \n\n\n  \u0022Position\u0022:[\n  {\u0022x\u0022:-2.8567452430725099,\u0022y\u0022:-2.4323320388793947,\u0022z\u0022:0.0}]}\n\n    ",
      "\nUnity \u003C= 2019\nNarottam Goyal had a good idea of wrapping the array in a json object, and then deserializing into a struct.\nThe following uses Generics to solve this for arrays of all type, as opposed to making a new class everytime.\n[System.Serializable]\nprivate struct JsonArrayWrapper\u003CT\u003E {\n    public T wrap_result;\n}\n\npublic static T ParseJsonArray\u003CT\u003E(string json) {\n    var temp = JsonUtility.FromJson\u003CJsonArrayWrapper\u003CT\u003E\u003E(\u0022{\\\u0022 wrap_result\\\u0022:\u0022 \u002B json \u002B \u0022}\u0022);\n    return temp.wrap_result;\n}\n\nIt can be used in the following way:\nstring[] options = ParseJsonArray\u003Cstring[]\u003E(someArrayOfStringsJson);\n\nUnity 2020\nIn Unity 2020 there is an official newtonsoft package which is a far better json library.\n    ",
      "\n                \n                I am returning an array of rows of a mysql query from PHP using json_encode($row). So the response consists of multiple JSONObjects in the format [{\u0022playerId\u0022:\u00221\u0022,\u0022playerLoc\u0022:\u0022Powai\u0022},{\u0022playerId\u0022:\u00222\u0022,\u0022playerLoc\u0022:\u0022Andheri\u0022},{\u0022playerId\u0022:\u00223\u0022,\u0022playerLoc\u0022:\u0022Churchgate\u0022}]. I tried JsonUtility, but I couldn\u0027t deserialize the objects and get individual json objects. If you can help me with that.\n                \n\u2013\u00A0dil33pm\n                Mar 27 \u002716 at 6:58\n            ",
      "\n                \n                Look at the code I posted above. It shows you three ways to do that with JsonUtility.FromJson. I forgot to tell you to remove { get; set; } from the player class. If you have { get; set; }, it wont work. Compare your player class with the one I posted above and you will understand what I am saying.\n                \n\u2013\u00A0Programmer\n                Mar 27 \u002716 at 7:04\n                        \n                            \n                        \n            ",
      "\n                \n                No problem. I will edit this when Unity adds support for array(which is very soon) so you won\u0027t need that Helper class anymore.\n                \n\u2013\u00A0Programmer\n                Mar 27 \u002716 at 17:16\n                        \n                            \n                        \n            ",
      "\n                \n                I would not go as far as to say \u0022Forget about all the 3rd party libraries\u0022. JsonUtility has limitations. It does not return a JSON object on which you can perform actions. For instance, I get a json file and want to check whether a \u0022success\u0022 key is available. Can\u0027t do. The JsonUtility requires the consumer knows the exact content of the json file. Also, no Dictionary converter. So it does some good things but the usage of 3rd party is still required.\n                \n\u2013\u00A0Everts\n                Feb 3 \u002717 at 8:28\n            ",
      "\n                \n                Use JsonHelper. It\u0027s fine. If you create Json with it, you can also read json with it without extra steps. The only time you may need to do extra stuff is if you are receiving the json array from the server and that is included in the solution is in my answer. Another way without JsonHelper is to put the class  in another class then make it a List. This has been working for most people. If you are looking for a way to save and load game data then see this. You load and save with one line of code.\n                \n\u2013\u00A0Programmer\n                Mar 8 \u002717 at 16:42\n            ",
      "\n                \n                This actually works quite well, got it working with a class like Symbol that is not an array as well.\n                \n\u2013\u00A0Gennon\n                May 14 \u002718 at 14:46\n            ",
      "\n                \n                I\u0027m trying this with unity 2018 but this does not work: the arrays aren\u0027t parsed\n                \n\u2013\u00A0Jean-Micha\u00EBl Celerier\n                Oct 6 \u002718 at 13:04\n            ",
      "\n                \n                Used in unity 2018 and 2019. Works great. Access the array data like: Debug.Log(myObject.result[0].symbol[0].data); or for(var i = 0; i \u003C= myObject.result.Length - 1; i \u002B\u002B) { Debug.Log(myObject.result[i].type); } or foreach (var item  in myObject.result) { Debug.Log(item.type); }\n                \n\u2013\u00A0Towerss\n                Apr 29 \u002719 at 5:26\n            ",
      "\n                \n                @Narottam Goyal, your method is not working in some cases, also a very difficult solution for beginners, refer this answer by me on this thread link\n                \n\u2013\u00A0Juned Khan Momin\n                May 15 \u002719 at 9:47\n                        \n                            \n                        \n            ",
      "\n                \n                @JunedKhanMomin your answer does basically the same but without adressing the fact that this question here was about a root level array in the JSON data in specific. In general you should rather refer to Programmer\u0027s answer which is way more elaborated.\n                \n\u2013\u00A0derHugo\n                Jun 7 \u002719 at 3:57\n                        \n                            \n                        \n            ",
      "\n                \n                What about arrays? And what does this answer add that wasn\u0027t metnioned already in the accepted answer from over 3 years ago?\n                \n\u2013\u00A0derHugo\n                Jul 1 \u002719 at 6:23\n            ",
      "\n                \n                @derHugo it includes a call to File.ReadAllText which I think is helpful and no other answer mentions :)\n                \n\u2013\u00A0Ruzihm\n                Sep 23 at 22:09\n            ",
      "\n                \n                @Ruzihm well the reason why no other answer mentioned it is because this question\u0027s scope is how to (de)serialize .. not how to do FileIO ;)\n                \n\u2013\u00A0derHugo\n                Sep 24 at 6:59\n            ",
      "\n                \n                Note that newtonsoft does not seem to be working in unity when you build on android for example. It will work on the unity editor though.. Seems a fork of newtonsoft for unity is recommended in that case stackoverflow.com/questions/59194154/\u2026\n                \n\u2013\u00A0Rose\n                Nov 22 at 6:25\n                        \n                            \n                        \n            ",
      "\n                \n                The link you provided is dead, but this link is listed as related article: docs.unity3d.com/Packages/com.unity.nuget.newtonsoft-json@2.0/\u2026  with note: \u0022This is a package intended for internal Unity Development Projects and as such this package is not supported. Use at your own risk.\u0022\n                \n\u2013\u00A0R2RT\n                Sep 17 at 16:31\n            "
    ]
  },
  {
    "Id": "fa76786d-b4a5-4457-8c8e-5f1f9b5c4f15",
    "QuestionId": 41391708,
    "Description": "How to detect click/touch events on UI and GameObjects",
    "Votes": 81,
    "Views": 82209,
    "Tags": [
      "c#",
      "unity3d"
    ],
    "Discussions": [
      "\nYou don\u0027t use the Input API for the new UI. You subscribe to UI events or implement interface depending on the event.\n\nThese are the proper ways to detect events on the new UI components:\n\n1.Image, RawImage and Text Components:\n\nImplement the needed interface and override its function. The example below implements the most used events.\n\nusing UnityEngine.EventSystems;\n\npublic class ClickDetector : MonoBehaviour, IPointerDownHandler, IPointerClickHandler,\n    IPointerUpHandler, IPointerExitHandler, IPointerEnterHandler,\n    IBeginDragHandler, IDragHandler, IEndDragHandler\n{\n    public void OnBeginDrag(PointerEventData eventData)\n    {\n        Debug.Log(\u0022Drag Begin\u0022);\n    }\n\n    public void OnDrag(PointerEventData eventData)\n    {\n        Debug.Log(\u0022Dragging\u0022);\n    }\n\n    public void OnEndDrag(PointerEventData eventData)\n    {\n        Debug.Log(\u0022Drag Ended\u0022);\n    }\n\n    public void OnPointerClick(PointerEventData eventData)\n    {\n        Debug.Log(\u0022Clicked: \u0022 \u002B eventData.pointerCurrentRaycast.gameObject.name);\n    }\n\n    public void OnPointerDown(PointerEventData eventData)\n    {\n        Debug.Log(\u0022Mouse Down: \u0022 \u002B eventData.pointerCurrentRaycast.gameObject.name);\n    }\n\n    public void OnPointerEnter(PointerEventData eventData)\n    {\n        Debug.Log(\u0022Mouse Enter\u0022);\n    }\n\n    public void OnPointerExit(PointerEventData eventData)\n    {\n        Debug.Log(\u0022Mouse Exit\u0022);\n    }\n\n    public void OnPointerUp(PointerEventData eventData)\n    {\n        Debug.Log(\u0022Mouse Up\u0022);\n    }\n}\n\n\n2.Button Component:\n\nYou use events to register to Button clicks:\n\npublic class ButtonClickDetector : MonoBehaviour\n{\n    public Button button1;\n    public Button button2;\n    public Button button3;\n\n    void OnEnable()\n    {\n        //Register Button Events\n        button1.onClick.AddListener(() =\u003E buttonCallBack(button1));\n        button2.onClick.AddListener(() =\u003E buttonCallBack(button2));\n        button3.onClick.AddListener(() =\u003E buttonCallBack(button3));\n\n    }\n\n    private void buttonCallBack(Button buttonPressed)\n    {\n        if (buttonPressed == button1)\n        {\n            //Your code for button 1\n            Debug.Log(\u0022Clicked: \u0022 \u002B button1.name);\n        }\n\n        if (buttonPressed == button2)\n        {\n            //Your code for button 2\n            Debug.Log(\u0022Clicked: \u0022 \u002B button2.name);\n        }\n\n        if (buttonPressed == button3)\n        {\n            //Your code for button 3\n            Debug.Log(\u0022Clicked: \u0022 \u002B button3.name);\n        }\n    }\n\n    void OnDisable()\n    {\n        //Un-Register Button Events\n        button1.onClick.RemoveAllListeners();\n        button2.onClick.RemoveAllListeners();\n        button3.onClick.RemoveAllListeners();\n    }\n}\n\n\nIf you are detecting something other than Button Click on the Button then use method 1. For example, Button down and not Button Click, use IPointerDownHandler and its OnPointerDown function from method 1. \n\n3.InputField Component:\n\nYou use events to register to register for InputField submit:\n\npublic InputField inputField;\n\nvoid OnEnable()\n{\n    //Register InputField Events\n    inputField.onEndEdit.AddListener(delegate { inputEndEdit(); });\n    inputField.onValueChanged.AddListener(delegate { inputValueChanged(); });\n}\n\n//Called when Input is submitted\nprivate void inputEndEdit()\n{\n    Debug.Log(\u0022Input Submitted\u0022);\n}\n\n//Called when Input changes\nprivate void inputValueChanged()\n{\n    Debug.Log(\u0022Input Changed\u0022);\n}\n\nvoid OnDisable()\n{\n    //Un-Register InputField Events\n    inputField.onEndEdit.RemoveAllListeners();\n    inputField.onValueChanged.RemoveAllListeners();\n}\n\n\n4.Slider Component:\n\nTo detect when slider value changes during drag:\n\npublic Slider slider;\n\nvoid OnEnable()\n{\n    //Subscribe to the Slider Click event\n    slider.onValueChanged.AddListener(delegate { sliderCallBack(slider.value); });\n}\n\n//Will be called when Slider changes\nvoid sliderCallBack(float value)\n{\n    Debug.Log(\u0022Slider Changed: \u0022 \u002B value);\n}\n\nvoid OnDisable()\n{\n    //Un-Subscribe To Slider Event\n    slider.onValueChanged.RemoveListener(delegate { sliderCallBack(slider.value); });\n}\n\n\nFor other events, use Method 1.\n\n5.Dropdown Component\n\npublic Dropdown dropdown;\nvoid OnEnable()\n{\n    //Register to onValueChanged Events\n\n    //Callback with parameter\n    dropdown.onValueChanged.AddListener(delegate { callBack(); });\n\n    //Callback without parameter\n    dropdown.onValueChanged.AddListener(callBackWithParameter);\n}\n\nvoid OnDisable()\n{\n    //Un-Register from onValueChanged Events\n    dropdown.onValueChanged.RemoveAllListeners();\n}\n\nvoid callBack()\n{\n\n}\n\nvoid callBackWithParameter(int value)\n{\n\n}\n\n\n\n\nNON-UI OBJECTS:\n\n6.For 3D Object (Mesh Renderer/any 3D Collider)\n\nAdd PhysicsRaycaster to the Camera then use any of the events from Method 1. \n\nThe code below will automatically add PhysicsRaycaster to the main Camera.\n\npublic class MeshDetector : MonoBehaviour, IPointerDownHandler\n{\n    void Start()\n    {\n        addPhysicsRaycaster();\n    }\n\n    void addPhysicsRaycaster()\n    {\n        PhysicsRaycaster physicsRaycaster = GameObject.FindObjectOfType\u003CPhysicsRaycaster\u003E();\n        if (physicsRaycaster == null)\n        {\n            Camera.main.gameObject.AddComponent\u003CPhysicsRaycaster\u003E();\n        }\n    }\n\n    public void OnPointerDown(PointerEventData eventData)\n    {\n        Debug.Log(\u0022Clicked: \u0022 \u002B eventData.pointerCurrentRaycast.gameObject.name);\n    }\n\n    //Implement Other Events from Method 1\n}\n\n\n7.For 2D Object (Sprite Renderer/any 2D Collider)\n\nAdd Physics2DRaycaster to the Camera then use any of the events from Method 1. \n\nThe code below will automatically add Physics2DRaycaster to the main Camera.\n\npublic class SpriteDetector : MonoBehaviour, IPointerDownHandler\n{\n    void Start()\n    {\n        addPhysics2DRaycaster();\n    }\n\n    void addPhysics2DRaycaster()\n    {\n        Physics2DRaycaster physicsRaycaster = GameObject.FindObjectOfType\u003CPhysics2DRaycaster\u003E();\n        if (physicsRaycaster == null)\n        {\n            Camera.main.gameObject.AddComponent\u003CPhysics2DRaycaster\u003E();\n        }\n    }\n\n    public void OnPointerDown(PointerEventData eventData)\n    {\n        Debug.Log(\u0022Clicked: \u0022 \u002B eventData.pointerCurrentRaycast.gameObject.name);\n    }\n\n    //Implement Other Events from Method 1\n}\n\n\n\n\nTroubleshooting the EventSystem:\n\nNo clicks detected on UI, 2D Objects (Sprite Renderer/any 2D Collider) and 3D Objects (Mesh Renderer/any 3D Collider):\n\nA.Check that you have EventSystem. Without EventSystem it can\u0027t detect clicks at-all. If you don\u0027t have have it, create it yourself.\n\n\n\nGo to GameObject ---\u003E  UI ---\u003E Event System. This will create an EventSystem if it doesn\u0027t exist yet. If it already exist, Unity will just ignore it.\n\n\n\nB.The UI component or GameObject with the UI component must be under a Canvas. It means that a Canvas must be the parent of the UI component. Without this, EventSystem will not function and clicks will not be detected. \n\nThis only applies to UI Objects. It doesn\u0027t apply to 2D (Sprite Renderer/any 2D Collider) or 3D Objects (Mesh Renderer/any 3D Collider).\n\n\n\nC.If this is a 3D Object, PhysicsRaycaster is not attached to the camera. Make sure that PhysicsRaycaster is attached to the camera. See #6 above for more information. \n\n\n\nD.If this is a 2D Object, Physics2DRaycaster is not attached to the camera. Make sure that Physics2DRaycaster is attached to the camera. See #7 above for more information. \n\n\n\nE.If this is a UI object you want to detect clicks on with the interface functions such as OnBeginDrag, OnPointerClick, OnPointerEnter and other functions mentioned in #1 then the script with the detection code must be attached to that UI Object you want to detect click on. \n\n\n\nF.Also, if this is a UI Object you want to detect clicks on, make sure that no other UI Object is in front of it. If there is another UI in front of the one you want to detect click on, it will be blocking that click. \n\nTo verify that this is not the issue, disable every object under the Canvas except the one you want to detect click on then see if clicking it works.\n    ",
      "\nYou can add an EventTrigger Componenet to Your UI elements that already have these Events you just have to pass method/Function on specific event.\n    ",
      "\nYou could use OnMouseDown as well. OnMouseDown is called when the user has pressed the mouse button while over the GUIElement or Collider. This event is sent to all scripts of the Collider or GUIElement.\n\nusing UnityEngine;\nusing System.Collections;\nusing UnityEngine.SceneManagement; // The new load level needs this\n\npublic class ExampleClass : MonoBehaviour\n{\n    void OnMouseDown()\n    {\n        // Edit:\n        // Application.LoadLevel(\u0022SomeLevel\u0022);\n        // Application.LoadLevel() is depreciating but still works\n\n         SceneManager.LoadScene(\u0022SomeLevel\u0022); // The new way to load levels\n\n    }\n}\n\n    ",
      "\nDo not use OnMouseDown() for mobile performance and multi-touch issues.\nThis code works on UI Objects for multi-touches\nIn my answer, I use Image element with a \u0022Button\u0022 tag and it has a ButtonController script with a ButtonDown() public method that should be called when user touches the Image element.\n\nNote: Image element has a 2D Collider.\n\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing UnityEngine.EventSystems;\n\npublic class TouchScript : MonoBehaviour\n{\n    void Update()\n    {\n        PointerEventData pointer = new PointerEventData(EventSystem.current);\n        List\u003CRaycastResult\u003E raycastResult = new List\u003CRaycastResult\u003E();\n\n        foreach (Touch touch in Input.touches)\n        {\n            if(touch.phase.Equals(TouchPhase.Began))\n            {\n                pointer.position = touch.position;\n                EventSystem.current.RaycastAll(pointer, raycastResult);\n\n                foreach(RaycastResult result in raycastResult)\n                {\n                    if(result.gameObject.tag == \u0022Button\u0022)\n                    {\n                        result.gameObject.GetComponent\u003CButtonController\u003E().ButtonDown();\n                    }              \n                }\n                raycastResult.Clear();\n            }       \n        }\n    }\n}\n\n    ",
      "\n                \n                The UI API is meant to work on both mobile and desktop. That\u0027s the good side of it and this is not an issue at-all. I will update this to include other 3D(Mesh Renderer/Collider) and 2D(Sprite/2D Collider) in a moment.\n                \n\u2013\u00A0Programmer\n                Dec 30 \u002716 at 7:13\n            ",
      "\n                \n                Added Slider and 3D, 2D example. This is what you should be using now insted of the Input system or the old Raycast ways.\n                \n\u2013\u00A0Programmer\n                Dec 30 \u002716 at 7:54\n            ",
      "\n                \n                That\u0027s Great @Programmer. This is all i need. Thanks :)\n                \n\u2013\u00A0Dennis Liu\n                Dec 30 \u002716 at 8:26\n            ",
      "\n                \n                OnClick() is not a function from interface. You probably meant OnPointerClick which uses the IPointerClickHandler interface. Please read my answer again. Everything in my answer should work on desktop and mobile. I have seen some answer that tells people to use OnPointerClick for a Button component. This is so wrong. It will work but there is a bug they don\u0027t know about when you do that. To detect when a Button is clicked, use the event in my answer that uses AddListerner. Don\u0027t detect button click with OnPointerClick. OnPointerClick is for other components that is not a Button.\n                \n\u2013\u00A0Programmer\n                Dec 30 \u002716 at 11:28\n            ",
      "\n                \n                It would be useful to know what Game Objects to attach (or not attach) these scripts to. Some are obvious (button), but am I supposed to put #1 on the object I want to click on? On the camera? Does #7 go on my Game Object or the camera? Or is it somewhere else?\n                \n\u2013\u00A0meed96\n                Oct 15 \u002719 at 17:25\n            ",
      "\n                \n                Thanks I think got it.\n                \n\u2013\u00A0Dennis Liu\n                Dec 30 \u002716 at 7:29\n            "
    ]
  },
  {
    "Id": "5d379585-5876-4dc8-b78f-5c042416e1f2",
    "QuestionId": 32260,
    "Description": "Sending email in .NET through Gmail",
    "Votes": 900,
    "Views": 576407,
    "Tags": [
      "c#",
      ".net",
      "email",
      "smtp",
      "gmail"
    ],
    "Discussions": [
      "\nBe sure to use System.Net.Mail, not the deprecated System.Web.Mail. Doing SSL with System.Web.Mail is a gross mess of hacky extensions.\n\nusing System.Net;\nusing System.Net.Mail;\n\nvar fromAddress = new MailAddress(\u0022from@gmail.com\u0022, \u0022From Name\u0022);\nvar toAddress = new MailAddress(\u0022to@example.com\u0022, \u0022To Name\u0022);\nconst string fromPassword = \u0022fromPassword\u0022;\nconst string subject = \u0022Subject\u0022;\nconst string body = \u0022Body\u0022;\n\nvar smtp = new SmtpClient\n{\n    Host = \u0022smtp.gmail.com\u0022,\n    Port = 587,\n    EnableSsl = true,\n    DeliveryMethod = SmtpDeliveryMethod.Network,\n    UseDefaultCredentials = false,\n    Credentials = new NetworkCredential(fromAddress.Address, fromPassword)\n};\nusing (var message = new MailMessage(fromAddress, toAddress)\n{\n    Subject = subject,\n    Body = body\n})\n{\n    smtp.Send(message);\n}\n\n    ",
      "\nThe above answer doesn\u0027t work. You have to set DeliveryMethod = SmtpDeliveryMethod.Network or it will come back with a \u0022client was not authenticated\u0022 error. Also it\u0027s always a good idea to put a timeout.\n\nRevised code:\n\nusing System.Net.Mail;\nusing System.Net;\n\nvar fromAddress = new MailAddress(\u0022from@gmail.com\u0022, \u0022From Name\u0022);\nvar toAddress = new MailAddress(\u0022to@yahoo.com\u0022, \u0022To Name\u0022);\nconst string fromPassword = \u0022password\u0022;\nconst string subject = \u0022test\u0022;\nconst string body = \u0022Hey now!!\u0022;\n\nvar smtp = new SmtpClient\n{\n    Host = \u0022smtp.gmail.com\u0022,\n    Port = 587,\n    EnableSsl = true,\n    DeliveryMethod = SmtpDeliveryMethod.Network,\n    Credentials = new NetworkCredential(fromAddress.Address, fromPassword),\n    Timeout = 20000\n};\nusing (var message = new MailMessage(fromAddress, toAddress)\n{\n    Subject = subject,\n    Body = body\n})\n{\n    smtp.Send(message);\n}\n\n    ",
      "\nFor the other answers to work \u0022from a server\u0022 first Turn On Access for less secure apps in the gmail account.\n\nLooks like recently google changed it\u0027s security policy. The top rated answer no longer works, until you change your account settings as described here: https://support.google.com/accounts/answer/6010255?hl=en-GB\n\n\n\nAs of March 2016, google changed the setting location again!\n    ",
      "\nThis is to send email with attachement.. Simple and short..\n\nsource: http://coding-issues.blogspot.in/2012/11/sending-email-with-attachments-from-c.html\n\nusing System.Net;\nusing System.Net.Mail;\n\npublic void email_send()\n{\n    MailMessage mail = new MailMessage();\n    SmtpClient SmtpServer = new SmtpClient(\u0022smtp.gmail.com\u0022);\n    mail.From = new MailAddress(\u0022your mail@gmail.com\u0022);\n    mail.To.Add(\u0022to_mail@gmail.com\u0022);\n    mail.Subject = \u0022Test Mail - 1\u0022;\n    mail.Body = \u0022mail with attachment\u0022;\n\n    System.Net.Mail.Attachment attachment;\n    attachment = new System.Net.Mail.Attachment(\u0022c:/textfile.txt\u0022);\n    mail.Attachments.Add(attachment);\n\n    SmtpServer.Port = 587;\n    SmtpServer.Credentials = new System.Net.NetworkCredential(\u0022your mail@gmail.com\u0022, \u0022your password\u0022);\n    SmtpServer.EnableSsl = true;\n\n    SmtpServer.Send(mail);\n\n}\n\n    ",
      "\nGoogle may block sign in attempts from some apps or devices that do not use modern security standards. Since these apps and devices are easier to break into, blocking them helps keep your account safer.\n\nSome examples of apps that do not support the latest security standards include:\n\n\nThe Mail app on your iPhone or iPad with iOS 6 or below\nThe Mail app on your Windows phone preceding the 8.1 release\nSome Desktop mail clients like Microsoft Outlook and Mozilla Thunderbird\n\n\nTherefore, you have to enable Less Secure Sign-In in your google account.\n\nAfter sign into google account, go to:\n\nhttps://myaccount.google.com/lesssecureapps \nor \nhttps://www.google.com/settings/security/lesssecureapps \n\nIn C#, you can use the following code:\n\nusing (MailMessage mail = new MailMessage())\n{\n    mail.From = new MailAddress(\u0022email@gmail.com\u0022);\n    mail.To.Add(\u0022somebody@domain.com\u0022);\n    mail.Subject = \u0022Hello World\u0022;\n    mail.Body = \u0022\u003Ch1\u003EHello\u003C/h1\u003E\u0022;\n    mail.IsBodyHtml = true;\n    mail.Attachments.Add(new Attachment(\u0022C:\\\\file.zip\u0022));\n\n    using (SmtpClient smtp = new SmtpClient(\u0022smtp.gmail.com\u0022, 587))\n    {\n        smtp.Credentials = new NetworkCredential(\u0022email@gmail.com\u0022, \u0022password\u0022);\n        smtp.EnableSsl = true;\n        smtp.Send(mail);\n    }\n}\n\n    ",
      "\nFor me to get it to work, i had to enable my gmail account making it possible for other apps to gain access. This is done with the \u0022enable less secure apps\u0022 and also using this link:\nhttps://accounts.google.com/b/0/DisplayUnlockCaptcha\n    ",
      "\nHere is my version: \u0022Send Email In C # Using Gmail\u0022.\n\nusing System;\nusing System.Net;\nusing System.Net.Mail;\n\nnamespace SendMailViaGmail\n{\n   class Program\n   {\n   static void Main(string[] args)\n   {\n\n      //Specify senders gmail address\n      string SendersAddress = \u0022Sendersaddress@gmail.com\u0022;\n      //Specify The Address You want to sent Email To(can be any valid email address)\n      string ReceiversAddress = \u0022ReceiversAddress@yahoo.com\u0022;\n      //Specify The password of gmial account u are using to sent mail(pw of sender@gmail.com)\n      const string SendersPassword = \u0022Password\u0022;\n      //Write the subject of ur mail\n      const string subject = \u0022Testing\u0022;\n      //Write the contents of your mail\n      const string body = \u0022Hi This Is my Mail From Gmail\u0022;\n\n      try\n      {\n        //we will use Smtp client which allows us to send email using SMTP Protocol\n        //i have specified the properties of SmtpClient smtp within{}\n        //gmails smtp server name is smtp.gmail.com and port number is 587\n        SmtpClient smtp = new SmtpClient\n        {\n           Host = \u0022smtp.gmail.com\u0022,\n           Port = 587,\n           EnableSsl = true,\n           DeliveryMethod = SmtpDeliveryMethod.Network,\n           Credentials    = new NetworkCredential(SendersAddress, SendersPassword),\n           Timeout = 3000\n        };\n\n        //MailMessage represents a mail message\n        //it is 4 parameters(From,TO,subject,body)\n\n        MailMessage message = new MailMessage(SendersAddress, ReceiversAddress, subject, body);\n        /*WE use smtp sever we specified above to send the message(MailMessage message)*/\n\n        smtp.Send(message);\n        Console.WriteLine(\u0022Message Sent Successfully\u0022);\n        Console.ReadKey();\n     }\n\n     catch (Exception ex)\n     {\n        Console.WriteLine(ex.Message);\n        Console.ReadKey();\n     }\n    }\n   }\n }\n\n    ",
      "\nI hope this code will work fine. You can have a try.\n\n// Include this.                \nusing System.Net.Mail;\n\nstring fromAddress = \u0022xyz@gmail.com\u0022;\nstring mailPassword = \u0022*****\u0022;       // Mail id password from where mail will be sent.\nstring messageBody = \u0022Write the body of the message here.\u0022;\n\n\n// Create smtp connection.\nSmtpClient client = new SmtpClient();\nclient.Port = 587;//outgoing port for the mail.\nclient.Host = \u0022smtp.gmail.com\u0022;\nclient.EnableSsl = true;\nclient.Timeout = 10000;\nclient.DeliveryMethod = SmtpDeliveryMethod.Network;\nclient.UseDefaultCredentials = false;\nclient.Credentials = new System.Net.NetworkCredential(fromAddress, mailPassword);\n\n\n// Fill the mail form.\nvar send_mail = new MailMessage();\n\nsend_mail.IsBodyHtml = true;\n//address from where mail will be sent.\nsend_mail.From = new MailAddress(\u0022from@gmail.com\u0022);\n//address to which mail will be sent.           \nsend_mail.To.Add(new MailAddress(\u0022to@example.com\u0022);\n//subject of the mail.\nsend_mail.Subject = \u0022put any subject here\u0022;\n\nsend_mail.Body = messageBody;\nclient.Send(send_mail);\n\n    ",
      "\nSource : Send email in ASP.NET C#\n\nBelow is a sample working code for sending in a mail using C#, in the below example I am using google\u2019s smtp server. \n\nThe code is pretty self explanatory, replace email and password with your email and password values.\n\npublic void SendEmail(string address, string subject, string message)\n{\n    string email = \u0022yrshaikh.mail@gmail.com\u0022;\n    string password = \u0022put-your-GMAIL-password-here\u0022;\n\n    var loginInfo = new NetworkCredential(email, password);\n    var msg = new MailMessage();\n    var smtpClient = new SmtpClient(\u0022smtp.gmail.com\u0022, 587);\n\n    msg.From = new MailAddress(email);\n    msg.To.Add(new MailAddress(address));\n    msg.Subject = subject;\n    msg.Body = message;\n    msg.IsBodyHtml = true;\n\n    smtpClient.EnableSsl = true;\n    smtpClient.UseDefaultCredentials = false;\n    smtpClient.Credentials = loginInfo;\n    smtpClient.Send(msg);\n}\n\n    ",
      "\nInclude this,\n\nusing System.Net.Mail;\n\n\nAnd then,\n\nMailMessage sendmsg = new MailMessage(SendersAddress, ReceiversAddress, subject, body); \nSmtpClient client = new SmtpClient(\u0022smtp.gmail.com\u0022);\n\nclient.Port = Convert.ToInt16(\u0022587\u0022);\nclient.Credentials = new System.Net.NetworkCredential(\u0022mail-id@gmail.com\u0022,\u0022password\u0022);\nclient.EnableSsl = true;\n\nclient.Send(sendmsg);\n\n    ",
      "\nIf you want to send background email, then please do the below\n\n public void SendEmail(string address, string subject, string message)\n {\n Thread threadSendMails;\n threadSendMails = new Thread(delegate()\n    {\n\n      //Place your Code here \n\n     });\n  threadSendMails.IsBackground = true;\n  threadSendMails.Start();\n}\n\n\nand add namespace\n\nusing System.Threading;\n\n    ",
      "\nTry This,\n\n    private void button1_Click(object sender, EventArgs e)\n    {\n        try\n        {\n            MailMessage mail = new MailMessage();\n            SmtpClient SmtpServer = new SmtpClient(\u0022smtp.gmail.com\u0022);\n\n            mail.From = new MailAddress(\u0022your_email_address@gmail.com\u0022);\n            mail.To.Add(\u0022to_address\u0022);\n            mail.Subject = \u0022Test Mail\u0022;\n            mail.Body = \u0022This is for testing SMTP mail from GMAIL\u0022;\n\n            SmtpServer.Port = 587;\n            SmtpServer.Credentials = new System.Net.NetworkCredential(\u0022username\u0022, \u0022password\u0022);\n            SmtpServer.EnableSsl = true;\n\n            SmtpServer.Send(mail);\n            MessageBox.Show(\u0022mail Send\u0022);\n        }\n        catch (Exception ex)\n        {\n            MessageBox.Show(ex.ToString());\n        }\n    }\n\n    ",
      "\nTo avoid security issues in Gmail, you should generate an app password first from your Gmail settings and you can use this password instead of a real password to send an email even if you use two steps verification.\n    ",
      "\nuse this way \n\nMailMessage sendmsg = new MailMessage(SendersAddress, ReceiversAddress, subject, body); \nSmtpClient client = new SmtpClient(\u0022smtp.gmail.com\u0022);\n\nclient.Port = Convert.ToInt32(\u0022587\u0022);\nclient.EnableSsl = true;\nclient.Credentials = new System.Net.NetworkCredential(\u0022mail-id@gmail.com\u0022,\u0022MyPassWord\u0022);\nclient.Send(sendmsg);\n\n\nDon\u0027t forget this :\n\nusing System.Net;\nusing System.Net.Mail;\n\n    ",
      "\nChanging sender on Gmail / Outlook.com email:\n\nTo prevent spoofing - Gmail/Outlook.com won\u0027t let you send from an arbitrary user account name.\n\nIf you have a limited number of senders you can follow these instructions and then set the From field to this address: Sending mail from a different address\n\nIf you are wanting to send from an arbitrary email address (such as a feedback form on website where the user enters their email and you don\u0027t want them emailing you directly) about the best you can do is this :\n\n        msg.ReplyToList.Add(new System.Net.Mail.MailAddress(email, friendlyName));\n\n\nThis would let you just hit \u0027reply\u0027 in your email account to reply to the fan of your band on a feedback page, but they wouldn\u0027t get your actual email which would likely lead to a tonne of spam.\n\nIf you\u0027re in a controlled environment this works great, but please note that I\u0027ve seen some email clients send to the from address even when reply-to is specified (I don\u0027t know which).\n    ",
      "\nI had the same issue, but it was resolved by going to gmail\u0027s security settings and Allowing Less Secure apps.\nThe Code from Domenic \u0026 Donny works, but only if you enabled that setting\n\nIf you are signed in (to Google) you can follow this link and toggle \u0022Turn on\u0022 for \u0022Access for less secure apps\u0022\n    ",
      "\nusing System;\nusing System.Net;\nusing System.Net.Mail;\n\nnamespace SendMailViaGmail\n{\n   class Program\n   {\n   static void Main(string[] args)\n   {\n\n      //Specify senders gmail address\n      string SendersAddress = \u0022Sendersaddress@gmail.com\u0022;\n      //Specify The Address You want to sent Email To(can be any valid email address)\n      string ReceiversAddress = \u0022ReceiversAddress@yahoo.com\u0022;\n      //Specify The password of gmial account u are using to sent mail(pw of sender@gmail.com)\n      const string SendersPassword = \u0022Password\u0022;\n      //Write the subject of ur mail\n      const string subject = \u0022Testing\u0022;\n      //Write the contents of your mail\n      const string body = \u0022Hi This Is my Mail From Gmail\u0022;\n\n      try\n      {\n        //we will use Smtp client which allows us to send email using SMTP Protocol\n        //i have specified the properties of SmtpClient smtp within{}\n        //gmails smtp server name is smtp.gmail.com and port number is 587\n        SmtpClient smtp = new SmtpClient\n        {\n           Host = \u0022smtp.gmail.com\u0022,\n           Port = 587,\n           EnableSsl = true,\n           DeliveryMethod = SmtpDeliveryMethod.Network,\n           Credentials = new NetworkCredential(SendersAddress, SendersPassword),\n           Timeout = 3000\n        };\n\n        //MailMessage represents a mail message\n        //it is 4 parameters(From,TO,subject,body)\n\n        MailMessage message = new MailMessage(SendersAddress, ReceiversAddress, subject, body);\n        /*WE use smtp sever we specified above to send the message(MailMessage message)*/\n\n        smtp.Send(message);\n        Console.WriteLine(\u0022Message Sent Successfully\u0022);\n        Console.ReadKey();\n     }\n     catch (Exception ex)\n     {\n        Console.WriteLine(ex.Message);\n        Console.ReadKey();\n     }\n}\n}\n}\n\n    ",
      "\nHere is one method to send mail and getting credentials from web.config:\n\npublic static string SendEmail(string To, string Subject, string Msg, bool bodyHtml = false, bool test = false, Stream AttachmentStream = null, string AttachmentType = null, string AttachmentFileName = null)\n{\n    try\n    {\n        System.Net.Mail.MailMessage newMsg = new System.Net.Mail.MailMessage(System.Configuration.ConfigurationManager.AppSettings[\u0022mailCfg\u0022], To, Subject, Msg);\n        newMsg.BodyEncoding = System.Text.Encoding.UTF8;\n        newMsg.HeadersEncoding = System.Text.Encoding.UTF8;\n        newMsg.SubjectEncoding = System.Text.Encoding.UTF8;\n\n        System.Net.Mail.SmtpClient smtpClient = new System.Net.Mail.SmtpClient();\n        if (AttachmentStream != null \u0026\u0026 AttachmentType != null \u0026\u0026 AttachmentFileName != null)\n        {\n            System.Net.Mail.Attachment attachment = new System.Net.Mail.Attachment(AttachmentStream, AttachmentFileName);\n            System.Net.Mime.ContentDisposition disposition = attachment.ContentDisposition;\n            disposition.FileName = AttachmentFileName;\n            disposition.DispositionType = System.Net.Mime.DispositionTypeNames.Attachment;\n\n            newMsg.Attachments.Add(attachment);\n        }\n        if (test)\n        {\n            smtpClient.PickupDirectoryLocation = \u0022C:\\\\TestEmail\u0022;\n            smtpClient.DeliveryMethod = System.Net.Mail.SmtpDeliveryMethod.SpecifiedPickupDirectory;\n        }\n        else\n        {\n            //smtpClient.EnableSsl = true;\n        }\n\n        newMsg.IsBodyHtml = bodyHtml;\n        smtpClient.Send(newMsg);\n        return SENT_OK;\n    }\n    catch (Exception ex)\n    {\n\n        return \u0022Error: \u0022 \u002B ex.Message\n             \u002B \u0022\u003Cbr/\u003E\u003Cbr/\u003EInner Exception: \u0022\n             \u002B ex.InnerException;\n    }\n\n}\n\n\nAnd the corresponding section in web.config:\n\n\u003CappSettings\u003E\n    \u003Cadd key=\u0022mailCfg\u0022 value=\u0022yourmail@example.com\u0022/\u003E\n\u003C/appSettings\u003E\n\u003Csystem.net\u003E\n  \u003CmailSettings\u003E\n    \u003Csmtp deliveryMethod=\u0022Network\u0022 from=\u0022yourmail@example.com\u0022\u003E\n      \u003Cnetwork defaultCredentials=\u0022false\u0022 host=\u0022mail.exapmple.com\u0022 userName=\u0022yourmail@example.com\u0022 password=\u0022your_password\u0022 port=\u002225\u0022/\u003E\n    \u003C/smtp\u003E\n  \u003C/mailSettings\u003E\n\u003C/system.net\u003E\n\n    ",
      "\nTry this one \n\npublic static bool Send(string receiverEmail, string ReceiverName, string subject, string body)\n{\n        MailMessage mailMessage = new MailMessage();\n        MailAddress mailAddress = new MailAddress(\u0022abc@gmail.com\u0022, \u0022Sender Name\u0022); // abc@gmail.com = input Sender Email Address \n        mailMessage.From = mailAddress;\n        mailAddress = new MailAddress(receiverEmail, ReceiverName);\n        mailMessage.To.Add(mailAddress);\n        mailMessage.Subject = subject;\n        mailMessage.Body = body;\n        mailMessage.IsBodyHtml = true;\n\n        SmtpClient mailSender = new SmtpClient(\u0022smtp.gmail.com\u0022, 587)\n        {\n            EnableSsl = true,\n            UseDefaultCredentials = false,\n            DeliveryMethod = System.Net.Mail.SmtpDeliveryMethod.Network,\n            Credentials = new NetworkCredential(\u0022abc@gmail.com\u0022, \u0022pass\u0022)   // abc@gmail.com = input sender email address  \n                                                                           //pass = sender email password\n        };\n\n        try\n        {\n            mailSender.Send(mailMessage);\n            return true;\n        }\n        catch (SmtpFailedRecipientException ex)\n        { \n          // Write the exception to a Log file.\n        }\n        catch (SmtpException ex)\n        { \n           // Write the exception to a Log file.\n        }\n        finally\n        {\n            mailSender = null;\n            mailMessage.Dispose();\n        }\n        return false;\n}\n\n    ",
      "\nCopying from another answer, the above methods work but gmail always replaces the \u0022from\u0022 and \u0022reply to\u0022 email with the actual sending gmail account.  apparently there is a work around however:\n\nhttp://karmic-development.blogspot.in/2013/10/send-email-from-aspnet-using-gmail-as.html\n\n\u00223. In the Accounts Tab, Click on the link \u0022Add another email address you own\u0022 then verify it\u0022\n\nOr possibly this\n\nUpdate 3: Reader Derek Bennett says, \u0022The solution is to go into your gmail Settings:Accounts and \u0022Make default\u0022 an account other than your gmail account. This will cause gmail to re-write the From field with whatever the default account\u0027s email address is.\u0022\n    ",
      "\nYou can try Mailkit. It gives you better and advance functionality for send mail. You can find more from this Here is an example \n\n    MimeMessage message = new MimeMessage();\n    message.From.Add(new MailboxAddress(\u0022FromName\u0022, \u0022YOU_FROM_ADDRESS@gmail.com\u0022));\n    message.To.Add(new MailboxAddress(\u0022ToName\u0022, \u0022YOU_TO_ADDRESS@gmail.com\u0022));\n    message.Subject = \u0022MyEmailSubject\u0022;\n\n    message.Body = new TextPart(\u0022plain\u0022)\n    {\n        Text = @\u0022MyEmailBodyOnlyTextPart\u0022\n    };\n\n    using (var client = new SmtpClient())\n    {\n        client.Connect(\u0022SERVER\u0022, 25); // 25 is port you can change accordingly\n\n        // Note: since we don\u0027t have an OAuth2 token, disable\n        // the XOAUTH2 authentication mechanism.\n        client.AuthenticationMechanisms.Remove(\u0022XOAUTH2\u0022);\n\n        // Note: only needed if the SMTP server requires authentication\n        client.Authenticate(\u0022YOUR_USER_NAME\u0022, \u0022YOUR_PASSWORD\u0022);\n\n        client.Send(message);\n        client.Disconnect(true);\n    }\n\n    ",
      "\n\nIf your Google password doesn\u0027t work, you may need to create an app-specific password for Gmail on Google.\nhttps://support.google.com/accounts/answer/185833?hl=en\n    ",
      "\n                \n                You can still get user not logged in errors if Google just suddenly decides you have sent too many in the past xx number of minutes.  You should always add a trySend, if it errors sleep a while, and then attempt again.\n                \n\u2013\u00A0Jason Short\n                Aug 26 \u002709 at 6:30\n            ",
      "\n                \n                Interesting note: If you swap \u0027UseDefaultCredentials = false,\u0027 and \u0027Credentials = ...\u0027 it won\u0027t authenticate.\n                \n\u2013\u00A0Nathan Wheeler\n                Nov 17 \u002709 at 16:56\n            ",
      "\n                \n                There are no problems with SPF using this method. Every email client can be configured to do exactly this. You just may get problems if you use your own server (i.e. something else than smtp.gmail.com) with something@gmail.com as sender. Btw: smtp.gmail.com automatically overwrites the sender address if it\u0027s not yours.\n                \n\u2013\u00A0Meinersbur\n                Mar 18 \u002710 at 18:39\n            ",
      "\n                \n                I was having a hard time getting this working even with trying various tweaks.  As suggested on a related post, I found that it was actually my antivirus that was preventing emails from being successfully sent.  The antivirus in question is McAffee, and its \u0022Access Protection\u0022 has a \u0022Antivirus Standard Protection\u0022 category that has a \u0022Prevent mass mailing worms from sending email\u0022 rule.  Tweaking / disabling that rule got this code working for me!\n                \n\u2013\u00A0yourbuddypal\n                Aug 5 \u002712 at 17:02\n            ",
      "\n                \n                I was getting the 5.5.1 Authentication Required error message until I realized I was testing with an account (my personal one) that had two factor authentication turned on.  Once I used an account that didn\u0027t have that, it worked fine.  I could also have generated a password for my application that I was testing from in my personal acct, but I didn\u0027t want to do that.\n                \n\u2013\u00A0Nick DeVore\n                Jun 17 \u002713 at 16:18\n            ",
      "\n                \n                Interesting; it works on my machine (TM). But since this seems plausible, I\u0027ll add it to my answer.\n                \n\u2013\u00A0Domenic\n                Mar 16 \u002709 at 19:53\n            ",
      "\n                \n                Hmm my guess is that SmtpDeliveryMethod.Network is the default, but maybe the default gets changed when running in IIS---was that what you were doing?\n                \n\u2013\u00A0Domenic\n                Mar 16 \u002709 at 19:55\n            ",
      "\n                \n                I am using same code in Console application, it\u0027s through error \u0022Failure sending mail.\u0022\n                \n\u2013\u00A0Karthikeyan P\n                Aug 26 \u002715 at 15:02\n            ",
      "\n                \n                This answer doesnt work. Please, look at the question stackoverflow.com/questions/34851484/\u2026\n                \n\u2013\u00A0user5515846\n                Jan 19 \u002716 at 15:22\n            ",
      "\n                \n                This worked for me. And is also concerning. Not sure I want to turn that security off. May need to rethink...\n                \n\u2013\u00A0Sully\n                Apr 13 \u002716 at 12:41\n            ",
      "\n                \n                From security point of view better to turn on 2-step Verification and then generate and use app password- see How to send an email in .Net according to new security policies?\n                \n\u2013\u00A0Michael Freidgeim\n                Jun 5 \u002716 at 12:57\n            ",
      "\n                \n                @BCS Software, inmy program, the user insert any email which my program has to use it to send the message throught. So, how I can make the email user able to send the email even if the 2-factor authentication is turned on??\n                \n\u2013\u00A0Alaa\u0027\n                Jan 18 \u002718 at 13:44\n            ",
      "\n                \n                This is the same setting you need to alter if you wanted to use a Microsoft Outlook client (on a desktop, mobile phone, etc) to send/receive emails through Google\u0027s GMail.\n                \n\u2013\u00A0Brett Rigby\n                Apr 23 \u002719 at 10:44\n            ",
      "\n                \n                This did the trick for me. But make sure you put it back as quickly as you can :)\n                \n\u2013\u00A0Andrei Bazanov\n                Oct 6 at 9:10\n            ",
      "\n                \n                This answer needs to go top.\n                \n\u2013\u00A0Cute Bear\n                Sep 6 at 20:26\n            ",
      "\n                \n                While your article may in fact answer the question, it would be preferable to include the essential parts of the answer here, and provide the link for reference. Stack Overflow is only as useful as its questions and answers, and if your blog host goes down or your URLs get moved around, this answer becomes useless. Thanks!\n                \n\u2013\u00A0sarnold\n                Jan 16 \u002712 at 6:08\n                        \n                            \n                        \n            ",
      "\n                \n                message send_mail = new MailMessage();                                           How is this line suppose to work? You can\u0027t implicitly convert  \u0027System.Net.Mail.MailMessage\u0027 to \u0027System.Windows.Forms.Message\u0027\n                \n\u2013\u00A0Debaprasad\n                Mar 18 \u002714 at 6:23\n                        \n                            \n                        \n            ",
      "\n                \n                Instead of var ,I have used class name like NetworkCredential,MailMessage and SmtpClient.It work for me.\n                \n\u2013\u00A0Jui Test\n                Feb 28 \u002713 at 7:33\n            ",
      "\n                \n                This worked for me. Besides all the good points which are valid and mentioned above as well such as gmail security stuff mentioned above. The reason it worked was that one needs to switch off the default credentials of the object first, which are probably null or left empty BEFORE they can set their SmtpClient credentials, not AFTER. Thanks Yasser Shaikh.\n                \n\u2013\u00A0Soliman Samir Soliman\n                Sep 15 at 3:21\n            "
    ]
  },
  {
    "Id": "b92a15e7-e844-4c1e-a419-c3734efe4c4d",
    "QuestionId": 441309,
    "Description": "Why are mutable structs \u201Cevil\u201D?",
    "Votes": 501,
    "Views": 81208,
    "Tags": [
      "c#",
      "struct",
      "immutability",
      "mutable"
    ],
    "Discussions": [
      "\nStructs are value types which means they are copied when they are passed around. \n\nSo if you change a copy you are changing only that copy, not the original and not any other copies which might be around.\n\nIf your struct is immutable then all automatic copies resulting from being passed by value will be the same.\n\nIf you want to change it you have to consciously do it by creating a new instance of the struct with the modified data. (not a copy)\n    ",
      "\nWhere to start ;-p\n\nEric Lippert\u0027s blog is always good for a quote:\n\n\n  This is yet another reason why mutable\n  value types are evil. Try to always\n  make value types immutable.\n\n\nFirst, you tend to lose changes quite easily... for example, getting things out of a list:\n\nFoo foo = list[0];\nfoo.Name = \u0022abc\u0022;\n\n\nwhat did that change? Nothing useful...\n\nThe same with properties:\n\nmyObj.SomeProperty.Size = 22; // the compiler spots this one\n\n\nforcing you to do:\n\nBar bar = myObj.SomeProperty;\nbar.Size = 22;\nmyObj.SomeProperty = bar;\n\n\nless critically, there is a size issue; mutable objects tend to have multiple properties; yet if you have a struct with two ints, a string, a DateTime and a bool, you can very quickly burn through a lot of memory. With a class, multiple callers can share a reference to the same instance (references are small).\n    ",
      "\nI wouldn\u0027t say evil but mutability is often a sign of overeagerness on the part of the programmer to provide a maximum of functionality. In reality, this is often not needed and that, in turn, makes the interface smaller, easier to use and harder to use wrong (= more robust).\n\nOne example of this is read/write and write/write conflicts in race conditions. These simply can\u0027t occur in immutable structures, since a write is not a valid operation.\n\nAlso, I claim that mutability is almost never actually needed, the programmer just thinks that it might be in the future. For example, it simply doesn\u0027t make sense to change a date. Rather, create a new date based off the old one. This is a cheap operation, so performance is not a consideration.\n    ",
      "\nMutable structs are not evil. \n\nThey are absolutely necessary in high performance circumstances. For example when cache lines and or garbage collection become a bottleneck.\n\nI would not call the use of a immutable struct in these perfectly valid use-cases \u0022evil\u0022.\n\nI can see the point that C#\u0027s syntax does not help to distinguish the access of a member of a value type or of a reference type, so I am all for preferring immutable structs, that enforce immutability, over mutable structs.\n\nHowever, instead of simply labelling immutable structs as \u0022evil\u0022, I would advise to embrace the language and advocate more helpful and constructive rule of thumbs.\n\nFor example: \u0022structs are value types, which are copied by default. you need a reference if you don\u0027t want to copy them\u0022 or\n\u0022try to work with readonly structs first\u0022.\n    ",
      "\nStructs with public mutable fields or properties are not evil.\n\nStruct methods (as distinct from property setters) which mutate \u0022this\u0022 are somewhat evil, only because .net doesn\u0027t provide a means of distinguishing them from methods which do not.  Struct methods that do not mutate \u0022this\u0022 should be invokable even on read-only structs without any need for defensive copying.  Methods which do mutate \u0022this\u0022 should not be invokable at all on read-only structs.  Since .net doesn\u0027t want to forbid struct methods that don\u0027t modify \u0022this\u0022 from being invoked on read-only structs, but doesn\u0027t want to allow read-only structs to be mutated, it defensively copies structs in read-only contexts, arguably getting the worst of both worlds.\n\nDespite the problems with the handling of self-mutating methods in read-only contexts, however, mutable structs often offer semantics far superior to mutable class types.  Consider the following three method signatures:\n\nstruct PointyStruct {public int x,y,z;};\nclass PointyClass {public int x,y,z;};\n\nvoid Method1(PointyStruct foo);\nvoid Method2(ref PointyStruct foo);\nvoid Method3(PointyClass foo);\n\n\nFor each method, answer the following questions:\n\nAssuming the method doesn\u0027t use any \u0022unsafe\u0022 code, might it modify foo?\nIf no outside references to \u0027foo\u0027 exist before the method is called, could an outside reference exist after?\n\n\nAnswers:\n\n\n   Question 1:\n \u2003 Method1(): no (clear intent)\n \u2003 Method2(): yes (clear intent)\n \u2003 Method3(): yes (uncertain intent)\n Question 2:\n \u2003 Method1(): no\n \u2003 Method2(): no (unless unsafe)\n \u2003 Method3(): yes\n\n\nMethod1 can\u0027t modify foo, and never gets a reference.  Method2 gets a short-lived reference to foo, which it can use modify the fields of foo any number of times, in any order, until it returns, but it can\u0027t persist that reference.  Before Method2 returns, unless it uses unsafe code, any and all copies that might have been made of its \u0027foo\u0027 reference will have disappeared.  Method3, unlike Method2, gets a promiscuously-sharable reference to foo, and there\u0027s no telling what it might do with it.  It might not change foo at all, it might change foo and then return, or it might give a reference to foo to another thread which might mutate it in some arbitrary way at some arbitrary future time.  The only way to limit what Method3 might do to a mutable class object passed into it would be to encapsulate the mutable object into a read-only wrapper, which is ugly and cumbersome.\n\nArrays of structures offer wonderful semantics.  Given RectArray[500] of type Rectangle, it\u0027s clear and obvious how to e.g. copy element 123 to element 456 and then some time later set the width of element 123 to 555, without disturbing element 456.  \u0022RectArray[432] = RectArray[321]; ...; RectArray[123].Width = 555;\u0022.  Knowing that Rectangle is a struct with an integer field called Width will tell one all one needs to know about the above statements.\n\nNow suppose RectClass was a class with the same fields as Rectangle and one wanted to do the same operations on a RectClassArray[500] of type RectClass.  Perhaps the array is supposed to hold 500 pre-initialized immutable references to mutable RectClass objects.  in that case, the proper code would be something like \u0022RectClassArray[321].SetBounds(RectClassArray[456]); ...; RectClassArray[321].X = 555;\u0022.  Perhaps the array is assumed to hold instances that aren\u0027t going to change, so the proper code would be more like \u0022RectClassArray[321] = RectClassArray[456]; ...; RectClassArray[321] = New RectClass(RectClassArray[321]); RectClassArray[321].X = 555;\u0022  To know what one is supposed to do, one would have to know a lot more both about RectClass (e.g. does it support a copy constructor, a copy-from method, etc.) and the intended usage of the array.  Nowhere near as clean as using a struct.\n\nTo be sure, there is unfortunately no nice way for any container class other than an array to offer the clean semantics of a struct array.  The best one could do, if one wanted a collection to be indexed with e.g. a string, would probably be to offer a generic \u0022ActOnItem\u0022 method which would accept a string for the index, a generic parameter, and a delegate which would be passed by reference both the generic parameter and the collection item.  That would allow nearly the same semantics as struct arrays, but unless the vb.net and C# people can be pursuaded to offer a nice syntax, the code is going to be clunky-looking even if it is reasonably performance (passing a generic parameter would allow for use of a static delegate and would avoid any need to create any temporary class instances).\n\nPersonally, I\u0027m peeved at the hatred Eric Lippert et al. spew regarding mutable value types.  They offer much cleaner semantics than the promiscuous reference types that are used all over the place.  Despite some of the limitations with .net\u0027s support for value types, there are many cases where mutable value types are a better fit than any other kind of entity.\n    ",
      "\nValue types basically represents immutable concepts. Fx, it makes no sense to have a mathematical value such as an integer, vector etc. and then be able to modify it. That would be like redefining the meaning of a value. Instead of changing a value type, it makes more sense to assign another unique value. Think about the fact that value types are compared by comparing all the values of its properties. The point is that if the properties are the same then it is the same universal representation of that value.\n\nAs Konrad mentions it doesn\u0027t make sense to change a date either, as the value represents that unique point in time and not an instance of a time object which has any state or context-dependency.\n\nHopes this makes any sense to you. It is more about the concept you try to capture with value types than practical details, to be sure. \n    ",
      "\nThere are a couple other corner cases that could lead to unpredictable behavior from the programmer\u0027s point of view.\n\nImmutable value types and readonly fields\n\n    // Simple mutable structure. \n    // Method IncrementI mutates current state.\n    struct Mutable\n    {\n        public Mutable(int i) : this() \n        {\n            I = i;\n        }\n\n        public void IncrementI() { I\u002B\u002B; }\n\n        public int I { get; private set; }\n    }\n\n    // Simple class that contains Mutable structure\n    // as readonly field\n    class SomeClass \n    {\n        public readonly Mutable mutable = new Mutable(5);\n    }\n\n    // Simple class that contains Mutable structure\n    // as ordinary (non-readonly) field\n    class AnotherClass \n    {\n        public Mutable mutable = new Mutable(5);\n    }\n\n    class Program\n    {\n        void Main()\n        {\n            // Case 1. Mutable readonly field\n            var someClass = new SomeClass();\n            someClass.mutable.IncrementI();\n            // still 5, not 6, because SomeClass.mutable field is readonly\n            // and compiler creates temporary copy every time when you trying to\n            // access this field\n            Console.WriteLine(someClass.mutable.I);\n\n            // Case 2. Mutable ordinary field\n            var anotherClass = new AnotherClass();\n            anotherClass.mutable.IncrementI();\n\n            // Prints 6, because AnotherClass.mutable field is not readonly\n            Console.WriteLine(anotherClass.mutable.I);\n        }\n    }\n\n\nMutable value types and array\n\nSuppose we have an array of our Mutable struct and we\u0027re calling the IncrementI method for the first element of that array. What behavior are you expecting from this call? Should it change the array\u0027s value or only a copy?\n\n    Mutable[] arrayOfMutables = new Mutable[1];\n    arrayOfMutables[0] = new Mutable(5);\n\n    // Now we actually accessing reference to the first element\n    // without making any additional copy\n    arrayOfMutables[0].IncrementI();\n\n    // Prints 6!!\n    Console.WriteLine(arrayOfMutables[0].I);\n\n    // Every array implements IList\u003CT\u003E interface\n    IList\u003CMutable\u003E listOfMutables = arrayOfMutables;\n\n    // But accessing values through this interface lead\n    // to different behavior: IList indexer returns a copy\n    // instead of an managed reference\n    listOfMutables[0].IncrementI(); // Should change I to 7\n\n    // Nope! we still have 6, because previous line of code\n    // mutate a copy instead of a list value\n    Console.WriteLine(listOfMutables[0].I);\n\n\nSo, mutable structs are not evil as long as you and the rest of the team clearly understand what you are doing. But there are too many corner cases when the program behavior would be different from what\u0027s expected, that could lead to subtle hard to produce and hard to understand errors.\n    ",
      "\nIf you have ever programmed in a language like C/C\u002B\u002B, structs are fine to use as mutable. Just pass them with ref, around and there is nothing that can go wrong. The only problem I find are the restrictions of the C# compiler and that, in some cases, I am unable to force the stupid thing to use a reference to the struct, instead of a Copy(like when a struct is part of a C# class).\n\nSo, mutable structs are not evil, C# has made them evil. I use mutable structs in C\u002B\u002B all the time and they are very convenient and intuitive. In contrast, C# has made me to completely abandon structs as members of classes because of the way they handle objects. Their convenience has cost us ours.\n    ",
      "\nIf you stick to what structs are intended for (in C#, Visual Basic 6, Pascal/Delphi, C\u002B\u002B struct type (or classes) when they are not used as pointers), you will find that a structure is not more than a compound variable. This means: you will treat them as a packed set of variables, under a common name (a record variable you reference members from).\n\nI know that would confuse a lot of people deeply used to OOP, but that\u0027s not enough reason to say such things are inherently evil, if used correctly. Some structures are inmutable as they intend (this is the case of Python\u0027s namedtuple), but it is another paradigm to consider.\n\nYes: structs involve a lot of memory, but it will not be precisely more memory by doing:\n\npoint.x = point.x \u002B 1\n\n\ncompared to:\n\npoint = Point(point.x \u002B 1, point.y)\n\n\nThe memory consumption will be at least the same, or even more in the inmutable case (although that case would be temporary, for the current stack, depending on the language).\n\nBut, finally, structures are structures, not objects. In POO, the main property of an object is their identity, which most of the times is not more than its memory address. Struct stands for data structure (not a proper object, and so they don\u0027t have identity anyhow), and data can be modified. In other languages, record (instead of struct, as is the case for Pascal) is the word and holds the same purpose: just a data record variable, intended to be read from files, modified, and dumped into files (that is the main use and, in many languages, you can even define data alignment in the record, while that\u0027s not necessarily the case for properly called Objects).\n\nWant a good example? Structs are used to read files easily. Python has this library because, since it is object-oriented and has no support for structs, it had to implement it in another way, which is somewhat ugly. Languages implementing structs have that feature... built-in. Try reading a bitmap header with an appropriate struct in languages like Pascal or C. It will be easy (if the struct is properly built and aligned; in Pascal you would not use a record-based access but functions to read arbitrary binary data). So, for files and direct (local) memory access, structs are better than objects. As for today, we\u0027re used to JSON and XML, and so we forget the use of binary files (and as a side effect, the use of structs). But yes: they exist, and have a purpose.\n\nThey are not evil. Just use them for the right purpose.\n\nIf you think in terms of hammers, you will want to treat screws as nails, to find screws are harder to plunge in the wall, and it will be screws\u0027 fault, and they will be the evil ones.\n    ",
      "\nImagine you have an array of 1,000,000 structs. Each struct representing an equity with stuff like bid_price, offer_price (perhaps decimals) and so on, this is created by C#/VB.\n\nImagine that array is created in a block of memory allocated in the unmanaged heap so that some other native code thread is able to concurrently access the array (perhaps some high-perf code doing math).\n\nImagine the C#/VB code is listening to a market feed of price changes, that code may have to access some element of the array (for whichever security) and then modify some price field(s).\n\nImagine this is being done tens or even hundreds of thousands of times per second.\n\nWell lets face facts, in this case we really do want these structs to be mutable, they need to be because they are being shared by some other native code so creating copies isn\u0027t gonna help; they need to be because making a copy of some 120 byte struct at these rates is lunacy, especially when an update may actually impact just a byte or two.\n\nHugo\n    ",
      "\nWhen something can be mutated, it gains a sense of identity.\n\nstruct Person {\n    public string name; // mutable\n    public Point position = new Point(0, 0); // mutable\n\n    public Person(string name, Point position) { ... }\n}\n\nPerson eric = new Person(\u0022Eric Lippert\u0022, new Point(4, 2));\n\n\nBecause Person is mutable, it\u0027s more natural to think about changing Eric\u0027s position than cloning Eric, moving the clone, and destroying the original. Both operations would succeed in changing the contents of eric.position, but one is more intuitive than the other. Likewise, it\u0027s more intuitive to pass Eric around (as a reference) for methods to modify him. Giving a method a clone of Eric is almost always going to be surprising. Anyone wanting to mutate Person must remember to ask for a reference to Person or they\u0027ll be doing the wrong thing.\n\nIf you make the type immutable, the problem goes away; if I can\u0027t modify eric, it makes no difference to me whether I receive eric or a clone of eric. More generally, a type is safe to pass by value if all of its observable state is held in members that are either:\n\n\nimmutable\nreference types\nsafe to pass by value\n\n\nIf those conditions are met then a mutable value type behaves like a reference type because a shallow copy will still allow the receiver to modify the original data.\n\nThe intuitiveness of an immutable Person depends on what you\u0027re trying to do though. If Person just represents a set of data about a person, there\u0027s nothing unintuitive about it; Person variables truly represent abstract values, not objects. (In that case, it\u0027d probably be more appropriate to rename it to PersonData.) If Person is actually modeling a person itself, the idea of constantly creating and moving clones is silly even if you\u0027ve avoided the pitfall of thinking you\u0027re modifying the original. In that case it\u0027d probably be more natural to simply make Person a reference type (that is, a class.) \n\nGranted, as functional programming has taught us there are benefits to making everything immutable (no one can secretly hold on to a reference to eric and mutate him), but since that\u0027s not idiomatic in OOP it\u0027s still going to be unintuitive to anyone else working with your code.\n    ",
      "\nIt doesn\u2019t have anything to do with structs (and not with C#, either) but in Java you might get problems with mutable objects when they are e.g. keys in a hash map. If you change them after adding them to a map and it changes its hash code, evil things might happen.\n    ",
      "\nThere are many advantages and disadvantages to mutable data.  The million-dollar disadvantage is aliasing.  If the same value is being used in multiple places, and one of them changes it, then it will appear to have magically changed to the other places that are using it.  This is related to, but not identical with, race conditions.\n\nThe million-dollar advantage is modularity, sometimes.  Mutable state can allow you to hide changing information from code that doesn\u0027t need to know about it.\n\nThe Art of the Interpreter goes into these trade offs in some detail, and gives some examples.\n    ",
      "\nPersonally when I look at code the following looks pretty clunky to me:\n\ndata.value.set ( data.value.get () \u002B 1 ) ;\n\nrather than simply\n\ndata.value\u002B\u002B ; or data.value = data.value \u002B 1 ;\n\nData encapsulation is useful when passing a class around and you want to ensure the value is modified in a controlled fashion.  However when you have public set and get functions that do little more than set the value to what ever is passed in, how is this an improvement over simply passing a public data structure around?\n\nWhen I create a private structure inside a class, I created that structure to organize a set of variables into one group.  I want to be able to modify that structure within the class scope, not get copies of that structure and create new instances.\n\nTo me this prevents a valid use of structures being used to organize public variables, if I wanted access control I\u0027d use a class.\n    ",
      "\nThere are several issues with Mr. Eric Lippert\u0027s example. It is contrived to illustrate the point that structs are copied and how that could be a problem if you are not careful. Looking at the example I see it as a result of a bad programming habit and not really a problem with either struct or the class. \n\n\nA struct is supposed to have only public members and should not require any encapsulation. If it does then it really should be a type/class. You really do not need two constructs to say the same thing.\nIf you have class enclosing a struct, you would call a method in the class to mutate the member struct. This is what I would do as a good programming habit.\n\n\nA proper implementation would be as follows.\n\nstruct Mutable {\npublic int x;\n}\n\nclass Test {\n    private Mutable m = new Mutable();\n    public int mutate()\n    { \n        m.x = m.x \u002B 1;\n        return m.x;\n    }\n  }\n  static void Main(string[] args) {\n        Test t = new Test();\n        System.Console.WriteLine(t.mutate());\n        System.Console.WriteLine(t.mutate());\n        System.Console.WriteLine(t.mutate());\n    }\n\n\nIt looks like it is an issue with programming habit as opposed to an issue with struct itself. Structs are supposed to be mutable, that is the idea and intent.\n\nThe result of the changes voila behaves as expected:\n\n1\n2\n3\nPress any key to continue . . .\n    ",
      "\nI don\u0027t believe they\u0027re evil if used correctly. I wouldn\u0027t put it in my production code, but I would for something like structured unit testing mocks, where the lifespan of a struct is relatively small.\n\nUsing the Eric example, perhaps you want to create a second instance of that Eric, but make adjustments, as that\u0027s the nature of your test (ie duplication, then modifying). It doesn\u0027t matter what happens with the first instance of Eric if we\u0027re just using Eric2 for the remainder of the test script, unless you\u0027re planning on using him as a test comparison.\n\nThis would be mostly useful for testing or modifying legacy code that shallow defines a particular object (the point of structs), but by having an immutable struct, this prevents it\u0027s usage annoyingly.\n    ",
      "\n                \n                \u0022If your struct is immutable then all copies will be the same.\u0022 No, it means that you have to consciously make a copy if you want a different value. It means you won\u0027t get caught modifying a copy thinking you are modifying the original.\n                \n\u2013\u00A0Lucas\n                May 15 \u002709 at 15:43\n            ",
      "\n                \n                @Lucas I think you are talking about a different kind of copy I am talking about the automatic copies made as a result of being passed by value, Your \u0027consciously made copy\u0027 is different on purpose you didn\u0027t make it by mistake and its not really a copy its a deliberate new instants containing different data.\n                \n\u2013\u00A0trampster\n                May 26 \u002710 at 21:34\n            ",
      "\n                \n                Your edit (16 months later) makes that a little clearer. I still stand by \u0022(immutable struct) means you won\u0027t get caught modifying a copy thinking you are modifying the original\u0022, though.\n                \n\u2013\u00A0Lucas\n                May 27 \u002710 at 15:00\n            ",
      "\n                \n                @Lucas: The danger of making a copy of a struct, modifying it, and somehow thinking one is modifying the original (when the fact that one is writing a struct field makes self-apparent the fact that one is only writing one\u0027s copy) seems pretty small compared to the danger that someone who holds a class object as a means of holding the information contained therein will mutate the object to update its own information and in the process corrupt the information held by some other object.\n                \n\u2013\u00A0supercat\n                Oct 28 \u002711 at 16:11\n            ",
      "\n                \n                The 3rd paragraph sounds wrong or unclear at best. If your struct is immutable then you simply won\u0027t be able to modify its fields or the fields of any copies made. \u0022If you want to change it you have to...\u0022 that\u0027s misleading too, you can\u0027t change it ever, neither consciously nor unconsciously. Creating a new instance which the data you want has nothing to do with the original copy other than having the same data structure.\n                \n\u2013\u00A0Saeb Amini\n                May 22 \u002716 at 10:48\n            ",
      "\n                \n                Well yes but the compiler is just stupid that way. Not to allow assignment to property-struct members was IMHO a stupid design decision, because it is allowed for \u002B\u002B operator. In this case, the compiler just writes the explicit assignment itself instead of hustling the programmer.\n                \n\u2013\u00A0Konrad Rudolph\n                Jan 14 \u002709 at 8:08\n            ",
      "\n                \n                @Konrad: myObj.SomeProperty.Size = 22 would modify a COPY of myObj.SomeProperty. The compiler is saving you from an obvious bug. And it is NOT allowed for \u002B\u002B.\n                \n\u2013\u00A0Lucas\n                May 15 \u002709 at 15:38\n            ",
      "\n                \n                @Konrad - with one less indirection it should work; it is the \u0022mutating a value of something that only exists as a transient value on the stack and which is about to evaporate into nothingness\u0022 which is the case that is blocked.\n                \n\u2013\u00A0Marc Gravell\u2666\n                Sep 20 \u002710 at 11:13\n            ",
      "\n                \n                @Marc Gravell: In the former piece of code, you end up with a \u0022Foo\u0022 whose name is \u0022abc\u0022 and whose other attributes are those of List[0], without disturbing List[0].  If Foo were a class, it would be necessary to clone it and then change the copy.  To my mind, the big problem with the value-type vs class distinction is the use of the \u0022.\u0022 operator for two purposes.  If I had my druthers, classes could support both \u0022.\u0022 and \u0022-\u003E\u0022 for methods and properties, but the normal semantics for \u0022.\u0022 properties would be to create a new instance with the appropriate field modified.\n                \n\u2013\u00A0supercat\n                Oct 9 \u002710 at 20:52\n            ",
      "\n                \n                @Backwards_Dave you might be comparing a different scenario, then; either SomeProperty is not actually a property (perhaps it is a field?), or the type of SomeProperty is not actually a struct. Here\u0027s a minimal repro that shows CS1612: sharplab.io/\u2026\n                \n\u2013\u00A0Marc Gravell\u2666\n                Apr 3 \u002718 at 13:30\n            ",
      "\n                \n                Eric Lippert says they are... see my answer.\n                \n\u2013\u00A0Marc Gravell\u2666\n                Jan 13 \u002709 at 23:37\n            ",
      "\n                \n                Much as I respect Eric Lippert he isn\u0027t God (or at least not yet). The blog post you link to and your post above are reasonable arguments for making structs immutable as matter of course but they are actually very weak as arguments for never using mutable structs. This post, however, is a \u002B1.\n                \n\u2013\u00A0Stephen Martin\n                Jan 14 \u002709 at 1:12\n            ",
      "\n                \n                Developing in C#, you usually need mutability ever now and then - especially with your Business Model, where you want streaming etc. to work smoothly with existing solutions. I wrote an article on how to work with mutable AND immutable data, solving most issues around mutability (I hope): rickyhelgesson.wordpress.com/2012/07/17/\u2026\n                \n\u2013\u00A0Ricky Helgesson\n                Jul 31 \u002712 at 7:42\n                        \n                            \n                        \n            ",
      "\n                \n                @StephenMartin: Structs which encapsulate a single value often should be immutable, but structs are by far the best medium for encapsulating fixed sets of independent but related variables (like the X and Y coordinates of a point) which have no \u0022identity\u0022 as a group.  Structs which are used for that purpose should generally expose their variables as public fields.  I would consider the notion that it\u0027s more appropriate to use a class than a struct for such purposes to be just plain wrong.  Immutable classes are often less efficient, and mutable classes often have dreadful semantics.\n                \n\u2013\u00A0supercat\n                Jun 4 \u002713 at 23:49\n            ",
      "\n                \n                @StephenMartin: Consider, for example, a method or property that is supposed to returns the six float components of a graphics transform.  If such a method returns an exposed-field struct with six components, it\u0027s obvious that modifying the fields of the struct won\u0027t modify the graphics object from which it was received.  If such a method returns a mutable class object, maybe changing its properties will change the underlying graphics object and maybe it won\u0027t--nobody really knows.\n                \n\u2013\u00A0supercat\n                Jun 4 \u002713 at 23:51\n            ",
      "\n                \n                I would also posit that if  one wants to fasten a fixed set of variables together with duct tape so their values can be processed or stored either separately or as a unit, it makes a lot more sense to ask the compiler to fasten a fixed set of variables together (i.e. declare a struct with public fields) than to define a class which can be used, clumsily, to achieve the same ends, or to add a bunch of junk to a struct to make it emulate such a class (rather than having it behave like a set of variables stuck together with duct tape, which is what one really wants in the first place)\n                \n\u2013\u00A0supercat\n                Jun 4 \u002713 at 18:41\n                        \n                            \n                        \n            ",
      "\n                \n                @Ron Warholic: it\u0027s not self-apparent that SomeRect is a Rectangle.  It could be some other type which can be implicitly typecast from Rectangle.  Although, the only system-defined type which can be implicitly typecast from Rectangle is RectangleF, and the compiler would squawk if one tried to pass the fields of a RectangleF to the constructor of Rectangle (since the former are Single, and the latter Integer), there could be user-defined structs which allow such implicit typecasts.  BTW, the first statement would work equally well whether SomeRect were a Rectangle or a RectangleF.\n                \n\u2013\u00A0supercat\n                Oct 28 \u002711 at 14:59\n                        \n                            \n                        \n            ",
      "\n                \n                All you\u0027ve shown is that in a contrived example you believe one method is clearer. If we take your example with Rectangle I could easily come up with a common sitation where you get highly unclear behaviour.  Consider that WinForms implements a mutable Rectangle type used in the form\u0027s Bounds property.  If I want to change bounds I would want to use your nice syntax: form.Bounds.X = 10; However this changes precisely nothing on the form (and generates a lovely error informing you of such). Inconsistency is the bane of programming and is why immutability is wanted.\n                \n\u2013\u00A0Ron Warholic\n                Oct 28 \u002711 at 16:28\n            ",
      "\n                \n                @Ron Warholic: BTW, I would like to be able to say \u0022form.Bounds.X = 10;\u0022 and have it just work, but the system doesn\u0027t provide any clean way of doing so.  A convention for exposing value-type properties as methods accepting call-backs could offer much cleaner, efficient, and confirmably-correct code than any approach using classes.\n                \n\u2013\u00A0supercat\n                Oct 28 \u002711 at 17:11\n            ",
      "\n                \n                This answer is so much more insightful than a few of the top-voted answers.  It\u0027s sort of absurd that the argument against mutable value types relies on the notion of \u0022what you expect\u0022 to have happen when you mix aliasing and mutation.  That\u0027s a terrible thing to do anyhow!\n                \n\u2013\u00A0Eamon Nerbonne\n                May 6 \u002716 at 13:49\n                        \n                            \n                        \n            ",
      "\n                \n                @supercat: Who knows, maybe that ref-return feature they\u0027re talking about for C# 7 might cover that base (I haven\u0027t actually looked at it in detail, but it superficially sounds similar).\n                \n\u2013\u00A0Eamon Nerbonne\n                May 6 \u002716 at 15:00\n            ",
      "\n                \n                Well, they should represent immutable concepts, at least ;-p\n                \n\u2013\u00A0Marc Gravell\u2666\n                Jan 13 \u002709 at 23:54\n            ",
      "\n                \n                Well, I suppose they could have made System.Drawing.Point immutable but it would have been a serious design error IMHO. I think points are actually an archetypical value type and they are mutable. And they don\u0027t cause any problems for anyone beyond really early programming 101 beginners.\n                \n\u2013\u00A0Stephen Martin\n                Jan 14 \u002709 at 1:29\n            ",
      "\n                \n                In principle I think points should also be immutable but if it makes the type harder or less elegant to use then of course that has to be considered too. There\u0027s no point in having code constructs which uphold the finest princicples if no one wants to use them ;)\n                \n\u2013\u00A0Morten Christiansen\n                Jan 14 \u002709 at 10:19\n            ",
      "\n                \n                Value-types are useful for representing simple immutable concepts, but exposed-field structures are the best types to use to hold or pass around small fixed sets of related but independent values (such as the coordinates of a point).  A storage location of such a value type encapsulates the values of its fields and nothing else.  By contrast, a storage location of a mutable reference type may be used for the purpose of holding the state of the mutable object, but also encapsulates the identity of all other references throughout the universe that exist to that same object.\n                \n\u2013\u00A0supercat\n                Jun 13 \u002713 at 18:51\n            ",
      "\n                \n                \u201CValue types basically represents immutable concepts\u201D.  No, they don\u0027t.  One of the oldest and most useful applications of a value-typed variable is an int iterator, which would be completely useless if it were immutable.  I think you\u0027re conflating \u201Cvalue types\u0027 compiler/runtime implementations\u201D with \u201Cvariables typed to a value type\u201D\u2014 the latter is certainly mutable to any of the possible values.\n                \n\u2013\u00A0Slipp D. Thompson\n                Apr 7 \u002715 at 0:37\n            ",
      "\n                \n                What should happen, if .net languages had slightly better value-type support, would be struct methods should be forbidden from mutating \u0027this\u0027 unless they are explicitly declared as doing so, and methods that are so declared should be forbidden in read-only contexts.  Arrays of mutable structs offer useful semantics which cannot be efficiently achieved via other means.\n                \n\u2013\u00A0supercat\n                Sep 28 \u002711 at 23:09\n            ",
      "\n                \n                these are good examples of very subtle issue that would arise from mutable structs. I would not have expected any of this behaviour. Why would an array give you a reference, but an interface give you a value? I would have thought, aside from values-all-the-time (which is what I\u0027d really expect), that it would at least be the other way around: interface giving references; arrays giving values...\n                \n\u2013\u00A0Dave Cousineau\n                Feb 6 \u002712 at 11:54\n            ",
      "\n                \n                @Sahuagin: Unfortunately, there is no standard mechanism by which an interface can expose a reference.  There are ways .net could allow such things to be done safely and usefully (e.g. by defining a special \u0022ArrayRef\u003CT\u003E\u0022 struct containing a T[] and an integer index, and providing that an access to a property of type ArrayRef\u003CT\u003E will be interpreted as an access to the appropriate array element) [if a class wanted to expose an ArrayRef\u003CT\u003E for any other purpose, it could provide a method--as opposed to a property--to retrieve it].  Unfortunately, no such provisions exist.\n                \n\u2013\u00A0supercat\n                Jun 1 \u002712 at 21:25\n            ",
      "\n                \n                Oh my... this makes mutable structs damn evil!\n                \n\u2013\u00A0nawfal\n                Oct 8 \u002713 at 6:40\n            ",
      "\n                \n                I like this answer because it contains very valuable information that is non obvious. But really though, this is not an argument against mutable structs as some claim. Yes what we see here is a \u0022pit of despair\u0022 as Eric would have put it, but the source of this despair isn\u0027t mutability. The source of despair is the structs self-mutating methods. (As for why arrays and lists behave differently it\u0027s because one is basically an operator that calculates a memory address and the other is a property. In general it all becomes clear once you understanding that a \u0022reference\u0022 is an address value.)\n                \n\u2013\u00A0AnorZaken\n                Aug 31 \u002717 at 14:54\n            ",
      "\n                \n                Having class fields of structure types can often be a very useful pattern, though admittedly there are some limitations.  Performance will be degraded if one uses properties rather than fields, or uses readonly, but if one avoids doing those things class fields of structure types are just fine.  The only really fundamental limitation of structures is that a struct field of a mutable class type like int[] may encapsulate identity or an unchanging set of values, but cannot be used to encapsulate mutable values without also encapsulating an unwanted identity.\n                \n\u2013\u00A0supercat\n                Nov 12 \u002713 at 20:59\n            ",
      "\n                \n                True, but in this case the reason for using a struct is that doing so is imposed upon the application design by outside constraints (those by the native code\u0027s use). Everything else you describe about these objects suggests they should clearly be classes in C# or VB.NET.\n                \n\u2013\u00A0Jon Hanna\n                Oct 15 \u002710 at 14:20\n            ",
      "\n                \n                I\u0027m not sure why some people think the things should be class objects.  If all array slots are populated with references distinct instances, using a class type will add an extra twelve or twenty-four bytes to the memory requirement, and sequential access on an array of class object references is apt to be much slower than sequential access on an array of structs.\n                \n\u2013\u00A0supercat\n                Jun 4 \u002713 at 23:55\n            ",
      "\n                \n                Your point about identity is a good one; it may be worth noting that identity is relevant only when multiple references exists to something. If foo holds the only reference to its target anywhere in the universe, and nothing has captured that object\u0027s identity-hash value, then mutating field foo.X is semantically equivalent to making foo point to a new object which is just like the one it previously referred to, but with X holding the desired value. With class types, it\u0027s generally hard to know whether multiple references exist to something, but with structs it\u0027s easy: they don\u0027t.\n                \n\u2013\u00A0supercat\n                Oct 3 \u002713 at 19:59\n            ",
      "\n                \n                If Thing is a mutable class type, a Thing[] will encapsulate object identities--whether one wants it to or not--unless one can ensure that no Thing in the array to which any outside references exist will ever be mutated. If one doesn\u0027t want the array elements to encapsulate identity, one must generally ensure either that no items to which it holds references will ever be mutated, or that no outside references will ever exist to any items it holds [hybrid approaches can also work]. Neither approach is terribly convenient. If Thing is a structure, a Thing[] encapsulates values only.\n                \n\u2013\u00A0supercat\n                Oct 3 \u002713 at 20:15\n            ",
      "\n                \n                For objects, their identity comes from their location. Reference types\u0027 instances have their identity thanks to their location in the memory and you only pass around their identity (a reference), not their data, while value types have their identity in the outer place where they are stored. The identity of your Eric value type comes only from the variable where he is stored. If you pass him around, he\u0027ll lose his identity.\n                \n\u2013\u00A0IllidanS4 supports Monica\n                Nov 12 \u002714 at 17:35\n            ",
      "\n                \n                That is true if you use a class as the key in a map, too.\n                \n\u2013\u00A0Marc Gravell\u2666\n                Jan 13 \u002709 at 23:37\n            ",
      "\n                \n                structs are not be aliased in c#. Every struct assignment is a copy.\n                \n\u2013\u00A0recursive\n                Sep 24 \u002710 at 19:24\n                        \n                            \n                        \n            ",
      "\n                \n                @recursive: In some cases, that\u0027s a major advantage of mutable structs, and one which makes me question the notion that structs should not be mutable.  The fact that compilers sometimes implicitly copy structs doesn\u0027t reduce the usefulness of mutable structs.\n                \n\u2013\u00A0supercat\n                Oct 9 \u002710 at 20:44\n            ",
      "\n                \n                Straight to the point! Structures are organization units without access control restrictions! Unfortunately, C# has made them useless for this purpose!\n                \n\u2013\u00A0ThunderGr\n                Oct 18 \u002713 at 11:16\n            ",
      "\n                \n                this completely misses the point as both your examples show mutable structs.\n                \n\u2013\u00A0vidstige\n                Sep 28 \u002715 at 19:19\n            ",
      "\n                \n                C# made them useless for this purpose because that\u0027s not the purpose of the structures\n                \n\u2013\u00A0Luiz Felipe\n                Feb 10 \u002717 at 0:44\n            ",
      "\n                \n                There is nothing wrong with designing small opaque structures to behave like immutable class objects; the MSDN guidelines are reasonable when one is trying to make something that behaves like an object.  Structures are appropriate in some cases where one needs lightweight things that behave like objects, and in cases where one needs a bunch of variables stuck together with duct tape.  For some reason, however, many people fail to realize that structures have two distinct usages, and that guidelines appropriate for one are inappropriate for the other.\n                \n\u2013\u00A0supercat\n                May 12 \u002715 at 21:27\n            ",
      "\n                \n                As I see it, a struct is at its heart a bunch of variables stuck together with duct tape.  It\u0027s possible in .NET for a struct to pretend to be something other than a bunch of variables stuck together with duct tape, and I would suggest that when practical a type which is going to pretend to be something other than a bunch of variables stuck together with duct tape should behave as a unified object (which for a struct would imply immutability), but sometimes it is useful to stick a bunch of variables together with duct tape.  Even in production code, I would consider it better to have a type...\n                \n\u2013\u00A0supercat\n                Dec 19 \u002713 at 16:24\n            ",
      "\n                \n                ...which clearly has no semantics beyond \u0022each field contains the last thing written to it\u0022, pushing all semantics into the code which uses the structure, than to try to have a struct do more.  Given, for example, a Range\u003CT\u003E type with members Minimum and Maximum fields of type T, and code Range\u003Cdouble\u003E myRange = foo.getRange();, any guarantees about what Minimum and Maximum contain should come from foo.GetRange();.  Having Range be an exposed-field struct would make clear that it\u0027s not going to add any behavior of its own.\n                \n\u2013\u00A0supercat\n                Dec 19 \u002713 at 16:39\n            "
    ]
  },
  {
    "Id": "76f66102-5153-47ec-aec7-abf44905f4ff",
    "QuestionId": 151005,
    "Description": "How do I create an Excel (.XLS and .XLSX) file in C# without installing Microsoft Office?",
    "Votes": 1951,
    "Views": 1141357,
    "Tags": [
      "c#",
      ".net",
      "excel",
      "file-io"
    ],
    "Discussions": [
      "\nYou can use a library called ExcelLibrary. It\u0027s a free, open source library posted on Google Code:\n\nExcelLibrary\n\nThis looks to be a port of the PHP ExcelWriter that you mentioned above. It will not write to the new .xlsx format yet, but they are working on adding that functionality in.\n\nIt\u0027s very simple, small and easy to use. Plus it has a DataSetHelper that lets you use DataSets and DataTables to easily work with Excel data.\n\nExcelLibrary seems to still only work for the older Excel format (.xls files), but may be adding support in the future for newer 2007/2010 formats. \n\nYou can also use EPPlus, which works only for Excel 2007/2010 format files (.xlsx files). There\u0027s also NPOI which works with both.\n\nThere are a few known bugs with each library as noted in the comments. In all, EPPlus seems to be the best choice as time goes on. It seems to be more actively updated and documented as well.\n\nAlso, as noted by @\u0410\u0440\u0442\u0451\u043C\u0426\u0430\u0440\u0438\u043E\u043D\u043E\u0432 below, EPPlus has support for Pivot Tables and ExcelLibrary may have some support (Pivot table issue in ExcelLibrary)\n\nHere are a couple links for quick reference:\nExcelLibrary - GNU Lesser GPL\nEPPlus - GNU (LGPL) - No longer maintained\nEPPlus 5 - Polyform Noncommercial - Starting May 2020\nNPOI - Apache License\n\nHere some example code for ExcelLibrary:\n\nHere is an example taking data from a database and creating a workbook from it. Note that the ExcelLibrary code is the single line at the bottom:\n\n//Create the data set and table\nDataSet ds = new DataSet(\u0022New_DataSet\u0022);\nDataTable dt = new DataTable(\u0022New_DataTable\u0022);\n\n//Set the locale for each\nds.Locale = System.Threading.Thread.CurrentThread.CurrentCulture;\ndt.Locale = System.Threading.Thread.CurrentThread.CurrentCulture;\n\n//Open a DB connection (in this example with OleDB)\nOleDbConnection con = new OleDbConnection(dbConnectionString);\ncon.Open();\n\n//Create a query and fill the data table with the data from the DB\nstring sql = \u0022SELECT Whatever FROM MyDBTable;\u0022;\nOleDbCommand cmd = new OleDbCommand(sql, con);\nOleDbDataAdapter adptr = new OleDbDataAdapter();\n\nadptr.SelectCommand = cmd;\nadptr.Fill(dt);\ncon.Close();\n\n//Add the table to the data set\nds.Tables.Add(dt);\n\n//Here\u0027s the easy part. Create the Excel worksheet from the data set\nExcelLibrary.DataSetHelper.CreateWorkbook(\u0022MyExcelFile.xls\u0022, ds);\n\n\nCreating the Excel file is as easy as that. You can also manually create Excel files, but the above functionality is what really impressed me.\n    ",
      "\nIf you are happy with the xlsx format, try my GitHub project, EPPlus. It started with the source from ExcelPackage, but today it\u0027s a total rewrite.\nIt supports ranges, cell styling, charts, shapes, pictures, named ranges, AutoFilter and a lot of other stuff.\n    ",
      "\nAnd what about using Open XML SDK 2.0 for Microsoft Office?\n\nA few benefits:\n\n\nDoesn\u0027t require Office installed\nMade by Microsoft = decent MSDN documentation\nJust one .Net dll to use in project\nSDK comes with many tools like diff, validator, etc\n\n\nLinks:\n\n\nGithub\nMain MSDN Landing\n\u0022How Do I...\u0022 starter page\nblogs.MSDN brian_jones announcing SDK\nblogs.MSDN brian_jones describing SDK handling large files without crashing (unlike DOM method)\n\n    ",
      "\nI\u0027ve used with success the following open source projects:\n\n\nExcelPackage for OOXML formats (Office 2007)\nNPOI for .XLS format (Office 2003). NPOI 2.0 (Beta) also supports XLSX.\n\n\nTake a look at my blog posts:\n\nCreating Excel spreadsheets .XLS and .XLSX in C#\n\nNPOI with Excel Table and dynamic Chart\n    ",
      "\nYou can use OLEDB to create and manipulate Excel files. Check this: Reading and Writing Excel using OLEDB. \n\nTypical example:\n\nusing (OleDbConnection conn = new OleDbConnection(\u0022Provider=Microsoft.Jet.OLEDB.4.0;Data Source=C:\\\\temp\\\\test.xls;Extended Properties=\u0027Excel 8.0;HDR=Yes\u0027\u0022))\n{\n  conn.Open();\n  OleDbCommand cmd = new OleDbCommand(\u0022CREATE TABLE [Sheet1] ([Column1] string, [Column2] string)\u0022, conn);\n  cmd.ExecuteNonQuery();\n}\n\n\nEDIT - Some more links:\n\n\nHey, Scripting Guy! How Can I Read from Excel Without Using Excel?\nHow To Use ADO.NET to Retrieve and Modify Records in an Excel Workbook With Visual Basic .NET\nReading and Writing Excel Spreadsheets Using ADO.NET C# DbProviderFactory\n\n    ",
      "\nThe commercial solution, SpreadsheetGear for .NET will do it.\n\nYou can see live ASP.NET (C# and VB) samples here and download an evaluation version here.\n\nDisclaimer: I own SpreadsheetGear LLC\n    ",
      "\nA few options I have used:\n\nIf XLSX is a must: ExcelPackage is a good start but died off when the developer quit working on it. ExML picked up from there and added a few features. ExML isn\u0027t a bad option, I\u0027m still using it in a couple of production websites.\n\nFor all of my new projects, though, I\u0027m using NPOI, the .NET port of Apache POI. \nNPOI 2.0 (Alpha) also supports XLSX.\n    ",
      "\nAn extremely lightweight option may be to use HTML tables.  Just create head, body, and table tags in a file, and save it as a file with an .xls extension.  There are Microsoft specific attributes that you can use to style the output, including formulas.\n\nI realize that you may not be coding this in a web application, but here is an example of the composition of an Excel file via an HTML table.  This technique could be used if you were coding a console app, desktop app, or service.\n    ",
      "\nIf you\u0027re creating Excel 2007/2010 files give this open source project a try: https://github.com/closedxml/closedxml\n\n\n  It provides an object oriented way to manipulate the files (similar to\n  VBA) without dealing with the hassles of XML Documents. It can be used\n  by any .NET language like C# and Visual Basic (VB).\n  \n  ClosedXML allows you to create Excel 2007/2010 files without the Excel\n  application. The typical example is creating Excel reports on a web\n  server:\n\nvar workbook = new XLWorkbook();\nvar worksheet = workbook.Worksheets.Add(\u0022Sample Sheet\u0022);\nworksheet.Cell(\u0022A1\u0022).Value = \u0022Hello World!\u0022;\nworkbook.SaveAs(\u0022HelloWorld.xlsx\u0022);\n\n\n    ",
      "\nYou can use ExcelXmlWriter.\n\nIt works fine.\n    ",
      "\nYou actually might want to check out the interop classes available in C# (e.g. Microsoft.Office.Interop.Excel. You say no OLE (which this isn\u0027t), but the interop classes are very easy to use. Check out the C# Documentation here (Interop for Excel starts on page 1072 of the C# PDF).\n\nYou might be impressed if you haven\u0027t tried them.\n\nPlease be warned of Microsoft\u0027s stance on this:\n\n\n  Microsoft does not currently recommend, and does not support,\n  Automation of Microsoft Office applications from any unattended,\n  non-interactive client application or component (including ASP,\n  ASP.NET, DCOM, and NT Services), because Office may exhibit unstable\n  behavior and/or deadlock when Office is run in this environment.\n\n    ",
      "\nHere\u0027s a completely free C# library, which lets you export from a DataSet, DataTable or List\u003C\u003E into a genuine Excel 2007 .xlsx file, using the OpenXML libraries:\n\nhttp://mikesknowledgebase.com/pages/CSharp/ExportToExcel.htm\n\nFull source code is provided - free of charge - along with instructions, and a demo application.\n\nAfter adding this class to your application, you can export your DataSet to Excel in just one line of code:\n\nCreateExcelFile.CreateExcelDocument(myDataSet, \u0022C:\\\\Sample.xlsx\u0022);\n\n\nIt doesn\u0027t get much simpler than that...\n\nAnd it doesn\u0027t even require Excel to be present on your server.\n    ",
      "\nYou could consider creating your files using the XML Spreadsheet 2003 format. This is a simple XML format using a well documented schema.\n    ",
      "\nYou may want to take a look at GemBox.Spreadsheet.\n\nThey have a free version with all features but limited to 150 rows per sheet and 5 sheets per workbook, if that falls within your needs.\n\nI haven\u0027t had need to use it myself yet, but does look interesting.\n    ",
      "\nSyncfusion Essential XlsIO can do this. It has no dependency on Microsoft office and also has specific support for different platforms.\n\n\nASP.NET\nASP.NET MVC\nUWP\nXamarin\nWPF and Windows Forms\nWindows Service and batch based operations\n\n\nCode sample:\n\n//Creates a new instance for ExcelEngine.\nExcelEngine excelEngine = new ExcelEngine();\n//Loads or open an existing workbook through Open method of IWorkbooks\nIWorkbook workbook = excelEngine.Excel.Workbooks.Open(fileName);\n//To-Do some manipulation|\n//To-Do some manipulation\n//Set the version of the workbook.\nworkbook.Version = ExcelVersion.Excel2013;\n//Save the workbook in file system as xlsx format\nworkbook.SaveAs(outputFileName);\n\n\nThe whole suite of controls is available for free through the community license program if you qualify (less than 1 million USD in revenue). Note: I work for Syncfusion.\n    ",
      "\nWell,\n\nyou can also use a third party library like Aspose.\n\nThis library has the benefit that it does not require Excel to be installed on your machine which would be ideal in your case.\n    ",
      "\nOpenXML is also a good alternative that helps avoid installing MS Excel on Server.The Open XML SDK 2.0 provided by Microsoft simplifies the task of manipulating Open XML packages and the underlying Open XML schema elements within a package. The Open XML Application Programming Interface (API) encapsulates many common tasks that developers perform on Open XML packages.\n\nCheck this out OpenXML: Alternative that helps avoid installing MS Excel on Server\n    ",
      "\nThe various Office 2003 XML libraries avaliable work pretty well for smaller excel files. However, I find the sheer size of a large workbook saved in the XML format to be a problem. For example, a workbook I work with that would be 40MB in the new (and admittedly more tightly packed) XLSX format becomes a 360MB XML file.\n\nAs far as my research has taken me, there are two commercial packages that allow output to the older binary file formats. They are:\n\n\nGembox\nComponentOne Excel\n\n\nNeither are cheap (500USD and 800USD respectively, I think). but both work independant of Excel itself.\n\nWhat I would be curious about is the Excel output module for the likes of OpenOffice.org. I wonder if they can be ported from Java to .Net.\n    ",
      "\nI agree about generating XML Spreadsheets, here\u0027s an example on how to do it for C# 3 (everyone just blogs about it in VB 9 :P) http://www.aaron-powell.com/linq-to-xml-to-excel\n    ",
      "\nI\u0027ve just recently used FlexCel.NET and found it to be an excellent library! I don\u0027t say that about too many software products. No point in giving the whole sales pitch here, you can read all the features on their website.\n\nIt is a commercial product, but you get the full source if you buy it. So I suppose you could compile it into your assembly if you really wanted to. Otherwise it\u0027s just one extra assembly to xcopy - no configuration or installation or anything like that.\n\nI don\u0027t think you\u0027ll find any way to do this without third-party libraries as .NET framework, obviously, does not have built in support for it and OLE Automation is just a whole world of pain.\n    ",
      "\nI have written a simple code to export dataset to excel without using excel object by using System.IO.StreamWriter.\n\nBelow is the code which will read all tables from dataset and write them to sheets one by one. I took help from this article.\n\npublic static void exportToExcel(DataSet source, string fileName)\n{\n        const string endExcelXML = \u0022\u003C/Workbook\u003E\u0022;\n        const string startExcelXML = \u0022\u003Cxml version\u003E\\r\\n\u003CWorkbook \u0022 \u002B\n                 \u0022xmlns=\\\u0022urn:schemas-microsoft-com:office:spreadsheet\\\u0022\\r\\n\u0022 \u002B\n                 \u0022 xmlns:o=\\\u0022urn:schemas-microsoft-com:office:office\\\u0022\\r\\n \u0022 \u002B\n                 \u0022xmlns:x=\\\u0022urn:schemas-    microsoft-com:office:\u0022 \u002B\n                 \u0022excel\\\u0022\\r\\n xmlns:ss=\\\u0022urn:schemas-microsoft-com:\u0022 \u002B\n                 \u0022office:spreadsheet\\\u0022\u003E\\r\\n \u003CStyles\u003E\\r\\n \u0022 \u002B\n                 \u0022\u003CStyle ss:ID=\\\u0022Default\\\u0022 ss:Name=\\\u0022Normal\\\u0022\u003E\\r\\n \u0022 \u002B\n                 \u0022\u003CAlignment ss:Vertical=\\\u0022Bottom\\\u0022/\u003E\\r\\n \u003CBorders/\u003E\u0022 \u002B\n                 \u0022\\r\\n \u003CFont/\u003E\\r\\n \u003CInterior/\u003E\\r\\n \u003CNumberFormat/\u003E\u0022 \u002B\n                 \u0022\\r\\n \u003CProtection/\u003E\\r\\n \u003C/Style\u003E\\r\\n \u0022 \u002B\n                 \u0022\u003CStyle ss:ID=\\\u0022BoldColumn\\\u0022\u003E\\r\\n \u003CFont \u0022 \u002B\n                 \u0022x:Family=\\\u0022Swiss\\\u0022 ss:Bold=\\\u00221\\\u0022/\u003E\\r\\n \u003C/Style\u003E\\r\\n \u0022 \u002B\n                 \u0022\u003CStyle     ss:ID=\\\u0022StringLiteral\\\u0022\u003E\\r\\n \u003CNumberFormat\u0022 \u002B\n                 \u0022 ss:Format=\\\u0022@\\\u0022/\u003E\\r\\n \u003C/Style\u003E\\r\\n \u003CStyle \u0022 \u002B\n                 \u0022ss:ID=\\\u0022Decimal\\\u0022\u003E\\r\\n \u003CNumberFormat \u0022 \u002B\n                 \u0022ss:Format=\\\u00220.0000\\\u0022/\u003E\\r\\n \u003C/Style\u003E\\r\\n \u0022 \u002B\n                 \u0022\u003CStyle ss:ID=\\\u0022Integer\\\u0022\u003E\\r\\n \u003CNumberFormat \u0022 \u002B\n                 \u0022ss:Format=\\\u00220\\\u0022/\u003E\\r\\n \u003C/Style\u003E\\r\\n \u003CStyle \u0022 \u002B\n                 \u0022ss:ID=\\\u0022DateLiteral\\\u0022\u003E\\r\\n \u003CNumberFormat \u0022 \u002B\n                 \u0022ss:Format=\\\u0022mm/dd/yyyy;@\\\u0022/\u003E\\r\\n \u003C/Style\u003E\\r\\n \u0022 \u002B\n                 \u0022\u003C/Styles\u003E\\r\\n \u0022;\n        System.IO.StreamWriter excelDoc = null;\n        excelDoc = new System.IO.StreamWriter(fileName);\n\n        int sheetCount = 1;\n        excelDoc.Write(startExcelXML);\n        foreach (DataTable table in source.Tables)\n        {\n            int rowCount = 0;\n            excelDoc.Write(\u0022\u003CWorksheet ss:Name=\\\u0022\u0022 \u002B table.TableName \u002B \u0022\\\u0022\u003E\u0022);\n            excelDoc.Write(\u0022\u003CTable\u003E\u0022);\n            excelDoc.Write(\u0022\u003CRow\u003E\u0022);\n            for (int x = 0; x \u003C table.Columns.Count; x\u002B\u002B)\n            {\n                excelDoc.Write(\u0022\u003CCell ss:StyleID=\\\u0022BoldColumn\\\u0022\u003E\u003CData ss:Type=\\\u0022String\\\u0022\u003E\u0022);\n                excelDoc.Write(table.Columns[x].ColumnName);\n                excelDoc.Write(\u0022\u003C/Data\u003E\u003C/Cell\u003E\u0022);\n            }\n            excelDoc.Write(\u0022\u003C/Row\u003E\u0022);\n            foreach (DataRow x in table.Rows)\n            {\n                rowCount\u002B\u002B;\n                //if the number of rows is \u003E 64000 create a new page to continue output\n                if (rowCount == 64000)\n                {\n                    rowCount = 0;\n                    sheetCount\u002B\u002B;\n                    excelDoc.Write(\u0022\u003C/Table\u003E\u0022);\n                    excelDoc.Write(\u0022 \u003C/Worksheet\u003E\u0022);\n                    excelDoc.Write(\u0022\u003CWorksheet ss:Name=\\\u0022\u0022 \u002B table.TableName \u002B \u0022\\\u0022\u003E\u0022);\n                    excelDoc.Write(\u0022\u003CTable\u003E\u0022);\n                }\n                excelDoc.Write(\u0022\u003CRow\u003E\u0022); //ID=\u0022 \u002B rowCount \u002B \u0022\n                for (int y = 0; y \u003C table.Columns.Count; y\u002B\u002B)\n                {\n                    System.Type rowType;\n                    rowType = x[y].GetType();\n                    switch (rowType.ToString())\n                    {\n                        case \u0022System.String\u0022:\n                            string XMLstring = x[y].ToString();\n                            XMLstring = XMLstring.Trim();\n                            XMLstring = XMLstring.Replace(\u0022\u0026\u0022, \u0022\u0026\u0022);\n                            XMLstring = XMLstring.Replace(\u0022\u003E\u0022, \u0022\u003E\u0022);\n                            XMLstring = XMLstring.Replace(\u0022\u003C\u0022, \u0022\u003C\u0022);\n                            excelDoc.Write(\u0022\u003CCell ss:StyleID=\\\u0022StringLiteral\\\u0022\u003E\u0022 \u002B\n                                           \u0022\u003CData ss:Type=\\\u0022String\\\u0022\u003E\u0022);\n                            excelDoc.Write(XMLstring);\n                            excelDoc.Write(\u0022\u003C/Data\u003E\u003C/Cell\u003E\u0022);\n                            break;\n                        case \u0022System.DateTime\u0022:\n                            //Excel has a specific Date Format of YYYY-MM-DD followed by  \n                            //the letter \u0027T\u0027 then hh:mm:sss.lll Example 2005-01-31T24:01:21.000\n                            //The Following Code puts the date stored in XMLDate \n                            //to the format above\n                            DateTime XMLDate = (DateTime)x[y];\n                            string XMLDatetoString = \u0022\u0022; //Excel Converted Date\n                            XMLDatetoString = XMLDate.Year.ToString() \u002B\n                                 \u0022-\u0022 \u002B\n                                 (XMLDate.Month \u003C 10 ? \u00220\u0022 \u002B\n                                 XMLDate.Month.ToString() : XMLDate.Month.ToString()) \u002B\n                                 \u0022-\u0022 \u002B\n                                 (XMLDate.Day \u003C 10 ? \u00220\u0022 \u002B\n                                 XMLDate.Day.ToString() : XMLDate.Day.ToString()) \u002B\n                                 \u0022T\u0022 \u002B\n                                 (XMLDate.Hour \u003C 10 ? \u00220\u0022 \u002B\n                                 XMLDate.Hour.ToString() : XMLDate.Hour.ToString()) \u002B\n                                 \u0022:\u0022 \u002B\n                                 (XMLDate.Minute \u003C 10 ? \u00220\u0022 \u002B\n                                 XMLDate.Minute.ToString() : XMLDate.Minute.ToString()) \u002B\n                                 \u0022:\u0022 \u002B\n                                 (XMLDate.Second \u003C 10 ? \u00220\u0022 \u002B\n                                 XMLDate.Second.ToString() : XMLDate.Second.ToString()) \u002B\n                                 \u0022.000\u0022;\n                            excelDoc.Write(\u0022\u003CCell ss:StyleID=\\\u0022DateLiteral\\\u0022\u003E\u0022 \u002B\n                                         \u0022\u003CData ss:Type=\\\u0022DateTime\\\u0022\u003E\u0022);\n                            excelDoc.Write(XMLDatetoString);\n                            excelDoc.Write(\u0022\u003C/Data\u003E\u003C/Cell\u003E\u0022);\n                            break;\n                        case \u0022System.Boolean\u0022:\n                            excelDoc.Write(\u0022\u003CCell ss:StyleID=\\\u0022StringLiteral\\\u0022\u003E\u0022 \u002B\n                                        \u0022\u003CData ss:Type=\\\u0022String\\\u0022\u003E\u0022);\n                            excelDoc.Write(x[y].ToString());\n                            excelDoc.Write(\u0022\u003C/Data\u003E\u003C/Cell\u003E\u0022);\n                            break;\n                        case \u0022System.Int16\u0022:\n                        case \u0022System.Int32\u0022:\n                        case \u0022System.Int64\u0022:\n                        case \u0022System.Byte\u0022:\n                            excelDoc.Write(\u0022\u003CCell ss:StyleID=\\\u0022Integer\\\u0022\u003E\u0022 \u002B\n                                    \u0022\u003CData ss:Type=\\\u0022Number\\\u0022\u003E\u0022);\n                            excelDoc.Write(x[y].ToString());\n                            excelDoc.Write(\u0022\u003C/Data\u003E\u003C/Cell\u003E\u0022);\n                            break;\n                        case \u0022System.Decimal\u0022:\n                        case \u0022System.Double\u0022:\n                            excelDoc.Write(\u0022\u003CCell ss:StyleID=\\\u0022Decimal\\\u0022\u003E\u0022 \u002B\n                                  \u0022\u003CData ss:Type=\\\u0022Number\\\u0022\u003E\u0022);\n                            excelDoc.Write(x[y].ToString());\n                            excelDoc.Write(\u0022\u003C/Data\u003E\u003C/Cell\u003E\u0022);\n                            break;\n                        case \u0022System.DBNull\u0022:\n                            excelDoc.Write(\u0022\u003CCell ss:StyleID=\\\u0022StringLiteral\\\u0022\u003E\u0022 \u002B\n                                  \u0022\u003CData ss:Type=\\\u0022String\\\u0022\u003E\u0022);\n                            excelDoc.Write(\u0022\u0022);\n                            excelDoc.Write(\u0022\u003C/Data\u003E\u003C/Cell\u003E\u0022);\n                            break;\n                        default:\n                            throw (new Exception(rowType.ToString() \u002B \u0022 not handled.\u0022));\n                    }\n                }\n                excelDoc.Write(\u0022\u003C/Row\u003E\u0022);\n            }\n            excelDoc.Write(\u0022\u003C/Table\u003E\u0022);\n            excelDoc.Write(\u0022 \u003C/Worksheet\u003E\u0022);\n            sheetCount\u002B\u002B;\n        }\n\n\n        excelDoc.Write(endExcelXML);\n        excelDoc.Close();\n    }\n\n    ",
      "\nJust want to add another reference to a third party solution that directly addresses your issue:  http://www.officewriter.com\n\n(Disclaimer: I work for SoftArtisans, the company that makes OfficeWriter)\n    ",
      "\nIKVM \u002B POI\n\nOr, you could use the Interop ...\n    ",
      "\nHere\u0027s a way to do it with LINQ to XML, complete with sample code:\n\nQuickly Import and Export Excel Data with LINQ to XML\n\nIt\u0027s a little complex, since you have to import namespaces and so forth, but it does let you avoid any external dependencies.\n\n(Also, of course, it\u0027s VB .NET, not C#, but you can always isolate the VB .NET stuff in its own project to use XML Literals, and do everything else in C#.)\n    ",
      "\nSome 3rd party component vendors like Infragistics or Syncfusion provide very good Excel export capabilities that do not require Microsoft Excel to be installed. \n\nSince these vendors also provide advanced UI grid components, these components are particularly handy if you want the style and layout of an excel export to mimic the current state of a grid in the user interface of your application.\n\nIf your export is intended to be executed server side with emphasis on the data to be exported and with no link to the UI, then I would go for one of the free open source options (e.g. ExcelLibrary). \n\nI have previously been involved with projects that attempted to use server side automation on the Microsoft Office suite. Based on this experience I would strongly recommend against that approach. \n    ",
      "\npublic class GridViewExportUtil\n{\n    public static void Export(string fileName, GridView gv)\n    {\n        HttpContext.Current.Response.Clear();\n        HttpContext.Current.Response.AddHeader(\n            \u0022content-disposition\u0022, string.Format(\u0022attachment; filename={0}\u0022, fileName));\n        HttpContext.Current.Response.ContentType = \u0022application/ms-excel\u0022;\n\n        using (StringWriter sw = new StringWriter())\n        {\n            using (HtmlTextWriter htw = new HtmlTextWriter(sw))\n            {\n                //  Create a form to contain the grid\n                Table table = new Table();\n\n                //  add the header row to the table\n                if (gv.HeaderRow != null)\n                {\n                    GridViewExportUtil.PrepareControlForExport(gv.HeaderRow);\n                    table.Rows.Add(gv.HeaderRow);\n                }\n\n                //  add each of the data rows to the table\n                foreach (GridViewRow row in gv.Rows)\n                {\n                    GridViewExportUtil.PrepareControlForExport(row);\n                    table.Rows.Add(row);\n                }\n\n                //  add the footer row to the table\n                if (gv.FooterRow != null)\n                {\n                    GridViewExportUtil.PrepareControlForExport(gv.FooterRow);\n                    table.Rows.Add(gv.FooterRow);\n                }\n\n                //  render the table into the htmlwriter\n                table.RenderControl(htw);\n\n                //  render the htmlwriter into the response\n                HttpContext.Current.Response.Write(sw.ToString());\n                HttpContext.Current.Response.End();\n            }\n        }\n    }\n\n    /// \u003Csummary\u003E\n    /// Replace any of the contained controls with literals\n    /// \u003C/summary\u003E\n    /// \u003Cparam name=\u0022control\u0022\u003E\u003C/param\u003E\n    private static void PrepareControlForExport(Control control)\n    {\n        for (int i = 0; i \u003C control.Controls.Count; i\u002B\u002B)\n        {\n            Control current = control.Controls[i];\n            if (current is LinkButton)\n            {\n                control.Controls.Remove(current);\n                control.Controls.AddAt(i, new LiteralControl((current as LinkButton).Text));\n            }\n            else if (current is ImageButton)\n            {\n                control.Controls.Remove(current);\n                control.Controls.AddAt(i, new LiteralControl((current as ImageButton).AlternateText));\n            }\n            else if (current is HyperLink)\n            {\n                control.Controls.Remove(current);\n                control.Controls.AddAt(i, new LiteralControl((current as HyperLink).Text));\n            }\n            else if (current is DropDownList)\n            {\n                control.Controls.Remove(current);\n                control.Controls.AddAt(i, new LiteralControl((current as DropDownList).SelectedItem.Text));\n            }\n            else if (current is CheckBox)\n            {\n                control.Controls.Remove(current);\n                control.Controls.AddAt(i, new LiteralControl((current as CheckBox).Checked ? \u0022True\u0022 : \u0022False\u0022));\n            }\n\n            if (current.HasControls())\n            {\n                GridViewExportUtil.PrepareControlForExport(current);\n            }\n        }\n    }\n}\n\n\nHi this solution is to export your grid view to your excel file it might help you out\n    ",
      "\nYou can create nicely formatted Excel files using this library:\nhttp://officehelper.codeplex.com/documentation\n\nSee below sample:\n\nusing (ExcelHelper helper = new ExcelHelper(TEMPLATE_FILE_NAME, GENERATED_FILE_NAME))\n{\n    helper.Direction = ExcelHelper.DirectionType.TOP_TO_DOWN;\n    helper.CurrentSheetName = \u0022Sheet1\u0022;\n    helper.CurrentPosition = new CellRef(\u0022C3\u0022);\n\n    //the template xlsx should contains the named range \u0022header\u0022; use the command \u0022insert\u0022/\u0022name\u0022.\n    helper.InsertRange(\u0022header\u0022);\n\n    //the template xlsx should contains the named range \u0022sample1\u0022;\n    //inside this range you should have cells with these values:\n    //\u003Cname\u003E , \u003Cvalue\u003E and \u003Ccomment\u003E, which will be replaced by the values from the getSample()\n    CellRangeTemplate sample1 = helper.CreateCellRangeTemplate(\u0022sample1\u0022, new List\u003Cstring\u003E {\u0022name\u0022, \u0022value\u0022, \u0022comment\u0022}); \n    helper.InsertRange(sample1, getSample());\n\n    //you could use here other named ranges to insert new cells and call InsertRange as many times you want, \n    //it will be copied one after another;\n    //even you can change direction or the current cell/sheet before you insert\n\n    //typically you put all your \u0022template ranges\u0022 (the names) on the same sheet and then you just delete it\n    helper.DeleteSheet(\u0022Sheet3\u0022);\n}        \n\n\nwhere sample look like this:\n\nprivate IEnumerable\u003CList\u003Cobject\u003E\u003E getSample()\n{\n    var random = new Random();\n\n    for (int loop = 0; loop \u003C 3000; loop\u002B\u002B)\n    {\n        yield return new List\u003Cobject\u003E {\u0022test\u0022, DateTime.Now.AddDays(random.NextDouble()*100 - 50), loop};\n    }\n}\n\n    ",
      "\nThe simplest and fastest way to create an Excel file from C# is to use the Open XML Productivity Tool.  The Open XML Productivity Tool comes with the Open XML SDK installation.  The tool reverse engineers any Excel file into C# code.  The C# code can then be used to re-generate that file.\n\nAn overview of the process involved is:\n\n\nInstall the Open XML SDK with the tool.\nCreate an Excel file using the latest Excel client with desired look.  Name it DesiredLook.xlsx.\nWith the tool open DesiredLook.xlsx and click the Reflect Code button near the top.\n \nThe C# code for your file will be generated in the right pane of the tool.  Add this to your C# solution and generate files with that desired look.\n\n\nAs a bonus, this method works for any Word and PowerPoint files.  As the C# developer, you will then make changes to the code to fit your needs.\n\nI have developed a simple WPF app on github which will run on Windows for this purpose.  There is a placeholder class called GeneratedClass where you can paste the generated code.  If you go back one version of the file, it will generate an excel file like this:\n\n\n    ",
      "\nSome useful Excel automation in C# , u can find from the following link.\n\nhttp://csharp.net-informations.com/excel/csharp-excel-tutorial.htm\n\nbolton.\n    ",
      "\nLook at samples how to create Excel files.\n\nThere are examples in C# and VB.NET\n\nIt manages XSL XSLX and CSV Excel files.\n\n\n  http://www.devtriogroup.com/ExcelJetcell/Samples\n\n    ",
      "\n                \n                ExcelLibrary has been superseded by the exceptional EPPlus - epplus.codeplex.com.  Jan updates it regularly.  Have been using it and it is one of the finest open source projects we\u0027ve worked with.\n                \n\u2013\u00A0Mark A\n                Nov 4 \u002710 at 0:11\n                        \n                            \n                        \n            ",
      "\n                \n                It should be noted that ExcelLibrary has a lot of performance issues when dealing with large datasets(larger than 5000 rows with lots of columns). Currently doing a heavy modification of the code base at work so we can use it in a project.\n                \n\u2013\u00A0rossisdead\n                Oct 18 \u002711 at 23:17\n                        \n                            \n                        \n            ",
      "\n                \n                EPPlus seems far less buggy than ExcelLibrary, BUT it is GPL and therefore only a solution for open source projects.\n                \n\u2013\u00A0Seth\n                Jan 26 \u002712 at 23:21\n            ",
      "\n                \n                -1 If you\u0027re going to post sample code you might as well make sure it\u0027s correct. Use the Dispose method of this interface to explicitly release unmanaged resources in conjunction with the garbage collector. The consumer of an object can call this method when the object is no longer needed.\n                \n\u2013\u00A0ta.speot.is\n                Feb 22 \u002714 at 9:44\n            ",
      "\n                \n                What about ClosedXML? I may prove to be useful in your projects.\n                \n\u2013\u00A0Amadeus S\u00E1nchez\n                Nov 30 \u002715 at 18:10\n            ",
      "\n                \n                License is now LGPL, release notes here: epplus.codeplex.com/releases/view/79802\n                \n\u2013\u00A0Simon D\n                Feb 5 \u002712 at 12:30\n            ",
      "\n                \n                The examples were helpful. I was able to change my code from using Microsoft interop library (horribly slow) to this library (version 4.x) in a couple hours. My benchmark writes a file with two tabs and about 750,000 cells. Using MS interop it took 13 minutes. Using EPPlus it took 10 seconds, a roughly 80x speedup. Very happy!\n                \n\u2013\u00A0Paul Chernoch\n                Feb 10 \u002715 at 18:55\n            ",
      "\n                \n                For clarity in this thread, the LGPL allows the software to be linked to without the infective part of the GPL occuring. You only need to open source changes you make to ClosedXml or if you directly put the source code (as opposed to referencing the ClosedXml assemblies) inside of your application then you need to open source your application.\n                \n\u2013\u00A0Chris Marisic\n                Aug 12 \u002715 at 16:10\n            ",
      "\n                \n                @Paul Chernoch:  We populate large Excel sheets with interop very quickly.  The secret is to do a bulk update.  Create a object [,] block, populate that, then write that matrix to Excel at one time:  excelWorksheet.get_Range(range).Value2 = block;\n                \n\u2013\u00A0Marc Meketon\n                Feb 15 \u002718 at 22:53\n            ",
      "\n                \n                Looks like the licensing is moving from LGPL to Polyform Noncommercial 1.0.0 license\n                \n\u2013\u00A0Luke\n                Feb 21 at 6:48\n            ",
      "\n                \n                Important to note that the DLL for this is just over 5 MB and limited to Office 2007 formats.  But certainly the easiest and fastest solution which works for me.\n                \n\u2013\u00A0Josh Brown\n                Sep 20 \u002711 at 13:03\n            ",
      "\n                \n                Just a heads up that v2.5 is out and can be downloaded here.\n                \n\u2013\u00A0Snuffleupagus\n                Jan 4 \u002713 at 16:47\n            ",
      "\n                \n                The SDK models the XML into classes, so that each XML tag is mapped to a tag, and then you have to build the class hierarchy (each instance has a collection of child instances/tags) correctly. This means you have to know the XML structure of an Excel file, which is very complicated. It\u0027s much easier to use a wrapper such as EPPlus, mentioned above, which simplifies things.\n                \n\u2013\u00A0Tsahi Asher\n                Dec 24 \u002714 at 16:27\n            ",
      "\n                \n                A great sample of Microsoft Open XML SDK - Open XML Writer can be found at polymathprogrammer.com/2012/08/06/\u2026  Or see Stack Overflow solution   stackoverflow.com/questions/11370672/\u2026\n                \n\u2013\u00A0Greg\n                Feb 17 \u002717 at 17:51\n            ",
      "\n                \n                I found Microsoft Open XML SDK\u0027s Open XML Writer to be great.  Using the solutions above, (Especially Vincent Tom\u0027s sample (Poly Math)), it\u0027s easy to build a writer that streams through big sets of data, and writes records in a manner similiar and not too much more complex to what you\u0027d do for CSV; but that you\u0027re instead writing xml.  Open XML is the mindset that Microsoft considers it\u0027s new Office formats in.  And you can always rename them from .xslx to .zip files if you feel like poking at their XML contents.\n                \n\u2013\u00A0Greg\n                Feb 17 \u002717 at 17:54\n                        \n                            \n                        \n            ",
      "\n                \n                A note on NPOI - Row and Column references are zero-based. Does work well for populating an existing template.\n                \n\u2013\u00A0John M\n                Apr 30 \u002710 at 13:45\n            ",
      "\n                \n                Can someone confirm if this works when running in x64?  I am pretty sure Jet only works if your app is compiled or running in 32-bit mode.\n                \n\u2013\u00A0Lamar\n                Sep 30 \u002708 at 1:45\n            ",
      "\n                \n                I\u0027ve just tested this connection and it failed on a Windows Server 2008 R2 x64 RC, seems like one have to install the 2007 Office System Driver: Data Connectivity Components [microsoft.com/downloads/\u2026\n                \n\u2013\u00A0Chris Richner\n                Jun 16 \u002709 at 7:31\n            ",
      "\n                \n                Be very careful with this -- it\u0027s a big ugly cludge (for example, sometimes it guesses a column type and discards all the data that does not fit).\n                \n\u2013\u00A0dbkk\n                Sep 29 \u002709 at 9:02\n            ",
      "\n                \n                One should be very careful if using this method. I\u0027ve found it very flaky for data that isn\u0027t in a perfect format.\n                \n\u2013\u00A0Kenny Mann\n                Jun 9 \u002710 at 16:03\n            ",
      "\n                \n                As a person who had to use OleDb in a big project, I say STAY AWAY FROM IT! It sometimes is not able to retrieve a cell value just because it couldn\u0027t understand the format. It doesn\u0027t have a delete operation. It works totally different and unpredictable even with a slightest provider change. I\u0027d say go for a proven commercial solution.\n                \n\u2013\u00A0Caner \u00D6nc\u00FC\n                Sep 13 \u002714 at 18:32\n            ",
      "\n                \n                You have a great product but I think a lot of people here are expecting free solutions. That might explain the down votes.\n                \n\u2013\u00A0md1337\n                Feb 3 \u002711 at 18:43\n            ",
      "\n                \n                Be careful with ExcelPackage if you need to support XLS. I had a hard time with it and eventually switched to ExcelLibrary.\n                \n\u2013\u00A0Jeremy\n                Sep 17 \u002710 at 13:55\n            ",
      "\n                \n                Definitely true. ExcelPackage/ExML is only a good option if you need the XLSX support.\n                \n\u2013\u00A0Nate\n                Sep 21 \u002710 at 15:16\n                        \n                            \n                        \n            ",
      "\n                \n                Note that ExcelPackage has a successor: EPPlus (epplus.codeplex.com) which supports XLSX. My only concern, compared to NPOI for example, is performance, e.g. when there is a lot of columns.\n                \n\u2013\u00A0Pragmateek\n                Nov 3 \u002713 at 19:00\n            ",
      "\n                \n                It\u0027s so ad hoc but it works (not to mention excel issuing a warning on opening) and is so simple, it deserves to have a place as a solution. Though only for showing that you can export an excel file :))\n                \n\u2013\u00A0Luka Ramishvili\n                Jan 4 \u002712 at 7:23\n                        \n                            \n                        \n            ",
      "\n                \n                This solution worked fine for me, just note you cannot use .xlsx extension\n                \n\u2013\u00A0Jill\n                Mar 30 \u002716 at 18:24\n            ",
      "\n                \n                Some people at my organization can\u0027t open excel files made this way in Office 2010 and above.  Don\u0027t know what the problem is, but I had to roll my own OpenXML implementation. (see Sogger\u0027s answer)\n                \n\u2013\u00A0Kristen Hammack\n                Dec 8 \u002716 at 22:55\n                        \n                            \n                        \n            ",
      "\n                \n                I tried using this in a project that builds pretty large Excel sheets. Excellent library, but extremely poor in performance. I just did a comparison for the project I\u0027m working on: ClosedXML (v 0.53.3) took 92,489 ms whereas EPPlus (v 2.9.03, for testing - we can\u0027t use because it\u0027s GPL) took 16,500 ms.\n                \n\u2013\u00A0Druid\n                Jun 8 \u002711 at 12:40\n            ",
      "\n                \n                @Druid the license is LGPL assuming you don\u0027t modify the source code to ClosedXML it is free to use epplus.codeplex.com/license\n                \n\u2013\u00A0Chris Marisic\n                Aug 12 \u002715 at 16:08\n                        \n                            \n                        \n            ",
      "\n                \n                But you have to make sure that you dispose of everything manually, otherwise you will leak memory\n                \n\u2013\u00A0MagicKat\n                Sep 29 \u002708 at 22:40\n            ",
      "\n                \n                @Ricky B: Also, in my experience with the interop is that it does use excel.  Every time we used it, if Excel wasn\u0027t installed on the machine, we would get COM exceptions.\n                \n\u2013\u00A0MagicKat\n                Sep 29 \u002708 at 22:42\n            ",
      "\n                \n                With the OLE, even with very careful disposals, it eventually leaks memory or crashes. This is argueably OK for attended applications/ workstations, but for servers is not recommended (MS has a KB stating this).  For our server, we just reboot it nightly. Again, that works OK.\n                \n\u2013\u00A0Jennifer Zouak\n                Mar 9 \u002710 at 21:54\n            ",
      "\n                \n                @Geoffrey: ah OK you are going to make me work for it :) --\u003E  support.microsoft.com/kb/257757  Microsoft does not currently recommend, and does not support, Automation of Microsoft Office applications from any unattended, non-interactive client application...\n                \n\u2013\u00A0Jennifer Zouak\n                Mar 11 \u002710 at 17:49\n            ",
      "\n                \n                I\u0027m coming to this discussion after struggling more than a week on interop, and unless your needs are very simple, this is not gonna work. The support for formatting your spreadsheet is abysmal, which is arguably the reason for generating an .xls file and not just a flat .csv file. For example, have you tried outputting more than 911 characters in a cell, or have you tried setting the width of merged cells in a consistent manner? I have, and I can\u0027t tell you how much I hate this crap now... Do yourself a favor and go with one of the free libraries mentioned on this discussion.\n                \n\u2013\u00A0md1337\n                Feb 3 \u002711 at 18:52\n                        \n                            \n                        \n            ",
      "\n                \n                This seems a bit misleading, as you are asking for a donation to get all of the features.\n                \n\u2013\u00A0UrbanEsc\n                Jan 23 \u002717 at 15:33\n            ",
      "\n                \n                That\u0027s partly true: The completely free version will generate a perfect .xlsx file for you, and all source code is provided.  If you donate $10 or more to one of those two charities (of which I receive absolutely nothing), then you get a \u0022better\u0022 version showing how to do formatting, dates, etc.   Given the cost of third-party products, I reckon donating $10 to a good cause instead is well worth it !\n                \n\u2013\u00A0Mike Gledhill\n                May 2 \u002717 at 14:15\n            ",
      "\n                \n                To be more precise, you can use Aspose.Cells for .NET in order to create Excel (XLS, XLSX) files in your .NET application.\n                \n\u2013\u00A0Shahzad Latif\n                Aug 29 \u002711 at 11:55\n            ",
      "\n                \n                Yes you can, if you don\u0027t mind paying a minimum license fee of $999.  Try the MikesKnowledgeBase library... which is $999 cheaper than this !!\n                \n\u2013\u00A0Mike Gledhill\n                Jan 5 \u002712 at 13:10\n            ",
      "\n                \n                This one works on both .net and java,and is not expensive. SmartXLS  smartxls.com\n                \n\u2013\u00A0liya\n                Dec 3 \u002709 at 8:08\n            ",
      "\n                \n                Like the article says though, that\u0027s XML that Excel will read rather than actually being an XLS file, which means that it might only work in Excel and not other programs that read spreadsheets. But it\u0027s probably better than the equivalent HTML table answers here!\n                \n\u2013\u00A0Rup\n                Jul 23 \u002715 at 9:39\n            ",
      "\n                \n                Supports xlsx ? OpenXML ?\n                \n\u2013\u00A0Kiquenet\n                Feb 16 \u002717 at 14:52\n            ",
      "\n                \n                No, this generates HTML marked as an Excel file rather than a true Excel file. Yes, Excel itself will open that OK but other programs that consume spreadsheets - including Microsoft\u0027s free Excel viewer, for example - won\u0027t accept it. You\u0027d do better to create a real Excel file using one of the libraries here.\n                \n\u2013\u00A0Rup\n                Apr 28 \u002711 at 11:46\n            ",
      "\n                \n                You should also use System.Net.Mime.ContentDisposition to generate the content-disposition header text rather than a string append - that\u0027ll cope with filenames that contains spaces etc. correctly.\n                \n\u2013\u00A0Rup\n                Apr 28 \u002711 at 11:48\n            ",
      "\n                \n                I haven\u0027t tried this Open XML SDK solution yet but Wow, I will definitely check it out. I\u0027ve worked with tools like this for many years and didn\u0027t know about this one. I\u0027ve published my own simple FOSS for converting files to XLSX with .NET: github.com/TonyGravagno/NebulaXConvert\n                \n\u2013\u00A0TonyG\n                Jul 26 \u002718 at 16:34\n            "
    ]
  },
  {
    "Id": "ba92da0d-144b-48aa-b0d1-43f53292b2cf",
    "QuestionId": 3142495,
    "Description": "Deserialize JSON into C# dynamic object?",
    "Votes": 1002,
    "Views": 787977,
    "Tags": [
      "c#",
      ".net",
      "json",
      "serialization",
      "dynamic"
    ],
    "Discussions": [
      "\nIf you are happy to have a dependency upon the System.Web.Helpers assembly, then you can use the Json class:\n\ndynamic data = Json.Decode(json);\n\n\nIt is included with the MVC framework as an additional download to the .NET 4 framework. Be sure to give Vlad an upvote if that\u0027s helpful! However if you cannot assume the client environment includes this DLL, then read on.\n\n\n\nAn alternative deserialisation approach is suggested here.  I modified the code slightly to fix a bug and suit my coding style.  All you need is this code and a reference to System.Web.Extensions from your project:\n\nusing System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.Collections.ObjectModel;\nusing System.Dynamic;\nusing System.Linq;\nusing System.Text;\nusing System.Web.Script.Serialization;\n\npublic sealed class DynamicJsonConverter : JavaScriptConverter\n{\n    public override object Deserialize(IDictionary\u003Cstring, object\u003E dictionary, Type type, JavaScriptSerializer serializer)\n    {\n        if (dictionary == null)\n            throw new ArgumentNullException(\u0022dictionary\u0022);\n\n        return type == typeof(object) ? new DynamicJsonObject(dictionary) : null;\n    }\n\n    public override IDictionary\u003Cstring, object\u003E Serialize(object obj, JavaScriptSerializer serializer)\n    {\n        throw new NotImplementedException();\n    }\n\n    public override IEnumerable\u003CType\u003E SupportedTypes\n    {\n        get { return new ReadOnlyCollection\u003CType\u003E(new List\u003CType\u003E(new[] { typeof(object) })); }\n    }\n\n    #region Nested type: DynamicJsonObject\n\n    private sealed class DynamicJsonObject : DynamicObject\n    {\n        private readonly IDictionary\u003Cstring, object\u003E _dictionary;\n\n        public DynamicJsonObject(IDictionary\u003Cstring, object\u003E dictionary)\n        {\n            if (dictionary == null)\n                throw new ArgumentNullException(\u0022dictionary\u0022);\n            _dictionary = dictionary;\n        }\n\n        public override string ToString()\n        {\n            var sb = new StringBuilder(\u0022{\u0022);\n            ToString(sb);\n            return sb.ToString();\n        }\n\n        private void ToString(StringBuilder sb)\n        {\n            var firstInDictionary = true;\n            foreach (var pair in _dictionary)\n            {\n                if (!firstInDictionary)\n                    sb.Append(\u0022,\u0022);\n                firstInDictionary = false;\n                var value = pair.Value;\n                var name = pair.Key;\n                if (value is string)\n                {\n                    sb.AppendFormat(\u0022{0}:\\\u0022{1}\\\u0022\u0022, name, value);\n                }\n                else if (value is IDictionary\u003Cstring, object\u003E)\n                {\n                    new DynamicJsonObject((IDictionary\u003Cstring, object\u003E)value).ToString(sb);\n                }\n                else if (value is ArrayList)\n                {\n                    sb.Append(name \u002B \u0022:[\u0022);\n                    var firstInArray = true;\n                    foreach (var arrayValue in (ArrayList)value)\n                    {\n                        if (!firstInArray)\n                            sb.Append(\u0022,\u0022);\n                        firstInArray = false;\n                        if (arrayValue is IDictionary\u003Cstring, object\u003E)\n                            new DynamicJsonObject((IDictionary\u003Cstring, object\u003E)arrayValue).ToString(sb);\n                        else if (arrayValue is string)\n                            sb.AppendFormat(\u0022\\\u0022{0}\\\u0022\u0022, arrayValue);\n                        else\n                            sb.AppendFormat(\u0022{0}\u0022, arrayValue);\n\n                    }\n                    sb.Append(\u0022]\u0022);\n                }\n                else\n                {\n                    sb.AppendFormat(\u0022{0}:{1}\u0022, name, value);\n                }\n            }\n            sb.Append(\u0022}\u0022);\n        }\n\n        public override bool TryGetMember(GetMemberBinder binder, out object result)\n        {\n            if (!_dictionary.TryGetValue(binder.Name, out result))\n            {\n                // return null to avoid exception.  caller can check for null this way...\n                result = null;\n                return true;\n            }\n\n            result = WrapResultObject(result);\n            return true;\n        }\n\n        public override bool TryGetIndex(GetIndexBinder binder, object[] indexes, out object result)\n        {\n            if (indexes.Length == 1 \u0026\u0026 indexes[0] != null)\n            {\n                if (!_dictionary.TryGetValue(indexes[0].ToString(), out result))\n                {\n                    // return null to avoid exception.  caller can check for null this way...\n                    result = null;\n                    return true;\n                }\n\n                result = WrapResultObject(result);\n                return true;\n            }\n\n            return base.TryGetIndex(binder, indexes, out result);\n        }\n\n        private static object WrapResultObject(object result)\n        {\n            var dictionary = result as IDictionary\u003Cstring, object\u003E;\n            if (dictionary != null)\n                return new DynamicJsonObject(dictionary);\n\n            var arrayList = result as ArrayList;\n            if (arrayList != null \u0026\u0026 arrayList.Count \u003E 0)\n            {\n                return arrayList[0] is IDictionary\u003Cstring, object\u003E \n                    ? new List\u003Cobject\u003E(arrayList.Cast\u003CIDictionary\u003Cstring, object\u003E\u003E().Select(x =\u003E new DynamicJsonObject(x))) \n                    : new List\u003Cobject\u003E(arrayList.Cast\u003Cobject\u003E());\n            }\n\n            return result;\n        }\n    }\n\n    #endregion\n}\n\n\nYou can use it like this:\n\nstring json = ...;\n\nvar serializer = new JavaScriptSerializer();\nserializer.RegisterConverters(new[] { new DynamicJsonConverter() });\n\ndynamic obj = serializer.Deserialize(json, typeof(object));\n\n\nSo, given a JSON string:\n\n{\n  \u0022Items\u0022:[\n    { \u0022Name\u0022:\u0022Apple\u0022, \u0022Price\u0022:12.3 },\n    { \u0022Name\u0022:\u0022Grape\u0022, \u0022Price\u0022:3.21 }\n  ],\n  \u0022Date\u0022:\u002221/11/2010\u0022\n}\n\n\nThe following code will work at runtime:\n\ndynamic data = serializer.Deserialize(json, typeof(object));\n\ndata.Date; // \u002221/11/2010\u0022\ndata.Items.Count; // 2\ndata.Items[0].Name; // \u0022Apple\u0022\ndata.Items[0].Price; // 12.3 (as a decimal)\ndata.Items[1].Name; // \u0022Grape\u0022\ndata.Items[1].Price; // 3.21 (as a decimal)\n\n    ",
      "\nIt\u0027s pretty simple using Json.NET:\n\ndynamic stuff = JsonConvert.DeserializeObject(\u0022{ \u0027Name\u0027: \u0027Jon Smith\u0027, \u0027Address\u0027: { \u0027City\u0027: \u0027New York\u0027, \u0027State\u0027: \u0027NY\u0027 }, \u0027Age\u0027: 42 }\u0022);\n\nstring name = stuff.Name;\nstring address = stuff.Address.City;\n\n\nAlso using Newtonsoft.Json.Linq:\n\ndynamic stuff = JObject.Parse(\u0022{ \u0027Name\u0027: \u0027Jon Smith\u0027, \u0027Address\u0027: { \u0027City\u0027: \u0027New York\u0027, \u0027State\u0027: \u0027NY\u0027 }, \u0027Age\u0027: 42 }\u0022);\n\nstring name = stuff.Name;\nstring address = stuff.Address.City;\n\n\nDocumentation: Querying JSON with dynamic\n    ",
      "\nYou can do this using System.Web.Helpers.Json - its Decode method returns a dynamic object which you can traverse as you like.\n\nIt\u0027s included in the System.Web.Helpers assembly (.NET 4.0).\n\nvar dynamicObject = Json.Decode(jsonString);\n\n    ",
      "\n.NET 4.0 has a built-in library to do this:\n\nusing System.Web.Script.Serialization;\nJavaScriptSerializer jss = new JavaScriptSerializer();\nvar d = jss.Deserialize\u003Cdynamic\u003E(str);\n\n\nThis is the simplest way.\n    ",
      "\nSimple \u0022string JSON data\u0022 to object without any third-party DLL file:\n\nWebClient client = new WebClient();\nstring getString = client.DownloadString(\u0022https://graph.facebook.com/zuck\u0022);\n\nJavaScriptSerializer serializer = new JavaScriptSerializer();\ndynamic item = serializer.Deserialize\u003Cobject\u003E(getString);\nstring name = item[\u0022name\u0022];\n\n//note: JavaScriptSerializer in this namespaces\n//System.Web.Script.Serialization.JavaScriptSerializer\n\n\nNote: You can also using your custom object.\n\nPersonel item = serializer.Deserialize\u003CPersonel\u003E(getString);\n\n    ",
      "\nJsonFx can deserialize JSON content into dynamic objects.\n\n\n  Serialize to/from dynamic types (default for .NET 4.0):\n\n\nvar reader = new JsonReader(); var writer = new JsonWriter();\n\nstring input = @\u0022{ \u0022\u0022foo\u0022\u0022: true, \u0022\u0022array\u0022\u0022: [ 42, false, \u0022\u0022Hello!\u0022\u0022, null ] }\u0022;\ndynamic output = reader.Read(input);\nConsole.WriteLine(output.array[0]); // 42\nstring json = writer.Write(output);\nConsole.WriteLine(json); // {\u0022foo\u0022:true,\u0022array\u0022:[42,false,\u0022Hello!\u0022,null]}\n\n    ",
      "\nAnother way using Newtonsoft.Json:\n\ndynamic stuff = Newtonsoft.Json.JsonConvert.DeserializeObject(\u0022{ color: \u0027red\u0027, value: 5 }\u0022);\nstring color = stuff.color;\nint value = stuff.value;\n\n    ",
      "\nI made a new version of the DynamicJsonConverter that uses Expando Objects. I used expando objects, because I wanted to Serialize the dynamic back into JSON using Json.NET.\n\nusing System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.Collections.ObjectModel;\nusing System.Dynamic;\nusing System.Web.Script.Serialization;\n\npublic static class DynamicJson\n{\n    public static dynamic Parse(string json)\n    {\n        JavaScriptSerializer jss = new JavaScriptSerializer();\n        jss.RegisterConverters(new JavaScriptConverter[] { new DynamicJsonConverter() });\n\n        dynamic glossaryEntry = jss.Deserialize(json, typeof(object)) as dynamic;\n        return glossaryEntry;\n    }\n\n    class DynamicJsonConverter : JavaScriptConverter\n    {\n        public override object Deserialize(IDictionary\u003Cstring, object\u003E dictionary, Type type, JavaScriptSerializer serializer)\n        {\n            if (dictionary == null)\n                throw new ArgumentNullException(\u0022dictionary\u0022);\n\n            var result = ToExpando(dictionary);\n\n            return type == typeof(object) ? result : null;\n        }\n\n        private static ExpandoObject ToExpando(IDictionary\u003Cstring, object\u003E dictionary)\n        {\n            var result = new ExpandoObject();\n            var dic = result as IDictionary\u003CString, object\u003E;\n\n            foreach (var item in dictionary)\n            {\n                var valueAsDic = item.Value as IDictionary\u003Cstring, object\u003E;\n                if (valueAsDic != null)\n                {\n                    dic.Add(item.Key, ToExpando(valueAsDic));\n                    continue;\n                }\n                var arrayList = item.Value as ArrayList;\n                if (arrayList != null \u0026\u0026 arrayList.Count \u003E 0)\n                {\n                    dic.Add(item.Key, ToExpando(arrayList));\n                    continue;\n                }\n\n                dic.Add(item.Key, item.Value);\n            }\n            return result;\n        }\n\n        private static ArrayList ToExpando(ArrayList obj)\n        {\n            ArrayList result = new ArrayList();\n\n            foreach (var item in obj)\n            {\n                var valueAsDic = item as IDictionary\u003Cstring, object\u003E;\n                if (valueAsDic != null)\n                {\n                    result.Add(ToExpando(valueAsDic));\n                    continue;\n                }\n\n                var arrayList = item as ArrayList;\n                if (arrayList != null \u0026\u0026 arrayList.Count \u003E 0)\n                {\n                    result.Add(ToExpando(arrayList));\n                    continue;\n                }\n\n                result.Add(item);\n            }\n            return result;\n        }\n\n        public override IDictionary\u003Cstring, object\u003E Serialize(object obj, JavaScriptSerializer serializer)\n        {\n            throw new NotImplementedException();\n        }\n\n        public override IEnumerable\u003CType\u003E SupportedTypes\n        {\n            get { return new ReadOnlyCollection\u003CType\u003E(new List\u003CType\u003E(new[] { typeof(object) })); }\n        }\n    }\n}\n\n    ",
      "\nYou can achieve that with the help of Newtonsoft.Json. Install Newtonsoft.Json from Nuget and the :\n\nusing Newtonsoft.Json;\n\ndynamic results = JsonConvert.DeserializeObject\u003Cdynamic\u003E(YOUR_JSON);\n\n    ",
      "\nThe simplest way is:\n\nJust include this DLL file.\n\nUse the code like this:\n\ndynamic json = new JDynamic(\u0022{a:\u0027abc\u0027}\u0022);\n// json.a is a string \u0022abc\u0022\n\ndynamic json = new JDynamic(\u0022{a:3.1416}\u0022);\n// json.a is 3.1416m\n\ndynamic json = new JDynamic(\u0022{a:1}\u0022);\n// json.a is\n\ndynamic json = new JDynamic(\u0022[1,2,3]\u0022);\n/json.Length/json.Count is 3\n// And you can use json[0]/ json[2] to get the elements\n\ndynamic json = new JDynamic(\u0022{a:[1,2,3]}\u0022);\n//json.a.Length /json.a.Count is 3.\n// And you can use  json.a[0]/ json.a[2] to get the elements\n\ndynamic json = new JDynamic(\u0022[{b:1},{c:1}]\u0022);\n// json.Length/json.Count is 2.\n// And you can use the  json[0].b/json[1].c to get the num.\n\n    ",
      "\nI use http://json2csharp.com/ to get a class representing the JSON object.\n\nInput:\n\n{\n   \u0022name\u0022:\u0022John\u0022,\n   \u0022age\u0022:31,\n   \u0022city\u0022:\u0022New York\u0022,\n   \u0022Childs\u0022:[\n      {\n         \u0022name\u0022:\u0022Jim\u0022,\n         \u0022age\u0022:11\n      },\n      {\n         \u0022name\u0022:\u0022Tim\u0022,\n         \u0022age\u0022:9\n      }\n   ]\n}\n\n\nOutput:\n\npublic class Child\n{\n    public string name { get; set; }\n    public int age { get; set; }\n}\n\npublic class Person\n{\n    public string name { get; set; }\n    public int age { get; set; }\n    public string city { get; set; }\n    public List\u003CChild\u003E Childs { get; set; }\n}\n\n\nAfter that I use Newtonsoft.Json to fill the class:\n\nusing Newtonsoft.Json;\n\nnamespace GitRepositoryCreator.Common\n{\n    class JObjects\n    {\n        public static string Get(object p_object)\n        {\n            return JsonConvert.SerializeObject(p_object);\n        }\n        internal static T Get\u003CT\u003E(string p_object)\n        {\n            return JsonConvert.DeserializeObject\u003CT\u003E(p_object);\n        }\n    }\n}\n\n\nYou can call it like this:\n\nPerson jsonClass = JObjects.Get\u003CPerson\u003E(stringJson);\n\nstring stringJson = JObjects.Get(jsonClass);\n\n\nPS:\n\nIf your JSON variable name is not a valid C# name (name starts with $) you can fix that like this:\n\npublic class Exception\n{\n   [JsonProperty(PropertyName = \u0022$id\u0022)]\n   public string id { get; set; }\n   public object innerException { get; set; }\n   public string message { get; set; }\n   public string typeName { get; set; }\n   public string typeKey { get; set; }\n   public int errorCode { get; set; }\n   public int eventId { get; set; }\n}\n\n    ",
      "\nYou can extend the JavaScriptSerializer to recursively copy the dictionary it created to expando object(s) and then use them dynamically:\n\nstatic class JavaScriptSerializerExtensions\n{\n    public static dynamic DeserializeDynamic(this JavaScriptSerializer serializer, string value)\n    {\n        var dictionary = serializer.Deserialize\u003CIDictionary\u003Cstring, object\u003E\u003E(value);\n        return GetExpando(dictionary);\n    }\n\n    private static ExpandoObject GetExpando(IDictionary\u003Cstring, object\u003E dictionary)\n    {\n        var expando = (IDictionary\u003Cstring, object\u003E)new ExpandoObject();\n\n        foreach (var item in dictionary)\n        {\n            var innerDictionary = item.Value as IDictionary\u003Cstring, object\u003E;\n            if (innerDictionary != null)\n            {\n                expando.Add(item.Key, GetExpando(innerDictionary));\n            }\n            else\n            {\n                expando.Add(item.Key, item.Value);\n            }\n        }\n\n        return (ExpandoObject)expando;\n    }\n}\n\n\nThen you just need to having a using statement for the namespace you defined the extension in (consider just defining them in System.Web.Script.Serialization... another trick is to not use a namespace, then you don\u0027t need the using statement at all) and you can consume them like so:\n\nvar serializer = new JavaScriptSerializer();\nvar value = serializer.DeserializeDynamic(\u0022{ \u0027Name\u0027: \u0027Jon Smith\u0027, \u0027Address\u0027: { \u0027City\u0027: \u0027New York\u0027, \u0027State\u0027: \u0027NY\u0027 }, \u0027Age\u0027: 42 }\u0022);\n\nvar name = (string)value.Name; // Jon Smith\nvar age = (int)value.Age;      // 42\n\nvar address = value.Address;\nvar city = (string)address.City;   // New York\nvar state = (string)address.State; // NY\n\n    ",
      "\nYou can use using Newtonsoft.Json\n\nvar jRoot = \n JsonConvert.DeserializeObject\u003Cdynamic\u003E(Encoding.UTF8.GetString(resolvedEvent.Event.Data));\n\n\nresolvedEvent.Event.Data is my response getting from calling core Event .\n    ",
      "\nFor that I would use JSON.NET to do the low-level parsing of the JSON stream and then build up the object hierarchy out of instances of the ExpandoObject class.\n    ",
      "\nI am using like this in my code and it\u0027s working fine\n\nusing System.Web.Script.Serialization;\nJavaScriptSerializer oJS = new JavaScriptSerializer();\nRootObject oRootObject = new RootObject();\noRootObject = oJS.Deserialize\u003CRootObject\u003E(Your JSon String);\n\n    ",
      "\nLook at the article I wrote on CodeProject, one that answers the question precisely:\n\nDynamic types with JSON.NET\n\nThere is way too much for re-posting it all here, and even less point since that article has an attachment with the key/required source file.\n    ",
      "\nAnother option is to \u0022Paste JSON as classes\u0022 so it can be deserialised quick and easy.\n\n\nSimply copy your entire JSON\nIn Visual Studio: Click Edit \u2192 Paste Special \u2192 Paste JSON as classes\n\n\nHere is a better explanation n piccas... \u2018Paste JSON As Classes\u2019 in ASP.NET and Web Tools 2012.2 RC\n    ",
      "\nTo get an ExpandoObject:\n\nusing Newtonsoft.Json;\nusing Newtonsoft.Json.Converters;\n\nContainer container = JsonConvert.Deserialize\u003CContainer\u003E(jsonAsString, new ExpandoObjectConverter());\n\n    ",
      "\nDeserializing in JSON.NET can be dynamic using the JObject class, which is included in that library.  My JSON string represents these classes:\n\npublic class Foo {\n   public int Age {get;set;}\n   public Bar Bar {get;set;}\n}\n\npublic class Bar {\n   public DateTime BDay {get;set;}\n}\n\n\nNow we deserialize the string WITHOUT referencing the above classes:\n\nvar dyn = JsonConvert.DeserializeObject\u003CJObject\u003E(jsonAsFooString);\n\nJProperty propAge = dyn.Properties().FirstOrDefault(i=\u003Ei.Name == \u0022Age\u0022);\nif(propAge != null) {\n    int age = int.Parse(propAge.Value.ToString());\n    Console.WriteLine(\u0022age=\u0022 \u002B age);\n}\n\n//or as a one-liner:\nint myage = int.Parse(dyn.Properties().First(i=\u003Ei.Name == \u0022Age\u0022).Value.ToString());\n\n\nOr if you want to go deeper:\n\nvar propBar = dyn.Properties().FirstOrDefault(i=\u003Ei.Name == \u0022Bar\u0022);\nif(propBar != null) {\n    JObject o = (JObject)propBar.First();\n    var propBDay = o.Properties().FirstOrDefault (i =\u003E i.Name==\u0022BDay\u0022);\n    if(propBDay != null) {\n        DateTime bday = DateTime.Parse(propBDay.Value.ToString());\n        Console.WriteLine(\u0022birthday=\u0022 \u002B bday.ToString(\u0022MM/dd/yyyy\u0022));\n    }\n}\n\n//or as a one-liner:\nDateTime mybday = DateTime.Parse(((JObject)dyn.Properties().First(i=\u003Ei.Name == \u0022Bar\u0022).First()).Properties().First(i=\u003Ei.Name == \u0022BDay\u0022).Value.ToString());\n\n\nSee post for a complete example.\n    ",
      "\nThe object you want DynamicJSONObject is included in the System.Web.Helpers.dll from the ASP.NET Web Pages package, which is part of WebMatrix.\n    ",
      "\nThere is a lightweight JSON library for C# called SimpleJson.\n\nIt supports .NET 3.5\u002B, Silverlight and Windows Phone 7.\n\nIt supports dynamic for .NET 4.0\n\nIt can also be installed as a NuGet package\n\nInstall-Package SimpleJson\n\n    ",
      "\nUse DataSet(C#) with JavaScript. A simple function for creating a JSON stream with DataSet input. Create JSON content like (multi table dataset):\n\n[[{a:1,b:2,c:3},{a:3,b:5,c:6}],[{a:23,b:45,c:35},{a:58,b:59,c:45}]]\n\n\nJust client side, use eval. For example,\n\nvar d = eval(\u0027[[{a:1,b:2,c:3},{a:3,b:5,c:6}],[{a:23,b:45,c:35},{a:58,b:59,c:45}]]\u0027)\n\n\nThen use:\n\nd[0][0].a // out 1 from table 0 row 0\n\nd[1][1].b // out 59 from table 1 row 1\n\n// Created by Behnam Mohammadi And Saeed Ahmadian\npublic string jsonMini(DataSet ds)\n{\n    int t = 0, r = 0, c = 0;\n    string stream = \u0022[\u0022;\n\n    for (t = 0; t \u003C ds.Tables.Count; t\u002B\u002B)\n    {\n        stream \u002B= \u0022[\u0022;\n        for (r = 0; r \u003C ds.Tables[t].Rows.Count; r\u002B\u002B)\n        {\n            stream \u002B= \u0022{\u0022;\n            for (c = 0; c \u003C ds.Tables[t].Columns.Count; c\u002B\u002B)\n            {\n                stream \u002B= ds.Tables[t].Columns[c].ToString() \u002B \u0022:\u0027\u0022 \u002B\n                          ds.Tables[t].Rows[r][c].ToString() \u002B \u0022\u0027,\u0022;\n            }\n            if (c\u003E0)\n                stream = stream.Substring(0, stream.Length - 1);\n            stream \u002B= \u0022},\u0022;\n        }\n        if (r\u003E0)\n            stream = stream.Substring(0, stream.Length - 1);\n        stream \u002B= \u0022],\u0022;\n    }\n    if (t\u003E0)\n        stream = stream.Substring(0, stream.Length - 1);\n    stream \u002B= \u0022];\u0022;\n    return stream;\n}\n\n    ",
      "\nTry this:\n\n  var units = new { Name = \u0022Phone\u0022, Color= \u0022White\u0022 };\n    var jsonResponse = JsonConvert.DeserializeAnonymousType(json, units);\n\n    ",
      "\nHow to parse easy JSON content with dynamic \u0026 JavaScriptSerializer\n\nPlease add reference of System.Web.Extensions and add this namespace using System.Web.Script.Serialization; at top:\n\npublic static void EasyJson()\n{\n    var jsonText = @\u0022{\n        \u0022\u0022some_number\u0022\u0022: 108.541,\n        \u0022\u0022date_time\u0022\u0022: \u0022\u00222011-04-13T15:34:09Z\u0022\u0022,\n        \u0022\u0022serial_number\u0022\u0022: \u0022\u0022SN1234\u0022\u0022\n    }\u0022;\n\n    var jss = new JavaScriptSerializer();\n    var dict = jss.Deserialize\u003Cdynamic\u003E(jsonText);\n\n    Console.WriteLine(dict[\u0022some_number\u0022]);\n    Console.ReadLine();\n}\n\n\nHow to parse nested \u0026 complex json with dynamic \u0026 JavaScriptSerializer\n\nPlease add reference of System.Web.Extensions and add this namespace using System.Web.Script.Serialization; at top:\n\npublic static void ComplexJson()\n{\n    var jsonText = @\u0022{\n        \u0022\u0022some_number\u0022\u0022: 108.541,\n        \u0022\u0022date_time\u0022\u0022: \u0022\u00222011-04-13T15:34:09Z\u0022\u0022,\n        \u0022\u0022serial_number\u0022\u0022: \u0022\u0022SN1234\u0022\u0022,\n        \u0022\u0022more_data\u0022\u0022: {\n            \u0022\u0022field1\u0022\u0022: 1.0,\n            \u0022\u0022field2\u0022\u0022: \u0022\u0022hello\u0022\u0022\n        }\n    }\u0022;\n\n    var jss = new JavaScriptSerializer();\n    var dict = jss.Deserialize\u003Cdynamic\u003E(jsonText);\n\n    Console.WriteLine(dict[\u0022some_number\u0022]);\n    Console.WriteLine(dict[\u0022more_data\u0022][\u0022field2\u0022]);\n    Console.ReadLine();\n}\n\n    ",
      "\nWith Cinchoo ETL - an open source library available to parse JSON into a dynamic object:\n\nstring json = @\u0022{\n    \u0022\u0022key1\u0022\u0022: [\n        {\n            \u0022\u0022action\u0022\u0022: \u0022\u0022open\u0022\u0022,\n            \u0022\u0022timestamp\u0022\u0022: \u0022\u00222018-09-05 20:46:00\u0022\u0022,\n            \u0022\u0022url\u0022\u0022: null,\n            \u0022\u0022ip\u0022\u0022: \u0022\u002266.102.6.98\u0022\u0022\n        }\n    ]\n}\u0022;\nusing (var p = ChoJSONReader.LoadText(json)\n    .WithJSONPath(\u0022$.*\u0022)\n    )\n{\n    foreach (var rec in p)\n    {\n        Console.WriteLine(\u0022Action: \u0022 \u002B rec.action);\n        Console.WriteLine(\u0022Timestamp: \u0022 \u002B rec.timestamp);\n        Console.WriteLine(\u0022URL: \u0022 \u002B rec.url);\n        Console.WriteLine(\u0022IP address: \u0022 \u002B rec.ip);\n    }\n}\n\n\nOutput:\n\nAction: open\nTimestamp: 2018-09-05 20:46:00\nURL: http://www.google.com\nIP address: 66.102.6.98\n\n\nDisclaimer: I\u0027m the author of this library.\n    ",
      "\nCreating dynamic objects with Newtonsoft.Json works really great.\n//json is your string containing the JSON value\ndynamic data = JsonConvert.DeserializeObject\u003Cdynamic\u003E(json);\n\nNow you can access the data object just like if it was a regular object. This is the JSON object we currently have as an example:\n{ \u0022ID\u0022:123,\u0022Name\u0022:\u0022Jack\u0022,\u0022Numbers\u0022:[1, 2, 3] }\n\nThis is how you access it after deserialization:\ndata.ID //Retrieve the int\ndata.Name //Retrieve the string\ndata.Numbers[0] //Retrieve the first element in the array\n\n    ",
      "\nI want to do this programmatically in unit tests, I do have the luxury of typing it out.\nMy solution is:\nvar dict = JsonConvert.DeserializeObject\u003CExpandoObject\u003E(json) as IDictionary\u003Cstring, object\u003E;\n\nNow I can assert that\ndict.ContainsKey(\u0022ExpectedProperty\u0022);\n\n    ",
      "\ntry this way!\n\nJSON example:\n\n  [{\n            \u0022id\u0022: 140,\n            \u0022group\u0022: 1,\n            \u0022text\u0022: \u0022xxx\u0022,\n            \u0022creation_date\u0022: 123456,\n            \u0022created_by\u0022: \u0022xxx@gmail.co\u0022,\n            \u0022tags\u0022: [\u0022xxxxx\u0022]\n        }, {\n            \u0022id\u0022: 141,\n            \u0022group\u0022: 1,\n            \u0022text\u0022: \u0022xxxx\u0022,\n            \u0022creation_date\u0022: 123456,\n            \u0022created_by\u0022: \u0022xxx@gmail.com\u0022,\n            \u0022tags\u0022: [\u0022xxxxx\u0022]\n        }]\n\n\nC# code:\n\n        var jsonString = (File.ReadAllText(Path.Combine(Directory.GetCurrentDirectory(),\u0022delete_result.json\u0022)));\n        var objects = JsonConvert.DeserializeObject\u003Cdynamic\u003E(jsonString);\n        foreach(var o in objects)\n        {\n            Console.WriteLine($\u0022{o.id.ToString()}\u0022);\n        }\n\n    ",
      "\n                \n                I get an error in dynamic obj = serializer.Deserialize(json, typeof(object));  saying that no overload for method with 2 arguments..wrong dll or what?\n                \n\u2013\u00A0Stewie Griffin\n                Jun 18 \u002711 at 20:17\n            ",
      "\n                \n                You can use System.Web.Helpers.Json - it offers a Decode method that returns a dynamic object. I\u0027ve also posted this info as an answer.\n                \n\u2013\u00A0Vlad Iliescu\n                Feb 29 \u002712 at 7:30\n            ",
      "\n                \n                This helped me a lot as well, but I\u0027m curious what I should do if I need to use the .Serialize method, which currently only throws a NotImplementedException... I\u0027m not too familiar with sealed classes and/or extended abstract classes. Can anyone point me in the right direction?\n                \n\u2013\u00A0Cory W.\n                Aug 29 \u002712 at 15:24\n            ",
      "\n                \n                sometimes in js you have fields with special chars like \u0022background-color\u0022. To access such fields in js you do obj[\u0022background-color\u0022]. How can I access such fields from c# after deserializing to dynamic object? I can\u0027t do obj.background-color, of course, and obj[\u0022background-color\u0022] doesn\u0027t seem to work. It would be nice if the dynamic object could also be accessed as a dictionary, at the same time, exactly like in js.\n                \n\u2013\u00A0Radu Simionescu\n                Sep 28 \u002712 at 11:59\n                        \n                            \n                        \n            ",
      "\n                \n                @RaduSimionescu I am probably a bit late, but maybe this helps future visitors. I had the same problem, just with the field-name params (which is a keyword in C#). In addition to TryGetMember you can override TryGetIndex, which gives you exactly the same behavior as in JS. Then you can do obj[\u0022params\u0022] or obj[\u0022background-color\u0022] for awkward field names.\n                \n\u2013\u00A0Martin Ender\n                Jan 20 \u002713 at 14:30\n            ",
      "\n                \n                @HotLicks: To introspect the dynamic stuff do something like: foreach (Newtonsoft.Json.Linq.JProperty jproperty in stuff) { Console.WriteLine(\u0022jproperty.Name = {0}\u0022, jproperty.Name);}\n                \n\u2013\u00A0Matthias\n                Jun 15 \u002714 at 20:48\n                        \n                            \n                        \n            ",
      "\n                \n                What\u0027s the difference between JsonConvert.DeserializeObject and JObject.Parse ? The answer is using them both in the same way to do the same thing but doesn\u0027t explain the difference.\n                \n\u2013\u00A0cja\n                Oct 8 \u002714 at 16:04\n                        \n                            \n                        \n            ",
      "\n                \n                @TomPeplow Tried this. It didn\u0027t work for me. It says that \u0022JObject doesn\u0027t implement \u0027Name\u0027\u0022.\n                \n\u2013\u00A0Lee Louviere\n                Feb 18 \u002715 at 17:27\n            ",
      "\n                \n                @cja no difference: stackoverflow.com/questions/23645034/\u2026\n                \n\u2013\u00A0nawfal\n                Jun 15 \u002715 at 9:16\n            ",
      "\n                \n                I can\u0027t get this to work. I\u0027ve narrowed the issue down to being inside an async method. If I make the method synchronous it works as expected. However, make the method async and I can\u0027t get a dynamic, I just get an object. Explicit casting does nothing, still just gives me an object. Is anyone else experiencing this?\n                \n\u2013\u00A0codeConcussion\n                Dec 11 \u002715 at 19:57\n                        \n                            \n                        \n            ",
      "\n                \n                FYI System.Web.Helpers.dll requires .net 4.0 but is not included in .net 4.0. It can be installed with ASP.NET MVC 3\n                \n\u2013\u00A0jbtule\n                Mar 30 \u002712 at 20:44\n            ",
      "\n                \n                You will find this assembly in the Extensions group under Assemblies in Visual Studio 2012\n                \n\u2013\u00A0W3Max\n                Jan 17 \u002713 at 13:55\n            ",
      "\n                \n                Any Issues with using dynamic ?  How can we handle exceptions efficiently if input JSON does not contain the properties..\n                \n\u2013\u00A0Usama Khalil\n                Apr 15 \u002713 at 10:24\n            ",
      "\n                \n                If you\u0027re wanting to strongly type the model then be sure to use the Json.Decode\u003CT\u003E(string) method.\n                \n\u2013\u00A0Mike\n                Apr 15 \u002713 at 20:47\n            ",
      "\n                \n                To add this library to your project: stackoverflow.com/questions/8037895/\u2026\n                \n\u2013\u00A0user565869\n                Jul 10 \u002714 at 17:50\n            ",
      "\n                \n                have you tried this? It returns Dictionary\u003Cstring,object\u003E. Unless I\u0027m missing something, your example does not return a dynamic object.\n                \n\u2013\u00A0sergiopereira\n                Jun 13 \u002711 at 15:15\n            ",
      "\n                \n                This doesn\u0027t work, it just return a dict in the form of a dynamic\n                \n\u2013\u00A0mattmanser\n                Jun 30 \u002711 at 15:56\n            ",
      "\n                \n                @Peter Long I believe I have failed to state my case clearly, dear fellow.  Let me attempt to rectify my error.  I know what a dynamic is. This doesn\u0027t allow you to pass in a JSON object and use d.code, you\u0027d have to do d[\u0022code\u0022].Value, which isn\u0027t what most people finding this answer want, we already know how to get the dictionary and casting it to a dynamic is a total waste of time. I respectfully disagree, sir.\n                \n\u2013\u00A0mattmanser\n                Jul 1 \u002711 at 9:22\n                        \n                            \n                        \n            ",
      "\n                \n                @mattmanser, we already know how to get the dictionary and casting it to a dynamic. It does not have to be a dictionay. Json also have lists besides dictionary. And also lists and dictionaries could be nested. My code could handle all of these situations. BUT your method can NOT.\n                \n\u2013\u00A0Peter Long\n                Jul 14 \u002711 at 2:44\n                        \n                            \n                        \n            ",
      "\n                \n                @mattmanser is right; it is possible to implement  IDynamicMetaObjectProvider (or use e.g. ExpandoObject) that is able to intercept properties and look them up in an internal dictionary. This combined with the use of dynamic allows code such as d.code to be used. It\u0027s kind of pointless to cast a dictionary to a dynamic.\n                \n\u2013\u00A0Stephen Drew\n                Oct 23 \u002714 at 10:36\n            ",
      "\n                \n                Id don\u0027t get it. This is by far most simple solution and nobody mentions it.\n                \n\u2013\u00A0cikatomo\n                Feb 20 \u002713 at 10:27\n            ",
      "\n                \n                yes it\u0027s simple :) sometime you need serialize but don\u0027t want to include 3rd part dll\n                \n\u2013\u00A0\u0130brahim \u00D6zb\u00F6l\u00FCk\n                Aug 6 \u002713 at 11:48\n            ",
      "\n                \n                Can you elaborate on  : how dynamic can access the DEserialized object via  : myObject[\u0022myprop\u0022] ? I know it\u0027s done on runtime but how accessing it via myObject[\u0022myprop\u0022] is valid ?\n                \n\u2013\u00A0Royi Namir\n                Sep 19 \u002713 at 16:05\n                        \n                            \n                        \n            ",
      "\n                \n                You can deserialize your object like Personel item = serializer.Deserialize\u003CPersonel\u003E(getString); and if you use dynamic object also you can using array and everything is possible like everyobject\n                \n\u2013\u00A0\u0130brahim \u00D6zb\u00F6l\u00FCk\n                Sep 20 \u002713 at 11:27\n            ",
      "\n                \n                To use the System.Web.Script.Serialization namespace your project needs a reference to System.Web.Extensions.\n                \n\u2013\u00A0StilgarISCA\n                Sep 8 \u002718 at 12:57\n            ",
      "\n                \n                but that\u0027s not what the question is asking about. there\u0027s a different when you  have to specify the type for every json string and working with dynamic type.\n                \n\u2013\u00A0Illuminati\n                Jun 7 \u002716 at 12:31\n            ",
      "\n                \n                this saved me a lot of time ! should be chosen as best answer !\n                \n\u2013\u00A0jsiot\n                Mar 17 at 13:27\n            ",
      "\n                \n                This approach allow to \u0022traverse\u0022 the jSON document, so that you can manage situation where the JSON structure is unknown or variable (for example, many API returns a completely different JSON document when an error occurs). There are other libraries that permits to do that, apart from Newtonsoft.JSON (aka JSON.NET) ?\n                \n\u2013\u00A0Alex 75\n                Dec 20 \u002719 at 22:42\n            "
    ]
  },
  {
    "Id": "ebfdc742-fd23-432f-8eeb-505d015c5218",
    "QuestionId": 29293637,
    "Description": "How to append whole set of model to formdata and obtain it in MVC",
    "Votes": 75,
    "Views": 44903,
    "Tags": [
      "javascript",
      "c#",
      "ajax",
      "asp.net-mvc",
      "form-data"
    ],
    "Discussions": [
      "\nIf your view is based on a model and you have generated the controls inside \u003Cform\u003E tags, then you can serialize the model to FormData using\n\nvar formdata = new FormData($(\u0027form\u0027).get(0));\n\n\nThis will also include any files generated with \u003Cinput type=\u0022file\u0022 name=\u0022myImage\u0022 .../\u003E\n\nand post it back using\n\n$.ajax({\n  url: \u0027@Url.Action(\u0022YourActionName\u0022, \u0022YourControllerName\u0022)\u0027,\n  type: \u0027POST\u0027,\n  data: formdata,\n  processData: false,\n  contentType: false,         \n});\n\n\nand in your controller\n\n[HttpPost]\npublic ActionResult YourActionName(YourModelType model)\n{\n}\n\n\nor (if your model does not include a property for HttpPostedFileBase)\n\n[HttpPost]\npublic ActionResult YourActionName(YourModelType model, HttpPostedFileBase myImage)\n{\n}\n\n\nIf you want to add additional information that is not in the form, then you can append it using\n\nformdata.append(\u0027someProperty\u0027, \u0027SomeValue\u0027);\n\n    ",
      "\nIf you want to send Form data using Ajax.This is the way to send \n\nvar formData = new FormData();\n\n//File Upload\n   var totalFiles = document.getElementById(\u0022Iupload\u0022).files.length;\n\n\nfor (var i = 0; i \u003C totalFiles; i\u002B\u002B) {\n    var file = document.getElementById(\u0022Iupload\u0022).files[i];\n\n    formData.append(\u0022Document\u0022, file);\n}\n\nformData.append(\u0022NameCode\u0022, $(\u0027#SelecterID\u0027).val());\nformData.append(\u0022AirLineCode\u0022, $(\u0027#SelecterID\u0027).val());\n\n\n$.ajax({\n        url: \u0022/Controller/ActionName\u0022,\n        type: \u0022POST\u0022,\n        dataType: \u0022JSON\u0022,\n        data: formData,\n        contentType: false,\n        processData: false,\n        success: function (result) {\n    }\n})\n\n    ",
      "\nIn view side ,if you are using ajax then,\n\n$(\u0027#button_Id\u0027).on(\u0027click\u0027, function(){\n        var Datas=JSON.stringify($(\u0027form\u0027).serialize());\n        $.ajax({\n            type: \u0022POST\u0022,\n            contentType: \u0022application/x-www-form-urlencoded; charset=utf-8\u0022,\n            url: \u0027@Url.Action(\u0022ActionName\u0022,\u0022ControllerName\u0022)\u0027,\n            data:Datas,\n            cache: false,\n            dataType: \u0027JSON\u0027,\n            async: true,\n            success: function (data) {\n\n            },\n        });\n    });\n\n\nIn Controller side,\n\n [HttpPost]\n public ActionResult ActionName(ModelName modelObj)\n {\n //Some code here\n }\n\n    ",
      "\n                \n                @StephenMuecke Thank you very much. It is really one of the hardest issue regarding to Ajax call and with the help of you, it is solved :) I am wondering if it is also possible with Html.BeginForm and Ajax.BeginForm instead of \u003Cform\u003E? If so, what changes should be applied?\n                \n\u2013\u00A0Jack\n                Jun 20 \u002715 at 10:14\n                        \n                            \n                        \n            ",
      "\n                \n                Yes, it\u0027s possible with Html.BeginForm() to include files with a normal submit normal. Sorry, I\u0027m a little lost. Which question was this in reference to?\n                \n\u2013\u00A0user3559349\n                Jun 21 \u002715 at 10:15\n            ",
      "\n                \n                @LuisGouveia, No its not with Ajax.BeginForm(). In any case the Ajax methods are obsolete (they are not even included in the latest version of MVC) and using $.ajax() (or its derivatives such as $.get(), $.load() etc give you much more flexibility.\n                \n\u2013\u00A0user3559349\n                Dec 11 \u002715 at 10:33\n                        \n                            \n                        \n            ",
      "\n                \n                @LuisGouveia, Yes thats another option, but why not just use FormData as per the answer? (or are you needing this for older browsers which dont support it?)\n                \n\u2013\u00A0user3559349\n                Dec 11 \u002715 at 10:39\n            ",
      "\n                \n                @MSH, It will upload multiple files (the parameter would just need to be IEnumerable\u003CHttpPostedFileBase\u003E if you had a \u003Cinput type=\u0022file\u0022 multiple=\u0022multiple\u0022 ... /\u003E\n                \n\u2013\u00A0user3559349\n                Sep 13 \u002717 at 9:04\n            ",
      "\n                \n                In server side, get the files by using Request.Files\n                \n\u2013\u00A0Minh Nguyen\n                Nov 15 \u002716 at 14:38\n            "
    ]
  },
  {
    "Id": "18d50052-17d7-4cb1-8d24-386f2e016d4e",
    "QuestionId": 2818179,
    "Description": "How do I force my .NET application to run as administrator?",
    "Votes": 899,
    "Views": 494000,
    "Tags": [
      "c#",
      ".net",
      "windows-7",
      "administrator",
      "elevated-privileges"
    ],
    "Discussions": [
      "\nYou\u0027ll want to modify the manifest that gets embedded in the program. This works on Visual\u00A0Studio\u00A02008 and higher: Project \u002B Add New Item, select \u0022Application Manifest File\u0022. Change the \u003CrequestedExecutionLevel\u003E element to:\n\n \u003CrequestedExecutionLevel level=\u0022requireAdministrator\u0022 uiAccess=\u0022false\u0022 /\u003E\n\n\nThe user gets the UAC prompt when they start the program. Use wisely; their patience can wear out quickly.\n    ",
      "\nAdding a requestedExecutionLevel element to your manifest is only half the battle; you have to remember that UAC can be turned off. If it is, you have to perform the check the old school way and put up an error dialog if the user is not administrator  (call IsInRole(WindowsBuiltInRole.Administrator) on your thread\u0027s CurrentPrincipal).\n    ",
      "\nThe detailed steps are as follow.\n\n\nAdd application manifest file to solution\nChange application setting to \u0022app.manifest\u0022\nUpdate tag of \u0022requestedExecutionLevel\u0022 to requireAdministrator.\n\n\n\n\n\n\n\n\n\n\nNote that using this code you need to turn off the security settings of ClickOnce, for do this, go inside Properties -\u003E Security -\u003E ClickOnce Security\n    ",
      "\nI implemented some code to do it manually:\n\nusing System.Security.Principal;\npublic bool IsUserAdministrator()\n{\n    bool isAdmin;\n    try\n    {\n        WindowsIdentity user = WindowsIdentity.GetCurrent();\n        WindowsPrincipal principal = new WindowsPrincipal(user);\n        isAdmin = principal.IsInRole(WindowsBuiltInRole.Administrator);\n    }\n    catch (UnauthorizedAccessException ex)\n    {\n        isAdmin = false;\n    }\n    catch (Exception ex)\n    {\n        isAdmin = false;\n    }\n    return isAdmin;\n}\n\n    ",
      "\nYou can embed a manifest file in the EXE file, which will cause Windows (7 or higher) to always run the program as an administrator.\n\nYou can find more details in Step 6: Create and Embed an Application Manifest (UAC) (MSDN).\n    ",
      "\nWhile working on Visual\u00A0Studio\u00A02008, right click on Project -\u003E Add New Item and then chose Application Manifest File.\n\nIn the manifest file, you will find the tag requestedExecutionLevel, and you may set the level to three values:\n\n\u003CrequestedExecutionLevel  level=\u0022asInvoker\u0022 uiAccess=\u0022false\u0022 /\u003E\n\nOR\n\n\u003CrequestedExecutionLevel  level=\u0022requireAdministrator\u0022 uiAccess=\u0022false\u0022 /\u003E\n\nOR\n\n\u003CrequestedExecutionLevel  level=\u0022highestAvailable\u0022 uiAccess=\u0022false\u0022 /\u003E\n\nTo set your application to run as administrator, you have to chose the middle one.\n    ",
      "\nAs per\n\n\u003CrequestedExecutionLevel level=\u0022highestAvailable\u0022 uiAccess=\u0022false\u0022 /\u003E\n\n\nyou will want to add an application manifest if you don\u0027t already have one or don\u0027t know how to add one. As some projects don\u0027t automatically add a separate manifest file, first go to project properties, navigate to the Application tab and check to make sure your project is not excluding the manifest at the bottom of the tap.\n\n\nNext, right click project\nAdd new Item\nLast, find and click Application Manifest File\n\n    ",
      "\nAnother way of doing this, in code only, is to detect if the process is running as admin like in the answer by @NG.. And then open the application again and close the current one.\n\nI use this code when an application only needs admin privileges when run under certain conditions, such as when installing itself as a service. So it doesn\u0027t need to run as admin all the time like the other answers force it too.\n\nNote in the below code NeedsToRunAsAdmin is a method that detects if under current conditions admin privileges are required. If this returns false the code will not elevate itself. This is a major advantage of this approach over the others.\n\nAlthough this code has the advantages stated above, it does need to re-launch itself as a new process which isn\u0027t always what you want.\n\nprivate static void Main(string[] args)\n{\n    if (NeedsToRunAsAdmin() \u0026\u0026 !IsRunAsAdmin())\n    {\n        ProcessStartInfo proc = new ProcessStartInfo();\n        proc.UseShellExecute = true;\n        proc.WorkingDirectory = Environment.CurrentDirectory;\n        proc.FileName = Assembly.GetEntryAssembly().CodeBase;\n\n        foreach (string arg in args)\n        {\n            proc.Arguments \u002B= String.Format(\u0022\\\u0022{0}\\\u0022 \u0022, arg);\n        }\n\n        proc.Verb = \u0022runas\u0022;\n\n        try\n        {\n            Process.Start(proc);\n        }\n        catch\n        {\n            Console.WriteLine(\u0022This application requires elevated credentials in order to operate correctly!\u0022);\n        }\n    }\n    else\n    {\n        //Normal program logic...\n    }\n}\n\nprivate static bool IsRunAsAdmin()\n{\n    WindowsIdentity id = WindowsIdentity.GetCurrent();\n    WindowsPrincipal principal = new WindowsPrincipal(id);\n\n    return principal.IsInRole(WindowsBuiltInRole.Administrator);\n}\n\n    ",
      "\nIn Visual Studio 2010 right click your project name.\nHit \u0022View Windows Settings\u0022, this generates and opens a file called \u0022app.manifest\u0022.\nWithin this file replace \u0022asInvoker\u0022 with \u0022requireAdministrator\u0022 as explained in the commented sections within the file.\n    ",
      "\nYou can create the manifest using ClickOnce Security Settings, and then disable it:\n\nRight click on the Project -\u003E Properties -\u003E Security -\u003E Enable ClickOnce Security Settings\n\n\nAfter you clicked it, a file will be created under the Project\u0027s properties folder called app.manifest once this is created, you can uncheck the Enable ClickOnce Security Settings option\n\nOpen that file and change this line :\n\n\u003CrequestedExecutionLevel level=\u0022asInvoker\u0022 uiAccess=\u0022false\u0022 /\u003E\n\n\nto:\n\n \u003CrequestedExecutionLevel  level=\u0022requireAdministrator\u0022 uiAccess=\u0022false\u0022 /\u003E\n\n\nThis will make the program require administrator privileges.\n    ",
      "\nTHIS DOES NOT FORCE APPLICATION TO WORK AS ADMINISTRATOR. \nThis is a simplified version of the this answer, above by @NG\npublic bool IsUserAdministrator()\n{\n    try\n    {\n        WindowsIdentity user = WindowsIdentity.GetCurrent();\n        WindowsPrincipal principal = new WindowsPrincipal(user);\n        return principal.IsInRole(WindowsBuiltInRole.Administrator);\n    }\n    catch\n    {\n        return false;\n    }\n}\n\n    ",
      "\nRight click your executable, go to Properties \u003E Compatibility and check the \u0027Run this program as admin\u0027 box. \n\nIf you want to run it as admin for all users, do the same thing in \u0027change setting for all users\u0027.\n    ",
      "\n                \n                If you get a ClickOnce error when trying to compile, see this answer: stackoverflow.com/questions/11023998/\u2026\n                \n\u2013\u00A0SSS\n                Dec 2 \u002713 at 6:47\n                        \n                            \n                        \n            ",
      "\n                \n                Your project has to be set up to use the app manifest too - in Project Properties, check the \u0022Application\u0022 tab and make sure the \u0022Manifest:\u0022 under \u0027Resources\u0022 is set to your app.manifest (or whatever you named the .manifest file).\n                \n\u2013\u00A0Victor Chelaru\n                Apr 12 \u002716 at 5:12\n            ",
      "\n                \n                I had to reload the project before VS would prompt me to restart in admin mode.\n                \n\u2013\u00A0Jon\n                Feb 28 \u002717 at 18:03\n            ",
      "\n                \n                @Alejandro - Yes, UAC can be disabled, but when that is, the app will automatically run as administrator (assuming your user has administrator privileges), because disabling UAC means everything runs at the highest privilege the user is allowed.  It\u0027s kind of like complaining that if you install a fancy lock on the door, it won\u0027t work if the door is removed.\n                \n\u2013\u00A0Erik Funkenbusch\n                May 5 \u002718 at 7:52\n            ",
      "\n                \n                @ErikFunkenbusch It won\u0027t \u0022automatically run as administrator\u0022, it\u0027ll run under the normal permissions of the user (admin if the user is admin, or standard if the user is standard). Relying on that particular case, even if it\u0027s the default, is what good programs will avoid like the plague. Following your analogy, the fancy lock is nice and all, but properly designed software must anticipate the case that the whole door is removed, even if it\u0027s a rare occurrence.\n                \n\u2013\u00A0Alejandro\n                May 5 \u002718 at 16:43\n            ",
      "\n                \n                You could also use   \u003CrequestedExecutionLevel  level=\u0022highestAvailable\u0022 uiAccess=\u0022false\u0022 /\u003E   as well\n                \n\u2013\u00A0Mark Kram\n                Aug 14 \u002711 at 15:54\n                        \n                            \n                        \n            ",
      "\n                \n                @MarkKram: What does highestAvailable have to do with this? The question is about forcing admin, highestAvailable is less restrictive than requireAdministrator and will let a non-admin user start the app un-elevated with no UAC prompt, only admins will get prompted...\n                \n\u2013\u00A0Anders\n                Sep 17 \u002713 at 19:09\n            ",
      "\n                \n                Here is an MSDN example of the IsInRole, Anders talks about.\n                \n\u2013\u00A0Uwe Keim\n                Jun 16 \u002715 at 5:49\n            ",
      "\n                \n                I don\u0027t remember the exact details anymore but I think this depends on what you mean by disabled. Putting the \u0022UAC slider\u0022 all the way to the bottom is not the same as disabling UAC (except on Vista). If UAC is fully disabled the whole integrity level mechanism is disabled and only the classic runas.exe feature from 2000/XP is available. The admin role check handles the runas.exe case.\n                \n\u2013\u00A0Anders\n                Aug 20 \u002719 at 13:39\n                        \n                            \n                        \n            ",
      "\n                \n                I have set EnableLUA to 0 on Server 2008 R2 and removed myself from the Administrators group, rebooted, and now an exe that specifies level=\u0022requireAdministrator\u0022 runs without any prompt\n                \n\u2013\u00A0Tal Aloni\n                Aug 21 \u002719 at 8:15\n            ",
      "\n                \n                New Item... isn\u0027t an option on my Installer Service project. How would I go about adding the app manifest? I can add it to my main project but not it\u0027s installer.\n                \n\u2013\u00A0HackSlash\n                Mar 26 at 16:39\n            ",
      "\n                \n                This only detects if the context is running as Admin it does not forec the application to run as Admin as requested by the OP\n                \n\u2013\u00A0Matt Wilko\n                Dec 5 \u002713 at 14:02\n            ",
      "\n                \n                I don\u0027t think there is any programmatic way to force an application to elevate its own perms. If there were, that would be quite the security risk, no?\n                \n\u2013\u00A0Mark Richman\n                Aug 18 \u002714 at 18:40\n            ",
      "\n                \n                Although your solution is good but question was different. ;)\n                \n\u2013\u00A0Yash\n                Jul 25 \u002715 at 17:41\n            ",
      "\n                \n                see a refactored version of this method here stackoverflow.com/a/50186997 (subjective)\n                \n\u2013\u00A0Hakan F\u0131st\u0131k\n                Dec 3 \u002718 at 13:09\n            ",
      "\n                \n                This does not answer the question!\n                \n\u2013\u00A0Elmue\n                Oct 3 \u002719 at 20:09\n            ",
      "\n                \n                This works. However, it made a blank cmd window appear when running the CMD application (using c# cmd app to run some exe in the background).\n                \n\u2013\u00A0W.M.\n                Oct 18 \u002717 at 18:25\n            ",
      "\n                \n                \u002B1 for code-only approach. Note that you need UAC enabled for having a chance to launch anything with runas as administrator from a non-admin user, otherwise it will open silently with current user permissions (checked on windows 7 64 bit). As far as I can tell the only thing you can do with UAC disabled and the admin right is missing is to stop execution in a proper moment.\n                \n\u2013\u00A0reallynice\n                Aug 9 \u002719 at 15:57\n            ",
      "\n                \n                This answer is about VB.NET :-) , not VS 2010 in general. The \u0022Add New Item\u0022 answers are about C#. In C\u002B\u002B you can do it in project settings.\n                \n\u2013\u00A0Philm\n                Aug 9 \u002713 at 15:02\n            ",
      "\n                \n                This does not answer the question!\n                \n\u2013\u00A0Elmue\n                Oct 2 \u002719 at 21:22\n            ",
      "\n                \n                @Elmue it is more logical to add your comment to the original answer that I just refactored, you can find a link to that answer in mine.\n                \n\u2013\u00A0Hakan F\u0131st\u0131k\n                Oct 3 \u002719 at 5:37\n                        \n                            \n                        \n            ",
      "\n                \n                This doesn\u0027t answer the question. \u0022Once my program is installed on a client machine\u0022, not \u0022how do I\u0022.\n                \n\u2013\u00A0Joe\n                Mar 27 \u002714 at 10:36\n            ",
      "\n                \n                Sorry for being unclear. Once your program is installed, change this setting in your executable\u0027s properties (your main program, not the installer).  He does want to force his program to run as admin.\n                \n\u2013\u00A0SlickJayD\n                Mar 27 \u002714 at 19:02\n                        \n                            \n                        \n            ",
      "\n                \n                Its better to set the admin requirement in the manifest. I\u0027d argue it answers the question, but just barely.\n                \n\u2013\u00A0BradleyDotNET\n                Sep 2 \u002714 at 18:36\n            ",
      "\n                \n                @Joe To be fair, the accepted answer doesn\u0027t answer the OPs question as requires you to reinstall the application exe. That\u0027s hardly a solution for \u0022Once my program is installed\u0022. If anything this downvoted answer is more correct than the accepted answer, so I don\u0027t understand why that answer has 400\u002B votes.\n                \n\u2013\u00A0NickG\n                Nov 7 \u002714 at 10:42\n            ",
      "\n                \n                Actually, it answers both questions perfectly. Not much chance of changing the manifest once installed and programs should not try to elevate their permissions once running -- in many environments -- it is a good path to being called malware. In most companies -- this answer is the best because it puts the onus on the user and their permissions. I write a lot of code that I can neither \u0022see\u0022 or run once it is in production. Try not to be more clever than your own security concerns are.\n                \n\u2013\u00A0jinzai\n                Dec 20 \u002717 at 20:22\n            "
    ]
  },
  {
    "Id": "1f882b4e-496e-4e63-9367-22a90ec86c2c",
    "QuestionId": 13228185,
    "Description": "How to configure an app to run correctly on a machine with a high DPI setting (e.g. 150%)?",
    "Votes": 104,
    "Views": 45819,
    "Tags": [
      "c#",
      "winforms",
      "fonts",
      "dpi",
      "dpi-aware"
    ],
    "Discussions": [
      "\nOnce you go past 100% (or 125% with the \u0022XP-style DPI scaling\u0022 checkbox ticked), Windows by default takes over the scaling of your UI.  It does so by having your app render its output to a bitmap and drawing that bitmap to the screen.  The rescaling of that bitmap makes the text inevitably look fuzzy.  A feature called \u0022DPI virtualization\u0022, it keeps old programs usable on high resolution monitors.\n\nYou have to explicitly let it know that you can handle higher DPI settings by adding the \u003CdpiAware\u003E element to your manifest.  The MSDN page is here but it isn\u0027t complete since it is omitting the UAC settings.  Project \u002B Add New Item, pick \u0022Application Manifest File\u0022.  Edit the manifest text or copy/paste this:\n\n\u003C?xml version=\u00221.0\u0022 encoding=\u0022utf-8\u0022?\u003E\n\u003Cassembly xmlns=\u0022urn:schemas-microsoft-com:asm.v1\u0022 manifestVersion=\u00221.0\u0022 xmlns:asmv3=\u0022urn:schemas-microsoft-com:asm.v3\u0022 \u003E\n    \u003CassemblyIdentity version=\u00221.0.0.0\u0022 name=\u0022MyApplication.app\u0022/\u003E\n    \u003CtrustInfo xmlns=\u0022urn:schemas-microsoft-com:asm.v2\u0022\u003E\n        \u003Csecurity\u003E\n            \u003CrequestedPrivileges xmlns=\u0022urn:schemas-microsoft-com:asm.v3\u0022\u003E\n                \u003CrequestedExecutionLevel level=\u0022asInvoker\u0022 uiAccess=\u0022false\u0022 /\u003E\n            \u003C/requestedPrivileges\u003E\n        \u003C/security\u003E\n    \u003C/trustInfo\u003E\n    \u003Casmv3:application\u003E\n        \u003Casmv3:windowsSettings xmlns=\u0022http://schemas.microsoft.com/SMI/2005/WindowsSettings\u0022\u003E\n            \u003CdpiAware\u003Etrue\u003C/dpiAware\u003E\n        \u003C/asmv3:windowsSettings\u003E\n    \u003C/asmv3:application\u003E\n\u003C/assembly\u003E\n\n\nYou can also pinvoke SetProcessDPIAware() in your Main() method, necessary for example if you deploy with ClickOnce:\n\n    [STAThread]\n    static void Main() {\n        if (Environment.OSVersion.Version.Major \u003E= 6) SetProcessDPIAware();\n        Application.EnableVisualStyles();\n        Application.SetCompatibleTextRenderingDefault(false);\n        Application.Run(new Form1());             // Edit as needed\n    }\n\n    [System.Runtime.InteropServices.DllImport(\u0022user32.dll\u0022)]\n    private static extern bool SetProcessDPIAware();\n\n\n\n\nUPDATE, this common need is finally a bit easier if you use VS2015 Update 1 or higher.  The added manifest already has the relevant directive, just remove the comments.\n\n\n\nKeyword for search so I can find this post back: dpiAware\n    ",
      "\nApplications can be developed in two different mode.\n\nThe first one is to declare our application to be non-DPI-aware (not declaring anything will default to this). In this case the operating system will render our application under the expected 96 DPI and then will do to the bitmap scaling that we discussed before. The result will be a blurry looking application, but with a correct layout. \n\nThe second option is to declare the application as DPI-aware. In this case the OS will not do any scaling and will let your application render according to the original DPI of the screen. In case of a per-monitor-DPI environment, your application will be rendered with the highest DPI of all the screens, then this bitmap will be scaled down to the proper size for each monitor. Downscaling results in a better viewing experience than upscaling but you might still notice some fuzziness.\n\nIf you want to avoid that, you must declare your application as per-monitor-DPI-aware. Then you must detect when your application is dragged across different monitors and render according to the DPI of the current one.\n\nDeclaring the DPI awareness is done in a manifest file.\n\nrefer the following link     stackoverflow\n    ",
      "\nUsing .NET Framework 4.7 and Windows 10 Creators Update (1703) or newer you must do the following things to configure high DPI support for your Windows Form application:\n\nDeclare compatibility with Windows 10. \n\nTo do this, add the following to your manifest file:\n\n\u003Ccompatibility xmlns=\u0022urn:schemas-microsoft.com:compatibility.v1\u0022\u003E\n  \u003Capplication\u003E\n    \u003C!-- Windows 10 compatibility --\u003E\n    \u003CsupportedOS Id=\u0022{8e0f7a12-bfb3-4fe8-b9a5-48fd50a15a9a}\u0022 /\u003E\n  \u003C/application\u003E\n\u003C/compatibility\u003E\n\n\nEnable per-monitor DPI awareness in the app.config file.\n\nWindows Forms introduces a new System.Windows.Forms.ApplicationConfigurationSection element to support new features and customizations added starting with the .NET Framework 4.7. To take advantage of the new features that support high DPI, add the following to your application configuration file.\n\n\u003CSystem.Windows.Forms.ApplicationConfigurationSection\u003E\n  \u003Cadd key=\u0022DpiAwareness\u0022 value=\u0022PerMonitorV2\u0022 /\u003E\n\u003C/System.Windows.Forms.ApplicationConfigurationSection\u003E\n\n\nImportant\n\nIn previous versions of the .NET Framework, you used the manifest to add high DPI support. This approach is no longer recommended, since it overrides settings defined on the app.config file.\n\nCall the static EnableVisualStyles method.\n\nThis should be the first method call in your application entry point. For example:\n\nstatic void Main()\n{\n    Application.EnableVisualStyles();\n    Application.SetCompatibleTextRenderingDefault(false);\n    Application.Run(new Form1());   \n}\n\n\nThe advantage of this is the support for dynamic DPI scenarios in which the user changes the DPI or scale factor after a Windows Forms application has been launched.\n\nSource: High DPI support in Windows Forms\n    ",
      "\nNone of these suggestions worked for me but, something happened after I removed the Form.Font = new ... from the Form.Design.cs, the form started to re-scale properly, it works if the Font is defined in the constructor or not at all. Why? somebody else may be able to explained, I just can talk about the changed I made and took me a few minutes to figured out it was the root cause for the form I was working on. Hope it helps.\n    ",
      "\nSince at least Visual Studio 2017 you just have to add a manifest file and uncomment this section:\n\n\u003Capplication xmlns=\u0022urn:schemas-microsoft-com:asm.v3\u0022\u003E\n    \u003CwindowsSettings\u003E\n        \u003CdpiAware xmlns=\u0022http://schemas.microsoft.com/SMI/2005/WindowsSettings\u0022\u003Etrue\u003C/dpiAware\u003E\n    \u003C/windowsSettings\u003E\n\u003C/application\u003E\n\n    ",
      "\n                \n                Thanks, your solution works fine. The only problem left is that all images are now at their original sizes. I guess I\u0027ll have to find a way to add additional \u0022retina\u0022-icons to my GUI...\n                \n\u2013\u00A0Boris\n                Nov 5 \u002712 at 8:53\n            ",
      "\n                \n                @HansPassant I have the same problem with blurry fonts, and after applying this solution, my controls don\u0027t scale and they can\u0027t fit. How to get both to work?\n                \n\u2013\u00A0gajo357\n                May 30 \u002714 at 13:03\n            ",
      "\n                \n                For anyone investigating this Win8 madness, SetProcessDPIAware is deprecated, and it also doesn\u0027t work properly (at least not in Win8.1), causing unpredictable scaling on different controls. I strongly recommend using the manifest approach instead.\n                \n\u2013\u00A0Jason Williams\n                Aug 27 \u002714 at 22:20\n            ",
      "\n                \n                Hmya, Windows 8.1 acquired per-monitor DPI.  I wasn\u0027t aware that I needed that.\n                \n\u2013\u00A0Hans Passant\n                Aug 27 \u002714 at 22:26\n            ",
      "\n                \n                If you are going to use ClickOnce for deployment, you cannot use the dpiAware option in manifest, use SetProcessDPIAware() instead.\n                \n\u2013\u00A0Mat\u00EDas\n                Mar 17 \u002715 at 13:10\n            ",
      "\n                \n                what if users have a window in restored size and move it so parts of it are on different monitors? do we need to render everything twice and use the monitor boundaries as bounding boxes? how much of that is covered by the winforms libraries?\n                \n\u2013\u00A0Cee McSharpface\n                Oct 11 \u002718 at 10:42\n            "
    ]
  },
  {
    "Id": "9324ef37-c8d7-4c18-8d85-9e6bf18c7b27",
    "QuestionId": 295104,
    "Description": "What is the difference between a field and a property?",
    "Votes": 1211,
    "Views": 488438,
    "Tags": [
      "c#",
      "oop",
      "properties",
      "field"
    ],
    "Discussions": [
      "\nProperties expose fields.  Fields should (almost always) be kept private to a class and accessed via get and set properties.  Properties provide a level of abstraction allowing you to change the fields while not affecting the external way they are accessed by the things that use your class.\n\npublic class MyClass\n{\n    // this is a field.  It is private to your class and stores the actual data.\n    private string _myField;\n\n    // this is a property. When accessed it uses the underlying field,\n    // but only exposes the contract, which will not be affected by the underlying field\n    public string MyProperty\n    {\n        get\n        {\n            return _myField;\n        }\n        set\n        {\n            _myField = value;\n        }\n    }\n\n    // This is an AutoProperty (C# 3.0 and higher) - which is a shorthand syntax\n    // used to generate a private field for you\n    public int AnotherProperty{get;set;} \n}\n\n\n@Kent points out that Properties are not required to encapsulate fields, they could do a calculation on other fields, or serve other purposes.\n\n@GSS points out that you can also do other logic, such as validation, when a property is accessed, another useful feature.\n    ",
      "\nObject orientated programming principles say that, the internal workings of a class should be hidden from the outside world. If you expose a field you\u0027re in essence exposing the internal implementation of the class. Therefore we wrap fields with Properties (or methods in Java\u0027s case) to give us the ability to change the implementation without breaking code depending on us. Seeing as we can put logic in the Property also allows us to perform validation logic etc if we need it.\nC# 3 has the possibly confusing notion of autoproperties. This allows us to simply define the Property and the C#3 compiler will generate the private field for us.\n\npublic class Person\n{\n   private string _name;\n\n   public string Name\n   {\n      get\n      {\n         return _name;\n      }\n      set\n      {\n         _name = value;\n      }\n   }\n   public int Age{get;set;} //AutoProperty generates private field for us\n}\n\n    ",
      "\nAn important difference is that interfaces can have properties but not fields. This, to me, underlines that properties should be used to define a class\u0027s public interface while fields are meant to be used in the private, internal workings of a class. As a rule I rarely create public fields and similarly I rarely create non-public properties.\n    ",
      "\nI\u0027ll give you a couple examples of using properties that might get the gears turning:\n\n\nLazy Initialization: If you have a property of an object that\u0027s expensive to load, but isn\u0027t accessed all that much in normal runs of the code, you can delay its loading via the property. That way, it\u0027s just sitting there, but the first time another module tries to call that property, it checks if the underlying field is null - if it is, it goes ahead and loads it, unknown to the calling module. This can greatly speed up object initialization.\nDirty Tracking: Which I actually learned about from my own question here on StackOverflow. When I have a lot of objects which values might have changed during a run, I can use the property to track if they need to be saved back to the database or not. If not a single property of an object has changed, the IsDirty flag won\u0027t get tripped, and therefore the saving functionality will skip over it when deciding what needs to get back to the database.\n\n    ",
      "\nUsing Properties, you can raise an event, when the value of the property is changed (aka. PropertyChangedEvent) or before the value is changed to support cancellation. \n\nThis is not possible with (direct access to) fields.\n\npublic class Person {\n private string _name;\n\n public event EventHandler NameChanging;     \n public event EventHandler NameChanged;\n\n public string Name{\n  get\n  {\n     return _name;\n  }\n  set\n  {\n     OnNameChanging();\n     _name = value;\n     OnNameChanged();\n  }\n }\n\n private void OnNameChanging(){       \n     NameChanging?.Invoke(this,EventArgs.Empty);       \n }\n\n private void OnNameChanged(){\n     NameChanged?.Invoke(this,EventArgs.Empty);\n }\n}\n\n    ",
      "\nSince many of them have explained with technical pros and cons of Properties and Field, it\u0027s time to get into real time examples.\n\n1. Properties allows you to set the read-only access level\n\nConsider the case of dataTable.Rows.Count and dataTable.Columns[i].Caption. They come from the class DataTable and both are public to us. The difference in the access-level to them is that we cannot set value to dataTable.Rows.Count but we can read and write to dataTable.Columns[i].Caption. Is that possible through Field? No!!! This can be done with Properties only.\n\npublic class DataTable\n{\n    public class Rows\n    {       \n       private string _count;        \n\n       // This Count will be accessable to us but have used only \u0022get\u0022 ie, readonly\n       public int Count\n       {\n           get\n           {\n              return _count;\n           }       \n       }\n    } \n\n    public class Columns\n    {\n        private string _caption;        \n\n        // Used both \u0022get\u0022 and \u0022set\u0022 ie, readable and writable\n        public string Caption\n        {\n           get\n           {\n              return _caption;\n           }\n           set\n           {\n              _caption = value;\n           }\n       }       \n    } \n}\n\n\n2. Properties in PropertyGrid\n\nYou might have worked with Button in Visual Studio. Its properties are shown in the PropertyGrid like Text,Name etc. When we drag and drop a button, and when we click the properties, it will automatically find the class Button and filters Properties and show that in PropertyGrid (where PropertyGrid won\u0027t show Field even though they are public).\n\npublic class Button\n{\n    private string _text;        \n    private string _name;\n    private string _someProperty;\n\n    public string Text\n    {\n        get\n        {\n           return _text;\n        }\n        set\n        {\n           _text = value;\n        }\n   } \n\n   public string Name\n   {\n        get\n        {\n           return _name;\n        }\n        set\n        {\n           _name = value;\n        }\n   } \n\n   [Browsable(false)]\n   public string SomeProperty\n   {\n        get\n        {\n           return _someProperty;\n        }\n        set\n        {\n           _someProperty= value;\n        }\n   } \n\n\nIn PropertyGrid, the properties Name and Text will be shown, but not SomeProperty. Why??? Because Properties can accept Attributes. It does not show in case where [Browsable(false)] is false.\n\n3. Can execute statements inside Properties\n\npublic class Rows\n{       \n    private string _count;        \n\n\n    public int Count\n    {\n        get\n        {\n           return CalculateNoOfRows();\n        }  \n    } \n\n    public int CalculateNoOfRows()\n    {\n         // Calculation here and finally set the value to _count\n         return _count;\n    }\n}\n\n\n4. Only Properties can be used in Binding Source\n\nBinding Source helps us to decrease the number of lines of code. Fields are not accepted by BindingSource. We should use Properties for that.\n\n5. Debugging mode\n\nConsider we are using Field to hold a value. At some point we need to debug and check where the value is getting null for that field. It will be difficult to do where the number of lines of code are more than 1000. In such situations we can use Property and can set debug mode inside Property.\n\n   public string Name\n   {\n        // Can set debug mode inside get or set\n        get\n        {\n           return _name;\n        }\n        set\n        {\n           _name = value;\n        }\n   }\n\n    ",
      "\nDIFFERENCES - USES (when and why)\n\nA field is a variable that is declared directly in a class or struct. A class or struct may have instance fields or static fields or both. Generally, you should use fields only for variables that have private or protected accessibility. Data that your class exposes to client code should be provided through methods, properties and indexers. By using these constructs for indirect access to internal fields, you can guard against invalid input values.\n\nA property is a member that provides a flexible mechanism to read, write, or compute the value of a private field. Properties can be used as if they are public data members, but they are actually special methods called accessors. This enables data to be accessed easily and still helps promote the safety and flexibility of methods.\nProperties enable a class to expose a public way of getting and setting values, while hiding implementation or verification code. A get property accessor is used to return the property value, and a set accessor is used to assign a new value.\n    ",
      "\nProperties have the primary advantage of allowing you to change the way data on an object is accessed without breaking it\u0027s public interface. For example, if you need to add extra validation, or to change a stored field into a calculated you can do so easily if you initially exposed the field as a property. If you just exposed a field directly, then you would have to change the public interface of your class to add the new functionality. That change would break existing clients, requiring them to be recompiled before they could use the new version of your code. \n\nIf you write a class library designed for wide consumption (like the .NET Framework, which is used by millions of people), that can be a problem. However, if you are writing a class used internally inside a small code base (say \u003C= 50 K lines), it\u0027s really not a big deal, because no one would be adversely affected by your changes. In that case it really just comes down to personal preference.\n    ",
      "\nProperties support asymmetric access, i.e. you can have either a getter and a setter or just one of the two. Similarly properties support individual accessibility for getter/setter. Fields are always symmetric, i.e. you can always both get and set the value. Exception to this is readonly fields which obviously cannot be set after initialization.\n\nProperties may run for a very long time, have side effects, and may even throw exceptions. Fields are fast, with no side effects, and will never throw exceptions. Due to side effects a property may return a different value for each call (as may be the case for DateTime.Now, i.e. DateTime.Now is not always equal to DateTime.Now). Fields always return the same value.\n\nFields may be used for out / ref parameters, properties may not. \nProperties support additional logic \u2013 this could be used to implement lazy loading among other things.\n\nProperties support a level of abstraction by encapsulating whatever it means to get/set the value. \n\nUse properties in most / all cases, but try to avoid side effects. \n    ",
      "\nIn the background a property is compiled into methods. So a Name property is compiled into get_Name() and set_Name(string value). You can see this if you study the compiled code. \nSo there is a (very) small performance overhead when using them. Normally you will always use a Property if you expose a field to the outside, and you will often use it internally if you need to do validation of the value.\n    ",
      "\nThough fields and properties look to be similar to each other, they are 2 completely different language elements.\n\n\nFields are the only mechanism how to store data on class level. Fields are conceptually variables at class scope. If you want to store some data to instances of your classes (objects) you need to use fields. There is no other choice. Properties can\u0027t store any data even though, it may look they are able to do so. See bellow.  \nProperties on the other hand never store data. They are just the pairs of methods (get and set) that can be syntactically called in a similar way as fields and in most cases they access (for read or write) fields, which is the source of some confusion. But because property methods are (with some limitations like fixed prototype) regular C# methods they can do whatever regular methods can do. It means they can have 1000 lines of code, they can throw exceptions, call another methods, can be even virtual, abstract or overridden. What makes properties special, is the fact that C# compiler stores some extra metadata into assemblies that can be used to search for specific properties - widely used feature.\n\n\nGet and set property methods has the following prototypes.\n\nPROPERTY_TYPE get();\n\nvoid set(PROPERTY_TYPE value);\n\n\nSo it means that properties can be \u0027emulated\u0027 by defining a field and 2 corresponding methods.\n\nclass PropertyEmulation\n{\n    private string MSomeValue;\n\n    public string GetSomeValue()\n    {\n        return(MSomeValue);\n    }\n\n    public void SetSomeValue(string value)\n    {\n        MSomeValue=value;\n    }\n}\n\n\nSuch property emulation is typical for programming languages that don\u0027t support properties - like standard C\u002B\u002B. In C# there you should always prefer properties as the way how to access to your fields.\n\nBecause only the fields can store a data, it means that more fields class contains, more memory objects of such class will consume. On the other hand, adding new properties into a class doesn\u0027t make objects of such class bigger. Here is the example.\n\nclass OneHundredFields\n{\n        public int Field1;\n        public int Field2;\n        ...\n        public int Field100;\n}\n\nOneHundredFields Instance=new OneHundredFields() // Variable \u0027Instance\u0027 consumes 100*sizeof(int) bytes of memory.\n\nclass OneHundredProperties\n{\n    public int Property1\n    {\n        get\n        {\n            return(1000);\n        }\n        set\n        {\n            // Empty.\n        }\n    }\n\n    public int Property2\n    {\n        get\n        {\n            return(1000);\n        }\n        set\n        {\n            // Empty.\n        }\n    }\n\n    ...\n\n    public int Property100\n    {\n        get\n        {\n            return(1000);\n        }\n        set\n        {\n            // Empty.\n        }\n    }\n}\n\nOneHundredProperties Instance=new OneHundredProperties() // !!!!! Variable \u0027Instance\u0027 consumes 0 bytes of memory. (In fact a some bytes are consumed becasue every object contais some auxiliarity data, but size doesn\u0027t depend on number of properties).\n\n\nThough property methods can do anything, in most cases they serve as a way how to access objects\u0027 fields. If you want to make a field accessible to other classes you can do by 2 ways.\n\n\nMaking fields as public - not advisable.\nUsing properties.\n\n\nHere is a class using public fields.\n\nclass Name\n{\n    public string FullName;\n    public int YearOfBirth;\n    public int Age;\n}\n\nName name=new Name();\n\nname.FullName=\u0022Tim Anderson\u0022;\nname.YearOfBirth=1979;\nname.Age=40;\n\n\nWhile the code is perfectly valid, from design point of view, it has several drawbacks. Because fields can be both read and written, you can\u0027t prevent user from writing to fields. You can apply readonly keyword, but in this way, you have to initialize readonly fields only in constructor. What\u0027s more, nothing prevents you to store invalid values into your fields.\n\nname.FullName=null;\nname.YearOfBirth=2200;\nname.Age=-140;\n\n\nThe code is valid, all assignments will be executed though they are illogical. Age has a negative value, YearOfBirth is far in future and doesn\u0027t correspond to Age and FullName is null. With fields you can\u0027t prevent users of class Name to make such mistakes.\n\nHere is a code with properties that fixes these issues.\n\nclass Name\n{\n    private string MFullName=\u0022\u0022;\n    private int MYearOfBirth;\n\n    public string FullName\n    {\n        get\n        {\n            return(MFullName);\n        }\n        set\n        {\n            if (value==null)\n            {\n                throw(new InvalidOperationException(\u0022Error !\u0022));\n            }\n\n            MFullName=value;\n        }\n    }\n\n    public int YearOfBirth\n    {\n        get\n        {\n            return(MYearOfBirth);\n        }\n        set\n        {\n            if (MYearOfBirth\u003C1900 || MYearOfBirth\u003EDateTime.Now.Year)\n            {\n                throw(new InvalidOperationException(\u0022Error !\u0022));\n            }\n\n            MYearOfBirth=value;\n        }\n    }\n\n    public int Age\n    {\n        get\n        {\n            return(DateTime.Now.Year-MYearOfBirth);\n        }\n    }\n\n    public string FullNameInUppercase\n    {\n        get\n        {\n            return(MFullName.ToUpper());\n        }\n    }\n}\n\n\nThe updated version of class has the following advantages.\n\n\nFullName and YearOfBirth are checked for invalid values.\nAge is not writtable. It\u0027s callculated from YearOfBirth and current year.\nA new property FullNameInUppercase converts FullName to UPPER CASE. This is a little contrived example of property usage, where properties are commonly used to present field values in the format that is more appropriate for user - for instance using current locale on specific numeric of DateTime format.\n\n\nBeside this, properties can be defined as virtual or overridden - simply because they are regular .NET methods. The same rules applies for such property methods as for regular methods.\n\nC# also supports indexers which are the properties that have an index parameter in property methods. Here is the example.\n\nclass MyList\n{\n    private string[]                 MBuffer;\n\n    public MyList()\n    {\n        MBuffer=new string[100];\n    }\n\n    public string this[int Index]\n    {\n        get\n        {\n            return(MBuffer[Index]);\n        }\n        set\n        {\n            MBuffer[Index]=value;\n        }\n    }\n}\n\nMyList   List=new MyList();\n\nList[10]=\u0022ABC\u0022;\nConsole.WriteLine(List[10]);\n\n\nSince C# 3.0 allows you to define automatic properties. Here is the example.\n\nclass AutoProps\n{\n    public int Value1\n    {\n        get;\n        set;\n    }\n\n    public int Value2\n    {\n        get;\n        set;\n    }\n}\n\n\nEven though class AutoProps contains only properties (or it looks like), it can store 2 values and size of objects of this class is equal to sizeof(Value1)\u002Bsizeof(Value2)=4\u002B4=8 bytes.\n\nThe reason for this is simple. When you define an automatic property, C# compiler generates automatic code that contains hidden field and a property with property methods accessing this hidden field. Here is the code compiler produces.\n\nHere is a code generated by the ILSpy from compiled assembly. Class contains generated hidden fields and properties.\n\ninternal class AutoProps\n{\n    [CompilerGenerated]\n    [DebuggerBrowsable(DebuggerBrowsableState.Never)]\n    private int \u003CValue1\u003Ek__BackingField;\n\n    [CompilerGenerated]\n    [DebuggerBrowsable(DebuggerBrowsableState.Never)]\n    private int \u003CValue2\u003Ek__BackingField;\n\n    public int Value1\n    {\n        [CompilerGenerated]\n        get\n        {\n            return \u003CValue1\u003Ek__BackingField;\n        }\n        [CompilerGenerated]\n        set\n        {\n            \u003CValue1\u003Ek__BackingField = value;\n        }\n    }\n\n    public int Value2\n    {\n        [CompilerGenerated]\n        get\n        {\n            return \u003CValue2\u003Ek__BackingField;\n        }\n        [CompilerGenerated]\n        set\n        {\n            \u003CValue2\u003Ek__BackingField = value;\n        }\n    }\n}\n\n\nSo, as you can see, the compiler still uses the fields to store the values - since fields are the only way how to store values into objects.\n\nSo as you can see, though properties and fields have similar usage syntax they are very different concepts. Even if you use automatic properties or events - hidden fields are generated by compiler where the real data are stored.\n\nIf you need to make a field value accessible to the outside world (users of your class) don\u0027t use public or protected fields. Fields always should be marked as private. Properties allow you to make value checks, formatting, conversions etc. and generally make your code safer, more readable and more extensible for future modifications. \n    ",
      "\nWhen you want your private variable(field) to be accessible to object of your class from other classes you need to create properties for those variables.\n\nfor example if I have  variables named as \u0022id\u0022 and \u0022name\u0022 which is private \nbut there might be situation where this variable needed for read/write operation outside of the class. At that situation , property can help me to get that variable to read/write depending upon the get/set defined for the property. A property can be a readonly / writeonly / readwrite both.\n\nhere is the demo\n\nclass Employee\n{\n    // Private Fields for Employee\n    private int id;\n    private string name;\n\n    //Property for id variable/field\n    public int EmployeeId\n    {\n       get\n       {\n          return id;\n       }\n       set\n       {\n          id = value;\n       }\n    }\n\n    //Property for name variable/field\n    public string EmployeeName\n    {\n       get\n       {\n          return name;\n       }\n       set\n       {\n          name = value;\n       }\n   }\n}\n\nclass MyMain\n{\n    public static void Main(string [] args)\n    {\n       Employee aEmployee = new Employee();\n       aEmployee.EmployeeId = 101;\n       aEmployee.EmployeeName = \u0022Sundaran S\u0022;\n    }\n}\n\n    ",
      "\nThe second question here, \u0022when should a field be used instead of a property?\u0022, is only briefly touched on in this other answer and kinda this one too, but not really much detail.\n\nIn general, all the other answers are spot-on about good design: prefer exposing properties over exposing fields.  While you probably won\u0027t regularly find yourself saying \u0022wow, imagine how much worse things would be if I had made this a field instead of a property\u0022, it\u0027s so much more rare to think of a situation where you would say \u0022wow, thank God I used a field here instead of a property.\u0022\n\nBut there\u0027s one advantage that fields have over properties, and that\u0027s their ability to be used as \u0022ref\u0022 / \u0022out\u0022 parameters.  Suppose you have a method with the following signature:\n\npublic void TransformPoint(ref double x, ref double y);\n\n\nand suppose that you want to use that method to transform an array created like this:\n\nSystem.Windows.Point[] points = new Point[1000000];\nInitialize(points);\n\n\nHere\u0027s I think the fastest way to do it, since X and Y are properties:\n\nfor (int i = 0; i \u003C points.Length; i\u002B\u002B)\n{\n    double x = points[i].X;\n    double y = points[i].Y;\n    TransformPoint(ref x, ref y);\n    points[i].X = x;\n    points[i].Y = y;\n}\n\n\nAnd that\u0027s going to be pretty good!  Unless you have measurements that prove otherwise, there\u0027s no reason to throw a stink.  But I believe it\u0027s not technically guaranteed to be as fast as this:\n\ninternal struct MyPoint\n{\n    internal double X;\n    internal double Y;\n}\n\n// ...\n\nMyPoint[] points = new MyPoint[1000000];\nInitialize(points);\n\n// ...\n\nfor (int i = 0; i \u003C points.Length; i\u002B\u002B)\n{\n    TransformPoint(ref points[i].X, ref points[i].Y);\n}\n\n\nDoing some measurements myself, the version with fields takes about 61% of the time as the version with properties (.NET 4.6, Windows 7, x64, release mode, no debugger attached).  The more expensive the TransformPoint method gets, the less pronounced that the difference becomes.  To repeat this yourself, run with the first line commented-out and with it not commented-out.\n\nEven if there were no performance benefits for the above, there are other places where being able to use ref and out parameters might be beneficial, such as when calling the Interlocked or Volatile family of methods.  Note: In case this is new to you, Volatile is basically a way to get at the same behavior provided by the volatile keyword.  As such, like volatile, it doesn\u0027t magically solve all thread-safety woes like its name suggests that it might.\n\nI definitely don\u0027t want to seem like I\u0027m advocating that you go \u0022oh, I should start exposing fields instead of properties.\u0022  The point is that if you need to regularly use these members in calls that take \u0022ref\u0022 or \u0022out\u0022 parameters, especially on something that might be a simple value type that\u0027s unlikely to ever need any of the value-added elements of properties, an argument can be made.\n    ",
      "\nAlso, properties allow you to use logic when setting values.\n\nSo you can say you only want to set a value to an integer field, if the value is greater than x, otherwise throw an exception.\n\nReally useful feature.\n    ",
      "\nIf you are going to use thread primitives you are forced to use fields. Properties can break your threaded code. Apart from that, what cory said is correct.\n    ",
      "\n(This should really be a comment, but I can\u0027t post a comment, so please excuse if it is not appropriate as a post). \n\nI once worked at a place where the recommended practice was to use public fields instead of properties when the equivalent property def would just have been accessing a field, as in :\n\nget { return _afield; }\nset { _afield = value; }\n\n\nTheir reasoning was that the public field could be converted into a property later in future if required. It seemed a little strange to me at the time. Judging by these posts, it looks like not many here would agree either. What might you have said to try to change things ?\n\nEdit : I should add that all of the code base at this place was compiled at the same time, so they might have thought that changing the public interface of classes (by changing a public field to a property) was not a problem. \n    ",
      "\nTechnically, i don\u0027t think that there is a difference, because properties are just wrappers around fields created by the user or automatically created by the compiler.The purpose of properties is to enforce encapsuation and to offer a lightweight method-like feature.\nIt\u0027s just a bad practice to declare fields as public, but it does not have any issues.\n    ",
      "\nFields are ordinary member variables or member instances of a class. Properties are an abstraction to get and set their values. Properties are also called accessors because they offer a way to change and retrieve a field if you expose a field in the class as private. Generally, you should declare your member variables private, then declare or define properties for them. \n\n  class SomeClass\n  {\n     int numbera; //Field\n\n     //Property \n    public static int numbera { get; set;}\n\n  }\n\n    ",
      "\nMy design of a field is that a field needs to be modified only by its parent, hence the class. Result the variable becomes private, then to be able to give the right to read the classes / methods outside I go through the system of property with only the Get. The field is then retrieved by the property and read-only! If you want to modify it you have to go through methods (for example the constructor) and I find that thanks to this way of making you secure, we have better control over our code because we \u0022flange\u0022. One could very well always put everything in public so every possible case, the notion of variables / methods / classes etc ... in my opinion is just an aid to the development, maintenance of the code. For example, if a person resumes a code with public fields, he can do anything and therefore things \u0022illogical\u0022 in relation to the objective, the logic of why the code was written. It\u0027s my point of view.\n\nWhen i use a classic model private field / public readonly properties,for 10 privates fields i should write 10 publics properties! The code can be really big faster. I discover the private setter and now i only use public properties with a private setter.\nThe setter create in background a private field.\n\nThat why my old classic programming style was:\n\npublic class MyClass\n{\n private int _id;\n public int ID { get { return _id; } }\n public MyClass(int id)\n {\n  _id = id;\n }\n}\n\n\nMy new programming style:\n\npublic class MyClass\n{\n public int ID { get; private set; }\n public MyClass(int id)\n {\n  ID = id;\n }\n}\n\n    ",
      "\nProperties encapsulate fields, thus enabling you to perform additional processing on the value to be set or retrieved. It is typically overkill to use properties if you will not be doing any pre- or postprocessing on the field value.\n    ",
      "\nIMO, Properties are just the \u0022SetXXX()\u0022 \u0022GetXXX()\u0022 functions/methods/interfaces pairs we used before, but they are more concise and elegant.\n    ",
      "\nTraditionally private fields are set via getter and setter methods.  For the sake of less code you can use properties to set fields instead.\n    ",
      "\nwhen you have a class which is \u0022Car\u0022. The properties are color,shape..\n\nWhere as fields are variables defined within the scope of a class.\n    ",
      "\nFrom Wikipedia -- Object-oriented programming:\n\n\n  Object-oriented programming (OOP) is a programming paradigm based on the concept of \u0022objects\u0022, which are data structures that contain data, in the form of fields, often known as attributes; and code, in the form of procedures, often known as methods. (emphasis added)\n\n\nProperties are actually part of an object\u0027s behavior, but are designed to give consumers of the object the illusion/abstraction of working with the object\u0027s data.\n    ",
      "\nAdditional info:\nBy default, get and set accessors are as accessible as the property itself.\nYou can control/restrict accessor accessibility individually (for get and set) by applying more restrictive access modifiers on them.\n\nExample:\n\npublic string Name\n{\n    get\n    {\n        return name;\n    }\n    protected set\n    {\n        name = value;\n    }\n}\n\n\nHere get is still publicly accessed (as the property is public), but set is protected (a more restricted access specifier).\n    ",
      "\nThink about it : You have a room and a door to enter this room. If you want to check how who is coming in and secure your room, then you should use properties otherwise they won\u0027t be any door and every one easily come in w/o any regulation\n\nclass Room {\n   public string sectionOne;\n   public string sectionTwo;\n}\n\nRoom r = new Room();\nr.sectionOne = \u0022enter\u0022;\n\n\nPeople is getting in to sectionOne pretty easily, there wasn\u0027t any checking\n\nclass Room \n{\n   private string sectionOne;\n   private string sectionTwo;\n\n   public string SectionOne \n   {\n      get \n      {\n        return sectionOne; \n      }\n      set \n      { \n        sectionOne = Check(value); \n      }\n   }\n}\n\nRoom r = new Room();\nr.SectionOne = \u0022enter\u0022;\n\n\nNow you checked the person and know about whether he has something evil with him\n    ",
      "\nFields are the variables in classes. Fields are the data which you can encapsulate through the use of access modifiers.\n\nProperties are similar to Fields in that they define states and the data associated with an object.\n\nUnlike a field a property has a special syntax that controls how a person reads the data and writes the data, these are known as the get and set operators. The set logic can often be used to do validation.\n    ",
      "\nBasic and general difference is:\n\nFields\n\n\nALWAYS give both get and set access\nCAN NOT cause side effects (throwing exceptions, calling methods, changing fields except the one being got/set, etc)\n\n\nProperties\n\n\nNOT ALWAYS give both get and set access\nCAN cause side effects\n\n    ",
      "\nProperties are special kind of class member, In properties we use a predefined Set or Get method.They use accessors through which we can read, written or change the values of the private fields.\n\nFor example, let us take a class named Employee, with private fields for name, age and Employee_Id. We cannot access these fields from outside the class , but we can access these private fields through properties.\n\nWhy do we use properties?\n\nMaking the class field public \u0026 exposing it is risky, as you will not have control what gets assigned \u0026 returned.\n\nTo understand this clearly with an example lets take a student class who have ID, passmark, name. Now in this example some problem with public field\n\n\nID should not be -ve.\nName can not be set to null\nPass mark should be read only.\nIf student name is missing No Name should be return.\n\n\nTo remove this problem We use Get and set method.\n\n// A simple example\npublic class student\n{\n    public int ID;\n    public int passmark;\n    public string name;\n}\n\npublic class Program\n{\n    public static void Main(string[] args)\n    {\n       student s1 = new student();\n       s1.ID = -101; // here ID can\u0027t be -ve\n       s1.Name = null ; // here Name can\u0027t be null\n    }\n}\n\n\nNow we take an example of get and set method\n\npublic class student\n{\n    private int _ID;\n    private int _passmark;\n    private string_name ;\n    // for id property\n    public void SetID(int ID)\n    {\n        if(ID\u003C=0)\n        {\n            throw new exception(\u0022student ID should be greater then 0\u0022);\n        }\n        this._ID = ID;\n    }\n    public int getID()\n    {\n        return_ID;\n    }\n}\npublic class programme\n{\n    public static void main()\n    {\n        student s1 = new student ();\n        s1.SetID(101);\n    }\n    // Like this we also can use for Name property\n    public void SetName(string Name)\n    {\n        if(string.IsNullOrEmpty(Name))\n        {\n            throw new exeception(\u0022name can not be null\u0022);\n        }\n        this._Name = Name;\n    }\n    public string GetName()\n    {\n        if( string.IsNullOrEmpty(This.Name))\n        {\n            return \u0022No Name\u0022;\n        }\n        else\n        {\n            return this._name;\n        }\n    }\n        // Like this we also can use for Passmark property\n    public int Getpassmark()\n    {\n        return this._passmark;\n    }\n}\n\n    ",
      "\nProperties are used to expose field. They use accessors(set, get) through which the values of the private fields can be read, written or manipulated.\n\nProperties do not name the storage locations. Instead, they have accessors that read, write, or compute their values.\n\nUsing properties we can set validation on the type of data that is set on a field.\n\nFor example we have private integer field age on that we should allow positive values since age cannot be negative.\n\nWe can do this in two ways using getter and setters and using property.\n\n Using Getter and Setter\n\n    // field\n    private int _age;\n\n    // setter\n    public void set(int age){\n      if (age \u003C=0)\n       throw new Exception();\n\n      this._age = age;\n    }\n\n    // getter\n    public int get (){\n      return this._age;\n    }\n\n Now using property we can do the same thing. In the value is a key word\n\n    private int _age;\n\n    public int Age{\n    get{\n        return this._age;\n    }\n\n    set{\n       if (value \u003C= 0)\n         throw new Exception()\n       }\n    }\n\n\nAuto Implemented property if we don\u0027t logic in get and set accessors we can use auto implemented property. \n\nWhen use auto-implemented property compiles creates a private, anonymous field that can only be accessed through get and set accessors.\n\npublic int Age{get;set;}\n\n\nAbstract Properties\nAn abstract class may have an abstract property, which should be implemented in the derived class\n\npublic abstract class Person\n   {\n      public abstract string Name\n      {\n         get;\n         set;\n      }\n      public abstract int Age\n      {\n         get;\n         set;\n      }\n   }\n\n// overriden something like this\n// Declare a Name property of type string:\n  public override string Name\n  {\n     get\n     {\n        return name;\n     }\n     set\n     {\n        name = value;\n     }\n  }\n\n\nWe can privately set a property\nIn this we can privately set the auto property(set with in the class)\n\npublic int MyProperty\n{\n    get; private set;\n}\n\n\nYou can achieve same with this code. In this property set feature is not available as we have to set value to field directly.\n\nprivate int myProperty;\npublic int MyProperty\n{\n    get { return myProperty; }\n}\n\n    ",
      "\n                \n                It\u0027s worth noting that properties are not required to encapsulate fields. There could be no field at all behind the property. It might be a calculation or return a constant or whatever.\n                \n\u2013\u00A0Kent Boogaart\n                Nov 17 \u002708 at 10:18\n            ",
      "\n                \n                \u0022while not affecting the external way they are accessed by the things that use your class.\u0022 forgive me if I\u0027m incorrectly understanding, then, but why the need for access modifiers in front of properties at all, if the field behind it seems to handle this? i.e. why make a property anything other than public?\n                \n\u2013\u00A0Chucky\n                Jun 20 \u002714 at 11:01\n            ",
      "\n                \n                Your answer was right before the edits and oddly-upvoted incorrect comments. A property should always encapsulate one or more fields, and should never do any heavy lifting or validation. If you need a property such a UserName or Password to have validation, change their type from strings to Value Objects.  There is an unspoken contract between a class-creator and the consumer.  Fields hold state, Properties expose state using one or more fields, Voids change state (heavy lifting), and Functions perform queries(heavy lifting).This is not stone, just loose expectations.\n                \n\u2013\u00A0Suamere\n                Nov 6 \u002715 at 16:26\n                        \n                            \n                        \n            ",
      "\n                \n                @jpaugh If I am a class consumer, I follow contracts set by the class creator. If a property is string, my contract is: assign any chars up to ~2bil length. If a property is DateTime, my contract is: assign any numbers within the limits of DateTime, which I can look up. If the creator adds constraints to the setters, those constraints are not communicated.  But if, instead, the creator changes the type from string to Surname, then their new Surname class communicates the constraints, and the property public Surname LastName doesn\u0027t have setter validation. Also, Surname is reusable.\n                \n\u2013\u00A0Suamere\n                Feb 3 \u002717 at 16:27\n            ",
      "\n                \n                And since Surname, in my example, is reusable, you don\u0027t need to worry about later on copy/pasting those validations in a property setter to other places in code. Nor wondering if the validation of a Surname is in multiple places if you ever make changes to the business rules for Surnames.  Check out the link I posted about Value Objects\n                \n\u2013\u00A0Suamere\n                Feb 3 \u002717 at 16:29\n                        \n                            \n                        \n            ",
      "\n                \n                \u002B1 for mentioning autoproperties - I think this is something many of the answers here (and elsewhere) have forgotten to bring in. Without this explanation, it can still be pretty hard to grasp what public int myVar { get; set; } really stands for (and I presume that it\u0027s the reason for at least 50% of the hits this question gets).\n                \n\u2013\u00A0Priidu Neemre\n                Oct 24 \u002713 at 8:48\n                        \n                            \n                        \n            ",
      "\n                \n                \u002B1 also for mentioning auto, and mentioning how it works (\u0022AutoProperty generates private field for us\u0022) This was the answer I\u0027ve been looking for to a question I had. When researching I didn\u0027t see on MSDN\u0027s page about them any indication that a private field was created and was causing confusion. I guess that\u0027s what this means? \u0022Attributes are permitted on auto-implemented properties but obviously not on the backing fields since those are not accessible from your source code. If you must use an attribute on the backing field of a property, just create a regular property.\u0022 but wasn\u0027t sure.\n                \n\u2013\u00A0Nyra\n                Jul 18 \u002714 at 14:05\n            ",
      "\n                \n                Note that the given example doesn\u0027t encapsulate squat. This property gives 100 % full access to the private field, so this isn\u0027t object-oriented at all. You might as well have a public field in this case. Granted, it helps (marginally) to refactor code in the future, but any IDE worth it\u0027s mettle can transform a field to a property with a few keystrokes. The answer might be technically correct about how properties work, but it does not give a good \u0022OOP explanation\u0022 to their uses.\n                \n\u2013\u00A0sara\n                Feb 1 \u002716 at 16:05\n            ",
      "\n                \n                @kai I agree that the answer over-simplified things and is not showing all the power of an auto-property, however I disagree that this is not object-oriented. You may want to check the difference between fields and properties. Fields cannot be virtual, and virtual itself is part of object-oriented programming.\n                \n\u2013\u00A0Gobe\n                Feb 9 \u002716 at 0:12\n            ",
      "\n                \n                Granted, there are some functional difference. I would not call virtual OOP per se though. It\u0027s a tool that enables polymorphism, which is one of the key tools that ENABLES OOP. It\u0027s not OOP in and of itself though, and there is nothing inherently OOP about a public autoproperty. I wouldn\u0027t count stuff such as reflection or databinding OOP related either. Normally I wouldn\u0027t be so pedantic about it, but the answer specifically mentioned OO principles as the driving force behind the code example, and I don\u0027t agree with that.\n                \n\u2013\u00A0sara\n                Feb 9 \u002716 at 8:47\n            ",
      "\n                \n                Curious what that rare scenarios could be!\n                \n\u2013\u00A0Eagle_Eye\n                Sep 20 at 7:18\n            ",
      "\n                \n                A question about dirty tracking: what if I could change the field directly\u2013 I don\u0027t know if that can be done, I could say: \u0022the object does not need to be saved if not a single FIELD of an object has changed\u0022 thus dirty tracking would not be a difference, am I missing something?\n                \n\u2013\u00A0sites\n                Dec 10 \u002712 at 17:29\n                        \n                            \n                        \n            ",
      "\n                \n                @juanpastas: The advantage of properties with regard to dirty tracking is that if property setters will set a \u0022dirty\u0022 flag, then in the scenario where the flag isn\u0027t set code won\u0027t have to inspect the values of any properties to see if they might have changed.  By contrast, if an object exposes its attributes as fields, then the contents of all fields must be compared against the previous value (which not only adds time to do the comparison, but also means the code must have the previous value).\n                \n\u2013\u00A0supercat\n                May 7 \u002713 at 6:31\n            ",
      "\n                \n                Those is a good ones  It also allows you to trigger methods (as events), or logging when the value is set or readed.\n                \n\u2013\u00A0coloboxp\n                Oct 24 \u002716 at 10:39\n            ",
      "\n                \n                I took a long time to find this. This is a MVVM. Thank you ! :)\n                \n\u2013\u00A0user5039044\n                Oct 26 \u002716 at 9:48\n            ",
      "\n                \n                These are interesting facts, but you\u0027re missing the point of fields and properties philosophy.\n                \n\u2013\u00A0David Ferenczy Rogo\u017Ean\n                Apr 30 \u002715 at 17:04\n            ",
      "\n                \n                What do u mean by PHILISOPHY? @Dawid Ferenczy\n                \n\u2013\u00A0Sarath Avanavu\n                Jun 2 \u002715 at 14:15\n            ",
      "\n                \n                See for example marked answer. But you noticed, that you\u0027re just providing an usage examples, since difference between fields and properties was already described, so forgot my comment, please :)\n                \n\u2013\u00A0David Ferenczy Rogo\u017Ean\n                Jul 3 \u002715 at 9:29\n            ",
      "\n                \n                Read my first sentence in my answer. I have specifically told that I am not going to repeat everything again here. That makes no sense!!! The people will first look at the description first, then the examples. The marked answer gives the description well, but I added with some real-time scenarios and examples which makes sense. Please make sure you think from reader\u0027s point of view before commenting @Dawid Ferenczy\n                \n\u2013\u00A0Sarath Avanavu\n                Jul 4 \u002715 at 13:02\n            ",
      "\n                \n                I have read it, but you didn\u0027t read my previous comment obviously: \u0022But you noticed, that you\u0027re just providing an usage examples, since difference between fields and properties was already described, so forgot my comment, please :)\u0022.\n                \n\u2013\u00A0David Ferenczy Rogo\u017Ean\n                Jul 15 \u002715 at 17:29\n            ",
      "\n                \n                This is an awesome answer, really helped me understand this.\n                \n\u2013\u00A0Steve Bauman\n                Jul 13 \u002718 at 15:43\n            ",
      "\n                \n                \u0022A property is a member that provides a flexible mechanism to read, write, or compute the value of a private field.\u0022  This makes the most sense.\n                \n\u2013\u00A0Gary\n                Jun 16 at 22:46\n                        \n                            \n                        \n            ",
      "\n                \n                Fields may have all the cost issues of properties when the data type of the field is an object with a conversion operator overload - it\u0027s a subtle gotcha.\n                \n\u2013\u00A0Andy Dent\n                Jan 14 \u002709 at 0:16\n            ",
      "\n                \n                Properties should never have side effects. Even the debugger assumes it can evaluate them safely.\n                \n\u2013\u00A0Craig Gidney\n                Jun 26 \u002709 at 6:44\n            ",
      "\n                \n                @Strilanc: I agree completely, however, that is not always the case. As for the debugger, there are many problems with FuncEval if that is what you\u0027re talking about.\n                \n\u2013\u00A0Brian Rasmussen\n                Jun 26 \u002709 at 10:25\n            ",
      "\n                \n                since when? lock your backing field within the property and it\u0027s the equivilant\n                \n\u2013\u00A0Sekhat\n                Nov 17 \u002708 at 14:42\n            ",
      "\n                \n                Properties are methods, and are not inlined by any CIL JIT today. If you are going to use thread primitives like Interlocked you need to have fields. Check your sources. Admittedly \u0027locking\u0027 was the wrong word to use.\n                \n\u2013\u00A0Jonathan C Dickinson\n                Nov 24 \u002708 at 7:34\n            ",
      "\n                \n                Since C# 3.0, the pattern described here is conveniently supported by a feature called Auto-Implemented Properties.\n                \n\u2013\u00A0DavidRR\n                Jan 2 \u002714 at 19:03\n                        \n                            \n                        \n            ",
      "\n                \n                I think one of the advantages in C# with Properties as they have the same API as fields, so clients of the class don\u0027t really care if they are accessing a property or a field. (This is NOT true in C\u002B\u002B for example)..  In prototyping, I think it is reasonable to start with public fields, and then migrate to properties as needed. There is a performance and memory hit with properties, and there is extra typing. They are not free. But, if you change your mind, you won\u0027t need to refactor any dependent code.\n                \n\u2013\u00A0Mark Lakata\n                May 25 \u002715 at 15:53\n                        \n                            \n                        \n            ",
      "\n                \n                Properties can\u0027t be used as OUT or REF parameters, so changing a field into a property could lead to compile errors down the line. If the value was implemented as a property from the beginning, then it would never have been used as OUT or REF (VAR in Pascal/Delphi) parameters, and any change you make in the getter/setter would be transparent to the usage.\n                \n\u2013\u00A0HeartWare\n                Nov 20 \u002717 at 6:29\n                        \n                            \n                        \n            ",
      "\n                \n                Yeah my bad, sorry!\n                \n\u2013\u00A0Tony Pinot\n                Dec 9 \u002716 at 15:54\n            ",
      "\n                \n                no, I always use properties, it allows you the flexibility of changing the implementation at anytime without breaking your API.\n                \n\u2013\u00A0Sekhat\n                Nov 17 \u002708 at 14:39\n            ",
      "\n                \n                Regarding API evolution, you can use fields for private data without problems. Also in odd cases where you want to share data within an assembly you can give fields \u0027internal\u0027 access.\n                \n\u2013\u00A0Daniel Earwicker\n                Nov 17 \u002708 at 14:59\n            ",
      "\n                \n                Hello and welcome to StackOverflow. Please take some time to read the help page, especially the sections named How to Answer. You might also want to learn about minimal reproducible example.\n                \n\u2013\u00A0Oddmar Dam\n                Jun 15 \u002719 at 17:56\n            ",
      "\n                \n                Hello and thank you! Is it something wrong with my answer? I\u0027ve read all the previous ones and found them too wordy. My one is the essence of the difference between fields and properties in c#, I believe. It is as short as possible, but still explains the thing.\n                \n\u2013\u00A0Ted Mucuzany\n                Jun 15 \u002719 at 19:08\n            ",
      "\n                \n                Hi @Ted. Iw\u0027e worked on c# for about 12 years and have never thought about what the side effects are :) Would love to hear about them. But i agree, the answer is short and precise. Just needs a bit more detail :)\n                \n\u2013\u00A0Oddmar Dam\n                Jun 15 \u002719 at 19:50\n            ",
      "\n                \n                @Oddmar Dam, I enumerated them in brackets. An example could be this (dotnetfiddle.net/SFWC1d)\n                \n\u2013\u00A0Ted Mucuzany\n                Jun 15 \u002719 at 21:38\n            "
    ]
  },
  {
    "Id": "6f6b6bf6-b860-4f14-b457-c591b7c848be",
    "QuestionId": 14376473,
    "Description": "What are good ways to prevent SQL injection? [duplicate]",
    "Votes": 44,
    "Views": 100399,
    "Tags": [
      "c#",
      "sql",
      "security",
      "sql-injection"
    ],
    "Discussions": [
      "\nBy using the SqlCommand and its child collection of parameters all the pain of checking for sql injection is taken away from you and will be handled by these classes.\n\nHere is an example, taken from one of the articles above:\n\nprivate static void UpdateDemographics(Int32 customerID,\n    string demoXml, string connectionString)\n{\n    // Update the demographics for a store, which is stored  \n    // in an xml column.  \n    string commandText = \u0022UPDATE Sales.Store SET Demographics = @demographics \u0022\n        \u002B \u0022WHERE CustomerID = @ID;\u0022;\n\n    using (SqlConnection connection = new SqlConnection(connectionString))\n    {\n        SqlCommand command = new SqlCommand(commandText, connection);\n        command.Parameters.Add(\u0022@ID\u0022, SqlDbType.Int);\n        command.Parameters[\u0022@ID\u0022].Value = customerID;\n\n        // Use AddWithValue to assign Demographics. \n        // SQL Server will implicitly convert strings into XML.\n        command.Parameters.AddWithValue(\u0022@demographics\u0022, demoXml);\n\n        try\n        {\n            connection.Open();\n            Int32 rowsAffected = command.ExecuteNonQuery();\n            Console.WriteLine(\u0022RowsAffected: {0}\u0022, rowsAffected);\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine(ex.Message);\n        }\n    }\n}\n\n    ",
      "\nMy answer is quite easy:\n\nUse Entity Framework for communication between C# and your SQL database. That will make parameterized SQL strings that isn\u0027t vulnerable to SQL injection.\n\nAs a bonus, it\u0027s very easy to work with as well.\n    ",
      "\nSQL injection can be a tricky problem but there are ways around it.  Your risk is reduced your risk simply by using an ORM like Linq2Entities, Linq2SQL, NHibrenate.  However you can have SQL injection problems even with them.\n\nThe main thing with SQL injection is user controlled input (as is with XSS).  In the most simple example if you have a login form (I hope you never have one that just does this) that takes a username and password.\n\nSELECT * FROM Users WHERE Username = \u0027\u0022 \u002B username \u002B \u0022\u0027 AND password = \u0027\u0022 \u002B password \u002B \u0022\u0027\u0022\n\n\nIf a user were to input the following for the username Admin\u0027 -- the SQL Statement would look like this when executing against the database.\n\nSELECT * FROM Users WHERE Username = \u0027Admin\u0027 --\u0027 AND password = \u0027\u0027\n\n\nIn this simple case using a paramaterized query (which is what an ORM does) would remove your risk.  You also have a the issue of a lesser known SQL injection attack vector and that\u0027s with stored procedures.  In this case even if you use a paramaterized query or an ORM you would still have a SQL injection problem.  Stored procedures can contain execute commands, and those commands themselves may be suceptable to SQL injection attacks.\n\nCREATE PROCEDURE SP_GetLogin @username varchar(100), @password varchar(100) AS\nDECLARE @sql nvarchar(4000)\nSELECT @sql = \u0027 SELECT * FROM users\u0027 \u002B\n              \u0027 FROM Product Where username = \u0027\u0027\u0027 \u002B @username \u002B \u0027\u0027\u0027 AND password = \u0027\u0027\u0027\u002B@password\u002B\u0027\u0027\u0027\u0027\n\nEXECUTE sp_executesql @sql\n\n\nSo this example would have the same SQL injection problem as the previous one even if you use paramaterized queries or an ORM. And although the example seems silly you\u0027d be surprised as to how often something like this is written.\n\nMy recommendations would be to use an ORM to immediately reduce your chances of having a SQL injection problem, and then learn to spot code and stored procedures which can have the problem and work to fix them. I don\u0027t recommend using ADO.NET (SqlClient, SqlCommand etc...) directly unless you have to, not because it\u0027s somehow not safe to use it with parameters but because it\u0027s that much easier to get lazy and just start writing a SQL query using strings and just ignoring the parameters.  ORMS do a great job of forcing you to use parameters because it\u0027s just what they do.  \n\nNext Visit the OWASP site on SQL injection https://www.owasp.org/index.php/SQL_Injection and  use the SQL injection cheat sheet to make sure you can spot and take out any issues that will arise in your code.  https://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet  finally I would say put in place a good code review between you and other developers at your company where you can review each others code for things like SQL injection and XSS. A lot of times programmers miss this stuff because they\u0027re trying to rush out some feature and don\u0027t spend too much time on reviewing their code.  \n    ",
      "\nSQL injection should not be prevented by trying to validate your input; instead, that input should be properly escaped before being passed to the database.\n\nHow to escape input totally depends on what technology you are using to interface with the database. In most cases and unless you are writing bare SQL (which you should avoid as hard as you can) it will be taken care of automatically by the framework so you get bulletproof protection for free.\n\nYou should explore this question further after you have decided exactly what your interfacing technology will be.\n    ",
      "\n                \n                What if I want to actively identify an attempt of sql injection. Are there any good libraries to couple with this approach so I can identify and log an attack?\n                \n\u2013\u00A0rolls\n                Dec 5 \u002716 at 21:22\n            ",
      "\n                \n                The first and simplest approach for SQL injection is the approach to end the current string and statement by starting your value with a single or double quote followed by a brace and semicolon. So by checking the given input if it starts with those would be a good hint, maybe by a regex like ^\\s*[\u0027\u0022]\\s*\\)\\s*;. That\u0027s not the only way, but the most common one.\n                \n\u2013\u00A0Oliver\n                Dec 6 \u002716 at 7:02\n                        \n                            \n                        \n            ",
      "\n                \n                Note that SqlCommand is also IDisposable so should be in a using block. And you may want to read can we stop using AddWithValue.\n                \n\u2013\u00A0Richardissimo\n                Jan 3 \u002719 at 23:48\n            ",
      "\n                \n                Note, I implemented this code and it crashed upon encountering an \u0027n\u0027 with a \u0027~\u0027 above it.  Before that happened it was like a miracle, now I\u0027m not sure sure about other languages ... which i was hoping this would make safe.\n                \n\u2013\u00A0karezza\n                Sep 5 \u002719 at 1:54\n                        \n                            \n                        \n            ",
      "\n                \n                thanks, i will look into this\n                \n\u2013\u00A0LeonidasFett\n                Jan 17 \u002713 at 10:17\n            ",
      "\n                \n                \u002B1 EF has matured into a really good product, works like a dream with ASP MVC.\n                \n\u2013\u00A0booyaa\n                Jan 17 \u002713 at 10:18\n            ",
      "\n                \n                This isn\u0027t always an option, though, when you don\u0027t know what the returning data is going to look like.\n                \n\u2013\u00A0saluce\n                Dec 17 \u002715 at 21:17\n            ",
      "\n                \n                I do not like EF. I prefer Light ORMS like Dapper and Insight.Database. When using ORMs you can see/write the exact query that is to execute.\n                \n\u2013\u00A0Rez.Net\n                Jul 22 \u002719 at 4:26\n            ",
      "\n                \n                Im not aware of any SQL injection risks with EF/Similar ORMs as they use parameterised queries internally - can you provide a link? Thanks\n                \n\u2013\u00A0Basic\n                Jan 17 \u002713 at 11:28\n            ",
      "\n                \n                The example I gave above with the stored proc would still be susceptible to a SQL injection attack even if you use an ORM like Entity Framework to call the procedure because the vulnerability is in the proc itself.  Therefore what I was trying to convey is that you cannot simply use an ORM and think that you have covered 100% for SQL injection attack cases.  Here\u0027s a link for more information: troyhunt.com/2012/12/stored-procedures-and-orms-wont-save.html\n                \n\u2013\u00A0nerdybeardo\n                Jan 17 \u002713 at 12:19\n            ",
      "\n                \n                If you\u0027re using an ORM, why would you want to use a sproc? But yeah, I take your point that should you want to do something manual then you could introduce vulnerabilities\n                \n\u2013\u00A0Basic\n                Jan 17 \u002713 at 13:00\n            ",
      "\n                \n                While I agree that as of late the usage of stored procs has dropped given the rise of the ORM, still there are many business situations which do call for their use.  If for no good reason then maybe you have a data architect that requires their use for certain processes or performance reasons.  I don\u0027t know of many databases which do not have a stored proc in them even today, therefore diminishing their significance in the SDLC could lead to a SQL injection flaw in an application.  We developers sometimes live in a world of what we \u0022want\u0022 rather than what the business reality is.\n                \n\u2013\u00A0nerdybeardo\n                Jan 17 \u002713 at 13:17\n                        \n                            \n                        \n            ",
      "\n                \n                sorry but what do you mean by \u0022writing bare sql\u0022?\n                \n\u2013\u00A0LeonidasFett\n                Jan 17 \u002713 at 10:10\n            ",
      "\n                \n                @LeonidasFett: Typically you work with the database by writing code like User.Name = \u0022Joe\u0022; User.Save(); and not code like Database.ExecuteQuery(\u0022UPDATE users SET name = \u0027Joe\u0027 WHERE id = 1\u0022);. The second is writing bare sql.\n                \n\u2013\u00A0Jon\n                Jan 17 \u002713 at 10:13\n            ",
      "\n                \n                ah ok. now i understand :) so basically i should interface with the database through a framework and not sql?\n                \n\u2013\u00A0LeonidasFett\n                Jan 17 \u002713 at 10:15\n                        \n                            \n                        \n            ",
      "\n                \n                What you\u0027re advocating here is an ORM - Like the entity framework. I use it myself and love it but it does have some drawbacks - like being really slow for bulk operations. The alternative is to use parameterised commands - you write the SQL with placeholders for your variables and then pass the variables in to a different method which takes care of merging them into the query for you (in fact, they\u0027re passed seperately to the Db server which handles the rest). See here for more info\n                \n\u2013\u00A0Basic\n                Jan 17 \u002713 at 10:36\n                        \n                            \n                        \n            ",
      "\n                \n                well as of now there are about 3000 records in the exisiting db, but this will be expanded dramatically during the course of this year. i will list the two choices (EF \u0026 parameterised commands) with advantages and disadvantages of each and let my project supervisor decide :D\n                \n\u2013\u00A0LeonidasFett\n                Jan 17 \u002713 at 13:02\n            "
    ]
  },
  {
    "Id": "56689083-dbaf-4865-9ef8-d1ce61364f21",
    "QuestionId": 41244,
    "Description": "Dynamic LINQ OrderBy on IEnumerable\u003CT\u003E / IQueryable\u003CT\u003E",
    "Votes": 683,
    "Views": 276853,
    "Tags": [
      "c#",
      "linq",
      "linq-to-objects"
    ],
    "Discussions": [
      "\nJust stumbled into this oldie...\n\nTo do this without the dynamic LINQ library, you just need the code as below. This covers most common scenarios including nested properties.\n\nTo get it working with IEnumerable\u003CT\u003E you could add some wrapper methods that go via AsQueryable - but the code below is the core Expression logic needed.\n\npublic static IOrderedQueryable\u003CT\u003E OrderBy\u003CT\u003E(\n    this IQueryable\u003CT\u003E source, \n    string property)\n{\n    return ApplyOrder\u003CT\u003E(source, property, \u0022OrderBy\u0022);\n}\n\npublic static IOrderedQueryable\u003CT\u003E OrderByDescending\u003CT\u003E(\n    this IQueryable\u003CT\u003E source, \n    string property)\n{\n    return ApplyOrder\u003CT\u003E(source, property, \u0022OrderByDescending\u0022);\n}\n\npublic static IOrderedQueryable\u003CT\u003E ThenBy\u003CT\u003E(\n    this IOrderedQueryable\u003CT\u003E source, \n    string property)\n{\n    return ApplyOrder\u003CT\u003E(source, property, \u0022ThenBy\u0022);\n}\n\npublic static IOrderedQueryable\u003CT\u003E ThenByDescending\u003CT\u003E(\n    this IOrderedQueryable\u003CT\u003E source, \n    string property)\n{\n    return ApplyOrder\u003CT\u003E(source, property, \u0022ThenByDescending\u0022);\n}\n\nstatic IOrderedQueryable\u003CT\u003E ApplyOrder\u003CT\u003E(\n    IQueryable\u003CT\u003E source, \n    string property, \n    string methodName) \n{\n    string[] props = property.Split(\u0027.\u0027);\n    Type type = typeof(T);\n    ParameterExpression arg = Expression.Parameter(type, \u0022x\u0022);\n    Expression expr = arg;\n    foreach(string prop in props) {\n        // use reflection (not ComponentModel) to mirror LINQ\n        PropertyInfo pi = type.GetProperty(prop);\n        expr = Expression.Property(expr, pi);\n        type = pi.PropertyType;\n    }\n    Type delegateType = typeof(Func\u003C,\u003E).MakeGenericType(typeof(T), type);\n    LambdaExpression lambda = Expression.Lambda(delegateType, expr, arg);\n\n    object result = typeof(Queryable).GetMethods().Single(\n            method =\u003E method.Name == methodName\n                    \u0026\u0026 method.IsGenericMethodDefinition\n                    \u0026\u0026 method.GetGenericArguments().Length == 2\n                    \u0026\u0026 method.GetParameters().Length == 2)\n            .MakeGenericMethod(typeof(T), type)\n            .Invoke(null, new object[] {source, lambda});\n    return (IOrderedQueryable\u003CT\u003E)result;\n}\n\n\n\n\nEdit: it gets more fun if you want to mix that with dynamic - although note that dynamic only applies to LINQ-to-Objects (expression-trees for ORMs etc can\u0027t really represent dynamic queries - MemberExpression doesn\u0027t support it). But here\u0027s a way to do it with LINQ-to-Objects. Note that the choice of Hashtable is due to favorable locking semantics:\n\nusing Microsoft.CSharp.RuntimeBinder;\nusing System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.Dynamic;\nusing System.Linq;\nusing System.Runtime.CompilerServices;\nstatic class Program\n{\n    private static class AccessorCache\n    {\n        private static readonly Hashtable accessors = new Hashtable();\n\n        private static readonly Hashtable callSites = new Hashtable();\n\n        private static CallSite\u003CFunc\u003CCallSite, object, object\u003E\u003E GetCallSiteLocked(\n            string name) \n        {\n            var callSite = (CallSite\u003CFunc\u003CCallSite, object, object\u003E\u003E)callSites[name];\n            if(callSite == null)\n            {\n                callSites[name] = callSite = CallSite\u003CFunc\u003CCallSite, object, object\u003E\u003E\n                    .Create(Binder.GetMember(\n                                CSharpBinderFlags.None, \n                                name, \n                                typeof(AccessorCache),\n                                new CSharpArgumentInfo[] { \n                                    CSharpArgumentInfo.Create(\n                                        CSharpArgumentInfoFlags.None, \n                                        null) \n                                }));\n            }\n            return callSite;\n        }\n\n        internal static Func\u003Cdynamic,object\u003E GetAccessor(string name)\n        {\n            Func\u003Cdynamic, object\u003E accessor = (Func\u003Cdynamic, object\u003E)accessors[name];\n            if (accessor == null)\n            {\n                lock (accessors )\n                {\n                    accessor = (Func\u003Cdynamic, object\u003E)accessors[name];\n                    if (accessor == null)\n                    {\n                        if(name.IndexOf(\u0027.\u0027) \u003E= 0) {\n                            string[] props = name.Split(\u0027.\u0027);\n                            CallSite\u003CFunc\u003CCallSite, object, object\u003E\u003E[] arr \n                                = Array.ConvertAll(props, GetCallSiteLocked);\n                            accessor = target =\u003E\n                            {\n                                object val = (object)target;\n                                for (int i = 0; i \u003C arr.Length; i\u002B\u002B)\n                                {\n                                    var cs = arr[i];\n                                    val = cs.Target(cs, val);\n                                }\n                                return val;\n                            };\n                        } else {\n                            var callSite = GetCallSiteLocked(name);\n                            accessor = target =\u003E\n                            {\n                                return callSite.Target(callSite, (object)target);\n                            };\n                        }\n                        accessors[name] = accessor;\n                    }\n                }\n            }\n            return accessor;\n        }\n    }\n\n    public static IOrderedEnumerable\u003Cdynamic\u003E OrderBy(\n        this IEnumerable\u003Cdynamic\u003E source, \n        string property)\n    {\n        return Enumerable.OrderBy\u003Cdynamic, object\u003E(\n            source, \n            AccessorCache.GetAccessor(property), \n            Comparer\u003Cobject\u003E.Default);\n    }\n\n    public static IOrderedEnumerable\u003Cdynamic\u003E OrderByDescending(\n        this IEnumerable\u003Cdynamic\u003E source, \n        string property)\n    {\n        return Enumerable.OrderByDescending\u003Cdynamic, object\u003E(\n            source, \n            AccessorCache.GetAccessor(property), \n            Comparer\u003Cobject\u003E.Default);\n    }\n\n    public static IOrderedEnumerable\u003Cdynamic\u003E ThenBy(\n        this IOrderedEnumerable\u003Cdynamic\u003E source, \n        string property)\n    {\n        return Enumerable.ThenBy\u003Cdynamic, object\u003E(\n            source, \n            AccessorCache.GetAccessor(property), \n            Comparer\u003Cobject\u003E.Default);\n    }\n\n    public static IOrderedEnumerable\u003Cdynamic\u003E ThenByDescending(\n        this IOrderedEnumerable\u003Cdynamic\u003E source, \n        string property)\n    {\n        return Enumerable.ThenByDescending\u003Cdynamic, object\u003E(\n            source, \n            AccessorCache.GetAccessor(property), \n            Comparer\u003Cobject\u003E.Default);\n    }\n\n    static void Main()\n    {\n        dynamic a = new ExpandoObject(), \n                b = new ExpandoObject(), \n                c = new ExpandoObject();\n        a.X = \u0022abc\u0022;\n        b.X = \u0022ghi\u0022;\n        c.X = \u0022def\u0022;\n        dynamic[] data = new[] { \n            new { Y = a },\n            new { Y = b }, \n            new { Y = c } \n        };\n\n        var ordered = data.OrderByDescending(\u0022Y.X\u0022).ToArray();\n        foreach (var obj in ordered)\n        {\n            Console.WriteLine(obj.Y.X);\n        }\n    }\n}\n\n    ",
      "\nToo easy without any complication:\n\n\nAdd using System.Linq.Dynamic; at the top.\nUse vehicles = vehicles.AsQueryable().OrderBy(\u0022Make ASC, Year DESC\u0022).ToList();\n\n    ",
      "\nJust stumbled across this question.\n\nUsing Marc\u0027s ApplyOrder implementation from above, I slapped together an Extension method that handles SQL-like strings like:\n\nlist.OrderBy(\u0022MyProperty DESC, MyOtherProperty ASC\u0022);\n\n\nDetails can be found here: http://aonnull.blogspot.com/2010/08/dynamic-sql-like-linq-orderby-extension.html\n    ",
      "\nI guess it would work to use reflection to get whatever property you want to sort on:\n\nIEnumerable\u003CT\u003E myEnumerables\nvar query=from enumerable in myenumerables\n          where some criteria\n          orderby GetPropertyValue(enumerable,\u0022SomeProperty\u0022)\n          select enumerable\n\nprivate static object GetPropertyValue(object obj, string property)\n{\n    System.Reflection.PropertyInfo propertyInfo=obj.GetType().GetProperty(property);\n    return propertyInfo.GetValue(obj, null);\n}\n\n\nNote that using reflection is considerably slower than accessing the property directly, so the performance would have to be investigated.\n    ",
      "\nJust building on what others have said. I found that the following works quite well.\n\npublic static IEnumerable\u003CT\u003E OrderBy\u003CT\u003E(this IEnumerable\u003CT\u003E input, string queryString)\n{\n    if (string.IsNullOrEmpty(queryString))\n        return input;\n\n    int i = 0;\n    foreach (string propname in queryString.Split(\u0027,\u0027))\n    {\n        var subContent = propname.Split(\u0027|\u0027);\n        if (Convert.ToInt32(subContent[1].Trim()) == 0)\n        {\n            if (i == 0)\n                input = input.OrderBy(x =\u003E GetPropertyValue(x, subContent[0].Trim()));\n            else\n                input = ((IOrderedEnumerable\u003CT\u003E)input).ThenBy(x =\u003E GetPropertyValue(x, subContent[0].Trim()));\n        }\n        else\n        {\n            if (i == 0)\n                input = input.OrderByDescending(x =\u003E GetPropertyValue(x, subContent[0].Trim()));\n            else\n                input = ((IOrderedEnumerable\u003CT\u003E)input).ThenByDescending(x =\u003E GetPropertyValue(x, subContent[0].Trim()));\n        }\n        i\u002B\u002B;\n    }\n\n    return input;\n}\n\n    ",
      "\nI\u0027ve stumble this question looking for Linq multiple orderby clauses\nand maybe this was what the author was looking for\n\nHere\u0027s how to do that:\n\nvar query = pets.OrderBy(pet =\u003E pet.Name).ThenByDescending(pet =\u003E pet.Age);    \n\n    ",
      "\nI was trying to do this but having problems with Kjetil Watnedal\u0027s solution because I don\u0027t use the inline linq syntax - I prefer method-style syntax. My specific problem was in trying to do dynamic sorting using a custom IComparer.\n\nMy solution ended up like this:\n\nGiven an IQueryable query like so:\n\nList\u003CDATA__Security__Team\u003E teams = TeamManager.GetTeams();\nvar query = teams.Where(team =\u003E team.ID \u003C 10).AsQueryable();\n\n\nAnd given a run-time sort field argument:\n\nstring SortField; // Set at run-time to \u0022Name\u0022\n\n\nThe dynamic OrderBy looks like so:\n\nquery = query.OrderBy(item =\u003E item.GetReflectedPropertyValue(SortField));\n\n\nAnd that\u0027s using a little helper method called GetReflectedPropertyValue():\n\npublic static string GetReflectedPropertyValue(this object subject, string field)\n{\n    object reflectedValue = subject.GetType().GetProperty(field).GetValue(subject, null);\n    return reflectedValue != null ? reflectedValue.ToString() : \u0022\u0022;\n}\n\n\n\n\nOne last thing - I mentioned that I wanted the OrderBy to use custom IComparer - because I wanted to do Natural sorting.\n\nTo do that, I just alter the OrderBy to:\n\nquery = query.OrderBy(item =\u003E item.GetReflectedPropertyValue(SortField), new NaturalSortComparer\u003Cstring\u003E());\n\n\nSee this post for the code for NaturalSortComparer().\n    ",
      "\nUse dynamic linq\n\njust add using System.Linq.Dynamic;\n\nAnd use it like this to order all your columns:\n\nstring sortTypeStr = \u0022ASC\u0022; // or DESC\nstring SortColumnName = \u0022Age\u0022; // Your column name\nquery = query.OrderBy($\u0022{SortColumnName} {sortTypeStr}\u0022);\n\n    ",
      "\nAfter a lot of searching this worked for me:\n\npublic static IEnumerable\u003CTEntity\u003E OrderBy\u003CTEntity\u003E(this IEnumerable\u003CTEntity\u003E source, \n                                                    string orderByProperty, bool desc)\n{\n    string command = desc ? \u0022OrderByDescending\u0022 : \u0022OrderBy\u0022;\n    var type = typeof(TEntity);\n    var property = type.GetProperty(orderByProperty);\n    var parameter = Expression.Parameter(type, \u0022p\u0022);\n    var propertyAccess = Expression.MakeMemberAccess(parameter, property);\n    var orderByExpression = Expression.Lambda(propertyAccess, parameter);\n    var resultExpression = Expression.Call(typeof(Queryable), command, \n                                           new[] { type, property.PropertyType },\n                                           source.AsQueryable().Expression, \n                                           Expression.Quote(orderByExpression));\n    return source.AsQueryable().Provider.CreateQuery\u003CTEntity\u003E(resultExpression);\n}\n\n    ",
      "\nYou could add it:\n\npublic static IEnumerable\u003CT\u003E OrderBy( this IEnumerable\u003CT\u003E input, string queryString) {\n    //parse the string into property names\n    //Use reflection to get and sort by properties\n    //something like\n\n    foreach( string propname in queryString.Split(\u0027,\u0027))\n        input.OrderBy( x =\u003E GetPropertyValue( x, propname ) );\n\n    // I used Kjetil Watnedal\u0027s reflection example\n}\n\n\nThe GetPropertyValue function is from Kjetil Watnedal\u0027s answer\n\nThe issue would be why? Any such sort would throw exceptions at run-time, rather than compile time (like D2VIANT\u0027s answer).\n\nIf you\u0027re dealing with Linq to Sql and the orderby is an expression tree it will be converted into SQL for execution anyway.\n    ",
      "\nHere\u0027s something else I found interesting.\nIf your source is a DataTable, you can use dynamic sorting without using Dynamic Linq\n\nDataTable orders = dataSet.Tables[\u0022SalesOrderHeader\u0022];\nEnumerableRowCollection\u003CDataRow\u003E query = from order in orders.AsEnumerable()\n                                         orderby order.Field\u003CDateTime\u003E(\u0022OrderDate\u0022)\n                                         select order;\nDataView view = query.AsDataView();\nbindingSource1.DataSource = view;\n\n\nreference: http://msdn.microsoft.com/en-us/library/bb669083.aspx (Using DataSetExtensions)\n\nHere is one more way to do it by converting it to a DataView:\n\nDataTable contacts = dataSet.Tables[\u0022Contact\u0022];    \nDataView view = contacts.AsDataView();    \nview.Sort = \u0022LastName desc, FirstName asc\u0022;    \nbindingSource1.DataSource = view;\ndataGridView1.AutoResizeColumns();\n\n    ",
      "\nThanks to Maarten (Query a collection using PropertyInfo object in LINQ) I got this solution:\n\nmyList.OrderByDescending(x =\u003E myPropertyInfo.GetValue(x, null)).ToList();\n\n\nIn my case I was working on a \u0022ColumnHeaderMouseClick\u0022 (WindowsForm) so just found the specific Column pressed and its correspondent PropertyInfo:\n\nforeach (PropertyInfo column in (new Process()).GetType().GetProperties())\n{\n    if (column.Name == dgvProcessList.Columns[e.ColumnIndex].Name)\n    {}\n}\n\n\nOR\n\nPropertyInfo column = (new Process()).GetType().GetProperties().Where(x =\u003E x.Name == dgvProcessList.Columns[e.ColumnIndex].Name).First();\n\n\n(be sure to have your column Names matching the object Properties)\n\nCheers\n    ",
      "\nYou can convert the IEnumerable to IQueryable.\n\nitems = items.AsQueryable().OrderBy(\u0022Name ASC\u0022);\n\n    ",
      "\nFirst Install Dynamic \nTools --\u003E NuGet Package Manager --\u003E Package Manager Console\n\ninstall-package System.Linq.Dynamic\n\n\nAdd Namespace using System.Linq.Dynamic;\n\nNow you can use OrderBy(\u0022Name, Age DESC\u0022)\n    ",
      "\nAn alternate solution uses the following class/interface.  It\u0027s not truly dynamic, but it works.\n\npublic interface IID\n{\n    int ID\n    {\n        get; set;\n    }\n}\n\npublic static class Utils\n{\n    public static int GetID\u003CT\u003E(ObjectQuery\u003CT\u003E items) where T:EntityObject, IID\n    {\n        if (items.Count() == 0) return 1;\n        return items.OrderByDescending(u =\u003E u.ID).FirstOrDefault().ID \u002B 1;\n    }\n}\n\n    ",
      "\nThis answer is a response to the comments that need an example for the solution provided by  @John Sheehan - Runscope \n\n\n  Please provide an example for the rest of us.\n\n\nin DAL (Data Access Layer), \n\nThe IEnumerable version:\n\n  public  IEnumerable\u003COrder\u003E GetOrders()\n    {\n      // i use Dapper to return IEnumerable\u003CT\u003E using Query\u003CT\u003E\n      //.. do stuff\n      return  orders  // IEnumerable\u003COrder\u003E\n  }\n\n\nThe IQueryable version\n\n  public IQueryable\u003COrder\u003E GetOrdersAsQuerable()\n    {\n        IEnumerable\u003COrder\u003E qry= GetOrders();\n        //use the built-in extension method  AsQueryable in  System.Linq namespace\n        return qry.AsQueryable();            \n    }\n\n\nNow you can use the IQueryable  version to bind, for example GridView in Asp.net and benefit for sorting (you can\u0027t sort using IEnumerable version)\n\nI used Dapper as ORM and build IQueryable version and utilized sorting in GridView in asp.net  so easy.\n    ",
      "\nYou can use this:\n\n        public List\u003CBook\u003E Books(string orderField, bool desc, int skip, int take)\n{\n    var propertyInfo = typeof(Book).GetProperty(orderField);\n\n    return _context.Books\n        .Where(...)\n        .OrderBy(p =\u003E !desc ? propertyInfo.GetValue(p, null) : 0)\n        .ThenByDescending(p =\u003E desc ? propertyInfo.GetValue(p, null) : 0)\n        .Skip(skip)\n        .Take(take)\n        .ToList();\n}\n\n    ",
      "\nConvert List to IEnumerable or Iquerable, add using System.LINQ.Dynamic namespace, then u can mention the property names in comma seperated string to OrderBy Method which comes by default from System.LINQ.Dynamic.\n    ",
      "\nyou can do it like this for multiple order by\nIOrderedEnumerable\u003CJToken\u003E sort;\n                        if (query.OrderBys[0].IsDESC)\n                        {\n                            sort = jarry.OrderByDescending(r =\u003E (string)r[query.OrderBys[0].Key]);\n                        }\n                        else\n                        {\n                            sort = jarry.OrderBy(r =\u003E\n                                (string) r[query.OrderBys[0].Key]); \n                        }\n                        foreach (var item in query.OrderBys.Skip(1))\n                        {\n                            if (item.IsDESC)\n                            {\n                                sort = sort.ThenByDescending(r =\u003E (string)r[item.Key]);\n                            }\n                            else\n                            {\n                                sort = sort.ThenBy(r =\u003E (string)r[item.Key]);\n                            }\n                        }\n\n    ",
      "\nvar result1 = lst.OrderBy(a=\u003Ea.Name);// for ascending order. \n var result1 = lst.OrderByDescending(a=\u003Ea.Name);// for desc order. \n\n    ",
      "\n                \n                Best damn piece of code I have seen :)   Just solved a million problems in my project :)\n                \n\u2013\u00A0sajidnizami\n                Nov 20 \u002708 at 9:37\n            ",
      "\n                \n                @Dave - you need to start with IQueryable\u003CT\u003E, so if you have something like List\u003CT\u003E (which is IEnumerable\u003CT\u003E) you may need to use AsQueryable() - for example var sorted = someList.AsQueryable().OrderBy(\u0022Foo.Bar\u0022);\n                \n\u2013\u00A0Marc Gravell\u2666\n                Jan 22 \u002710 at 19:26\n            ",
      "\n                \n                Have you seen this... it might help some people... stackoverflow.com/questions/557819/\u2026 its a more strongly typed solution.\n                \n\u2013\u00A0anthonyv\n                May 8 \u002710 at 12:30\n            ",
      "\n                \n                @MGOwen you seem to misunderstand the nature of code. The 40 lines is the same no matter whether it is 40 lines that you put somewhere in your project, or if those lines come (pre-compiled, or as source) in an external library. It would have been pretty amazing if I had linked, in Oct \u002708 to a library on nuget that has existed since Dec \u002711 (not least because nuget didn\u0027t exist then either), but the fundamental \u0022what it is doing\u0022 is the same. Also, you use the phrase \u0022actual solution\u0022 as though there is some well-defined agreed single route to every coding question: there is not.\n                \n\u2013\u00A0Marc Gravell\u2666\n                Jul 13 \u002713 at 8:15\n                        \n                            \n                        \n            ",
      "\n                \n                @MGOwen btw, the external lib is 2296 lines of code (not including AssemblyInfo.cs); which kinda makes the 40 lines here look pretty reasonable\n                \n\u2013\u00A0Marc Gravell\u2666\n                Jul 13 \u002713 at 8:18\n                        \n                            \n                        \n            ",
      "\n                \n                and where did you get the System.Linq.Dynamic from ?\n                \n\u2013\u00A0Rafael Herscovici\n                Feb 25 \u002713 at 14:12\n            ",
      "\n                \n                Works when using linq with MongoDB as well.\n                \n\u2013\u00A0soupy1976\n                Jul 24 \u002713 at 10:02\n            ",
      "\n                \n                The accepted answer may have been the correct answer in 2008 but currently this is the easiest, most correct answer now.\n                \n\u2013\u00A0EL MOJO\n                Oct 24 \u002714 at 15:33\n            ",
      "\n                \n                This is really good and simple handling, so much complexity internally, loved it\n                \n\u2013\u00A0Mrinal Kamboj\n                May 28 \u002716 at 14:25\n            ",
      "\n                \n                For the people in the \u0022future\u0022, if you are using dotnet core, use this: nuget.org/packages/System.Linq.Dynamic.Core\n                \n\u2013\u00A0Rafael Merlin\n                Nov 1 \u002717 at 2:08\n                        \n                            \n                        \n            ",
      "\n                \n                Great stuff, just add a modification as follows to make the property name case insensitive:  PropertyInfo pi = type.GetProperty(prop,BindingFlags.Public | BindingFlags.Instance | BindingFlags.IgnoreCase);\n                \n\u2013\u00A0Mrinal Kamboj\n                May 29 \u002716 at 7:47\n            ",
      "\n                \n                does this even work? orderby does not want a value but a selector lamba/delegate (Func\u003CTSource, TKey\u003E keySelector)..\n                \n\u2013\u00A0Davy Landman\n                Oct 24 \u002708 at 12:58\n            ",
      "\n                \n                I did try this example before posting it, and yes, it does work.\n                \n\u2013\u00A0Kjetil Watnedal\n                Oct 28 \u002708 at 7:22\n            ",
      "\n                \n                \u002B1 This is exactly what I was looking for!  This will work great for simple page sorting issues.\n                \n\u2013\u00A0Andrew Siemer\n                Apr 19 \u002710 at 4:08\n            ",
      "\n                \n                This didn\u0027t work for me. Am I missing something? What should \u0022SomeProperty\u0022 be. I tried giving the property name as well as property.GetType(). I have IQueryable\u003C\u003E and not IEnumerable\u003C\u003E\n                \n\u2013\u00A0SO User\n                Jul 23 \u002710 at 5:59\n            ",
      "\n                \n                @Alex Shkor: How are you supposed to sort the elements without looking at all the elements? However, there are better solutions in other answers.\n                \n\u2013\u00A0Kjetil Watnedal\n                Feb 15 \u002712 at 12:58\n            ",
      "\n                \n                \u002B1 canceled the down-vote due to lack of explanation.  I also think the author might have been interested in multiple order-bys.  Even if dynamic was the key word, no reason to down-vote.\n                \n\u2013\u00A0Jason Kleban\n                May 25 \u002710 at 18:51\n                        \n                            \n                        \n            ",
      "\n                \n                GetPropertyValue mehotod will be executed for all elements, it\u0027s bad solution.\n                \n\u2013\u00A0Alex Shkor\n                Feb 14 \u002712 at 16:27\n            ",
      "\n                \n                OrderBy don\u0027t maintain the previous order!!\n                \n\u2013\u00A0Amir Ismail\n                Apr 9 \u002712 at 9:13\n                        \n                            \n                        \n            ",
      "\n                \n                How can I use it with inner property sorting - like OrderBy(\u0022Branch.BranchName\u0022,\u0022Descending\u0022)\n                \n\u2013\u00A0devC\n                May 23 \u002719 at 11:08\n            ",
      "\n                \n                This works for me. Perhaps because the question is 10 years old, and this easier method only came later.\n                \n\u2013\u00A0kosherjellyfish\n                Jul 12 \u002719 at 6:49\n            ",
      "\n                \n                A couple of years later and I stumble upon this; this worked for me, like a dream. I have dynamic sorting on 1 to 3 properties, and this works like a dream. Easy to implement and hassle free.\n                \n\u2013\u00A0Baz\u00EFnga\n                Mar 22 at 6:44\n            ",
      "\n                \n                Love this answer, but how can I make this work if I need to sort by a property of a child class?\n                \n\u2013\u00A0RoLYroLLs\n                Jul 20 at 21:17\n            "
    ]
  },
  {
    "Id": "1c639c68-f406-45c4-8742-6fd50c09953f",
    "QuestionId": 5181777,
    "Description": "Use of Application.DoEvents()",
    "Votes": 276,
    "Views": 182737,
    "Tags": [
      "c#",
      "winforms",
      "doevents"
    ],
    "Discussions": [
      "\nHmya, the enduring mystique of DoEvents().  There\u0027s been an enormous amount of backlash against it, but nobody ever really explains why it is \u0022bad\u0022.  The same kind of wisdom as \u0022don\u0027t mutate a struct\u0022.  Erm, why does the runtime and the language supports mutating a struct if that\u0027s so bad?  Same reason: you shoot yourself in the foot if you don\u0027t do it right.  Easily.  And doing it right requires knowing exactly what it does, which in the case of DoEvents() is definitely not easy to grok.\n\nRight off the bat: almost any Windows Forms program actually contains a call to DoEvents().  It is cleverly disguised, however with a different name: ShowDialog().  It is DoEvents() that allows a dialog to be modal without it freezing the rest of the windows in the application.\n\nMost programmers want to use DoEvents to stop their user interface from freezing when they write their own modal loop.  It certainly does that; it dispatches Windows messages and gets any paint requests delivered.  The problem however is that it isn\u0027t selective.  It not only dispatches paint messages, it delivers everything else as well.\n\nAnd there\u0027s a set of notifications that cause trouble.  They come from about 3 feet in front of the monitor.  The user could for example close the main window while the loop that calls DoEvents() is running.  That works, user interface is gone.  But your code didn\u0027t stop, it is still executing the loop.  That\u0027s bad.  Very, very bad.\n\nThere\u0027s more: The user could click the same menu item or button that causes the same loop to get started.  Now you have two nested loops executing DoEvents(), the previous loop is suspended and the new loop is starting from scratch.  That could work, but boy the odds are slim.  Especially when the nested loop ends and the suspended one resumes, trying to finish a job that was already completed.  If that doesn\u0027t bomb with an exception then surely the data is scrambled all to hell.\n\nBack to ShowDialog().  It executes DoEvents(), but do note that it does something else.  It disables all the windows in the application, other than the dialog.  Now that 3-feet problem is solved, the user cannot do anything to mess up the logic.  Both the close-the-window and start-the-job-again failure modes are solved.  Or to put it another way, there is no way for the user to make your program run code in a different order. It will execute predictably, just like it did when you tested your code. It makes dialogs extremely annoying; who doesn\u0027t hate having a dialog active and not being able to copy and paste something from another window?  But that\u0027s the price.\n\nWhich is what it takes to use DoEvents safely in your code.  Setting the Enabled property of all your forms to false is a quick and efficient way to avoid problems.  Of course, no programmer ever actually likes doing this.  And doesn\u0027t.  Which is why you shouldn\u0027t use DoEvents().  You should use threads.  Even though they hand you a complete arsenal of ways to shoot your foot in colorful and inscrutable ways.  But with the advantage that you only shoot your own foot; it won\u0027t (typically) let the user shoot hers.\n\nThe next versions of C# and VB.NET will provide a different gun with the new await and async keywords.  Inspired in small part by the trouble caused by DoEvents and threads but in large part by WinRT\u0027s API design that requires you to keep your UI updated while an asynchronous operation is taking place.  Like reading from a file.\n    ",
      "\nIt can be, but it\u0027s a hack.\n\nSee Is DoEvents Evil?.\n\nDirect from the MSDN page that thedev referenced:\n\n\n  Calling this method causes the current\n  thread to be suspended while all\n  waiting window messages are processed.\n  If a message causes an event to be\n  triggered, then other areas of your\n  application code may execute. This can\n  cause your application to exhibit\n  unexpected behaviors that are\n  difficult to debug. If you perform\n  operations or computations that take a\n  long time, it is often preferable to\n  perform those operations on a new\n  thread. For more information about\n  asynchronous programming, see\n  Asynchronous Programming Overview.\n\n\nSo Microsoft cautions against its use.\n\nAlso, I consider it a hack because its behavior is unpredictable and side effect prone (this comes from experience trying to use DoEvents instead of spinning up a new thread or using background worker).\n\nThere is no machismo here - if it worked as a robust solution I would be all over it. However, trying to use DoEvents in .NET has caused me nothing but pain.\n    ",
      "\nYes, there is a static DoEvents method in the Application class in the System.Windows.Forms namespace. System.Windows.Forms.Application.DoEvents() can be used to process the messages waiting in the queue on the UI thread when performing a long-running task in the UI thread. This has the benefit of making the UI seem more responsive and not \u0022locked up\u0022 while a long task is running. However, this is almost always NOT the best way to do things.\nAccording to Microsoft calling DoEvents \u0022...causes the current thread to be suspended while all waiting window messages are processed.\u0022 If an event is triggered there is a potential for unexpected and intermittent bugs that are difficult to track down. If you have an extensive task it is far better to do it in a separate thread. Running long tasks in a separate thread allows them to be processed without interfering with the UI continuing to run smoothly. Look here for more details.\n\nHere is an example of how to use DoEvents; note that Microsoft also provides a caution against using it.\n    ",
      "\nFrom my experience I would advise great caution with using DoEvents in .NET. I experienced some very strange results when using DoEvents in a TabControl containing DataGridViews. On the other hand, if all you\u0027re dealing with is a small form with a progress bar then it might be OK.\n\nThe bottom line is: if you are going to use DoEvents, then you need to test it thoroughly before deploying your application.\n    ",
      "\nYes.\n\nHowever, if you need to use Application.DoEvents, this is mostly an indication of a bad application design. Perhaps you\u0027d like to do some work in a separate thread instead?\n    ",
      "\nI saw jheriko\u0027s comment above and was initially agreeing that I couldn\u0027t find a way to avoid using DoEvents if you end up spinning your main UI thread waiting for a long running asynchronous piece of code on another thread to complete.  But from Matthias\u0027s answer a simple Refresh of a small panel on my UI can replace the DoEvents (and avoid a nasty side effect).\n\nMore detail on my case ...\n\nI was doing the following (as suggested here) to ensure that a progress bar type splash screen (How to display a \u0022loading\u0022 overlay...) updated during a long running SQL command:\n\nIAsyncResult asyncResult = sqlCmd.BeginExecuteNonQuery();\nwhile (!asyncResult.IsCompleted)  //UI thread needs to Wait for Async SQL command to return\n{\n      System.Threading.Thread.Sleep(10); \n      Application.DoEvents();  //to make the UI responsive\n}\n\n\nThe bad: For me calling DoEvents meant that mouse clicks were sometimes firing on forms behind my splash screen, even if I made it TopMost.\n\nThe good/answer: Replace the DoEvents line with a simple Refresh call to a small panel in the centre of my splash screen, FormSplash.Panel1.Refresh().  The UI updates nicely and the DoEvents weirdness others have warned of was gone.\n    ",
      "\nI\u0027ve seen many commercial applications, using the \u0022DoEvents-Hack\u0022. Especially when rendering comes into play, I often see this:\n\nwhile(running)\n{\n    Render();\n    Application.DoEvents();\n}\n\n\nThey all know about the evil of that method. However, they use the hack, because they don\u0027t know any other solution. Here are some approaches taken from a blog post by Tom Miller:\n\n\n  \n  Set your form to have all drawing occur in WmPaint, and do your rendering there.  Before the end of the OnPaint method, make sure you do a this.Invalidate();  This will cause the OnPaint method to be fired again immediately.\n  P/Invoke into the Win32 API and call PeekMessage/TranslateMessage/DispatchMessage.  (Doevents actually does something similar, but you can do this without the extra allocations).\n  Write your own forms class that is a small wrapper around CreateWindowEx, and give yourself complete control over the message loop.\n  -Decide that the DoEvents method works fine for you and stick with it.\n  \n\n    ",
      "\nCheck out the MSDN Documentation for the Application.DoEvents method.\n    ",
      "\nThe DoEvents does allow the user to click around or type and trigger other events, and background threads are a better approach.\n\nHowever, there are still cases where you may run into issues that require flushing event messages. I ran into a problem where the RichTextBox control was ignoring the ScrollToCaret() method when the control had messages in queue to process.\n\nThe following code blocks all user input while executing DoEvents:\n\nusing System;\nusing System.Runtime.InteropServices;\nusing System.Windows.Forms;\n\nnamespace Integrative.Desktop.Common\n{\n    static class NativeMethods\n    {\n        #region Block input\n\n        [DllImport(\u0022user32.dll\u0022, EntryPoint = \u0022BlockInput\u0022)]\n        [return: MarshalAs(UnmanagedType.Bool)]\n        private static extern bool BlockInput([MarshalAs(UnmanagedType.Bool)] bool fBlockIt);\n\n        public static void HoldUser()\n        {\n            BlockInput(true);\n        }\n\n        public static void ReleaseUser()\n        {\n            BlockInput(false);\n        }\n\n        public static void DoEventsBlockingInput()\n        {\n            HoldUser();\n            Application.DoEvents();\n            ReleaseUser();\n        }\n\n        #endregion\n    }\n}\n\n    ",
      "\nApplication.DoEvents can create problems, if something other than graphics processing is put in the message queue. \n\nIt can be useful for updating progress bars and notifying the user of progress in something like MainForm construction and loading, if that takes a while.\n\nIn a recent application I\u0027ve made, I used DoEvents to update some labels on a Loading Screen every time a block of code is executed in the constructor of my MainForm. The UI thread was, in this case, occupied with sending an email on a SMTP server that didn\u0027t support SendAsync() calls. I could probably have created a different thread with Begin() and End() methods and called a Send() from their, but that method is error-prone and I would prefer the Main Form of my application not throwing exceptions during construction.\n    ",
      "\n                \n                This is only the tip of the ice berg, though. I have been using Application.DoEvents without problems until I added some UDP features to my code, which resulted in the problem described here. I\u0027d love to know if there\u0027s a way around that with DoEvents.\n                \n\u2013\u00A0darda\n                Mar 31 \u002713 at 18:42\n            ",
      "\n                \n                this is a nice answer, the only thing I feel it misses is an explanation/discussion of yielding execution and thread-safe design or timeslicing in general - but that is easily three times as much more text again. :)\n                \n\u2013\u00A0jheriko\n                Jun 5 \u002713 at 6:40\n            ",
      "\n                \n                Would benefit from a more practical solution than generally \u0022use threads\u0022.  For example, the BackgroundWorker component manages threads for you, avoiding most of the colorful outcomes of foot-shooting, and it doesn\u0027t require bleeding edge C# language versions.\n                \n\u2013\u00A0Ben Voigt\n                Oct 31 \u002713 at 6:09\n            ",
      "\n                \n                TL;DR: Using Application.DoEvents is OK, provided that you are a conscientious, disciplined, and well educated developer with good judgement. And the problem is that Application.DoEvents is particularly enticing to developers who are lacking at least one of those qualities (temporarily at least).\n                \n\u2013\u00A0Theodor Zoulias\n                Nov 11 at 8:33\n                        \n                            \n                        \n            ",
      "\n                \n                @BenVoigt related question: Async/await vs BackgroundWorker\n                \n\u2013\u00A0Theodor Zoulias\n                Nov 11 at 8:37\n            ",
      "\n                \n                It\u0027s worth noting that that post is from 2004, before .NET 2.0 and BackgroundWorker helped simplify the \u0022correct\u0022 way.\n                \n\u2013\u00A0Justin\n                Mar 3 \u002711 at 14:17\n            ",
      "\n                \n                Agreed.  Also, the Task library in .NET 4.0 is rather nice as well.\n                \n\u2013\u00A0RQDQ\n                Mar 3 \u002711 at 14:21\n            ",
      "\n                \n                Why would it be a hack if Microsoft has provided a function for the very purpose for which it is often needed?\n                \n\u2013\u00A0Craig Johnston\n                Mar 3 \u002711 at 14:24\n                        \n                            \n                        \n            ",
      "\n                \n                @Craig Johnston - updated my answer to more fully detail why I believe DoEvents falls into the category of hackery.\n                \n\u2013\u00A0RQDQ\n                Mar 3 \u002711 at 15:09\n            ",
      "\n                \n                That coding horror article referred to it as \u0022DoEvents spackle.\u0022  Brilliant!\n                \n\u2013\u00A0gonzobrains\n                Apr 2 \u002713 at 18:02\n            ",
      "\n                \n                Nice answer, but if I may suggest a solution for the progressbar thing which is waays better , I would say, do your work in a separate thread, make your progress indicator available in a volatile, interlocked variable, and refresh your progressbar from a timer. This way no maintenance coder is tempted to add heavyweight code to your loop.\n                \n\u2013\u00A0mg30rg\n                Jun 28 \u002718 at 11:40\n            ",
      "\n                \n                DoEvents or an equivalent is unavoidable if you have hefty UI processes and don\u0027t want to lock up the UI. First option is to not do large chunks of UI processing, but this can make the code less maintainable. However, await Dispatcher.Yield() does a very similar thing to DoEvents and can essentially allow a UI process that locks up the screen to be made for all intents and purposes async.\n                \n\u2013\u00A0Christian Findlay\n                Oct 1 \u002718 at 5:25\n            ",
      "\n                \n                what if you want it so you can spin and wait on work to complete in another thread?\n                \n\u2013\u00A0jheriko\n                Jun 5 \u002713 at 6:42\n            ",
      "\n                \n                @jheriko Then you really should try async-await.\n                \n\u2013\u00A0mg30rg\n                Jun 28 \u002718 at 11:32\n            ",
      "\n                \n                Refresh does not update the window, though. If a user selects another window on the desktop, clicking back to your window will not have any effect and the OS will list your application as unresponsive. DoEvents() does a lot more than a refresh, as it interacts with the OS through the messaging system.\n                \n\u2013\u00A0ThunderGr\n                Dec 5 \u002713 at 11:00\n            ",
      "\n                \n                You should always block events when calling doevents. Otherwise other events on your app will fire in response and your app could start doing two things at once.\n                \n\u2013\u00A0FastAl\n                Mar 21 \u002719 at 20:41\n            "
    ]
  },
  {
    "Id": "3f7e3f15-fc2e-4743-9296-fc185f4bcd2c",
    "QuestionId": 876473,
    "Description": "Is there a way to check if a file is in use?",
    "Votes": 869,
    "Views": 562724,
    "Tags": [
      "c#",
      ".net",
      "file",
      "file-io",
      "file-locking"
    ],
    "Discussions": [
      "\nUpdated NOTE on this solution: Checking with FileAccess.ReadWrite will fail for Read-Only files so the solution has been modified to check with FileAccess.Read. While this solution works because trying to check with FileAccess.Read will fail if the file has a Write or Read lock on it, however, this solution will not work if the file doesn\u0027t have a Write or Read lock on it, i.e. it has been opened (for reading or writing) with FileShare.Read or FileShare.Write access.\n\nORIGINAL:\nI\u0027ve used this code for the past several years, and I haven\u0027t had any issues with it.\n\nUnderstand your hesitation about using exceptions, but you can\u0027t avoid them all of the time:\n\nprotected virtual bool IsFileLocked(FileInfo file)\n{\n    try\n    {\n        using(FileStream stream = file.Open(FileMode.Open, FileAccess.Read, FileShare.None))\n        {\n            stream.Close();\n        }\n    }\n    catch (IOException)\n    {\n        //the file is unavailable because it is:\n        //still being written to\n        //or being processed by another thread\n        //or does not exist (has already been processed)\n        return true;\n    }\n\n    //file is not locked\n    return false;\n}\n\n    ",
      "\nYou can suffer from a thread race condition on this which there are documented examples of this being used as a security vulnerability.  If you check that the file is available, but then try and use it you could throw at that point, which a malicious user could use to force and exploit in your code.\n\nYour best bet is a try catch / finally which tries to get the file handle.\n\ntry\n{\n   using (Stream stream = new FileStream(\u0022MyFilename.txt\u0022, FileMode.Open))\n   {\n        // File/Stream manipulating code here\n   }\n} catch {\n  //check here why it failed and ask user to retry if the file is in use.\n}\n\n    ",
      "\nUse this to check if a file is locked:\n\nusing System.IO;\nusing System.Runtime.InteropServices;\ninternal static class Helper\n{\nconst int ERROR_SHARING_VIOLATION = 32;\nconst int ERROR_LOCK_VIOLATION = 33;\n\nprivate static bool IsFileLocked(Exception exception)\n{\n    int errorCode = Marshal.GetHRForException(exception) \u0026 ((1 \u003C\u003C 16) - 1);\n    return errorCode == ERROR_SHARING_VIOLATION || errorCode == ERROR_LOCK_VIOLATION;\n}\n\ninternal static bool CanReadFile(string filePath)\n{\n    //Try-Catch so we dont crash the program and can check the exception\n    try {\n        //The \u0022using\u0022 is important because FileStream implements IDisposable and\n        //\u0022using\u0022 will avoid a heap exhaustion situation when too many handles  \n        //are left undisposed.\n        using (FileStream fileStream = File.Open(filePath, FileMode.Open, FileAccess.ReadWrite, FileShare.None)) {\n            if (fileStream != null) fileStream.Close();  //This line is me being overly cautious, fileStream will never be null unless an exception occurs... and I know the \u0022using\u0022 does it but its helpful to be explicit - especially when we encounter errors - at least for me anyway!\n        }\n    }\n    catch (IOException ex) {\n        //THE FUNKY MAGIC - TO SEE IF THIS FILE REALLY IS LOCKED!!!\n        if (IsFileLocked(ex)) {\n            // do something, eg File.Copy or present the user with a MsgBox - I do not recommend Killing the process that is locking the file\n            return false;\n        }\n    }\n    finally\n    { }\n    return true;\n}\n}\n\n\nFor performance reasons I recommend you read the file content in the same operation. Here are some examples:\n\npublic static byte[] ReadFileBytes(string filePath)\n{\n    byte[] buffer = null;\n    try\n    {\n        using (FileStream fileStream = File.Open(filePath, FileMode.Open, FileAccess.ReadWrite, FileShare.None))\n        {\n            int length = (int)fileStream.Length;  // get file length\n            buffer = new byte[length];            // create buffer\n            int count;                            // actual number of bytes read\n            int sum = 0;                          // total number of bytes read\n\n            // read until Read method returns 0 (end of the stream has been reached)\n            while ((count = fileStream.Read(buffer, sum, length - sum)) \u003E 0)\n                sum \u002B= count;  // sum is a buffer offset for next reading\n\n            fileStream.Close(); //This is not needed, just me being paranoid and explicitly releasing resources ASAP\n        }\n    }\n    catch (IOException ex)\n    {\n        //THE FUNKY MAGIC - TO SEE IF THIS FILE REALLY IS LOCKED!!!\n        if (IsFileLocked(ex))\n        {\n            // do something? \n        }\n    }\n    catch (Exception ex)\n    {\n    }\n    finally\n    {\n    }\n    return buffer;\n}\n\npublic static string ReadFileTextWithEncoding(string filePath)\n{\n    string fileContents = string.Empty;\n    byte[] buffer;\n    try\n    {\n        using (FileStream fileStream = File.Open(filePath, FileMode.Open, FileAccess.ReadWrite, FileShare.None))\n        {\n            int length = (int)fileStream.Length;  // get file length\n            buffer = new byte[length];            // create buffer\n            int count;                            // actual number of bytes read\n            int sum = 0;                          // total number of bytes read\n\n            // read until Read method returns 0 (end of the stream has been reached)\n            while ((count = fileStream.Read(buffer, sum, length - sum)) \u003E 0)\n            {\n                sum \u002B= count;  // sum is a buffer offset for next reading\n            }\n\n            fileStream.Close(); //Again - this is not needed, just me being paranoid and explicitly releasing resources ASAP\n\n            //Depending on the encoding you wish to use - I\u0027ll leave that up to you\n            fileContents = System.Text.Encoding.Default.GetString(buffer);\n        }\n    }\n    catch (IOException ex)\n    {\n        //THE FUNKY MAGIC - TO SEE IF THIS FILE REALLY IS LOCKED!!!\n        if (IsFileLocked(ex))\n        {\n            // do something? \n        }\n    }\n    catch (Exception ex)\n    {\n    }\n    finally\n    { }     \n    return fileContents;\n}\n\npublic static string ReadFileTextNoEncoding(string filePath)\n{\n    string fileContents = string.Empty;\n    byte[] buffer;\n    try\n    {\n        using (FileStream fileStream = File.Open(filePath, FileMode.Open, FileAccess.ReadWrite, FileShare.None))\n        {\n            int length = (int)fileStream.Length;  // get file length\n            buffer = new byte[length];            // create buffer\n            int count;                            // actual number of bytes read\n            int sum = 0;                          // total number of bytes read\n\n            // read until Read method returns 0 (end of the stream has been reached)\n            while ((count = fileStream.Read(buffer, sum, length - sum)) \u003E 0) \n            {\n                sum \u002B= count;  // sum is a buffer offset for next reading\n            }\n\n            fileStream.Close(); //Again - this is not needed, just me being paranoid and explicitly releasing resources ASAP\n\n            char[] chars = new char[buffer.Length / sizeof(char) \u002B 1];\n            System.Buffer.BlockCopy(buffer, 0, chars, 0, buffer.Length);\n            fileContents = new string(chars);\n        }\n    }\n    catch (IOException ex)\n    {\n        //THE FUNKY MAGIC - TO SEE IF THIS FILE REALLY IS LOCKED!!!\n        if (IsFileLocked(ex))\n        {\n            // do something? \n        }\n    }\n    catch (Exception ex)\n    {\n    }\n    finally\n    {\n    }\n\n    return fileContents;\n}\n\n\nTry it out yourself:\n\nbyte[] output1 = Helper.ReadFileBytes(@\u0022c:\\temp\\test.txt\u0022);\nstring output2 = Helper.ReadFileTextWithEncoding(@\u0022c:\\temp\\test.txt\u0022);\nstring output3 = Helper.ReadFileTextNoEncoding(@\u0022c:\\temp\\test.txt\u0022);\n\n    ",
      "\nPerhaps you could use a FileSystemWatcher and watch for the Changed event.\n\nI haven\u0027t used this myself, but it might be worth a shot. If the filesystemwatcher turns out to be a bit heavy for this case, I would go for the try/catch/sleep loop.\n    ",
      "\nJust use the exception as intended.  Accept that the file is in use and try again, repeatedly until your action is completed.  This is also the most efficient because you do not waste any cycles checking the state before acting.\n\nUse the function below, for example\n\nTimeoutFileAction(() =\u003E { System.IO.File.etc...; return null; } );\n\n\nReusable method that times out after 2 seconds\n\nprivate T TimeoutFileAction\u003CT\u003E(Func\u003CT\u003E func)\n{\n    var started = DateTime.UtcNow;\n    while ((DateTime.UtcNow - started).TotalMilliseconds \u003C 2000)\n    {\n        try\n        {\n            return func();                    \n        }\n        catch (System.IO.IOException exception)\n        {\n            //ignore, or log somewhere if you want to\n        }\n    }\n    return default(T);\n}\n\n    ",
      "\nYou can return a task which gives you a stream as soon as it becomes available. It\u0027s a simplified solution, but it is a good starting point. It\u0027s thread safe.\n\nprivate async Task\u003CStream\u003E GetStreamAsync()\n{\n    try\n    {\n        return new FileStream(\u0022sample.mp3\u0022, FileMode.Open, FileAccess.Write);\n    }\n    catch (IOException)\n    {\n        await Task.Delay(TimeSpan.FromSeconds(1));\n        return await GetStreamAsync();\n    }\n}\n\n\nYou can use this stream as usual:\n\nusing (var stream = await FileStreamGetter.GetStreamAsync())\n{\n    Console.WriteLine(stream.Length);\n}\n\n    ",
      "\nthe only way I know of is to use the Win32 exclusive lock API which isn\u0027t too speedy, but examples exist.\n\nMost people, for a simple solution to this, simply to try/catch/sleep loops.\n    ",
      "\nstatic bool FileInUse(string path)\n    {\n        try\n        {\n            using (FileStream fs = new FileStream(path, FileMode.OpenOrCreate))\n            {\n                fs.CanWrite\n            }\n            return false;\n        }\n        catch (IOException ex)\n        {\n            return true;\n        }\n    }\n\nstring filePath = \u0022C:\\\\Documents And Settings\\\\yourfilename\u0022;\nbool isFileInUse;\n\nisFileInUse = FileInUse(filePath);\n\n// Then you can do some checking\nif (isFileInUse)\n   Console.WriteLine(\u0022File is in use\u0022);\nelse\n   Console.WriteLine(\u0022File is not in use\u0022);\n\n\nHope this helps!\n    ",
      "\nThe accepted answers above suffer an issue where if file has been opened for writing with a FileShare.Read mode or if the file has a Read-Only attribute the code will not work. This modified solution works most reliably, with two things to keep in mind (as true for the accepted solution also):\n\n\nIt will not work for files that has been opened with a write share mode\nThis does not take into account threading issues so you will need to lock it down or handle threading issues separately.\n\n\nKeeping the above in mind, this checks if the file is either locked for writing or locked to prevent reading:\n\npublic static bool FileLocked(string FileName)\n{\n    FileStream fs = null;\n\n    try\n    {\n        // NOTE: This doesn\u0027t handle situations where file is opened for writing by another process but put into write shared mode, it will not throw an exception and won\u0027t show it as write locked\n        fs = File.Open(FileName, FileMode.Open, FileAccess.ReadWrite, FileShare.None); // If we can\u0027t open file for reading and writing then it\u0027s locked by another process for writing\n    }\n    catch (UnauthorizedAccessException) // https://msdn.microsoft.com/en-us/library/y973b725(v=vs.110).aspx\n    {\n        // This is because the file is Read-Only and we tried to open in ReadWrite mode, now try to open in Read only mode\n        try\n        {\n            fs = File.Open(FileName, FileMode.Open, FileAccess.Read, FileShare.None);\n        }\n        catch (Exception)\n        {\n            return true; // This file has been locked, we can\u0027t even open it to read\n        }\n    }\n    catch (Exception)\n    {\n        return true; // This file has been locked\n    }\n    finally\n    {\n        if (fs != null)\n            fs.Close();\n    }\n    return false;\n}\n\n    ",
      "\nAside from working 3-liners and just for reference: If you want the full blown information - there is a little project on Microsoft Dev Center:\n\nhttps://code.msdn.microsoft.com/windowsapps/How-to-know-the-process-704839f4\n\nFrom the Introduction:\n\n\n  The C# sample code developed in .NET Framework 4.0 would help in\n  finding out which is the process that is having a lock on a file.\n  RmStartSession function which is included in rstrtmgr.dll has been\n  used to create a restart manager session and according to the return\n  result a new instance of Win32Exception object is created. After\n  registering the resources to a Restart Manager session via\n  RmRegisterRescources function, RmGetList function is invoked to check\n  what are the applications are using a particular file by enumerating\n  the RM_PROCESS_INFO array.\n\n\nIt works by connecting to the \u0022Restart Manager Session\u0022.\n\n\n  The Restart Manager uses the list of resources registered with the session to\n  determine which applications and services must be shut down and restarted.\n  Resources can be identified by filenames, service short names, or\n  RM_UNIQUE_PROCESS structures that describe running applications.\n\n\nIt might be a little overengineered for your particular needs...\nBut if that is what you want, go ahead and grab the vs-project.\n    ",
      "\nI once needed to upload PDFs to an online backup archive.  But the backup would fail if the user had the file open in another program (such as PDF reader).  In my haste, I attempted a few of the top answers in this thread but could not get them to work.  What did work for me was trying to move the PDF file to its own directory.  I found that this would fail if the file was open in another program, and if the move were successful there would be no restore-operation required as there would be if it were moved to a separate directory.  I want to post my basic solution in case it may be useful for others\u0027 specific use cases.\n\nstring str_path_and_name = str_path \u002B \u0027\\\\\u0027 \u002B str_filename;\nFileInfo fInfo = new FileInfo(str_path_and_name);\nbool open_elsewhere = false;\ntry\n{\n    fInfo.MoveTo(str_path_and_name);\n}\ncatch (Exception ex)\n{\n    open_elsewhere = true;\n}\n\nif (open_elsewhere)\n{\n    //handle case\n}\n\n    ",
      "\nIn my experience, you usually want to do this, then \u0027protect\u0027 your files to do something fancy and then use the \u0027protected\u0027 files. If you have just one file you want to use like this, you can use the trick that\u0027s explained in the answer by Jeremy Thompson. However, if you attempt to do this on lots of files (say, for example when you\u0027re writing an installer), you\u0027re in for quite a bit of hurt.\n\nA very elegant way this can be solved is by using the fact that your file system will not allow you to change a folder name if one of the files there it\u0027s being used. Keep the folder in the same file system and it\u0027ll work like a charm.\n\nDo note that you should be aware of the obvious ways this can be exploited. After all, the files won\u0027t be locked. Also, be aware that there are other reasons that can result in your Move operation to fail. Obviously proper error handling (MSDN) can help out here.\n\nvar originalFolder = @\u0022c:\\myHugeCollectionOfFiles\u0022; // your folder name here\nvar someFolder = Path.Combine(originalFolder, \u0022..\u0022, Guid.NewGuid().ToString(\u0022N\u0022));\n\ntry\n{\n    Directory.Move(originalFolder, someFolder);\n\n    // Use files\n}\ncatch // TODO: proper exception handling\n{\n    // Inform user, take action\n}\nfinally\n{\n    Directory.Move(someFolder, originalFolder);\n}\n\n\nFor individual files I\u0027d stick with the locking suggestion posted by Jeremy Thompson.\n    ",
      "\nHere is some code that as far as I can best tell does the same thing as the accepted answer but with less code:\n\n    public static bool IsFileLocked(string file)\n    {\n        try\n        {\n            using (var stream = File.OpenRead(file))\n                return false;\n        }\n        catch (IOException)\n        {\n            return true;\n        }        \n    }\n\n\nHowever I think it is more robust to do it in the following manner:\n\n    public static void TryToDoWithFileStream(string file, Action\u003CFileStream\u003E action, \n        int count, int msecTimeOut)\n    {\n        FileStream stream = null;\n        for (var i = 0; i \u003C count; \u002B\u002Bi)\n        {\n            try\n            {\n                stream = File.OpenRead(file);\n                break;\n            }\n            catch (IOException)\n            {\n                Thread.Sleep(msecTimeOut);\n            }\n        }\n        action(stream);\n    }\n\n    ",
      "\nYou can use my library for accessing files from multiple apps.\n\nYou can install it from nuget: Install-Package Xabe.FileLock\n\nIf you want more information about it check\nhttps://github.com/tomaszzmuda/Xabe.FileLock\n\nILock fileLock = new FileLock(file);\nif(fileLock.Acquire(TimeSpan.FromSeconds(15), true))\n{\n    using(fileLock)\n    {\n        // file operations here\n    }\n}\n\n\nfileLock.Acquire method will return true only if can lock file exclusive for this object.\nBut app which uploading file must do it in file lock too.\nIf object is inaccessible metod returns false.\n    ",
      "\nI\u0027m interested to see if this triggers any WTF reflexes. I have a process which creates and subsequently launches a PDF document from a console app. However, I was dealing with a frailty where if the user were to run the process multiple times, generating the same file without first closing the previously generated file, the app would throw an exception and die. This was a rather frequent occurrence because file names are based on sales quote numbers.\n\nRather than failing in such an ungraceful manner, I decided to rely on auto-incremented file versioning:\n\nprivate static string WriteFileToDisk(byte[] data, string fileName, int version = 0)\n{\n    try\n    {\n        var versionExtension = version \u003E 0 ? $\u0022_{version:000}\u0022 : string.Empty;\n        var filePath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, $\u0022{fileName}{versionExtension}.pdf\u0022);\n        using (var writer = new FileStream(filePath, FileMode.Create))\n        {\n            writer.Write(data, 0, data.Length);\n        }\n        return filePath;\n    }\n    catch (IOException)\n    {\n        return WriteFileToDisk(data, fileName, \u002B\u002Bversion);\n    }\n}\n\n\nProbably some more care can be given to the catch block to ensure I\u0027m catching the correct IOException(s). I\u0027ll probably also clear out the app storage on startup since these files are intended to be temporary anyways.\n\nI realize this goes beyond the scope of the OP\u0027s question of simply checking if the file is in use but this was indeed the problem I was looking to solve when I arrived here so perhaps it will be useful to someone else.\n    ",
      "\nWould something like this help?\n\nvar fileWasWrittenSuccessfully = false;\nwhile (fileWasWrittenSuccessfully == false)\n{\n    try\n    {\n        lock (new Object())\n        {\n            using (StreamWriter streamWriter = new StreamWriter(filepath.txt\u0022), true))\n            {\n                streamWriter.WriteLine(\u0022text\u0022);\n            }\n        }\n\n        fileWasWrittenSuccessfully = true;\n    }\n    catch (Exception)\n    {\n\n    }\n}\n\n    ",
      "\nretry_possibility:\n//somecode here\n\ntry\n{\n    using(FileStream stream = file.Open(FileMode.Open, FileAccess.Read, FileShare.None))\n    {\n        stream.Close();\n    }\n    //write or open your file here\n}\ncatch (IOException)\n{\n    DialogResult dialogResult = MessageBox.Show(\u0022This file is opened by you or another user. Please close it and press retry.\\n\u0022\u002B expFilePath, \u0022File Locked\u0022, MessageBoxButtons.RetryCancel);\n    if (dialogResult == DialogResult.Retry)\n    {\n        goto retry_possibility;\n    }\n    else if (dialogResult == DialogResult.Cancel)\n    {\n        //do nothing\n    }\n}\n\n    ",
      "\nTry and move/copy the file to a temp dir. If you can, it has no lock and you can safely work in the temp dir without getting locks. Else just try to move it again in x seconds.\n    ",
      "\nI use this workaround, but i have a timespan between when i check the file locking with IsFileLocked function and when i open the file. In this timespan some other thread can open the file, so i will get IOException.\n\nSo, i added extra code for this. In my case i want load XDocument:\n\n        XDocument xDoc = null;\n\n        while (xDoc == null)\n        {\n            while (IsFileBeingUsed(_interactionXMLPath))\n            {\n                Logger.WriteMessage(Logger.LogPrioritet.Warning, \u0022Deserialize can not open XML file. is being used by another process. wait...\u0022);\n                Thread.Sleep(100);\n            }\n            try\n            {\n                xDoc = XDocument.Load(_interactionXMLPath);\n            }\n            catch\n            {\n                Logger.WriteMessage(Logger.LogPrioritet.Error, \u0022Load working!!!!!\u0022);\n            }\n        }\n\n\nWhat do you think? Can i change some thing? Maybe i did not have to use IsFileBeingUsed function at all?\n\nThanks\n    ",
      "\n                \n                This is a great solution, but I have one comment - you may wan\u0027t to open the File with access mode FileAccess.Read since ReadWrite will always fail if the file happens to be read-only.\n                \n\u2013\u00A0adeel825\n                Jan 29 \u002710 at 1:28\n            ",
      "\n                \n                -1. This is a poor answer, because the file could become locked by another thread/process after it is closed in IsFileLocked, and before your thread gets a chance to open it.\n                \n\u2013\u00A0Polyfun\n                May 26 \u002710 at 15:58\n            ",
      "\n                \n                I think this is a great answer. I\u0027m using this as an extension method \u00E1 la public static bool IsLocked(this FileInfo file) {/*...*/}.\n                \n\u2013\u00A0Manuzor\n                Jul 4 \u002712 at 11:06\n            ",
      "\n                \n                @ChrisW: you might be wondering what is going on. Do not be alarmed. You\u0027re just being subject to the wrath of the Daily WTF community: thedailywtf.com/Comments/\u2026\n                \n\u2013\u00A0Pierre Lebeaupin\n                Mar 11 \u002713 at 13:15\n            ",
      "\n                \n                @ChrisW Why is that a bad thing. This community is here to point out good and bad answers. If a bunch of professionals notice this is a bad thing, and join to downvote, then the site is WAI. And before you get negative, if you read that article, they say to \u0022upvote the right answer\u0022 not downvote the wrong one. Do you want them to explain their upvotes in comments as well. Thanks for introducing me to another good site!\n                \n\u2013\u00A0Lee Louviere\n                Mar 11 \u002713 at 15:12\n            ",
      "\n                \n                \u002B1. There is no 100% safe way to \u0022learn if a file is in use\u0022 because milliseconds after you do the check, the file may not be in use anymore, or vice versa. Instead, you just open the file and use it if there are no exceptions.\n                \n\u2013\u00A0Sedat Kapanoglu\n                Jan 4 \u002711 at 7:16\n            ",
      "\n                \n                Too bad .NET doesn\u0027t support CAS.  Something like, TryOpenFile(Ref FileHandle) that returns success/failure.  There should always be a work-around not rely on exception handling alone.  I wonder how Microsoft Office does it.\n                \n\u2013\u00A0TamusJRoyce\n                Jul 31 \u002711 at 22:37\n                        \n                            \n                        \n            ",
      "\n                \n                The key thing to understand here is that this API is simply using the windows API to get a file handle.  As such they need to translate the error code received from the C API and wrap it to an exception to throw.  We have exception handling in .Net so why not use it.  That way you can write a clean forward path in your code and leave the error handling in a separate code path.\n                \n\u2013\u00A0Spence\n                Aug 1 \u002711 at 23:52\n            ",
      "\n                \n                The using statement is to ensure the stream is closed after I\u0027m done.  I think you\u0027ll find that the using() {} is less characters than try {} finally { obj.Dispose() }. You\u0027ll also find that you now need to declare your object reference outside the using statement, which is more typing.  If you have a explicit interface you\u0027d also have to cast. Finally you want to dispose ASAP, and the finally logic may have UI or any other long running actions that have little to do with calling IDispose.  \u003C/rant\u003E\n                \n\u2013\u00A0Spence\n                Nov 27 \u002712 at 20:01\n            ",
      "\n                \n                that doesn\u0027t negate the fact that you have to declare your object outside the try and have to explicitly call dispose, which using does for you and means the same thing.\n                \n\u2013\u00A0Spence\n                Jan 31 \u002713 at 0:27\n            ",
      "\n                \n                I would upvote if there weren\u0027t so many \u0022magic numbers\u0022 in there en.wikipedia.org/wiki/Magic_number_(programming)\n                \n\u2013\u00A0Kris\n                Mar 11 \u002713 at 21:27\n            ",
      "\n                \n                I was referring to the errorCode comparisons, not the bit shifts. though now you mention it...\n                \n\u2013\u00A0Kris\n                Mar 15 \u002713 at 9:35\n            ",
      "\n                \n                Your Catch should be on IOException, instead of on general Exception and then a test on type.\n                \n\u2013\u00A0Askolein\n                Apr 22 \u002713 at 14:31\n            ",
      "\n                \n                @JeremyThompson sadly you put the specific IOException after the general one. The general one will catch everything passing by and the specific IOException will always be lonely. Just swap the two.\n                \n\u2013\u00A0Askolein\n                Jun 18 \u002713 at 13:48\n            ",
      "\n                \n                I like this solution.  One other suggestion: inside the catch as an else to the if(IsFileLocked(ex)) I would throw ex.  This will then handle the case where the file does not exist (or any other IOException) by throwing the exception.\n                \n\u2013\u00A0shindigo\n                Apr 18 \u002714 at 20:33\n            ",
      "\n                \n                Using a FileSystemWatcher does not help, because the Created and Changed events raise at the beginning of a file creation/change. Even small files need more time to be written and closed by the operating system than the .NET application needs to run through the FileSystemEventHandler Callback. This is so sad, but there is no other option than to estimate the wait time before accessing the file or run into exception loops...\n                \n\u2013\u00A0user219337\n                Jul 8 \u002711 at 12:29\n            ",
      "\n                \n                FileSystemWatcher doesn\u0027t handle lots of changes at the same time very well though, so be careful with that.\n                \n\u2013\u00A0Ben F\n                Jun 20 \u002712 at 7:59\n            ",
      "\n                \n                BTW, have you guys noticed while debugging and watching threads that MS calls their own FSW \u0022FileSystemWather\u0022? What\u0027s a wather anyway?\n                \n\u2013\u00A0devlord\n                Apr 22 \u002713 at 0:29\n            ",
      "\n                \n                Precisely I got this problem because a windows service with FileSystemWatcher try to read the file before the process closed it.\n                \n\u2013\u00A0freedeveloper\n                Aug 8 \u002718 at 15:09\n            ",
      "\n                \n                How many seconds until a stack overflow from the recursion in GetStreamAsync()?\n                \n\u2013\u00A0CAD bloke\n                Jul 24 \u002717 at 11:14\n            ",
      "\n                \n                @CADbloke, you have raised a very good point. Indeed my sample might have stack overflow exception, in case if a file is not available for a long time. Related to this answer stackoverflow.com/questions/4513438/\u2026, it might raise the exception in 5 hours.\n                \n\u2013\u00A0Ivan Branets\n                Jul 26 \u002717 at 8:51\n            ",
      "\n                \n                Related to your use cases it is preferable to throw I/O exception if let\u0027s say 10 attempts to read the file have been failed. The other strategy might be increasing waiting time for a second once 10 attempts have been failed. You can also use a mix of both.\n                \n\u2013\u00A0Ivan Branets\n                Jul 26 \u002717 at 8:59\n            ",
      "\n                \n                I would (and do) simply alert the user the file is locked. They generally locked it themselves so they will probably do something about it. Or not.\n                \n\u2013\u00A0CAD bloke\n                Jul 26 \u002717 at 12:25\n            ",
      "\n                \n                In some cases, you need to use retry policy since a file might not be ready yet. Imagine a desktop application to download images in some temporary folder. The application starts downloading and at the same time you open this folder in file explorer. Windows wants to create a thumbnail immediately and lock the file. At the same time, your app tries to replace the locked image to some other place. You will receive an exception if you don\u0027t use retry policy.\n                \n\u2013\u00A0Ivan Branets\n                Jul 31 \u002717 at 13:16\n            ",
      "\n                \n                You can\u0027t use this API without first opening the file, at which point you no longer need to.\n                \n\u2013\u00A0Harry Johnston\n                Sep 7 \u002717 at 21:15\n            ",
      "\n                \n                Schrodinger\u0027s file.\n                \n\u2013\u00A0TheLastGIS\n                Feb 18 at 8:45\n            ",
      "\n                \n                The actual check you perform is fine; putting it inside a function is misleading.  You do NOT want to use a function like this prior to opening a file.  Inside the function, the file is opened, checked, and closed.  Then the programmer ASSUMES the file is STILL ok to use and tries opening it for use.  This is bad because it could be used and locked by another process that was queued up to open this file.  Between the 1st time it was opened (for checking) and the 2nd time it was opened (for use), the OS could have descheduled your process and could be running another process.\n                \n\u2013\u00A0Lakey\n                Mar 25 \u002713 at 19:50\n                        \n                            \n                        \n            ",
      "\n                \n                Still has the same problem as the accepted answer - it only tells you whether the file was locked by another process at one particular moment in time, which is not useful information.  By the time the function has returned the result may already be out of date!\n                \n\u2013\u00A0Harry Johnston\n                Oct 16 \u002715 at 19:57\n            ",
      "\n                \n                that\u0027s true, one can only check at any given moment of time (or subscribe to events), the advantage of this approach over the accepted solution is that it can check for a read only attribute and a write lock and not return a false positive.\n                \n\u2013\u00A0rboy\n                Oct 17 \u002715 at 3:03\n                        \n                            \n                        \n            ",
      "\n                \n                Hi, Since the order of answers changes can you clarify which post above you mean for readers of this popular QA. Thanks.\n                \n\u2013\u00A0Jeremy Thompson\n                Nov 21 \u002714 at 11:02\n                        \n                            \n                        \n            ",
      "\n                \n                @JeremyThompson You\u0027re right, thanks, I\u0027ll edit the post. I\u0027d use the solution from you, mainly because of your correct use of FileShare and checking for a lock.\n                \n\u2013\u00A0atlaste\n                Nov 21 \u002714 at 11:09\n            ",
      "\n                \n                Requires all the processes that are using the file to cooperate.  Unlikely to be applicable to the OPs original problem.\n                \n\u2013\u00A0Harry Johnston\n                Sep 7 \u002717 at 21:17\n            ",
      "\n                \n                @jcolebrand locks what?  the one you copied?  Or the one you put in the temp dir?\n                \n\u2013\u00A0Cullub\n                Aug 7 \u002714 at 17:23\n            ",
      "\n                \n                if you copy the file, expecting nobody else to be working on it, and you\u0027re going to use the temp file, and then someone locks it right after you copy it, then you\u0027ve potentially lost data.\n                \n\u2013\u00A0jcolebrand\n                Aug 7 \u002714 at 21:07\n            ",
      "\n                \n                what is IsFileBeingUsed ? source code about IsFileBeingUsed ?\n                \n\u2013\u00A0Kiquenet\n                Jul 30 \u002713 at 6:01\n            "
    ]
  },
  {
    "Id": "d218ee36-85dc-4f35-92ee-86ef43e34882",
    "QuestionId": 56107,
    "Description": "What is the best way to parse html in C#? [closed]",
    "Votes": 66,
    "Views": 460727,
    "Tags": [
      "c#",
      ".net",
      "html",
      "parsing",
      "html-content-extraction"
    ],
    "Discussions": [
      "\nHtml Agility Pack\n\n\n  This is an agile HTML parser that builds a read/write DOM and supports plain XPATH or XSLT (you actually don\u0027t HAVE to understand XPATH nor XSLT to use it, don\u0027t worry...). It is a .NET code library that allows you to parse \u0022out of the web\u0022 HTML files. The parser is very tolerant with \u0022real world\u0022 malformed HTML. The object model is very similar to what proposes System.Xml, but for HTML documents (or streams).\n\n    ",
      "\nYou could use TidyNet.Tidy to convert the HTML to XHTML, and then use an XML parser.\n\nAnother alternative would be to use the builtin engine mshtml:\n\nusing mshtml;\n...\nobject[] oPageText = { html };\nHTMLDocument doc = new HTMLDocumentClass();\nIHTMLDocument2 doc2 = (IHTMLDocument2)doc;\ndoc2.write(oPageText);\n\n\nThis allows you to use javascript-like functions like getElementById()\n    ",
      "\nI found a project called Fizzler that takes a jQuery/Sizzler approach to selecting HTML elements.  It\u0027s based on HTML Agility Pack.  It\u0027s currently in beta and only supports a subset of CSS selectors, but it\u0027s pretty damn cool and refreshing to use CSS selectors over nasty XPath.\n\nhttp://code.google.com/p/fizzler/\n    ",
      "\nYou can do a lot without going nuts on 3rd-party products and mshtml (i.e. interop).  use the System.Windows.Forms.WebBrowser.  From there, you can do such things as \u0022GetElementById\u0022 on an HtmlDocument or \u0022GetElementsByTagName\u0022 on HtmlElements.  If you want to actually inteface with the browser (simulate button clicks for example), you can use a little reflection (imo a lesser evil than Interop) to do it:\n\nvar wb = new WebBrowser()\n\n\n... tell the browser to navigate (tangential to this question). Then on the Document_Completed event you can simulate clicks like this.\n\nvar doc = wb.Browser.Document\nvar elem = doc.GetElementById(elementId);\nobject obj = elem.DomElement;\nSystem.Reflection.MethodInfo mi = obj.GetType().GetMethod(\u0022click\u0022);\nmi.Invoke(obj, new object[0]);\n\n\nyou can do similar reflection stuff to submit forms, etc.\n\nEnjoy.\n    ",
      "\nI\u0027ve written some code that provides \u0022LINQ to HTML\u0022 functionality.  I thought I would share it here.  It is based on Majestic 12.  It takes the Majestic-12 results and produces LINQ XML elements.  At that point you can use all your LINQ to XML tools against the HTML.  As an example:\n\n        IEnumerable\u003CXNode\u003E auctionNodes = Majestic12ToXml.Majestic12ToXml.ConvertNodesToXml(byteArrayOfAuctionHtml);\n\n        foreach (XElement anchorTag in auctionNodes.OfType\u003CXElement\u003E().DescendantsAndSelf(\u0022a\u0022)) {\n\n            if (anchorTag.Attribute(\u0022href\u0022) == null)\n                continue;\n\n            Console.WriteLine(anchorTag.Attribute(\u0022href\u0022).Value);\n        }\n\n\nI wanted to use Majestic-12 because I know it has a lot of built-in knowledge with regards to HTML that is found in the wild.  What I\u0027ve found though is that to map the Majestic-12 results to something that LINQ will accept as XML requires additional work.  The code I\u0027m including does a lot of this cleansing, but as you use this you will find pages that are rejected.  You\u0027ll need to fix up the code to address that.  When an exception is thrown, check exception.Data[\u0022source\u0022] as it is likely set to the HTML tag that caused the exception.  Handling the HTML in a nice manner is at times not trivial...\n\nSo now that expectations are realistically low, here\u0027s the code :)\n\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing Majestic12;\nusing System.IO;\nusing System.Xml.Linq;\nusing System.Diagnostics;\nusing System.Text.RegularExpressions;\n\nnamespace Majestic12ToXml {\npublic class Majestic12ToXml {\n\n    static public IEnumerable\u003CXNode\u003E ConvertNodesToXml(byte[] htmlAsBytes) {\n\n        HTMLparser parser = OpenParser();\n        parser.Init(htmlAsBytes);\n\n        XElement currentNode = new XElement(\u0022document\u0022);\n\n        HTMLchunk m12chunk = null;\n\n        int xmlnsAttributeIndex = 0;\n        string originalHtml = \u0022\u0022;\n\n        while ((m12chunk = parser.ParseNext()) != null) {\n\n            try {\n\n                Debug.Assert(!m12chunk.bHashMode);  // popular default for Majestic-12 setting\n\n                XNode newNode = null;\n                XElement newNodesParent = null;\n\n                switch (m12chunk.oType) {\n                    case HTMLchunkType.OpenTag:\n\n                        // Tags are added as a child to the current tag, \n                        // except when the new tag implies the closure of \n                        // some number of ancestor tags.\n\n                        newNode = ParseTagNode(m12chunk, originalHtml, ref xmlnsAttributeIndex);\n\n                        if (newNode != null) {\n                            currentNode = FindParentOfNewNode(m12chunk, originalHtml, currentNode);\n\n                            newNodesParent = currentNode;\n\n                            newNodesParent.Add(newNode);\n\n                            currentNode = newNode as XElement;\n                        }\n\n                        break;\n\n                    case HTMLchunkType.CloseTag:\n\n                        if (m12chunk.bEndClosure) {\n\n                            newNode = ParseTagNode(m12chunk, originalHtml, ref xmlnsAttributeIndex);\n\n                            if (newNode != null) {\n                                currentNode = FindParentOfNewNode(m12chunk, originalHtml, currentNode);\n\n                                newNodesParent = currentNode;\n                                newNodesParent.Add(newNode);\n                            }\n                        }\n                        else {\n                            XElement nodeToClose = currentNode;\n\n                            string m12chunkCleanedTag = CleanupTagName(m12chunk.sTag, originalHtml);\n\n                            while (nodeToClose != null \u0026\u0026 nodeToClose.Name.LocalName != m12chunkCleanedTag)\n                                nodeToClose = nodeToClose.Parent;\n\n                            if (nodeToClose != null)\n                                currentNode = nodeToClose.Parent;\n\n                            Debug.Assert(currentNode != null);\n                        }\n\n                        break;\n\n                    case HTMLchunkType.Script:\n\n                        newNode = new XElement(\u0022script\u0022, \u0022REMOVED\u0022);\n                        newNodesParent = currentNode;\n                        newNodesParent.Add(newNode);\n                        break;\n\n                    case HTMLchunkType.Comment:\n\n                        newNodesParent = currentNode;\n\n                        if (m12chunk.sTag == \u0022!--\u0022)\n                            newNode = new XComment(m12chunk.oHTML);\n                        else if (m12chunk.sTag == \u0022![CDATA[\u0022)\n                            newNode = new XCData(m12chunk.oHTML);\n                        else\n                            throw new Exception(\u0022Unrecognized comment sTag\u0022);\n\n                        newNodesParent.Add(newNode);\n\n                        break;\n\n                    case HTMLchunkType.Text:\n\n                        currentNode.Add(m12chunk.oHTML);\n                        break;\n\n                    default:\n                        break;\n                }\n            }\n            catch (Exception e) {\n                var wrappedE = new Exception(\u0022Error using Majestic12.HTMLChunk, reason: \u0022 \u002B e.Message, e);\n\n                // the original html is copied for tracing/debugging purposes\n                originalHtml = new string(htmlAsBytes.Skip(m12chunk.iChunkOffset)\n                    .Take(m12chunk.iChunkLength)\n                    .Select(B =\u003E (char)B).ToArray()); \n\n                wrappedE.Data.Add(\u0022source\u0022, originalHtml);\n\n                throw wrappedE;\n            }\n        }\n\n        while (currentNode.Parent != null)\n            currentNode = currentNode.Parent;\n\n        return currentNode.Nodes();\n    }\n\n    static XElement FindParentOfNewNode(Majestic12.HTMLchunk m12chunk, string originalHtml, XElement nextPotentialParent) {\n\n        string m12chunkCleanedTag = CleanupTagName(m12chunk.sTag, originalHtml);\n\n        XElement discoveredParent = null;\n\n        // Get a list of all ancestors\n        List\u003CXElement\u003E ancestors = new List\u003CXElement\u003E();\n        XElement ancestor = nextPotentialParent;\n        while (ancestor != null) {\n            ancestors.Add(ancestor);\n            ancestor = ancestor.Parent;\n        }\n\n        // Check if the new tag implies a previous tag was closed.\n        if (\u0022form\u0022 == m12chunkCleanedTag) {\n\n            discoveredParent = ancestors\n                .Where(XE =\u003E m12chunkCleanedTag == XE.Name)\n                .Take(1)\n                .Select(XE =\u003E XE.Parent)\n                .FirstOrDefault();\n        }\n        else if (\u0022td\u0022 == m12chunkCleanedTag) {\n\n            discoveredParent = ancestors\n                .TakeWhile(XE =\u003E \u0022tr\u0022 != XE.Name)\n                .Where(XE =\u003E m12chunkCleanedTag == XE.Name)\n                .Take(1)\n                .Select(XE =\u003E XE.Parent)\n                .FirstOrDefault();\n        }\n        else if (\u0022tr\u0022 == m12chunkCleanedTag) {\n\n            discoveredParent = ancestors\n                .TakeWhile(XE =\u003E !(\u0022table\u0022 == XE.Name\n                                    || \u0022thead\u0022 == XE.Name\n                                    || \u0022tbody\u0022 == XE.Name\n                                    || \u0022tfoot\u0022 == XE.Name))\n                .Where(XE =\u003E m12chunkCleanedTag == XE.Name)\n                .Take(1)\n                .Select(XE =\u003E XE.Parent)\n                .FirstOrDefault();\n        }\n        else if (\u0022thead\u0022 == m12chunkCleanedTag\n                  || \u0022tbody\u0022 == m12chunkCleanedTag\n                  || \u0022tfoot\u0022 == m12chunkCleanedTag) {\n\n\n            discoveredParent = ancestors\n                .TakeWhile(XE =\u003E \u0022table\u0022 != XE.Name)\n                .Where(XE =\u003E m12chunkCleanedTag == XE.Name)\n                .Take(1)\n                .Select(XE =\u003E XE.Parent)\n                .FirstOrDefault();\n        }\n\n        return discoveredParent ?? nextPotentialParent;\n    }\n\n    static string CleanupTagName(string originalName, string originalHtml) {\n\n        string tagName = originalName;\n\n        tagName = tagName.TrimStart(new char[] { \u0027?\u0027 });  // for nodes \u003C?xml \u003E\n\n        if (tagName.Contains(\u0027:\u0027))\n            tagName = tagName.Substring(tagName.LastIndexOf(\u0027:\u0027) \u002B 1);\n\n        return tagName;\n    }\n\n    static readonly Regex _startsAsNumeric = new Regex(@\u0022^[0-9]\u0022, RegexOptions.Compiled);\n\n    static bool TryCleanupAttributeName(string originalName, ref int xmlnsIndex, out string result) {\n\n        result = null;\n        string attributeName = originalName;\n\n        if (string.IsNullOrEmpty(originalName))\n            return false;\n\n        if (_startsAsNumeric.IsMatch(originalName))\n            return false;\n\n        //\n        // transform xmlns attributes so they don\u0027t actually create any XML namespaces\n        //\n        if (attributeName.ToLower().Equals(\u0022xmlns\u0022)) {\n\n            attributeName = \u0022xmlns_\u0022 \u002B xmlnsIndex.ToString(); ;\n            xmlnsIndex\u002B\u002B;\n        }\n        else {\n            if (attributeName.ToLower().StartsWith(\u0022xmlns:\u0022)) {\n                attributeName = \u0022xmlns_\u0022 \u002B attributeName.Substring(\u0022xmlns:\u0022.Length);\n            }   \n\n            //\n            // trim trailing \\\u0022\n            //\n            attributeName = attributeName.TrimEnd(new char[] { \u0027\\\u0022\u0027 });\n\n            attributeName = attributeName.Replace(\u0022:\u0022, \u0022_\u0022);\n        }\n\n        result = attributeName;\n\n        return true;\n    }\n\n    static Regex _weirdTag = new Regex(@\u0022^\u003C!\\[.*\\]\u003E$\u0022);       // matches \u0022\u003C![if !supportEmptyParas]\u003E\u0022\n    static Regex _aspnetPrecompiled = new Regex(@\u0022^\u003C%.*%\u003E$\u0022); // matches \u0022\u003C%@ ... %\u003E\u0022\n    static Regex _shortHtmlComment = new Regex(@\u0022^\u003C!-.*-\u003E$\u0022); // matches \u0022\u003C!-Extra_Images-\u003E\u0022\n\n    static XElement ParseTagNode(Majestic12.HTMLchunk m12chunk, string originalHtml, ref int xmlnsIndex) {\n\n        if (string.IsNullOrEmpty(m12chunk.sTag)) {\n\n            if (m12chunk.sParams.Length \u003E 0 \u0026\u0026 m12chunk.sParams[0].ToLower().Equals(\u0022doctype\u0022))\n                return new XElement(\u0022doctype\u0022);\n\n            if (_weirdTag.IsMatch(originalHtml))\n                return new XElement(\u0022REMOVED_weirdBlockParenthesisTag\u0022);\n\n            if (_aspnetPrecompiled.IsMatch(originalHtml))\n                return new XElement(\u0022REMOVED_ASPNET_PrecompiledDirective\u0022);\n\n            if (_shortHtmlComment.IsMatch(originalHtml))\n                return new XElement(\u0022REMOVED_ShortHtmlComment\u0022);\n\n            // Nodes like \u0022\u003Cbr \u003Cbr\u003E\u0022 will end up with a m12chunk.sTag==\u0022\u0022...  We discard these nodes.\n            return null;\n        }\n\n        string tagName = CleanupTagName(m12chunk.sTag, originalHtml);\n\n        XElement result = new XElement(tagName);\n\n        List\u003CXAttribute\u003E attributes = new List\u003CXAttribute\u003E();\n\n        for (int i = 0; i \u003C m12chunk.iParams; i\u002B\u002B) {\n\n            if (m12chunk.sParams[i] == \u0022\u003C!--\u0022) {\n\n                // an HTML comment was embedded within a tag.  This comment and its contents\n                // will be interpreted as attributes by Majestic-12... skip this attributes\n                for (; i \u003C m12chunk.iParams; i\u002B\u002B) {\n\n                    if (m12chunk.sTag == \u0022--\u0022 || m12chunk.sTag == \u0022--\u003E\u0022)\n                        break;\n                }\n\n                continue;\n            }\n\n            if (m12chunk.sParams[i] == \u0022?\u0022 \u0026\u0026 string.IsNullOrEmpty(m12chunk.sValues[i]))\n                continue;\n\n            string attributeName = m12chunk.sParams[i];\n\n            if (!TryCleanupAttributeName(attributeName, ref xmlnsIndex, out attributeName))\n                continue;\n\n            attributes.Add(new XAttribute(attributeName, m12chunk.sValues[i]));\n        }\n\n        // If attributes are duplicated with different values, we complain.\n        // If attributes are duplicated with the same value, we remove all but 1.\n        var duplicatedAttributes = attributes.GroupBy(A =\u003E A.Name).Where(G =\u003E G.Count() \u003E 1);\n\n        foreach (var duplicatedAttribute in duplicatedAttributes) {\n\n            if (duplicatedAttribute.GroupBy(DA =\u003E DA.Value).Count() \u003E 1)\n                throw new Exception(\u0022Attribute value was given different values\u0022);\n\n            attributes.RemoveAll(A =\u003E A.Name == duplicatedAttribute.Key);\n            attributes.Add(duplicatedAttribute.First());\n        }\n\n        result.Add(attributes);\n\n        return result;\n    }\n\n    static HTMLparser OpenParser() {\n        HTMLparser oP = new HTMLparser();\n\n        // The code\u002Bcomments in this function are from the Majestic-12 sample documentation.\n\n        // ...\n\n        // This is optional, but if you want high performance then you may\n        // want to set chunk hash mode to FALSE. This would result in tag params\n        // being added to string arrays in HTMLchunk object called sParams and sValues, with number\n        // of actual params being in iParams. See code below for details.\n        //\n        // When TRUE (and its default) tag params will be added to hashtable HTMLchunk (object).oParams\n        oP.SetChunkHashMode(false);\n\n        // if you set this to true then original parsed HTML for given chunk will be kept - \n        // this will reduce performance somewhat, but may be desireable in some cases where\n        // reconstruction of HTML may be necessary\n        oP.bKeepRawHTML = false;\n\n        // if set to true (it is false by default), then entities will be decoded: this is essential\n        // if you want to get strings that contain final representation of the data in HTML, however\n        // you should be aware that if you want to use such strings into output HTML string then you will\n        // need to do Entity encoding or same string may fail later\n        oP.bDecodeEntities = true;\n\n        // we have option to keep most entities as is - only replace stuff like \u0026nbsp; \n        // this is called Mini Entities mode - it is handy when HTML will need\n        // to be re-created after it was parsed, though in this case really\n        // entities should not be parsed at all\n        oP.bDecodeMiniEntities = true;\n\n        if (!oP.bDecodeEntities \u0026\u0026 oP.bDecodeMiniEntities)\n            oP.InitMiniEntities();\n\n        // if set to true, then in case of Comments and SCRIPT tags the data set to oHTML will be\n        // extracted BETWEEN those tags, rather than include complete RAW HTML that includes tags too\n        // this only works if auto extraction is enabled\n        oP.bAutoExtractBetweenTagsOnly = true;\n\n        // if true then comments will be extracted automatically\n        oP.bAutoKeepComments = true;\n\n        // if true then scripts will be extracted automatically: \n        oP.bAutoKeepScripts = true;\n\n        // if this option is true then whitespace before start of tag will be compressed to single\n        // space character in string: \u0022 \u0022, if false then full whitespace before tag will be returned (slower)\n        // you may only want to set it to false if you want exact whitespace between tags, otherwise it is just\n        // a waste of CPU cycles\n        oP.bCompressWhiteSpaceBeforeTag = true;\n\n        // if true (default) then tags with attributes marked as CLOSED (/ at the end) will be automatically\n        // forced to be considered as open tags - this is no good for XML parsing, but I keep it for backwards\n        // compatibility for my stuff as it makes it easier to avoid checking for same tag which is both closed\n        // or open\n        oP.bAutoMarkClosedTagsWithParamsAsOpen = false;\n\n        return oP;\n    }\n}\n}  \n\n    ",
      "\nThe Html Agility Pack has been mentioned before - if you are going for speed, you might also want to check out the Majestic-12 HTML parser. Its handling is rather clunky, but it delivers a really fast parsing experience.\n    ",
      "\nI think @Erlend\u0027s use of HTMLDocument is the best way to go. However, I have also had good luck using this simple library:\n\nSgmlReader\n    ",
      "\nNo 3rd party lib, WebBrowser class solution that can run on Console, and Asp.net\n\nusing System;\nusing System.Collections.Generic;\nusing System.Text;\nusing System.Windows.Forms;\nusing System.Threading;\n\nclass ParseHTML\n{\n    public ParseHTML() { }\n    private string ReturnString;\n\n    public string doParsing(string html)\n    {\n        Thread t = new Thread(TParseMain);\n        t.ApartmentState = ApartmentState.STA;\n        t.Start((object)html);\n        t.Join();\n        return ReturnString;\n    }\n\n    private void TParseMain(object html)\n    {\n        WebBrowser wbc = new WebBrowser();\n        wbc.DocumentText = \u0022feces of a dummy\u0022;        //;magic words        \n        HtmlDocument doc = wbc.Document.OpenNew(true);\n        doc.Write((string)html);\n        this.ReturnString = doc.Body.InnerHtml \u002B \u0022 do here something\u0022;\n        return;\n    }\n}\n\n\nusage:\n\nstring myhtml = \u0022\u003CHTML\u003E\u003CBODY\u003EThis is a new HTML document.\u003C/BODY\u003E\u003C/HTML\u003E\u0022;\nConsole.WriteLine(\u0022before:\u0022 \u002B myhtml);\nmyhtml = (new ParseHTML()).doParsing(myhtml);\nConsole.WriteLine(\u0022after:\u0022 \u002B myhtml);\n\n    ",
      "\nThe trouble with parsing HTML is that it isn\u0027t an exact science. If it was XHTML that you were parsing, then things would be a lot easier (as you mention you could use a general XML parser). Because HTML isn\u0027t necessarily well-formed XML you will come into lots of problems trying to parse it. It almost needs to be done on a site-by-site basis.\n    ",
      "\nI\u0027ve used ZetaHtmlTidy in the past to load random websites and then hit against various parts of the content with xpath (eg /html/body//p[@class=\u0027textblock\u0027]). It worked well but there were some exceptional sites that it had problems with, so I don\u0027t know if it\u0027s the absolute best solution.\n    ",
      "\nYou could use a HTML DTD, and the generic XML parsing libraries.\n    ",
      "\nUse WatiN if you need to see the impact of JS on the page [and you\u0027re prepared to start a browser]\n    ",
      "\nDepending on your needs you might  go for the more feature-rich libraries. I tried most/all of the solutions suggested, but what stood out head \u0026 shoulders was Html Agility Pack. It is a very forgiving and flexible parser.\n    ",
      "\nTry this script.\n\nhttp://www.biterscripting.com/SS_URLs.html\n\nWhen I use it with this url,\n\nscript SS_URLs.txt URL(\u0022http://stackoverflow.com/questions/56107/what-is-the-best-way-to-parse-html-in-c\u0022)\n\n\nIt shows me all the links on the page for this thread.\n\nhttp://sstatic.net/so/all.css\nhttp://sstatic.net/so/favicon.ico\nhttp://sstatic.net/so/apple-touch-icon.png\n.\n.\n.\n\n\nYou can modify that script to check for images, variables, whatever.\n    ",
      "\nI wrote some classes for parsing HTML tags in C#. They are nice and simple if they meet your particular needs.\n\nYou can read an article about them and download the source code at http://www.blackbeltcoder.com/Articles/strings/parsing-html-tags-in-c.\n\nThere\u0027s also an article about a generic parsing helper class at http://www.blackbeltcoder.com/Articles/strings/a-text-parsing-helper-class.\n    ",
      "\n                \n                It\u0027s worth noting that it doesn\u0027t deal well with self-closing tags like \u003Cp\u003E (which it interprets as empty) and really badly with optional end-tags like \u003Cli\u003E (which it interprets as missing an end tag, and so nests consecutive li tags).\n                \n\u2013\u00A0Eamon Nerbonne\n                May 14 \u002711 at 16:48\n            ",
      "\n                \n                Call me crazy, but I am having trouble figuring out how to use mshtml.  Do you have any good links?\n                \n\u2013\u00A0Alex Baranosky\n                Jan 9 \u002709 at 5:52\n            ",
      "\n                \n                @Alex you need to include Microsoft.mshtml can find a bit more info here: msdn.microsoft.com/en-us/library/aa290341(VS.71).aspx\n                \n\u2013\u00A0Wilfred Knievel\n                Jan 12 \u002710 at 23:17\n            ",
      "\n                \n                I have a blogpost about Tidy.Net and ManagedTidy both are capable of parsing and validating (x)html files. If you do not need to validate stuff. I\u0027d go with the htmlagilitypack. jphellemons.nl/post/\u2026\n                \n\u2013\u00A0JP Hellemons\n                Oct 25 \u002711 at 7:03\n            ",
      "\n                \n                thank you, this looks interesting!  i\u0027ve been surprised, what with jQuery\u0027s popularity, that it has been so hard to find a C# project inspired by it.  Now if only I could find something where document manipulation and more advanced traversal was also part of the package... :)\n                \n\u2013\u00A0Funka\n                May 14 \u002710 at 1:33\n            ",
      "\n                \n                I just used this today and I have to say, it is very easy to use if you know jQuery.\n                \n\u2013\u00A0Chi Chan\n                Oct 14 \u002710 at 20:56\n            ",
      "\n                \n                btw HtmlAgilityPack has worked well for me in the past, I just prefer LINQ.\n                \n\u2013\u00A0Frank Schwieterman\n                Mar 8 \u002709 at 22:21\n            ",
      "\n                \n                What\u0027s the performance like when you add the LINQ conversion? Any idea how it compares with HtmlAgilityPack?\n                \n\u2013\u00A0user29439\n                Aug 3 \u002711 at 22:42\n            ",
      "\n                \n                I never did a performance comparison.  These days I use HtmlAgilityPack, much less hassle.  Unfortunately the code above has lots of special cases I didn\u0027t bother to write tests for, so I can\u0027t really maintain it.\n                \n\u2013\u00A0Frank Schwieterman\n                Aug 4 \u002711 at 0:40\n            ",
      "\n                \n                Isn\u0027t parsing well forming HTML as specified by the W3C as an exact science as XHTML?\n                \n\u2013\u00A0pupeno\n                Dec 8 \u002709 at 12:56\n            ",
      "\n                \n                It should be, but people don\u0027t do it.\n                \n\u2013\u00A0Dominic K\n                Feb 16 \u002710 at 3:54\n            ",
      "\n                \n                @J. Pablo Not nearly as easy though (and hence the reason for a library :p)... for instance, \u003Cp\u003E tags do not need to be explicitly closed under HTML4/5. Yikes!\n                \n\u2013\u00A0user166390\n                Dec 22 \u002710 at 4:13\n                        \n                            \n                        \n            ",
      "\n                \n                Very few real-world HTML pages will survive an XML parsing library.\n                \n\u2013\u00A0Frank Krueger\n                Sep 11 \u002708 at 11:07\n            "
    ]
  }
]