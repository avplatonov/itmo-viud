[{"Id":"f03b3e71-3dae-4a7b-bf90-dc21d91eb72b","QuestionId":4660142,"Description":"What is a NullReferenceException, and how do I fix it?","Votes":1874,"Views":1470261,"Tags":["c#",".net","vb.net","null","nullreferenceexception"],"Discussions":["\nWhat is the cause?\nBottom Line\nYou are trying to use something that is null (or Nothing in VB.NET). This means you either set it to null, or you never set it to anything at all.\nLike anything else, null gets passed around. If it is null in method \u0022A\u0022, it could be that method \u0022B\u0022 passed a null to method \u0022A\u0022.\nnull can have different meanings:\n\nObject variables which are uninitialized and hence point to nothing. In this case, if you access properties or methods of such objects, it causes a NullReferenceException.\nThe developer is using null intentionally to indicate there is no meaningful value available. Note that C# has the concept of nullable datatypes for variables (like database tables can have nullable fields) - you can assign null to them to indicate there is no value stored in it, for example int? a = null; where the question mark indicates it is allowed to store null in variable a. You can check that either with if (a.HasValue) {...} or with if (a==null) {...}. Nullable variables, like a this example, allow to access the value via a.Value explicitly, or just as normal via a. Note that accessing it via a.Value throws an InvalidOperationException instead of a NullReferenceException if a is null - you should do the check beforehand, i.e. if you have another on-nullable variable int b; then you should do assignments like if (a.HasValue) { b = a.Value; } or shorter if (a != null) { b = a; }.\n\nThe rest of this article goes into more detail and shows mistakes that many programmers often make which can lead to a NullReferenceException.\nMore Specifically\nThe runtime throwing a NullReferenceException always means the same thing: you are trying to use a reference, and the reference is not initialized (or it was once initialized, but is no longer initialized).\nThis means the reference is null, and you cannot access members (such as methods) through a null reference. The simplest case:\nstring foo = null;\nfoo.ToUpper();\n\nThis will throw a NullReferenceException at the second line because you can\u0027t call the instance method ToUpper() on a string reference pointing to null.\nDebugging\nHow do you find the source of a NullReferenceException? Apart from looking at the exception itself, which will be thrown exactly at the location where it occurs, the general rules of debugging in Visual Studio apply: place strategic breakpoints and inspect your variables, either by hovering the mouse over their names, opening a (Quick)Watch window or using the various debugging panels like Locals and Autos.\nIf you want to find out where the reference is or isn\u0027t set, right-click its name and select \u0022Find All References\u0022. You can then place a breakpoint at every found location and run your program with the debugger attached. Every time the debugger breaks on such a breakpoint, you need to determine whether you expect the reference to be non-null, inspect the variable, and verify that it points to an instance when you expect it to.\nBy following the program flow this way, you can find the location where the instance should not be null, and why it isn\u0027t properly set.\nExamples\nSome common scenarios where the exception can be thrown:\nGeneric\nref1.ref2.ref3.member\n\nIf ref1 or ref2 or ref3 is null, then you\u0027ll get a NullReferenceException. If you want to solve the problem, then find out which one is null by rewriting the expression to its simpler equivalent:\nvar r1 = ref1;\nvar r2 = r1.ref2;\nvar r3 = r2.ref3;\nr3.member\n\nSpecifically, in HttpContext.Current.User.Identity.Name, the HttpContext.Current could be null, or the User property could be null, or the Identity property could be null.\nIndirect\npublic class Person \n{\n    public int Age { get; set; }\n}\npublic class Book \n{\n    public Person Author { get; set; }\n}\npublic class Example \n{\n    public void Foo() \n    {\n        Book b1 = new Book();\n        int authorAge = b1.Author.Age; // You never initialized the Author property.\n                                       // there is no Person to get an Age from.\n    }\n}\n\nIf you want to avoid the child (Person) null reference, you could initialize it in the parent (Book) object\u0027s constructor.\nNested Object Initializers\nThe same applies to nested object initializers:\nBook b1 = new Book \n{ \n   Author = { Age = 45 } \n};\n\nThis translates to:\nBook b1 = new Book();\nb1.Author.Age = 45;\n\nWhile the new keyword is used, it only creates a new instance of Book, but not a new instance of Person, so the Author the property is still null.\nNested Collection Initializers\npublic class Person \n{\n    public ICollection\u003CBook\u003E Books { get; set; }\n}\npublic class Book \n{\n    public string Title { get; set; }\n}\n\nThe nested collection Initializers behave the same:\nPerson p1 = new Person \n{\n    Books = {\n         new Book { Title = \u0022Title1\u0022 },\n         new Book { Title = \u0022Title2\u0022 },\n    }\n};\n\nThis translates to:\nPerson p1 = new Person();\np1.Books.Add(new Book { Title = \u0022Title1\u0022 });\np1.Books.Add(new Book { Title = \u0022Title2\u0022 });\n\nThe new Person only creates an instance of Person, but the Books collection is still null. The collection Initializer syntax does not create a collection\nfor p1.Books, it only translates to the p1.Books.Add(...) statements.\nArray\nint[] numbers = null;\nint n = numbers[0]; // numbers is null. There is no array to index.\n\nArray Elements\nPerson[] people = new Person[5];\npeople[0].Age = 20 // people[0] is null. The array was allocated but not\n                   // initialized. There is no Person to set the Age for.\n\nJagged Arrays\nlong[][] array = new long[1][];\narray[0][0] = 3; // is null because only the first dimension is yet initialized.\n                 // Use array[0] = new long[2]; first.\n\nCollection/List/Dictionary\nDictionary\u003Cstring, int\u003E agesForNames = null;\nint age = agesForNames[\u0022Bob\u0022]; // agesForNames is null.\n                               // There is no Dictionary to perform the lookup.\n\nRange Variable (Indirect/Deferred)\npublic class Person \n{\n    public string Name { get; set; }\n}\nvar people = new List\u003CPerson\u003E();\npeople.Add(null);\nvar names = from p in people select p.Name;\nstring firstName = names.First(); // Exception is thrown here, but actually occurs\n                                  // on the line above.  \u0022p\u0022 is null because the\n                                  // first element we added to the list is null.\n\nEvents (C#)\npublic class Demo\n{\n    public event EventHandler StateChanged;\n    \n    protected virtual void OnStateChanged(EventArgs e)\n    {        \n        StateChanged(this, e); // Exception is thrown here \n                               // if no event handlers have been attached\n                               // to StateChanged event\n    }\n}\n\n(Note: The VB.NET compiler inserts null checks for event usage, so it\u0027s not necessary to check events for Nothing in VB.NET.)\nBad Naming Conventions:\nIf you named fields differently from locals, you might have realized that you never initialized the field.\npublic class Form1\n{\n    private Customer customer;\n    \n    private void Form1_Load(object sender, EventArgs e) \n    {\n        Customer customer = new Customer();\n        customer.Name = \u0022John\u0022;\n    }\n    \n    private void Button_Click(object sender, EventArgs e)\n    {\n        MessageBox.Show(customer.Name);\n    }\n}\n\nThis can be solved by following the convention to prefix fields with an underscore:\n    private Customer _customer;\n\nASP.NET Page Life cycle:\npublic partial class Issues_Edit : System.Web.UI.Page\n{\n    protected TestIssue myIssue;\n\n    protected void Page_Load(object sender, EventArgs e)\n    {\n        if (!IsPostBack)\n        {\n             // Only called on first load, not when button clicked\n             myIssue = new TestIssue(); \n        }\n    }\n        \n    protected void SaveButton_Click(object sender, EventArgs e)\n    {\n        myIssue.Entry = \u0022NullReferenceException here!\u0022;\n    }\n}\n\nASP.NET Session Values\n// if the \u0022FirstName\u0022 session value has not yet been set,\n// then this line will throw a NullReferenceException\nstring firstName = Session[\u0022FirstName\u0022].ToString();\n\nASP.NET MVC empty view models\nIf the exception occurs when referencing a property of @Model in an ASP.NET MVC View, you need to understand that the Model gets set in your action method, when you return a view. When you return an empty model (or model property) from your controller, the exception occurs when the views access it:\n// Controller\npublic class Restaurant:Controller\n{\n    public ActionResult Search()\n    {\n        return View();  // Forgot the provide a Model here.\n    }\n}\n\n// Razor view \n@foreach (var restaurantSearch in Model.RestaurantSearch)  // Throws.\n{\n}\n    \n\u003Cp\u003E@Model.somePropertyName\u003C/p\u003E \u003C!-- Also throws --\u003E\n\nWPF Control Creation Order and Events\nWPF controls are created during the call to InitializeComponent in the order they appear in the visual tree.  A NullReferenceException will be raised in the case of early-created controls with event handlers, etc. , that fire during InitializeComponent which reference late-created controls.\nFor example:\n\u003CGrid\u003E\n    \u003C!-- Combobox declared first --\u003E\n    \u003CComboBox Name=\u0022comboBox1\u0022 \n              Margin=\u002210\u0022\n              SelectedIndex=\u00220\u0022 \n              SelectionChanged=\u0022comboBox1_SelectionChanged\u0022\u003E\n       \u003CComboBoxItem Content=\u0022Item 1\u0022 /\u003E\n       \u003CComboBoxItem Content=\u0022Item 2\u0022 /\u003E\n       \u003CComboBoxItem Content=\u0022Item 3\u0022 /\u003E\n    \u003C/ComboBox\u003E\n        \n    \u003C!-- Label declared later --\u003E\n    \u003CLabel Name=\u0022label1\u0022 \n           Content=\u0022Label\u0022\n           Margin=\u002210\u0022 /\u003E\n\u003C/Grid\u003E\n\nHere comboBox1 is created before label1. If comboBox1_SelectionChanged attempts to reference \u0060label1, it will not yet have been created.\nprivate void comboBox1_SelectionChanged(object sender, SelectionChangedEventArgs e)\n{\n    label1.Content = comboBox1.SelectedIndex.ToString(); // NullReference here!!\n}\n\nChanging the order of the declarations in the XAML (i.e., listing label1 before comboBox1, ignoring issues of design philosophy, would at least resolve the NullReferenceException here.\nCast with as\nvar myThing = someObject as Thing;\n\nThis doesn\u0027t throw an InvalidCastException but returns a null when the cast fails (and when someObject is itself null). So be aware of that.\nLINQ FirstOrDefault() and SingleOrDefault()\nThe plain versions First() and Single() throw exceptions when there is nothing. The \u0022OrDefault\u0022 versions return null in that case. So be aware of that.\nforeach\nforeach throws when you try to iterate null collection. Usually caused by unexpected null result from methods that return collections.\nList\u003Cint\u003E list = null;    \nforeach(var v in list) { } // exception\n\nMore realistic example - select nodes from XML document. Will throw if nodes are not found but initial debugging shows that all properties valid:\nforeach (var node in myData.MyXml.DocumentNode.SelectNodes(\u0022//Data\u0022))\n\n\nWays to Avoid\nExplicitly check for null and ignore null values.\nIf you expect the reference sometimes to be null, you can check for it being null before accessing instance members:\nvoid PrintName(Person p)\n{\n    if (p != null) \n    {\n        Console.WriteLine(p.Name);\n    }\n}\n\nExplicitly check for null and provide a default value.\nMethods call you expect to return an instance can return null, for example when the object being sought cannot be found. You can choose to return a default value when this is the case:\nstring GetCategory(Book b) \n{\n    if (b == null)\n        return \u0022Unknown\u0022;\n    return b.Category;\n}\n\nExplicitly check for null from method calls and throw a custom exception.\nYou can also throw a custom exception, only to catch it in the calling code:\nstring GetCategory(string bookTitle) \n{\n    var book = library.FindBook(bookTitle);  // This may return null\n    if (book == null)\n        throw new BookNotFoundException(bookTitle);  // Your custom exception\n    return book.Category;\n}\n\nUse Debug.Assert if a value should never be null, to catch the problem earlier than the exception occurs.\nWhen you know during development that a method maybe can, but never should return null, you can use Debug.Assert() to break as soon as possible when it does occur:\nstring GetTitle(int knownBookID) \n{\n    // You know this should never return null.\n    var book = library.GetBook(knownBookID);  \n\n    // Exception will occur on the next line instead of at the end of this method.\n    Debug.Assert(book != null, \u0022Library didn\u0027t return a book for known book ID.\u0022);\n\n    // Some other code\n\n    return book.Title; // Will never throw NullReferenceException in Debug mode.\n}\n\nThough this check will not end up in your release build, causing it to throw the NullReferenceException again when book == null at runtime in release mode.\nUse GetValueOrDefault() for nullable value types to provide a default value when they are null.\nDateTime? appointment = null;\nConsole.WriteLine(appointment.GetValueOrDefault(DateTime.Now));\n// Will display the default value provided (DateTime.Now), because appointment is null.\n\nappointment = new DateTime(2022, 10, 20);\nConsole.WriteLine(appointment.GetValueOrDefault(DateTime.Now));\n// Will display the appointment date, not the default\n\nUse the null coalescing operator: ?? [C#] or If() [VB].\nThe shorthand to providing a default value when a null is encountered:\nIService CreateService(ILogger log, Int32? frobPowerLevel)\n{\n   var serviceImpl = new MyService(log ?? NullLog.Instance);\n \n   // Note that the above \u0022GetValueOrDefault()\u0022 can also be rewritten to use\n   // the coalesce operator:\n   serviceImpl.FrobPowerLevel = frobPowerLevel ?? 5;\n}\n\nUse the null condition operator: ?. or ?[x] for arrays (available in C# 6 and VB.NET 14):\nThis is also sometimes called the safe navigation or Elvis (after its shape) operator. If the expression on the left side of the operator is null, then the right side will not be evaluated, and null is returned instead. That means cases like this:\nvar title = person.Title.ToUpper();\n\nIf the person does not have a title, this will throw an exception because it is trying to call ToUpper on a property with a null value.\nIn C# 5 and below, this can be guarded with:\nvar title = person.Title == null ? null : person.Title.ToUpper();\n\nNow the title variable will be null instead of throwing an exception. C# 6 introduces a shorter syntax for this:\nvar title = person.Title?.ToUpper();\n\nThis will result in the title variable being null, and the call to ToUpper is not made if person.Title is null.\nOf course, you still have to check title for null or use the null condition operator together with the null coalescing operator (??) to supply a default value:\n// regular null check\nint titleLength = 0;\nif (title != null)\n    titleLength = title.Length; // If title is null, this would throw NullReferenceException\n    \n// combining the \u0060?\u0060 and the \u0060??\u0060 operator\nint titleLength = title?.Length ?? 0;\n\nLikewise, for arrays you can use ?[i] as follows:\nint[] myIntArray = null;\nvar i = 5;\nint? elem = myIntArray?[i];\nif (!elem.HasValue) Console.WriteLine(\u0022No value\u0022);\n\nThis will do the following: If myIntArray is null, the expression returns null and you can safely check it. If it contains an array, it will do the same as:\nelem = myIntArray[i]; and returns the i\u003Csup\u003Eth\u003C/sup\u003E element.\nUse null context (available in C# 8):\nIntroduced in C# 8 there null context\u0027s and nullable reference types perform static analysis on variables and provides a compiler warning if a value can be potentially null or have been set to null. The nullable reference types allows types to be explicitly allowed to be null.\nThe nullable annotation context and nullable warning context can be set for a project using the Nullable element in your csproj file. This element configures how the compiler interprets the nullability of types and what warnings are generated. Valid settings are:\n\nenable: The nullable annotation context is enabled. The nullable warning context is enabled. Variables of a reference type, string for example, are non-nullable. All nullability warnings are enabled.\ndisable: The nullable annotation context is disabled. The nullable warning context is disabled. Variables of a reference type are oblivious, just like earlier versions of C#. All nullability warnings are disabled.\nsafeonly: The nullable annotation context is enabled. The nullable warning context is safeonly. Variables of a reference type are nonnullable. All safety nullability warnings are enabled.\nwarnings: The nullable annotation context is disabled. The nullable warning context is enabled. Variables of a reference type are oblivious. All nullability warnings are enabled.\nsafeonlywarnings: The nullable annotation context is disabled. The nullable warning context is safeonly.\nVariables of a reference type are oblivious. All safety nullability warnings are enabled.\n\nA nullable reference type is noted using the same syntax as nullable value types: a ? is appended to the type of the variable.\nSpecial techniques for debugging and fixing null derefs in iterators\nC# supports \u0022iterator blocks\u0022 (called \u0022generators\u0022 in some other popular languages).  Null dereference exceptions can be particularly tricky to debug in iterator blocks because of deferred execution:\npublic IEnumerable\u003CFrob\u003E GetFrobs(FrobFactory f, int count)\n{\n    for (int i = 0; i \u003C count; \u002B\u002Bi)\n    yield return f.MakeFrob();\n}\n...\nFrobFactory factory = whatever;\nIEnumerable\u003CFrobs\u003E frobs = GetFrobs();\n...\nforeach(Frob frob in frobs) { ... }\n\nIf whatever results in null then MakeFrob will throw.  Now, you might think that the right thing to do is this:\n// DON\u0027T DO THIS\npublic IEnumerable\u003CFrob\u003E GetFrobs(FrobFactory f, int count)\n{\n   if (f == null) \n      throw new ArgumentNullException(\u0022f\u0022, \u0022factory must not be null\u0022);\n   for (int i = 0; i \u003C count; \u002B\u002Bi)\n      yield return f.MakeFrob();\n}\n\nWhy is this wrong?  Because the iterator block does not actually run until the foreach!  The call to GetFrobs simply returns an object which when iterated will run the iterator block.\nBy writing a null check like this you prevent the null dereference, but you move the null argument exception to the point of the iteration, not to the point of the call, and that is very confusing to debug.\nThe correct fix is:\n// DO THIS\npublic IEnumerable\u003CFrob\u003E GetFrobs(FrobFactory f, int count)\n{\n   // No yields in a public method that throws!\n   if (f == null) \n       throw new ArgumentNullException(\u0022f\u0022, \u0022factory must not be null\u0022);\n   return GetFrobsForReal(f, count);\n}\nprivate IEnumerable\u003CFrob\u003E GetFrobsForReal(FrobFactory f, int count)\n{\n   // Yields in a private method\n   Debug.Assert(f != null);\n   for (int i = 0; i \u003C count; \u002B\u002Bi)\n        yield return f.MakeFrob();\n}\n\nThat is, make a private helper method that has the iterator block logic, and a public surface method that does the null check and returns the iterator.  Now when GetFrobs is called, the null check happens immediately, and then GetFrobsForReal executes when the sequence is iterated.\nIf you examine the reference source for LINQ to Objects you will see that this technique is used throughout. It is slightly more clunky to write, but it makes debugging nullity errors much easier.  Optimize your code for the convenience of the caller, not the convenience of the author.\nA note on null dereferences in unsafe code\nC# has an \u0022unsafe\u0022 mode which is, as the name implies, extremely dangerous because the normal safety mechanisms which provide memory safety and type safety are not enforced. You should not be writing unsafe code unless you have a thorough and deep understanding of how memory works.\nIn unsafe mode, you should be aware of two important facts:\n\ndereferencing a null pointer produces the same exception as dereferencing a null reference\ndereferencing an invalid non-null pointer can produce that exception in some circumstances\n\nTo understand why that is, it helps to understand how .NET produces null dereference exceptions in the first place. (These details apply to .NET running on Windows; other operating systems use similar mechanisms.)\nMemory is virtualized in Windows; each process gets a virtual memory space of many \u0022pages\u0022 of memory that are tracked by the operating system. Each page of memory has flags set on it which determine how it may be used: read from, written to, executed, and so on.  The lowest page is marked as \u0022produce an error if ever used in any way\u0022.\nBoth a null pointer and a null reference in C# are internally represented as the number zero, and so any attempt to dereference it into its corresponding memory storage causes the operating system to produce an error. The .NET runtime then detects this error and turns it into the null dereference exception.\nThat\u0027s why dereferencing both a null pointer and a null reference produces the same exception.\nWhat about the second point? Dereferencing any invalid pointer that falls in the lowest page of virtual memory causes the same operating system error, and thereby the same exception.\nWhy does this make sense?  Well, suppose we have a struct containing two ints, and an unmanaged pointer equal to null. If we attempt to dereference the second int in the struct, the CLR will not attempt to access the storage at location zero; it will access the storage at location four. But logically this is a null dereference because we are getting to that address via the null.\nIf you are working with unsafe code and you get a null dereference exception, just be aware that the offending pointer need not be null. It can be any location in the lowest page, and this exception will be produced.\n    ","\nNullReference Exception \u2014 Visual Basic\nThe NullReference Exception for Visual Basic is no different from the one in C#. After all, they are both reporting the same exception defined in the .NET Framework which they both use. Causes unique to Visual Basic are rare (perhaps only one).\nThis answer will use Visual Basic terms, syntax, and context. The examples used come from a large number of past Stack\u00A0 Overflow questions. This is to maximize relevance by using the kinds of situations often seen in posts. A bit more explanation is also provided for those who might need it. An example similar to yours is very likely listed here.\nNote:\n\nThis is concept-based: there is no code for you to paste into your project. It is intended to help you understand what causes a NullReferenceException (NRE), how to find it, how to fix it, and how to avoid it. An NRE can be caused many ways so this is unlikely to be your sole encounter.\nThe examples (from Stack\u00A0 Overflow posts) do not always show the best way to do something in the first place.\nTypically, the simplest remedy is used.\n\nBasic Meaning\nThe message \u0022Object not set to an instance of Object\u0022 means you are trying to use an object which has not been initialized. This boils down to one of these:\n\nYour code declared an object variable, but it did not initialize it (create an instance or \u0027instantiate\u0027 it)\nSomething which your code assumed would initialize an object, did not\nPossibly, other code prematurely invalidated an object still in use\n\nFinding The Cause\nSince the problem is an object reference which is Nothing, the answer is to examine them to find out which one. Then determine why it is not initialized. Hold the mouse over the various variables and Visual Studio (VS) will show their values - the culprit will be Nothing.\n\nYou should also remove any Try/Catch blocks from the relevant code, especially ones where there is nothing in the Catch block. This will cause your code to crash when it tries to use an object which is Nothing. This is what you want because it will identify the exact location of the problem, and allow you to identify the object causing it.\nA MsgBox in the Catch which displays Error while... will be of little help. This method also leads to very bad Stack\u00A0 Overflow questions, because you can\u0027t describe the actual exception, the object involved or even the line of code where it happens.\nYou can also use the Locals Window (Debug -\u003E Windows -\u003E Locals) to examine your objects.\nOnce you know what and where the problem is, it is usually fairly easy to fix and faster than posting a new question.\nSee also:\n\nBreakpoints\nMSDN: How to: Use the Try/Catch Block to Catch Exceptions\nMSDN: Best Practices for Exceptions\n\nExamples and Remedies\nClass Objects / Creating an Instance\n\nDim reg As CashRegister\n...\nTextBox1.Text = reg.Amount         \u0027 NRE\n\nThe problem is that Dim does not create a CashRegister object; it only declares a variable named reg of that Type. Declaring an object variable and creating an instance are two different things.\nRemedy\nThe New operator can often be used to create the instance when you declare it:\nDim reg As New CashRegister        \u0027 [New] creates instance, invokes the constructor\n\n\u0027 Longer, more explicit form:\nDim reg As CashRegister = New CashRegister\n\nWhen it is only appropriate to create the instance later:\nPrivate reg As CashRegister         \u0027 Declare\n  ...\nreg = New CashRegister()            \u0027 Create instance\n\nNote: Do not use Dim again in a procedure, including the constructor (Sub New):\nPrivate reg As CashRegister\n\u0027...\n\nPublic Sub New()\n   \u0027...\n   Dim reg As New CashRegister\nEnd Sub\n\nThis will create a local variable, reg, which exists only in that context (sub). The reg variable with module level Scope which you will use everywhere else remains Nothing.\n\nMissing the New operator is the #1 cause of NullReference Exceptions seen in the Stack\u00A0 Overflow questions reviewed.\nVisual Basic tries to make the process clear repeatedly using New: Using the New Operator creates a new object and calls Sub New -- the constructor -- where your object can perform any other initialization.\n\nTo be clear, Dim (or Private) only declares a variable and its Type.   The Scope of the variable - whether it exists for the entire module/class or is local to a procedure - is determined by where it is declared. Private | Friend | Public defines the access level, not Scope.\nFor more information, see:\n\nNew Operator\nScope in Visual Basic\nAccess Levels in Visual Basic\nValue Types and Reference Types\n\n\nArrays\nArrays must also be instantiated:\nPrivate arr as String()\n\nThis array has only been declared, not created. There are several ways to initialize an array:\nPrivate arr as String() = New String(10){}\n\u0027 or\nPrivate arr() As String = New String(10){}\n\n\u0027 For a local array (in a procedure) and using \u0027Option Infer\u0027:\nDim arr = New String(10) {}\n\nNote: Beginning with VS 2010, when initializing a local array using a literal and Option Infer, the As \u003CType\u003E and New elements are optional:\nDim myDbl As Double() = {1.5, 2, 9.9, 18, 3.14}\nDim myDbl = New Double() {1.5, 2, 9.9, 18, 3.14}\nDim myDbl() = {1.5, 2, 9.9, 18, 3.14}\n\nThe data Type and array size are inferred from the data being assigned. Class/Module level declarations still require As \u003CType\u003E with Option Strict:\nPrivate myDoubles As Double() = {1.5, 2, 9.9, 18, 3.14}\n\nExample: Array of class objects\nDim arrFoo(5) As Foo\n\nFor i As Integer = 0 To arrFoo.Count - 1\n   arrFoo(i).Bar = i * 10       \u0027 Exception\nNext\n\nThe array has been created, but the Foo objects in it have not.\nRemedy\nFor i As Integer = 0 To arrFoo.Count - 1\n    arrFoo(i) = New Foo()         \u0027 Create Foo instance\n    arrFoo(i).Bar = i * 10\nNext\n\nUsing a List(Of T) will make it quite difficult to have an element without a valid object:\nDim FooList As New List(Of Foo)     \u0027 List created, but it is empty\nDim f As Foo                        \u0027 Temporary variable for the loop\n\nFor i As Integer = 0 To 5\n    f = New Foo()                    \u0027 Foo instance created\n    f.Bar =  i * 10\n    FooList.Add(f)                   \u0027 Foo object added to list\nNext\n\nFor more information, see:\n\nOption Infer Statement\nScope in Visual Basic\nArrays in Visual Basic\n\n\nLists and Collections\n.NET collections (of which there are many varieties - Lists, Dictionary, etc.) must also be instantiated or created.\nPrivate myList As List(Of String)\n..\nmyList.Add(\u0022ziggy\u0022)           \u0027 NullReference\n\nYou get the same exception for the same reason - myList was only declared, but no instance created. The remedy is the same:\nmyList = New List(Of String)\n\n\u0027 Or create an instance when declared:\nPrivate myList As New List(Of String)\n\nA common oversight is a class which uses a collection Type:\nPublic Class Foo\n    Private barList As List(Of Bar)\n\n    Friend Function BarCount As Integer\n        Return barList.Count\n    End Function\n\n    Friend Sub AddItem(newBar As Bar)\n        If barList.Contains(newBar) = False Then\n            barList.Add(newBar)\n        End If\n    End Function\n\nEither procedure will result in an NRE, because barList is only declared, not instantiated. Creating an instance of Foo will not also create an instance of the internal barList. It may have been the intent to do this in the constructor:\nPublic Sub New         \u0027 Constructor\n    \u0027 Stuff to do when a new Foo is created...\n    barList = New List(Of Bar)\nEnd Sub\n\nAs before, this is incorrect:\nPublic Sub New()\n    \u0027 Creates another barList local to this procedure\n     Dim barList As New List(Of Bar)\nEnd Sub\n\nFor more information, see List(Of T) Class.\n\nData Provider Objects\nWorking with databases presents many opportunities for a NullReference because there can be many objects (Command, Connection, Transaction, Dataset, DataTable, DataRows....) in use at once.  Note: It does not matter which data provider you are using -- MySQL, SQL Server, OleDB, etc. -- the concepts are the same.\nExample 1\nDim da As OleDbDataAdapter\nDim ds As DataSet\nDim MaxRows As Integer\n\ncon.Open()\nDim sql = \u0022SELECT * FROM tblfoobar_List\u0022\nda = New OleDbDataAdapter(sql, con)\nda.Fill(ds, \u0022foobar\u0022)\ncon.Close()\n\nMaxRows = ds.Tables(\u0022foobar\u0022).Rows.Count      \u0027 Error\n\nAs before, the ds Dataset object was declared, but an instance was never created. The DataAdapter will fill an existing DataSet, not create one. In this case, since ds is a local variable, the IDE warns you that this might happen:\n\nWhen declared as a module/class level variable, as appears to be the case with con, the compiler can\u0027t know if the object was created by an upstream procedure. Do not ignore warnings.\nRemedy\nDim ds As New DataSet\n\nExample 2\nds = New DataSet\nda = New OleDBDataAdapter(sql, con)\nda.Fill(ds, \u0022Employees\u0022)\n\ntxtID.Text = ds.Tables(\u0022Employee\u0022).Rows(0).Item(1)\ntxtID.Name = ds.Tables(\u0022Employee\u0022).Rows(0).Item(2)\n\nA typo is a problem here: Employees vs Employee. There was no DataTable named \u0022Employee\u0022 created, so a NullReferenceException results trying to access it. Another potential problem is assuming there will be Items which may not be so when the SQL includes a WHERE clause.\nRemedy\nSince this uses one table, using Tables(0) will avoid spelling errors.  Examining Rows.Count can also help:\nIf ds.Tables(0).Rows.Count \u003E 0 Then\n    txtID.Text = ds.Tables(0).Rows(0).Item(1)\n    txtID.Name = ds.Tables(0).Rows(0).Item(2)\nEnd If\n\nFill is a function returning the number of Rows affected which can also be tested:\nIf da.Fill(ds, \u0022Employees\u0022) \u003E 0 Then...\n\nExample 3\nDim da As New OleDb.OleDbDataAdapter(\u0022SELECT TICKET.TICKET_NO,\n        TICKET.CUSTOMER_ID, ... FROM TICKET_RESERVATION AS TICKET INNER JOIN\n        FLIGHT_DETAILS AS FLIGHT ... WHERE [TICKET.TICKET_NO]= ...\u0022, con)\nDim ds As New DataSet\nda.Fill(ds)\n\nIf ds.Tables(\u0022TICKET_RESERVATION\u0022).Rows.Count \u003E 0 Then\n\nThe DataAdapter will provide TableNames as shown in the previous example, but it does not parse names from the SQL or database table. As a result, ds.Tables(\u0022TICKET_RESERVATION\u0022) references a non-existent table.\nThe Remedy is the same, reference the table by index:\nIf ds.Tables(0).Rows.Count \u003E 0 Then\n\nSee also DataTable Class.\n\nObject Paths / Nested\nIf myFoo.Bar.Items IsNot Nothing Then\n   ...\n\nThe code is only testing Items while both myFoo and Bar may also be Nothing. The remedy is to test the entire chain or path of objects one at a time:\nIf (myFoo IsNot Nothing) AndAlso\n    (myFoo.Bar IsNot Nothing) AndAlso\n    (myFoo.Bar.Items IsNot Nothing) Then\n    ....\n\nAndAlso is important. Subsequent tests will not be performed once the first False condition is encountered. This allows the code to safely \u0027drill\u0027 into the object(s) one \u0027level\u0027 at a time, evaluating myFoo.Bar only after (and if) myFoo is determined to be valid. Object chains or paths can get quite long when coding complex objects:\nmyBase.myNodes(3).Layer.SubLayer.Foo.Files.Add(\u0022somefilename\u0022)\n\nIt is not possible to reference anything \u0027downstream\u0027 of a null object.  This also applies to controls:\nmyWebBrowser.Document.GetElementById(\u0022formfld1\u0022).InnerText = \u0022some value\u0022\n\nHere, myWebBrowser or Document could be Nothing or the formfld1 element may not exist.\n\nUI Controls\nDim cmd5 As New SqlCommand(\u0022select Cartons, Pieces, Foobar \u0022 _\n     \u0026 \u0022FROM Invoice where invoice_no = \u0027\u0022 \u0026 _\n     Me.ComboBox5.SelectedItem.ToString.Trim \u0026 \u0022\u0027 And category = \u0027\u0022 \u0026 _\n     Me.ListBox1.SelectedItem.ToString.Trim \u0026 \u0022\u0027 And item_name = \u0027\u0022 \u0026 _\n     Me.ComboBox2.SelectedValue.ToString.Trim \u0026 \u0022\u0027 And expiry_date = \u0027\u0022 \u0026 _\n     Me.expiry.Text \u0026 \u0022\u0027\u0022, con)\n\nAmong other things, this code does not anticipate that the user may not have selected something in one or more UI controls.  ListBox1.SelectedItem may well be Nothing, so ListBox1.SelectedItem.ToString will result in an NRE.\nRemedy\nValidate data before using it (also use Option Strict and SQL parameters):\nDim expiry As DateTime         \u0027 for text date validation\nIf (ComboBox5.SelectedItems.Count \u003E 0) AndAlso\n    (ListBox1.SelectedItems.Count \u003E 0) AndAlso\n    (ComboBox2.SelectedItems.Count \u003E 0) AndAlso\n    (DateTime.TryParse(expiry.Text, expiry) Then\n\n    \u0027... do stuff\nElse\n    MessageBox.Show(...error message...)\nEnd If\n\nAlternatively, you can use (ComboBox5.SelectedItem IsNot Nothing) AndAlso...\n\nVisual Basic Forms\nPublic Class Form1\n\n    Private NameBoxes = New TextBox(5) {Controls(\u0022TextBox1\u0022), _\n                   Controls(\u0022TextBox2\u0022), Controls(\u0022TextBox3\u0022), _\n                   Controls(\u0022TextBox4\u0022), Controls(\u0022TextBox5\u0022), _\n                   Controls(\u0022TextBox6\u0022)}\n\n    \u0027 same thing in a different format:\n    Private boxList As New List(Of TextBox) From {TextBox1, TextBox2, TextBox3 ...}\n\n    \u0027 Immediate NRE:\n    Private somevar As String = Me.Controls(\u0022TextBox1\u0022).Text\n\nThis is a fairly common way to get an NRE. In C#, depending on how it is coded, the IDE will report that Controls does not exist in the current context, or \u0022cannot reference non-static member\u0022. So, to some extent, this is a VB-only situation. It is also complex because it can result in a failure cascade.\nThe arrays and collections cannot be initialized this way. This initialization code will run before the constructor creates the Form or the Controls. As a result:\n\nLists and Collection will simply be empty\nThe Array will contain five elements of Nothing\nThe somevar assignment will result in an immediate NRE because Nothing doesn\u0027t have a .Text property\n\nReferencing array elements later will result in an NRE. If you do this in Form_Load, due to an odd bug, the IDE may not report the exception when it happens. The exception will pop up later when your code tries to use the array. This \u0022silent exception\u0022 is detailed in this post. For our purposes, the key is that when something catastrophic happens while creating a form (Sub New or Form Load event), exceptions may go unreported, the code exits the procedure and just displays the form.\nSince no other code in your Sub New or Form Load event will run after the NRE, a great many other things can be left uninitialized.\nSub Form_Load(..._\n   \u0027...\n   Dim name As String = NameBoxes(2).Text        \u0027 NRE\n   \u0027 ...\n   \u0027 More code (which will likely not be executed)\n   \u0027 ...\nEnd Sub\n\nNote this applies to any and all control and component references making these illegal where they are:\nPublic Class Form1\n\n    Private myFiles() As String = Me.OpenFileDialog1.FileName \u0026 ...\n    Private dbcon As String = OpenFileDialog1.FileName \u0026 \u0022;Jet Oledb...\u0022\n    Private studentName As String = TextBox13.Text\n\nPartial Remedy\nIt is curious that VB does not provide a warning, but the remedy is to declare the containers at the form level, but initialize them in form load event handler when the controls do exist. This can be done in Sub New as long as your code is after the InitializeComponent call:\n\u0027 Module level declaration\nPrivate NameBoxes as TextBox()\nPrivate studentName As String\n\n\u0027 Form Load, Form Shown or Sub New:\n\u0027\n\u0027 Using the OP\u0027s approach (illegal using OPTION STRICT)\nNameBoxes = New TextBox() {Me.Controls(\u0022TextBox1\u0022), Me.Controls(\u0022TestBox2\u0022), ...)\nstudentName = TextBox32.Text           \u0027 For simple control references\n\nThe array code may not be out of the woods yet. Any controls which are in a container control (like a GroupBox or Panel) will not be found in Me.Controls; they will be in the Controls collection of that Panel or GroupBox. Nor will a control be returned when the control name is misspelled (\u0022TeStBox2\u0022). In such cases, Nothing will again be stored in those array elements and an NRE will result when you attempt to reference it.\nThese should be easy to find now that you know what you are looking for:\n\n\u0022Button2\u0022 resides on a Panel\nRemedy\nRather than indirect references by name using the form\u0027s Controls collection, use the control reference:\n\u0027 Declaration\nPrivate NameBoxes As TextBox()\n\n\u0027 Initialization -  simple and easy to read, hard to botch:\nNameBoxes = New TextBox() {TextBox1, TextBox2, ...)\n\n\u0027 Initialize a List\nNamesList = New List(Of TextBox)({TextBox1, TextBox2, TextBox3...})\n\u0027 or\nNamesList = New List(Of TextBox)\nNamesList.AddRange({TextBox1, TextBox2, TextBox3...})\n\n\nFunction Returning Nothing\nPrivate bars As New List(Of Bars)        \u0027 Declared and created\n\nPublic Function BarList() As List(Of Bars)\n    bars.Clear\n    If someCondition Then\n        For n As Integer = 0 to someValue\n            bars.Add(GetBar(n))\n        Next n\n    Else\n        Exit Function\n    End If\n\n    Return bars\nEnd Function\n\nThis is a case where the IDE will warn you that \u0027not all paths return a value and a NullReferenceException may result\u0027. You can suppress the warning, by replacing Exit Function with Return Nothing, but that does not solve the problem. Anything which tries to use the return when someCondition = False will result in an NRE:\nbList = myFoo.BarList()\nFor Each b As Bar in bList      \u0027 EXCEPTION\n      ...\n\nRemedy\nReplace Exit Function in the function with Return bList. Returning an empty List is not the same as returning Nothing. If there is a chance that a returned object can be Nothing, test before using it:\n bList = myFoo.BarList()\n If bList IsNot Nothing Then...\n\n\nPoorly Implemented Try/Catch\nA badly implemented Try/Catch can hide where the problem is and result in new ones:\nDim dr As SqlDataReader\nTry\n    Dim lnk As LinkButton = TryCast(sender, LinkButton)\n    Dim gr As GridViewRow = DirectCast(lnk.NamingContainer, GridViewRow)\n    Dim eid As String = GridView1.DataKeys(gr.RowIndex).Value.ToString()\n    ViewState(\u0022username\u0022) = eid\n    sqlQry = \u0022select FirstName, Surname, DepartmentName, ExtensionName, jobTitle,\n             Pager, mailaddress, from employees1 where username=\u0027\u0022 \u0026 eid \u0026 \u0022\u0027\u0022\n    If connection.State \u003C\u003E ConnectionState.Open Then\n        connection.Open()\n    End If\n    command = New SqlCommand(sqlQry, connection)\n\n    \u0027More code fooing and barring\n\n    dr = command.ExecuteReader()\n    If dr.Read() Then\n        lblFirstName.Text = Convert.ToString(dr(\u0022FirstName\u0022))\n        ...\n    End If\n    mpe.Show()\nCatch\n\nFinally\n    command.Dispose()\n    dr.Close()             \u0027 \u003C-- NRE\n    connection.Close()\nEnd Try\n\nThis is a case of an object not being created as expected, but also demonstrates the counter usefulness of an empty Catch.\nThere is an extra comma in the SQL (after \u0027mailaddress\u0027) which results in an exception at .ExecuteReader. After the Catch does nothing, Finally tries to perform clean up, but since you cannot Close a null DataReader object, a brand new NullReferenceException results.\nAn empty Catch block is the devil\u0027s playground. This OP was baffled why he was getting an NRE in the Finally block. In other situations, an empty Catch may result in something else much further downstream going haywire and cause you to spend time looking at the wrong things in the wrong place for the problem. (The \u0022silent exception\u0022 described above provides the same entertainment value.)\nRemedy\nDon\u0027t use empty Try/Catch blocks - let the code crash so you can a) identify the cause b) identify the location and c) apply a proper remedy.  Try/Catch blocks are not intended to hide exceptions from the person uniquely qualified to fix them - the developer.\n\nDBNull is not the same as Nothing\nFor Each row As DataGridViewRow In dgvPlanning.Rows\n    If Not IsDBNull(row.Cells(0).Value) Then\n        ...\n\nThe IsDBNull function is used to test if a value equals System.DBNull:  From MSDN:\n\nThe System.DBNull value indicates that the Object represents missing or non-existent data. DBNull is not the same as Nothing, which indicates that a variable has not yet been initialized.\n\nRemedy\nIf row.Cells(0) IsNot Nothing Then ...\n\nAs before, you can test for Nothing, then for a specific value:\nIf (row.Cells(0) IsNot Nothing) AndAlso (IsDBNull(row.Cells(0).Value) = False) Then\n\nExample 2\nDim getFoo = (From f In dbContext.FooBars\n               Where f.something = something\n               Select f).FirstOrDefault\n\nIf Not IsDBNull(getFoo) Then\n    If IsDBNull(getFoo.user_id) Then\n        txtFirst.Text = getFoo.first_name\n    Else\n       ...\n\nFirstOrDefault returns the first item or the default value, which is Nothing for reference types and never DBNull:\nIf getFoo IsNot Nothing Then...\n\n\nControls\nDim chk As CheckBox\n\nchk = CType(Me.Controls(chkName), CheckBox)\nIf chk.Checked Then\n    Return chk\nEnd If\n\nIf a CheckBox with chkName can\u0027t be found (or exists in a GroupBox), then chk will be Nothing and be attempting to reference any property will result in an exception.\nRemedy\nIf (chk IsNot Nothing) AndAlso (chk.Checked) Then ...\n\nThe DataGridView\nThe DGV has a few quirks seen periodically:\ndgvBooks.DataSource = loan.Books\ndgvBooks.Columns(\u0022ISBN\u0022).Visible = True       \u0027 NullReferenceException\ndgvBooks.Columns(\u0022Title\u0022).DefaultCellStyle.Format = \u0022C\u0022\ndgvBooks.Columns(\u0022Author\u0022).DefaultCellStyle.Format = \u0022C\u0022\ndgvBooks.Columns(\u0022Price\u0022).DefaultCellStyle.Format = \u0022C\u0022\n\nIf dgvBooks has AutoGenerateColumns = True, it will create the columns, but it does not name them, so the above code fails when it references them by name.\nRemedy\nName the columns manually, or reference by index:\ndgvBooks.Columns(0).Visible = True\n\nExample 2 \u2014 Beware of the NewRow\nxlWorkSheet = xlWorkBook.Sheets(\u0022sheet1\u0022)\n\nFor i = 0 To myDGV.RowCount - 1\n    For j = 0 To myDGV.ColumnCount - 1\n        For k As Integer = 1 To myDGV.Columns.Count\n            xlWorkSheet.Cells(1, k) = myDGV.Columns(k - 1).HeaderText\n            xlWorkSheet.Cells(i \u002B 2, j \u002B 1) = myDGV(j, i).Value.ToString()\n        Next\n    Next\nNext\n\nWhen your DataGridView has AllowUserToAddRows as True (the default), the Cells in the blank/new row at the bottom will all contain Nothing.  Most attempts to use the contents (for example, ToString) will result in an NRE.\nRemedy\nUse a For/Each loop and test the IsNewRow property to determine if it is that last row. This works whether AllowUserToAddRows is true or not:\nFor Each r As DataGridViewRow in myDGV.Rows\n    If r.IsNewRow = False Then\n         \u0027 ok to use this row\n\nIf you do use a For n loop, modify the row count or use Exit For when IsNewRow is true.\n\nMy.Settings (StringCollection)\nUnder certain circumstances, trying to use an item from My.Settings which is a StringCollection can result in a NullReference the first time you use it. The solution is the same, but not as obvious. Consider:\nMy.Settings.FooBars.Add(\u0022ziggy\u0022)         \u0027 foobars is a string collection\n\nSince VB is managing Settings for you, it is reasonable to expect it to initialize the collection. It will, but only if you have previously added an initial entry to the collection (in the Settings editor). Since the collection is (apparently) initialized when an item is added, it remains Nothing when there are no items in the Settings editor to add.\nRemedy\nInitialize the settings collection in the form\u0027s Load event handler, if/when needed:\nIf My.Settings.FooBars Is Nothing Then\n    My.Settings.FooBars = New System.Collections.Specialized.StringCollection\nEnd If\n\nTypically, the Settings collection will only need to be initialized the first time the application runs. An alternate remedy is to add an initial value to your collection in Project -\u003E Settings | FooBars, save the project, then remove the fake value.\n\nKey Points\nYou probably forgot the New operator.\nor\nSomething you assumed would perform flawlessly to return an initialized object to your code, did not.\nDon\u0027t ignore compiler warnings (ever) and use Option Strict On (always).\n\nMSDN NullReference Exception\n    ","\nAnother scenario is when you cast a null object into a value type. For example, the code below:\n\nobject o = null;\nDateTime d = (DateTime)o;\n\n\nIt will throw a NullReferenceException on the cast. It seems quite obvious in the above sample, but this can happen in more \u0022late-binding\u0022 intricate scenarios where the null object has been returned from some code you don\u0027t own, and the cast is for example generated by some automatic system.\n\nOne example of this is this simple ASP.NET binding fragment with the Calendar control:\n\n\u003Casp:Calendar runat=\u0022server\u0022 SelectedDate=\u0022\u003C%#Bind(\u0022Something\u0022)%\u003E\u0022 /\u003E\n\n\nHere, SelectedDate is in fact a property - of DateTime type - of the Calendar Web Control type, and the binding could perfectly return something null. The implicit ASP.NET Generator will create a piece of code that will be equivalent to the cast code above. And this will raise a NullReferenceException that is quite difficult to spot, because it lies in ASP.NET generated code which compiles fine...\n    ","\nIt means that the variable in question is pointed at nothing. I could generate this like so:\n\nSqlConnection connection = null;\nconnection.Open();\n\n\nThat will throw the error because while I\u0027ve declared the variable \u0022connection\u0022, it\u0027s not pointed to anything. When I try to call the member \u0022Open\u0022, there\u0027s no reference for it to resolve, and it will throw the error.\n\nTo avoid this error:\n\n\nAlways initialize your objects before you try to do anything with them.\nIf you\u0027re not sure whether the object is null, check it with object == null.\n\n\nJetBrains\u0027 Resharper tool will identify every place in your code that has the possibility of a null reference error, allowing you to put in a null check. This error is the number one source of bugs, IMHO.\n    ","\nIt means your code used an object reference variable that was set to null (i.e. it did not reference an actual object instance).\n\nTo prevent the error, objects that could be null should be tested for null before being used.\n\nif (myvar != null)\n{\n    // Go ahead and use myvar\n    myvar.property = ...\n}\nelse\n{\n    // Whoops! myvar is null and cannot be used without first\n    // assigning it to an instance reference\n    // Attempting to use myvar here will result in NullReferenceException\n}\n\n    ","\nBe aware that regardless of the scenario, the cause is always the same in .NET:\n\nYou are trying to use a reference variable whose value is Nothing/null.  When the value is Nothing/null for the reference variable, that means it is not actually holding a reference to an instance of any object that exists on the heap.\nYou either never assigned something to the variable, never created an instance of the value assigned to the variable, or you set the variable equal to Nothing/null manually, or you called a function that set the variable to Nothing/null for you.\n\n    ","\nUpdate C#8.0, 2019: Nullable reference types\n\nC#8.0 introduces nullable reference types and non-nullable reference types. So only nullable reference types must be checked to avoid a NullReferenceException.\n\n\n\nIf you have not initialized a reference type, and you want to set or read one of its properties, it will throw a NullReferenceException.\n\nExample:\n\nPerson p = null;\np.Name = \u0022Harry\u0022; // NullReferenceException occurs here.\n\n\nYou can simply avoid this by checking if the variable is not null:\n\nPerson p = null;\nif (p!=null)\n{\n    p.Name = \u0022Harry\u0022; // Not going to run to this point\n}\n\n\nTo fully understand why a NullReferenceException is thrown, it is important to know the difference between value types and [reference types][3].\n\nSo, if you\u0027re dealing with value types, NullReferenceExceptions can not occur. Though you need to keep alert when dealing with reference types!\n\nOnly reference types, as the name is suggesting, can hold references or point literally to nothing (or \u0027null\u0027). Whereas value types always contain a value.\n\nReference types (these ones must be checked):\n\n\ndynamic\nobject\nstring\n\n\nValue types (you can simply ignore these ones):\n\n\nNumeric types\nIntegral types\nFloating-point types\ndecimal\nbool\nUser defined structs\n\n    ","\nAn example of this exception being thrown is: When you are trying to check something, that is null.\n\nFor example:\n\nstring testString = null; //Because it doesn\u0027t have a value (i.e. it\u0027s null; \u0022Length\u0022 cannot do what it needs to do)\n\nif (testString.Length == 0) // Throws a nullreferenceexception\n{\n    //Do something\n} \n\n\nThe .NET runtime will throw a NullReferenceException when you attempt to perform an action on something which hasn\u0027t been instantiated i.e. the code above.\n\nIn comparison to an ArgumentNullException which is typically thrown as a defensive measure if a method expects that what is being passed to it is not null.\n\nMore information is in C# NullReferenceException and Null Parameter. \n    ","\nAnother case where NullReferenceExceptions can happen is the (incorrect) use of the as operator:\n\nclass Book {\n    public string Name { get; set; }\n}\nclass Car { }\n\nCar mycar = new Car();\nBook mybook = mycar as Book;   // Incompatible conversion --\u003E mybook = null\n\nConsole.WriteLine(mybook.Name);   // NullReferenceException\n\n\nHere, Book and Car are incompatible types; a Car cannot be converted/cast to a Book.  When this cast fails, as returns null.  Using mybook after this causes a NullReferenceException.\n\nIn general, you should use a cast or as, as follows:\n\nIf you are expecting the type conversion to always succeed (ie. you know what the object should be ahead of time), then you should use a cast:\n\nComicBook cb = (ComicBook)specificBook;\n\n\nIf you are unsure of the type, but you want to try to use it as a specific type, then use as:\n\nComicBook cb = specificBook as ComicBook;\nif (cb != null) {\n   // ...\n}\n\n    ","\nYou are using the object that contains the null value reference. So it\u0027s giving a null exception. In the example the string value is null and when checking its length, the exception occurred.\nExample:\nstring value = null;\nif (value.Length == 0) // \u003C-- Causes exception\n{\n    Console.WriteLine(value); // \u003C-- Never reached\n}\n\nThe exception error is:\n\nUnhandled Exception:\nSystem.NullReferenceException: Object reference not set to an instance\nof an object. at Program.Main()\n\n    ","\nWhile what causes a NullReferenceExceptions and approaches to avoid/fix such an exception have been addressed in other answers, what many programmers haven\u0027t learned yet is how to independently debug such exceptions during development.\n\nIn Visual Studio this is usually easy thanks to the Visual Studio Debugger.\n\n\n\nFirst, make sure that the correct error is going to be caught - see\nHow do I allow breaking on \u0027System.NullReferenceException\u0027 in VS2010? Note1\n\nThen either Start with Debugging (F5) or Attach [the VS Debugger] to Running Process. On occasion it may be useful to use Debugger.Break, which will prompt to launch the debugger.\n\nNow, when the NullReferenceException is thrown (or unhandled) the debugger will stop (remember the rule set above?) on the line on which the exception occurred. Sometimes the error will be easy to spot.\n\nFor instance,\nin the following line the only code that can cause the exception is if myString evaluates to null. This can be verified by looking at the Watch Window or running expressions in the Immediate Window.\n\nvar x = myString.Trim();\n\n\nIn more advanced cases, such as the following, you\u0027ll need to use one of the techniques above (Watch or Immediate Windows) to inspect the expressions to determine if str1 was null or if str2 was null.\n\nvar x = str1.Trim() \u002B str2.Trim();\n\n\nOnce where the exception is throw has been located, it\u0027s usually trivial to reason backwards to find out where the null value was [incorrectly] introduced --\n\nTake the time required to understand the cause of the exception. Inspect for null expressions. Inspect the previous expressions which could have resulted in such null expressions. Add breakpoints and step through the program as appropriate. Use the debugger.\n\n\n\n1  If Break on Throws is too aggressive and the debugger stops on an NPE in the .NET or 3rd-party library, Break on User-Unhandled can be used to limit the exceptions caught. Additionally, VS2012 introduces Just My Code which I recommend enabling as well.\n\n\n  If you are debugging with Just My Code enabled, the behavior is slightly different. With Just My Code enabled, the debugger ignores first-chance common language runtime (CLR) exceptions that are thrown outside of My Code and do not pass through My Code\n\n    ","\nSimon Mourier gave this example:\n\nobject o = null;\nDateTime d = (DateTime)o;  // NullReferenceException\n\n\nwhere an unboxing conversion (cast) from object (or from one of the classes System.ValueType or System.Enum, or from an interface type) to a value type (other than Nullable\u003C\u003E) in itself gives the NullReferenceException.\n\nIn the other direction, a boxing conversion from a Nullable\u003C\u003E which has HasValue equal to false to a reference type, can give a null reference which can then later lead to a NullReferenceException. The classic example is:\n\nDateTime? d = null;\nvar s = d.ToString();  // OK, no exception (no boxing), returns \u0022\u0022\nvar t = d.GetType();   // Bang! d is boxed, NullReferenceException\n\n\nSometimes the boxing happens in another way. For example with this non-generic extension method:\n\npublic static void MyExtension(this object x)\n{\n  x.ToString();\n}\n\n\nthe following code will be problematic:\n\nDateTime? d = null;\nd.MyExtension();  // Leads to boxing, NullReferenceException occurs inside the body of the called method, not here.\n\n\nThese cases arise because of the special rules the runtime uses when boxing Nullable\u003C\u003E instances.\n    ","\nAdding a case when the class name for entity used in entity framework is same as class name for a web form code-behind file.\n\nSuppose you have a web form Contact.aspx whose codebehind class is Contact and you have an entity name Contact.\n\nThen following code will throw a NullReferenceException when you call context.SaveChanges()\n\nContact contact = new Contact { Name = \u0022Abhinav\u0022};\nvar context = new DataContext();\ncontext.Contacts.Add(contact);\ncontext.SaveChanges(); // NullReferenceException at this line\n\n\nFor the sake of completeness DataContext class\n\npublic class DataContext : DbContext \n{\n    public DbSet\u003CContact\u003E Contacts {get; set;}\n}\n\n\nand Contact entity class. Sometimes entity classes are partial classes so that you can extend them in other files too.\n\npublic partial class Contact \n{\n    public string Name {get; set;}\n}\n\n\nThe error occurs when both the entity and codebehind class are in same namespace.\nTo fix this, rename the entity class or the codebehind class for Contact.aspx.\n\nReason\nI am still not sure about the reason. But whenever any of the entity class will extend System.Web.UI.Page this error occurs.\n\nFor discussion have a look at NullReferenceException in DbContext.saveChanges()\n    ","\nAnother general case where one might receive this exception involves mocking classes during unit testing. Regardless of the mocking framework being used, you must ensure that all appropriate levels of the class hierarchy are properly mocked. In particular, all properties of HttpContext which are referenced by the code under test must be mocked.\n\nSee \u0022NullReferenceException thrown when testing custom AuthorizationAttribute\u0022 for a somewhat verbose example.\n    ","\nI have a different perspective to answering this. This sort of answers \u0022what else can I do to avoid it?\u0022\n\nWhen working across different layers, for example in an MVC application, a controller needs services to call business operations. In such scenarios Dependency Injection Container can be used to initialize the services to avoid the NullReferenceException. So that means you don\u0027t need to worry about checking for null and just call the services from the controller as though they will always to available (and initialized) as either a singleton or a prototype.\n\npublic class MyController\n{\n    private ServiceA serviceA;\n    private ServiceB serviceB;\n\n    public MyController(ServiceA serviceA, ServiceB serviceB)\n    {\n        this.serviceA = serviceA;\n        this.serviceB = serviceB;\n    }\n\n    public void MyMethod()\n    {\n        // We don\u0027t need to check null because the dependency injection container \n        // injects it, provided you took care of bootstrapping it.\n        var someObject = serviceA.DoThis();\n    }\n}\n\n    ","\nOn the matter of \u0022what should I do about it\u0022, there can be many answers.\nA more \u0022formal\u0022 way of preventing such error conditions while developing is applying design by contract in your code. This means you need to set class invariants, and/or even function/method preconditions and postconditions on your system, while developing.\nIn short, class invariants ensure that there will be some constraints in your class that will not get violated in normal use (and therefore, the class will not get in an inconsistent state). Preconditions mean that data given as input to a function/method must follow some constraints set and never violate them, and postconditions mean that a function/method output must follow the set constraints again without ever violating them.\nContract conditions should never be violated during execution of a bug-free program, therefore design by contract is checked in practice in debug mode, while being disabled in releases, to maximize the developed system performance.\nThis way, you can avoid NullReferenceException cases that are results of violation of the constraints set. For example, if you use an object property X in a class and later try to invoke one of its methods and X has a null value, then this will lead to NullReferenceException:\npublic X { get; set; }\n\npublic void InvokeX()\n{\n    X.DoSomething(); // if X value is null, you will get a NullReferenceException\n}\n\nBut if you set \u0022property X must never have a null value\u0022 as method precondition, then you can prevent the scenario described before:\n//Using code contracts:\n[ContractInvariantMethod]\nprotected void ObjectInvariant() \n{\n    Contract.Invariant(X != null);\n    //...\n}\n\nFor this cause, Code Contracts project exists for .NET applications.\nAlternatively, design by contract can be applied using assertions.\nUPDATE: It is worth mentioning that the term was coined by Bertrand Meyer in connection with his design of the Eiffel programming language.\n    ","\nA NullReferenceException is thrown when we are trying to access Properties of a null object or when a string value becomes empty and we are trying to access string methods.\n\nFor example: \n\n\nWhen a string method of an empty string accessed:\n\nstring str = string.Empty;\nstr.ToLower(); // throw null reference exception\n\nWhen a property of a null object accessed:\n\nPublic Class Person {\n    public string Name { get; set; }\n}\nPerson objPerson;\nobjPerson.Name  /// throw Null refernce Exception \n\n\n    ","\nTL;DR: Try using Html.Partial instead of Renderpage\n\n\n\nI was getting Object reference not set to an instance of an object when I tried to render a View within a View by sending it a Model, like this:\n\n@{\n    MyEntity M = new MyEntity();\n}\n@RenderPage(\u0022_MyOtherView.cshtml\u0022, M); // error in _MyOtherView, the Model was Null\n\n\nDebugging showed the model was Null inside MyOtherView. Until I changed it to:\n\n@{\n    MyEntity M = new MyEntity();\n}\n@Html.Partial(\u0022_MyOtherView.cshtml\u0022, M);\n\n\nAnd it worked.\n\nFurthermore, the reason I didn\u0027t have Html.Partial to begin with was because Visual Studio sometimes throws error-looking squiggly lines under Html.Partial if it\u0027s inside a differently constructed foreach loop, even though it\u0027s not really an error:\n\n@inherits System.Web.Mvc.WebViewPage\n@{\n    ViewBag.Title = \u0022Entity Index\u0022;\n    List\u003CMyEntity\u003E MyEntities = new List\u003CMyEntity\u003E();\n    MyEntities.Add(new MyEntity());\n    MyEntities.Add(new MyEntity());\n    MyEntities.Add(new MyEntity());\n}\n\u003Cdiv\u003E\n    @{\n        foreach(var M in MyEntities)\n        {\n            // Squiggly lines below. Hovering says: cannot convert method group \u0027partial\u0027 to non-delegate type Object, did you intend to envoke the Method?\n            @Html.Partial(\u0022MyOtherView.cshtml\u0022);\n        }\n    }\n\u003C/div\u003E\n\n\nBut I was able to run the application with no problems with this \u0022error\u0022. I was able to get rid of the error by changing the structure of the foreach loop to look like this:\n\n@foreach(var M in MyEntities){\n    ...\n}\n\n\nAlthough I have a feeling it was because Visual Studio was misreading the ampersands and brackets.\n    ","\nWhat can you do about it?\n\nThere is a lot of good answers here explaining what a null reference is and how to debug it. But there is very little on how to prevent the issue or at least make it easier to catch.\n\nCheck arguments\n\nFor example, methods can check the different arguments to see if they are null and throw an ArgumentNullException, an exception obviously created for this exact purpose. \n\nThe constructor for the ArgumentNullException even takes the name of the parameter and a message as arguments so you can tell the developer exactly what the problem is.\n\npublic void DoSomething(MyObject obj) {\n    if(obj == null) \n    {\n        throw new ArgumentNullException(\u0022obj\u0022, \u0022Need a reference to obj.\u0022);\n    }\n}\n\n\nUse Tools\n\nThere are also several libraries that can help. \u0022Resharper\u0022 for example can provide you with warnings while you are writing code, especially if you use their attribute: NotNullAttribute\n\nThere\u0027s \u0022Microsoft Code Contracts\u0022 where you use syntax like Contract.Requires(obj != null) which gives you runtime and compile checking: Introducing Code Contracts.\n\nThere\u0027s also \u0022PostSharp\u0022 which will allow you to just use attributes like this: \n\npublic void DoSometing([NotNull] obj)\n\n\nBy doing that and making PostSharp part of your build process obj will be checked for null at runtime. See: PostSharp null check\n\nPlain Code Solution\n\nOr you can always code your own approach using plain old code. For example here is a struct that you can use to catch null references. It\u0027s modeled after the same concept as Nullable\u003CT\u003E:\n\n[System.Diagnostics.DebuggerNonUserCode]\npublic struct NotNull\u003CT\u003E where T: class\n{\n    private T _value;\n\n    public T Value\n    {\n        get\n        {\n            if (_value == null)\n            {\n                throw new Exception(\u0022null value not allowed\u0022);\n            }\n\n            return _value;\n        }\n        set\n        {\n            if (value == null)\n            {\n                throw new Exception(\u0022null value not allowed.\u0022);\n            }\n\n            _value = value;\n        }\n    }\n\n    public static implicit operator T(NotNull\u003CT\u003E notNullValue)\n    {\n        return notNullValue.Value;\n    }\n\n    public static implicit operator NotNull\u003CT\u003E(T value)\n    {\n        return new NotNull\u003CT\u003E { Value = value };\n    }\n}\n\n\nYou would use very similar to the same way you would use Nullable\u003CT\u003E, except with the goal of accomplishing exactly the opposite - to not allow null. Here are some examples:\n\nNotNull\u003CPerson\u003E person = null; // throws exception\nNotNull\u003CPerson\u003E person = new Person(); // OK\nNotNull\u003CPerson\u003E person = GetPerson(); // throws exception if GetPerson() returns null\n\n\nNotNull\u003CT\u003E is implicitly cast to and from T so you can use it just about anywhere you need it. For example, you can pass a Person object to a method that takes a NotNull\u003CPerson\u003E:\n\nPerson person = new Person { Name = \u0022John\u0022 };\nWriteName(person);\n\npublic static void WriteName(NotNull\u003CPerson\u003E person)\n{\n    Console.WriteLine(person.Value.Name);\n}\n\n\nAs you can see above as with nullable you would access the underlying value through the Value property. Alternatively, you can use an explicit or implicit cast, you can see an example with the return value below:\n\nPerson person = GetPerson();\n\npublic static NotNull\u003CPerson\u003E GetPerson()\n{\n    return new Person { Name = \u0022John\u0022 };\n}\n\n\nOr you can even use it when the method just returns T (in this case Person) by doing a cast. For example, the following code would just like the code above:\n\nPerson person = (NotNull\u003CPerson\u003E)GetPerson();\n\npublic static Person GetPerson()\n{\n    return new Person { Name = \u0022John\u0022 };\n}\n\n\nCombine with Extension\n\nCombine NotNull\u003CT\u003E with an extension method and you can cover even more situations. Here is an example of what the extension method can look like:\n\n[System.Diagnostics.DebuggerNonUserCode]\npublic static class NotNullExtension\n{\n    public static T NotNull\u003CT\u003E(this T @this) where T: class\n    {\n        if (@this == null)\n        {\n            throw new Exception(\u0022null value not allowed\u0022);\n        }\n\n        return @this;\n    }\n}\n\n\nAnd here is an example of how it could be used:\n\nvar person = GetPerson().NotNull();\n\n\nGitHub\n\nFor your reference I made the code above available on GitHub, you can find it at:\n\nhttps://github.com/luisperezphd/NotNull\n\nRelated Language Feature\n\nC# 6.0 introduced the \u0022null-conditional operator\u0022 that helps with this a little. With this feature, you can reference nested objects and if any one of them is null the whole expression returns null.\n\nThis reduces the number of null checks you have to do in some cases. The syntax is to put a question mark before each dot. Take the following code for example:\n\nvar address = country?.State?.County?.City;\n\n\nImagine that country is an object of type Country that has a property called State and so on. If country, State, County, or City is null then address will benull. Therefore you only have to check whetheraddressisnull\u0060.\n\nIt\u0027s a great feature, but it gives you less information. It doesn\u0027t make it obvious which of the 4 is null.\n\nBuilt-in like Nullable?\n\nC# has a nice shorthand for Nullable\u003CT\u003E, you can make something nullable by putting a question mark after the type like so int?. \n\nIt would be nice if C# had something like the NotNull\u003CT\u003E struct above and had a similar shorthand, maybe the exclamation point (!) so that you could write something like: public void WriteName(Person! person).\n    ","\nYou can fix NullReferenceException in a clean way using Null-conditional Operators in c#6 and write less code to handle null checks.\n\nIt\u0027s used to test for null before performing a member access (?.) or index (?[) operation.\n\nExample\n\n  var name = p?.Spouse?.FirstName;\n\n\nis equivalent to:\n\n    if (p != null)\n    {\n        if (p.Spouse != null)\n        {\n            name = p.Spouse.FirstName;\n        }\n    }\n\n\nThe result is that the name will be null when p is null or when p.Spouse is null. \n\nOtherwise, the variable name will be assigned the value of the p.Spouse.FirstName. \n\nFor More details : Null-conditional Operators \n    ","\nInterestingly, none of the answers on this page mention the two edge cases, hope no one minds if I add them:\nEdge case #1: concurrent access to a Dictionary\nGeneric dictionaries in .NET are not thread-safe and they sometimes might throw a NullReference or even (more frequent) a KeyNotFoundException when you try to access a key from two concurrent threads. The exception is quite misleading in this case.\nEdge case #2: unsafe code\nIf a NullReferenceException is thrown by unsafe code, you might look at your pointer variables, and check them for IntPtr.Zero or something. Which is the same thing (\u0022null pointer exception\u0022), but in unsafe code, variables are often cast to value-types/arrays, etc., and you bang your head against the wall, wondering how a value-type can throw this exception.\n(Another reason for non-using unsafe code unless you need it, by the way)\nEdge case #3: Visual Studio multi monitor setup with secondary monitor(s) that has different DPI setting than the primary monitor\nThis edge case is software-specific and pertains to Visual Studio 2019 IDE (and possibly earlier versions).\nMethod to reproduce the problem: drag any component from the Toolbox to a Windows form on a non-primary monitor with different DPI setting than the primary monitor, and you get a pop-up with \u201CObject reference not set to an instance of an object.\u201D According to this thread this issue has been known for quite some time and at the time of writing it still hasn\u0027t been fixed.\n    ","\nThe error line \u0022Object reference not set to an instance of an object.\n\u0022 states that you have not assigned instance object to a object reference and still you are accessing properies/methods of that object. \n\nfor example: let say you have a class called myClass and it contains one property prop1. \n\npublic Class myClass\n{\n   public int prop1 {get;set;}\n}\n\n\nNow you are accessing this prop1 in some other class just like below:\n\npublic class Demo\n{\n     public void testMethod()\n     {\n        myClass ref = null;\n        ref.prop1 = 1;  //This line throws error\n     }\n}\n\n\nabove line throws error because reference of class myClass is declared but not instantiated or an instance of object is not assigned to referecne of that class. \n\nTo fix this you have to instantiate (assign object to reference of that class).\n\npublic class Demo\n{\n     public void testMethod()\n     {\n        myClass ref = null;\n        ref = new myClass();\n        ref.prop1 = 1;  \n     }\n}\n\n    ","\nNullReferenceException or Object reference not set to an instance of an object occurs when an object of the class you are trying to use is not instantiated.\nFor example:\n\nAssume that you have a class named Student.\n\npublic class Student\n{\n    private string FirstName;\n    private string LastName;\n    public string GetFullName()\n    {\n        return FirstName \u002B LastName;\n    }\n}\n\n\nNow, consider another class where you are trying to retrieve the student\u0027s full name.\n\npublic class StudentInfo\n{      \n    public string GetStudentName()\n    {\n        Student s;\n        string fullname = s.GetFullName();\n        return fullname;\n    }        \n}\n\n\nAs seen in the above code, the statement \nStudent s - only declares the variable of type Student, note that the Student class is not instantiated at this point.\nHence, when the statement s.GetFullName() gets executed, it will throw the NullReferenceException.  \n    ","\nWell, in simple terms:\n\nYou are trying to access an object that isn\u0027t created or currently not in memory.\n\nSo how to tackle this:\n\n\nDebug and let the debugger break... It will directly take you to the variable that is broken... Now your task is to simply fix this.. Using the new keyword in the appropriate place.\nIf it is caused on some database commands because the object isn\u0027t present then all you need to do is do a null check and handle it:\n\nif (i == null) {\n    // Handle this\n}\n\nThe hardest one .. if the GC collected the object already... This generally occurs if you are trying to find an object using strings... That is, finding it by name of the object then it may happen that the GC might already cleaned it up... This is hard to find and will become quite a problem... A better way to tackle this is do null checks wherever necessary during the development process. This will save you a lot of time.\n\n\nBy finding by name I mean some framework allow you to FIndObjects using strings and the code might look like this: FindObject(\u0022ObjectName\u0022);\n    ","\nLiterally the easiest way to fix a NullReferenceExeption has two ways.\nIf you have a GameObject for example with a script attached and a variable named rb (rigidbody) this variable will start null when you start your game.\nThis is why you get a NullReferenceExeption because the computer does not have data stored in that variable.  \n\nI\u0027ll be using a RigidBody variable as an example.\nWe can add data really easily actually in a few ways:  \n\n\nAdd a RigidBody to your object with AddComponent \u003E Physics \u003E Rigidbody\nThen go into your script and type rb = GetComponent\u003CRigidbody\u003E();\nThis line of code works best under your Start() or Awake() functions.  \nYou can add a component programmatically and assign the variable at the same time with one line of code: rb = AddComponent\u003CRigidBody\u003E();  \n\n\nFurther Notes: If you want unity to add a component to your object and you might have forgotten to add one, you can type [RequireComponent(typeof(RigidBody))] above your class declaration (the space below all of your usings).\nEnjoy and have fun making games!\n    ","\nIf we consider common scenarios where this exception can be thrown, accessing properties withing object at the top.\n\nEx: \n\nstring postalcode=Customer.Address.PostalCode; \n//if customer or address is null , this will through exeption\n\n\nin here , if address is null , then you will get NullReferenceException.\n\nSo, as a practice we should always use null check, before accessing properties in such objects (specially in generic)\n\nstring postalcode=Customer?.Address?.PostalCode;\n//if customer or address is null , this will return null, without through a exception\n\n    ","\nThis is basically is a Null reference exception. As Microsoft states-\n\n\n  A NullReferenceException exception is thrown when you try to access a\n  member of a type whose value is null.\n\n\nWhat does that mean?\n\nThat means if any member which doesn\u2019t hold any value and we are making that member to perform certain task then the system will undoubtedly toss a message and say-\n\n\u201CHey wait, that member has no values so it can\u2019t perform the task which you are handing it over.\u201D\n\nThe exception itself says that something is being referred but whose value is not being set. So this denotes that it only occurs while using reference types as Value types are non-nullable.\n\nNullReferenceException won\u0027t occur if we are using Value type members.\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        string str = null;\n        Console.WriteLine(str.Length);\n        Console.ReadLine();\n    }\n}\n\n\nThe above code shows simple string which is assigned with a null value.\n\nNow, when I try to print the length of the string str, I do get An unhandled exception of type \u2018System.NullReferenceException\u2019 occurred message because member str is pointing to null and there can\u2019t be any length of null.\n\n\u2018NullReferenceException\u2019 also occurs when we forget to instantiate a reference type. \n\nSuppose I have a class and member method in it. I have not instantiated my class but only named my class. Now if I try to use the method, the compiler will throw an error or issue a warning (depending on the compiler).\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        MyClass1 obj;\n        obj.foo();  //Use of unassigned local variable \u0027obj\u0027\n    }\n}\n\npublic class MyClass1\n{\n    internal void foo()\n    {\n        Console.WriteLine(\u0022hello from foo\u0022);\n\n    }\n}\n\n\nCompiler for the above code raises an error that variable obj is unassigned which signifies that our variable has null values or nothing. Compiler for the above code raises an error that variable obj is unassigned which signifies that our variable has null values or nothing.\n\nWhy it occurs?\n\n\nNullReferenceException arises due to our fault for not checking the object\u2019s value. We often leave the object values unchecked in the code development.\nIt also arises when we forget to instantiate our objects. Using methods, properties, collections etc. which can return or set null values can also be the cause of this exception.\n\n\nHow can it be avoided?\n\nThere are various ways and methods to avoid this renowned exception:\n\n\nExplicit Checking: We should adhere to the tradition of checking the objects, properties, methods, arrays, and collections whether they are null. This can be simply implemented using conditional statements like if-else if-else etc.\nException handling: One of the important ways of managing this exception. Using simple try-catch-finally blocks we can control this exception and also maintain a log of it. This can be very useful when your application is on production stage.\nNull operators: Null Coalescing operator and null conditional operators can also be used in handy while setting values to objects, variables, properties and fields.\nDebugger: For developers, we have the big weapon of Debugging with us. If have we face NullReferenceException during the development face we can use the debugger to get to the source of the exception.\nIn-built method: System methods such as GetValueOrDefault(),IsNullOrWhiteSpace() and IsNullorEmpty()  checks for nulls and assign the default value if there is a null value.\n\n\nThere are many good answers already here. You can also check more detailed description with examples on my blog.\n\nHope this helps too!\n    ","\nIf one is getting this message during saving or compiling the build, just close all the files and then open any file to compile and save. \n\nFor me the reason was that I had rename the file and old file was still open. \n    ","\n                \n                Maybe this is a dumb comment but wouldnt the first and best way to avoid this problem be to initialize the object?   For me if this error occurs it is usually because I forgot to initialize something like the array element. I think it is far less common to define the object as null and then reference it. Maybe give the way to solve each problem adjacent to the description.   Still a good post.\n                \n\u2013\u00A0JPK\n                May 20 \u002714 at 6:39\n            ","\n                \n                What if there is no object, but rather the return value from a method or property?\n                \n\u2013\u00A0John Saunders\n                May 20 \u002714 at 6:41\n            ","\n                \n                The book/author example is a little weird.... How does that even compile?  How does intellisense even work?  What is this I\u0027m not good with computar...\n                \n\u2013\u00A0user1228\n                Sep 8 \u002714 at 18:26\n            ","\n                \n                @Will: does my last edit help? If not, then please be more explicit about what you see as a problem.\n                \n\u2013\u00A0John Saunders\n                Sep 8 \u002714 at 18:41\n            ","\n                \n                @JohnSaunders Oh, no, sorry, I meant the object initializer version of that.  new Book { Author = { Age = 45 } }; How does the inner initialization even... I can\u0027t think of a situation where inner init would ever work, yet it compiles and intellisense works...  Unless for structs?\n                \n\u2013\u00A0user1228\n                Sep 8 \u002714 at 18:44\n                        \n                            \n                        \n            ","\n                \n                Great catch. One-liner way to avoid: DateTime x = (DateTime) o as DateTime? ?? defaultValue;\n                \n\u2013\u00A0Serge Shultz\n                Jun 29 \u002715 at 11:07\n            ","\n                \n                JetBrains\u0027 Resharper tool will identify every place in your code that has the possibility of a null reference error. This is incorrect. I have a solution without that detection, yet the code occasionally results to the exception. I suspect it\u0027s occasionally undetectable - by them at least - when multithreading is involved, but I can\u0027t comment further because I didn\u0027t identify the location of my bug yet.\n                \n\u2013\u00A0j riv\n                Jan 21 \u002718 at 7:42\n                        \n                            \n                        \n            ","\n                \n                But how to solve it when the NullReferenceException comes in usign HttpContext.Current.Responce.Clear(). It is not getting solved by any of the above solution. because while creating its object object of HttpContext then a error comes \u0022Overload resolution failed because no accessible \u0027New\u0027 accepts this Number of arguments.\n                \n\u2013\u00A0Sunny Sandeep\n                Feb 2 \u002718 at 11:14\n                        \n                            \n                        \n            ","\n                \n                -1: since the question is \u0022What is a NullReferenceException\u0022, value types are not relevant.\n                \n\u2013\u00A0John Saunders\n                May 16 \u002713 at 22:00\n            ","\n                \n                @John Saunders: I disagree. As a software developer it is really important to be able to distinguish between value and reference types. else people will end up checking if integers are null.\n                \n\u2013\u00A0Fabian Bigler\n                May 16 \u002713 at 22:28\n                        \n                            \n                        \n            ","\n                \n                True, just not in the context of this question.\n                \n\u2013\u00A0John Saunders\n                May 16 \u002713 at 22:44\n            ","\n                \n                Thanks for the hint. I improved it a bit and added an example at the top. I still think mentioning Reference \u0026 Value Types is useful.\n                \n\u2013\u00A0Fabian Bigler\n                May 16 \u002713 at 23:02\n            ","\n                \n                I think you haven\u0027t added anything that wasn\u0027t in the other answers, since the question pre-supposes a reference type.\n                \n\u2013\u00A0John Saunders\n                May 18 \u002713 at 23:24\n            ","\n                \n                This can happen a lot when unboxing a variable. I find it happens often in event handlers after I changed the type of the UI element but forget to update the code-behind.\n                \n\u2013\u00A0Brendan\n                Feb 19 \u002714 at 0:24\n                        \n                            \n                        \n            ","\n                \n                How profound! I never considered the \u0027null\u0027 constant a reference value. So this is how C# abstracts a \u0022NullPointer\u0022 huh ? B/c as I recall in C\u002B\u002B, a NPE can be caused by dereferencing an uninitialized pointer (ie, ref type in c#) whose default value happens to be an address that is not allocated to that process (many cases this would be 0, especially in later versions of C\u002B\u002B that did auto-initialization, which belongs to the OS - f with it and die beeotch (or just catch the sigkill the OS attacks your process with)).\n                \n\u2013\u00A0samis\n                Jul 31 \u002713 at 18:55\n                        \n                            \n                        \n            ","\n                \n                -1: this only handles a single scenario - that of uninitialized dependencies. This is a minority scenario for NullReferenceException. Most cases are simple misunderstanding of how objects work. Next most frequent are other situations where the developer assumed that the object would be initialized automatically.\n                \n\u2013\u00A0John Saunders\n                Mar 7 \u002714 at 0:06\n            ","\n                \n                Dependency injection is not generally used in order to avoid NullReferenceException. I don\u0027t believe that you have found a general scenario here. In any case, if you edit your answer to be more in the style of stackoverflow.com/a/15232518/76337, then I will remove the downvote.\n                \n\u2013\u00A0John Saunders\n                Mar 7 \u002714 at 0:30\n            ","\n                \n                I thought to add this as no one mentioned this, and as far as it exists as an approach, my intention was to enrich the topic.\n                \n\u2013\u00A0Nick L.\n                Dec 26 \u002714 at 1:03\n                        \n                            \n                        \n            ","\n                \n                Thank you for enriching the topic. I have given my opinion of your addition. Now others can do the same.\n                \n\u2013\u00A0John Saunders\n                Dec 26 \u002714 at 1:05\n            ","\n                \n                I thought this was a worthwhile addition to the topic given that this is a highly viewed thread.  I\u0027ve heard of code contracts before and this was a good reminder to consider using them.\n                \n\u2013\u00A0VoteCoffee\n                Jan 8 \u002715 at 2:03\n            ","\n                \n                This is incorrect. String.Empty.ToLower() will not throw a null reference exception. It represents an actual string, albeit an empty one (i.e. \u0022\u0022). Since this has an object to call ToLower() on, it would not make sense to throw a null reference exception there.\n                \n\u2013\u00A0Kjartan\n                Jul 24 \u002715 at 6:00\n                        \n                            \n                        \n            ","\n                \n                You wanted Html.Partial, not @Html.Partial\n                \n\u2013\u00A0John Saunders\n                Jul 24 \u002715 at 13:55\n            ","\n                \n                Also, please show which line threw the exception,  and why.\n                \n\u2013\u00A0John Saunders\n                Jul 24 \u002715 at 13:56\n            ","\n                \n                The error occurred in MyOtherView.cshtml, which I did not include here, because the Model was not being properly sent in (it was Null), so I knew the error was with how I was sending the Model in.\n                \n\u2013\u00A0Travis Heeter\n                Jul 27 \u002715 at 11:44\n            ","\n                \n                Never throw NullReferenceException\n                \n\u2013\u00A0John Saunders\n                Mar 6 \u002716 at 20:35\n            ","\n                \n                @JohnSaunders dare I ask why? (Seriously though why?)\n                \n\u2013\u00A0Luis Perez\n                Mar 7 \u002716 at 15:29\n            ","\n                \n                NullReferenceException is meant to be thrown by the CLR. It means that a reference to a null has occurred. It does not mean that a reference to a null would occur except that you cleverly checked first.\n                \n\u2013\u00A0John Saunders\n                Mar 7 \u002716 at 15:43\n            ","\n                \n                I see your point about how that would be confusing. I\u0027ve updated it to a regular exception for this example and a custom exception in GitHub.\n                \n\u2013\u00A0Luis Perez\n                Mar 7 \u002716 at 18:41\n                        \n                            \n                        \n            ","\n                \n                Great answer for such a basic question.    It\u0027s not so bad when it is your code that is failing.  It\u0027s horrible when it\u0027s coming from deep inside some a commercial third party library you are relying on, and the customer support keeps insisting that it has to be your code that is causing the problem.  And your not entirely sure it\u0027s not and the whole project is ground to halt..   I actually think this might make an appropriate epitaph for my tombstone: \u0022Object reference not set to an instance of an object.\u0022\n                \n\u2013\u00A0Darrel Lee\n                May 3 \u002716 at 4:01\n            ","\n                \n                Your dictionary example is not an edge case. If the object is not thread safe, then using it from multiple threads produces random  results. Your unsafe code example differs from null in which way?\n                \n\u2013\u00A0John Saunders\n                Mar 24 \u002717 at 2:03\n            ","\n                \n                If you have a reference to an object, then the GC never cleans it up\n                \n\u2013\u00A0John Saunders\n                Dec 24 \u002715 at 7:51\n            ","\n                \n                if you use things like FindObject(\u0022Name of Object\u0022) there is no way GC will know before hand that you are going to refernece that object .. this is what is was trying to explaing .. these occur at runtime\n                \n\u2013\u00A0Akash Gutha\n                Dec 24 \u002715 at 8:11\n            ","\n                \n                There are some frameworks that Provide this functionality in C# such as Unity . the question has nothing related to BCl. Search the Internet before Criticizing there are a ton of functions like them and for ur kind information i even use it daily. Now please tell me how does the answer doesn\u0027t make anysense.\n                \n\u2013\u00A0Akash Gutha\n                Dec 24 \u002715 at 12:35\n            ","\n                \n                docs.unity3d.com/ScriptReference/\u2026  check the link and correct urself mr.expert :p\n                \n\u2013\u00A0Akash Gutha\n                Dec 24 \u002715 at 12:54\n            ","\n                \n                The examples I saw in your link assign the results of GameObject.Find to a member field. That\u0027s a reference and the GC will not collect it until the containing object is collected.\n                \n\u2013\u00A0John Saunders\n                May 25 \u002716 at 18:00\n            ","\n                \n                You basically copied half of that blog post and added nothing new that existing answers don\u0027t address.\n                \n\u2013\u00A0CodeCaster\n                Jul 18 \u002717 at 14:41\n            ","\n                \n                @codecaster Is it said copying when you rewrite a summary from your own blog. I know there is nothing new in my answer and nothing new that previous answers dont have but I wish to contribute in more sophisticated way and let others understand the way I understood. Will be glad even if it helps a single person. In good faith.\n                \n\u2013\u00A0Wasim\n                Jul 18 \u002717 at 18:01\n            ","\n                \n                If you encounter this error by using @Html.TextBoxFor(... ), To fix: 1) Instantiate your ViewModel, and pass it to the View(),   ex     Public ActionResult Index()      {           var model = new Person_viewmodel();           return View(model);       }\n                \n\u2013\u00A0nrs\n                Aug 3 at 15:04\n                        \n                            \n                        \n            "]},{"Id":"2ed0092c-1d1f-4d1c-a55d-5941b23f48f2","QuestionId":20940979,"Description":"What is an IndexOutOfRangeException / ArgumentOutOfRangeException and how do I fix it?","Votes":197,"Views":190140,"Tags":["c#",".net","indexoutofrangeexception"],"Discussions":["\nWhat Is It?\n\nThis exception means that you\u0027re trying to access a collection item by index, using an invalid index. An index is invalid when it\u0027s lower than the collection\u0027s lower bound or greater than or equal to the number of elements it contains.\n\nWhen It Is Thrown\n\nGiven an array declared as:\n\nbyte[] array = new byte[4];\n\n\nYou can access this array from 0 to 3, values outside this range will cause IndexOutOfRangeException to be thrown. Remember this when you create and access an array. \n\nArray Length\nIn C#, usually, arrays are 0-based. It means that first element has index 0 and last element has index Length - 1 (where Length is total number of items in the array) so this code doesn\u0027t work:\n\narray[array.Length] = 0;\n\n\nMoreover please note that if you have a multidimensional array then you can\u0027t use Array.Length for both dimension, you have to use Array.GetLength():\n\nint[,] data = new int[10, 5];\nfor (int i=0; i \u003C data.GetLength(0); \u002B\u002Bi) {\n    for (int j=0; j \u003C data.GetLength(1); \u002B\u002Bj) {\n        data[i, j] = 1;\n    }\n}\n\n\nUpper Bound Is Not Inclusive\nIn the following example we create a raw bidimensional array of Color. Each item represents a pixel, indices are from (0, 0) to (imageWidth - 1, imageHeight - 1).\n\nColor[,] pixels = new Color[imageWidth, imageHeight];\nfor (int x = 0; x \u003C= imageWidth; \u002B\u002Bx) {\n    for (int y = 0; y \u003C= imageHeight; \u002B\u002By) {\n        pixels[x, y] = backgroundColor;\n    }\n}\n\n\nThis code will then fail because array is 0-based and last (bottom-right) pixel in the image is pixels[imageWidth - 1, imageHeight - 1]:\n\npixels[imageWidth, imageHeight] = Color.Black;\n\n\nIn another scenario you may get ArgumentOutOfRangeException for this code (for example if you\u0027re using GetPixel method on a Bitmap class).\n\nArrays Do Not Grow\nAn array is fast. Very fast in linear search compared to every other collection. It is because items are contiguous in memory so memory address can be calculated (and increment is just an addition). No need to follow a node list, simple math! You pay this with a limitation: they can\u0027t grow, if you need more elements you need to reallocate that array (this may take a relatively long time if old items must be copied to a new block). You resize them with Array.Resize\u003CT\u003E(), this example adds a new entry to an existing array:\n\nArray.Resize(ref array, array.Length \u002B 1);\n\n\nDon\u0027t forget that valid indices are from 0 to Length - 1. If you simply try to assign an item at Length you\u0027ll get IndexOutOfRangeException (this behavior may confuse you if you think they may increase with a syntax similar to Insert method of other collections).\n\nSpecial Arrays With Custom Lower Bound\nFirst item in arrays has always index 0. This is not always true because you can create an array with a custom lower bound:\n\nvar array = Array.CreateInstance(typeof(byte), new int[] { 4 }, new int[] { 1 });\n\n\nIn that example, array indices are valid from 1 to 4. Of course, upper bound cannot be changed. \n\nWrong Arguments\nIf you access an array using unvalidated arguments (from user input or from function user) you may get this error:\n\nprivate static string[] RomanNumbers =\n    new string[] { \u0022I\u0022, \u0022II\u0022, \u0022III\u0022, \u0022IV\u0022, \u0022V\u0022 };\n\npublic static string Romanize(int number)\n{\n    return RomanNumbers[number];\n}\n\n\nUnexpected Results\nThis exception may be thrown for another reason too: by convention, many search functions will return -1 (nullables has been introduced with .NET 2.0 and anyway it\u0027s also a well-known convention in use from many years) if they didn\u0027t find anything. Let\u0027s imagine you have an array of objects comparable with a string. You may think to write this code:\n\n// Items comparable with a string\nConsole.WriteLine(\u0022First item equals to \u0027Debug\u0027 is \u0027{0}\u0027.\u0022,\n    myArray[Array.IndexOf(myArray, \u0022Debug\u0022)]);\n\n// Arbitrary objects\nConsole.WriteLine(\u0022First item equals to \u0027Debug\u0027 is \u0027{0}\u0027.\u0022,\n    myArray[Array.FindIndex(myArray, x =\u003E x.Type == \u0022Debug\u0022)]);\n\n\nThis will fail if no items in myArray will satisfy search condition because Array.IndexOf() will return -1 and then array access will throw. \n\nNext example is a naive example to calculate occurrences of a given set of numbers (knowing maximum number and returning an array where item at index 0 represents number 0, items at index 1 represents number 1 and so on):\n\nstatic int[] CountOccurences(int maximum, IEnumerable\u003Cint\u003E numbers) {\n    int[] result = new int[maximum \u002B 1]; // Includes 0\n\n    foreach (int number in numbers)\n        \u002B\u002Bresult[number];\n\n    return result;\n}\n\n\nOf course, it\u0027s a pretty terrible implementation but what I want to show is that it\u0027ll fail for negative numbers and numbers above maximum.\n\nHow it applies to List\u003CT\u003E?\n\nSame cases as array - range of valid indexes - 0 (List\u0027s indexes always start with 0) to list.Count - accessing elements outside of this range will cause the exception.\n\nNote that List\u003CT\u003E throws ArgumentOutOfRangeException for the same cases where arrays use IndexOutOfRangeException.\n\nUnlike arrays, List\u003CT\u003E starts empty - so trying to access items of just created list lead to this exception.\n\nvar list = new List\u003Cint\u003E();\n\n\nCommon case is to populate list with indexing (similar to Dictionary\u003Cint, T\u003E) will cause exception:\n\nlist[0] = 42; // exception\nlist.Add(42); // correct\n\n\nIDataReader and Columns\nImagine you\u0027re trying to read data from a database with this code:\n\nusing (var connection = CreateConnection()) {\n    using (var command = connection.CreateCommand()) {\n        command.CommandText = \u0022SELECT MyColumn1, MyColumn2 FROM MyTable\u0022;\n\n        using (var reader = command.ExecuteReader()) {\n            while (reader.Read()) {\n                ProcessData(reader.GetString(2)); // Throws!\n            }\n        }\n    }\n}\n\n\nGetString() will throw IndexOutOfRangeException because you\u0027re dataset has only two columns but you\u0027re trying to get a value from 3rd one (indices are always 0-based).\n\nPlease note that this behavior is shared with most IDataReader implementations (SqlDataReader, OleDbDataReader and so on).   \n\nYou can get the same exception also if you use the IDataReader overload of the indexer operator that takes a column name and pass an invalid column name.\nSuppose for example that you have retrieved a column named Column1 but then you try to retrieve the value of that field with\n\n var data = dr[\u0022Colum1\u0022];  // Missing the n in Column1.\n\n\nThis happens because the indexer operator is implemented trying to retrieve the index of a Colum1 field that doesn\u0027t exist. The GetOrdinal method will throw this exception when its internal helper code returns a -1 as the index of \u0022Colum1\u0022.\n\nOthers\nThere is another (documented) case when this exception is thrown: if, in DataView, data column name being supplied to the DataViewSort property is not valid.\n\nHow to Avoid\n\nIn this example, let me assume, for simplicity, that arrays are always monodimensional and 0-based. If you want to be strict (or you\u0027re developing a library), you may need to replace 0 with GetLowerBound(0) and .Length with GetUpperBound(0) (of course if you have parameters of type System.Array, it doesn\u0027t apply for T[]). Please note that in this case, upper bound is inclusive then this code:\n\nfor (int i=0; i \u003C array.Length; \u002B\u002Bi) { }\n\n\nShould be rewritten like this:\n\nfor (int i=array.GetLowerBound(0); i \u003C= array.GetUpperBound(0); \u002B\u002Bi) { }\n\n\nPlease note that this is not allowed (it\u0027ll throw InvalidCastException), that\u0027s why if your parameters are T[] you\u0027re safe about custom lower bound arrays:\n\nvoid foo\u003CT\u003E(T[] array) { }\n\nvoid test() {\n    // This will throw InvalidCastException, cannot convert Int32[] to Int32[*]\n    foo((int)Array.CreateInstance(typeof(int), new int[] { 1 }, new int[] { 1 }));\n}\n\n\nValidate Parameters\nIf index comes from a parameter you should always validate them (throwing appropriate ArgumentException or ArgumentOutOfRangeException). In the next example, wrong parameters may cause IndexOutOfRangeException, users of this function may expect this because they\u0027re passing an array but it\u0027s not always so obvious. I\u0027d suggest to always validate parameters for public functions:\n\nstatic void SetRange\u003CT\u003E(T[] array, int from, int length, Func\u003Ci, T\u003E function)\n{\n    if (from \u003C 0 || from\u003E= array.Length)\n        throw new ArgumentOutOfRangeException(\u0022from\u0022);\n\n    if (length \u003C 0)\n        throw new ArgumentOutOfRangeException(\u0022length\u0022);\n\n    if (from \u002B length \u003E array.Length)\n        throw new ArgumentException(\u0022...\u0022);\n\n    for (int i=from; i \u003C from \u002B length; \u002B\u002Bi)\n        array[i] = function(i);\n}\n\n\nIf function is private you may simply replace if logic with Debug.Assert():\n\nDebug.Assert(from \u003E= 0 \u0026\u0026 from \u003C array.Length);\n\n\nCheck Object State\nArray index may not come directly from a parameter. It may be part of object state. In general is always a good practice to validate object state (by itself and with function parameters, if needed). You can use Debug.Assert(), throw a proper exception (more descriptive about the problem) or handle that like in this example:\n\nclass Table {\n    public int SelectedIndex { get; set; }\n    public Row[] Rows { get; set; }\n\n    public Row SelectedRow {\n        get {\n            if (Rows == null)\n                throw new InvalidOperationException(\u0022...\u0022);\n\n            // No or wrong selection, here we just return null for\n            // this case (it may be the reason we use this property\n            // instead of direct access)\n            if (SelectedIndex \u003C 0 || SelectedIndex \u003E= Rows.Length)\n                return null;\n\n            return Rows[SelectedIndex];\n        }\n}\n\n\nValidate Return Values\nIn one of previous examples we directly used Array.IndexOf() return value. If we know it may fail then it\u0027s better to handle that case:\n\nint index = myArray[Array.IndexOf(myArray, \u0022Debug\u0022);\nif (index != -1) { } else { }\n\n\nHow to Debug\n\nIn my opinion, most of the questions, here on SO, about this error can be simply avoided. The time you spend to write a proper question (with a small working example and a small explanation) could easily much more than the time you\u0027ll need to debug your code. First of all, read this Eric Lippert\u0027s blog post about debugging of small programs, I won\u0027t repeat his words here but it\u0027s absolutely a must read.\n\nYou have source code, you have exception message with a stack trace. Go there, pick right line number and you\u0027ll see:\n\narray[index] = newValue;\n\n\nYou found your error, check how index increases. Is it right? Check how array is allocated, is coherent with how index increases? Is it right according to your specifications? If you answer yes to all these questions, then you\u0027ll find good help here on StackOverflow but please first check for that by yourself. You\u0027ll save your own time!\n\nA good start point is to always use assertions and to validate inputs. You may even want to use code contracts. When something went wrong and you can\u0027t figure out what happens with a quick look at your code then you have to resort to an old friend: debugger. Just run your application in debug inside Visual Studio (or your favorite IDE), you\u0027ll see exactly which line throws this exception, which array is involved and which index you\u0027re trying to use. Really, 99% of the times you\u0027ll solve it by yourself in a few minutes.\n\nIf this happens in production then you\u0027d better to add assertions in incriminated code, probably we won\u0027t see in your code what you can\u0027t see by yourself (but you can always bet).\n\nThe VB.NET side of the story\n\nEverything that we have said in the C# answer is valid for VB.NET with the obvious syntax differences but there is an important point to consider when you deal with VB.NET arrays.\n\nIn VB.NET, arrays are declared setting the maximum valid index value for the array. It is not the count of the elements that we want to store in the array.\n\n\u0027 declares an array with space for 5 integer \n\u0027 4 is the maximum valid index starting from 0 to 4\nDim myArray(4) as Integer\n\n\nSo this loop will fill the array with 5 integers without causing any IndexOutOfRangeException\n\nFor i As Integer = 0 To 4\n    myArray(i) = i\nNext\n\n\nThe VB.NET rule\n\nThis exception means that you\u0027re trying to access a collection item by index, using an invalid index. An index is invalid when it\u0027s lower than the collection\u0027s lower bound or greater than equal to the number of elements it contains. the maximum allowed index defined in the array declaration\n    ","\nSimple explanation about what a Index out of bound exception is:\n\nJust think one train is there its compartments are D1,D2,D3.\nOne passenger came to enter the train and he have the ticket for D4.\nnow what will happen. the passenger want to enter a compartment that does not exist so obviously problem will arise. \n\nSame scenario: whenever we try to access an array list, etc. we can only access the existing indexes in the array. array[0] and array[1] are existing. If we try to access array[3], it\u0027s not there actually, so an index out of bound exception will arise.\n    ","\nTo easily understand the problem, imagine we wrote this code:\n\nstatic void Main(string[] args)\n{\n    string[] test = new string[3];\n    test[0]= \u0022hello1\u0022;\n    test[1]= \u0022hello2\u0022;\n    test[2]= \u0022hello3\u0022;\n\n    for (int i = 0; i \u003C= 3; i\u002B\u002B)\n    {\n        Console.WriteLine(test[i].ToString());\n    }\n}\n\n\nResult will be:\n\nhello1\nhello2\nhello3\n\nUnhandled Exception: System.IndexOutOfRangeException: Index was outside the bounds of the array.\n\n\nSize of array is 3 (indices 0, 1 and 2), but the for-loop loops 4 times (0, 1, 2 and 3). So when it tries to access outside the bounds with (3) it throws the exception.\n    ","\nA side from the very long complete accepted answer there is an important point to make about IndexOutOfRangeException compared with many other exception types, and that is:  \n\nOften there is complex program state that maybe difficult to have control over at a particular point in code e.g a DB connection goes down so data for an input cannot be retrieved etc... This kind of issue often results in an Exception of some kind that has to bubble up to a higher level because where it occurs has no way of dealing with it at that point.  \n\nIndexOutOfRangeException is generally different in that it in most cases it is pretty trivial to check for at the point where the exception is being raised.  Generally this kind of exception get thrown by some code that could very easily deal with the issue at the place it is occurring - just by checking the actual length of the array.  You don\u0027t want to \u0027fix\u0027 this by handling this exception higher up - but instead by ensuring its not thrown in the first instance - which in most cases is easy to do by checking the array length.  \n\nAnother way of putting this is that other exceptions can arise due to genuine lack of control over input or program state BUT IndexOutOfRangeException more often than not is simply just pilot (programmer) error.\n    "]},{"Id":"25bd1f75-ddd3-4268-8439-ebcd1827415c","QuestionId":661561,"Description":"How do I update the GUI from another thread?","Votes":1442,"Views":693155,"Tags":["c#",".net","multithreading","winforms","user-interface"],"Discussions":["\nFor .NET 2.0, here\u0027s a nice bit of code I wrote that does exactly what you want, and works for any property on a Control:\n\nprivate delegate void SetControlPropertyThreadSafeDelegate(\n    Control control, \n    string propertyName, \n    object propertyValue);\n\npublic static void SetControlPropertyThreadSafe(\n    Control control, \n    string propertyName, \n    object propertyValue)\n{\n  if (control.InvokeRequired)\n  {\n    control.Invoke(new SetControlPropertyThreadSafeDelegate               \n    (SetControlPropertyThreadSafe), \n    new object[] { control, propertyName, propertyValue });\n  }\n  else\n  {\n    control.GetType().InvokeMember(\n        propertyName, \n        BindingFlags.SetProperty, \n        null, \n        control, \n        new object[] { propertyValue });\n  }\n}\n\n\nCall it like this:\n\n// thread-safe equivalent of\n// myLabel.Text = status;\nSetControlPropertyThreadSafe(myLabel, \u0022Text\u0022, status);\n\n\nIf you\u0027re using .NET 3.0 or above, you could rewrite the above method as an extension method of the Control class, which would then simplify the call to:\n\nmyLabel.SetPropertyThreadSafe(\u0022Text\u0022, status);\n\n\nUPDATE 05/10/2010:\n\nFor .NET 3.0 you should use this code:\n\nprivate delegate void SetPropertyThreadSafeDelegate\u003CTResult\u003E(\n    Control @this, \n    Expression\u003CFunc\u003CTResult\u003E\u003E property, \n    TResult value);\n\npublic static void SetPropertyThreadSafe\u003CTResult\u003E(\n    this Control @this, \n    Expression\u003CFunc\u003CTResult\u003E\u003E property, \n    TResult value)\n{\n  var propertyInfo = (property.Body as MemberExpression).Member \n      as PropertyInfo;\n\n  if (propertyInfo == null ||\n      !@this.GetType().IsSubclassOf(propertyInfo.ReflectedType) ||\n      @this.GetType().GetProperty(\n          propertyInfo.Name, \n          propertyInfo.PropertyType) == null)\n  {\n    throw new ArgumentException(\u0022The lambda expression \u0027property\u0027 must reference a valid property on this Control.\u0022);\n  }\n\n  if (@this.InvokeRequired)\n  {\n      @this.Invoke(new SetPropertyThreadSafeDelegate\u003CTResult\u003E \n      (SetPropertyThreadSafe), \n      new object[] { @this, property, value });\n  }\n  else\n  {\n      @this.GetType().InvokeMember(\n          propertyInfo.Name, \n          BindingFlags.SetProperty, \n          null, \n          @this, \n          new object[] { value });\n  }\n}\n\n\nwhich uses LINQ and lambda expressions to allow much cleaner, simpler and safer syntax:\n\nmyLabel.SetPropertyThreadSafe(() =\u003E myLabel.Text, status); // status has to be a string or this will fail to compile\n\n\nNot only is the property name now checked at compile time, the property\u0027s type is as well, so it\u0027s impossible to (for example) assign a string value to a boolean property, and hence cause a runtime exception.\n\nUnfortunately this doesn\u0027t stop anyone from doing stupid things such as passing in another Control\u0027s property and value, so the following will happily compile:\n\nmyLabel.SetPropertyThreadSafe(() =\u003E aForm.ShowIcon, false);\n\n\nHence I added the runtime checks to ensure that the passed-in property does actually belong to the Control that the method\u0027s being called on. Not perfect, but still a lot better than the .NET 2.0 version.\n\nIf anyone has any further suggestions on how to improve this code for compile-time safety, please comment!\n    ","\nThe simplest way is an anonymous method passed into Label.Invoke:\n\n// Running on the worker thread\nstring newText = \u0022abc\u0022;\nform.Label.Invoke((MethodInvoker)delegate {\n    // Running on the UI thread\n    form.Label.Text = newText;\n});\n// Back on the worker thread\n\n\nNotice that Invoke blocks execution until it completes--this is synchronous code. The question doesn\u0027t ask about asynchronous code, but there is lots of content on Stack Overflow about writing asynchronous code when you want to learn about it.\n    ","\nHandling long work\n\nSince .NET 4.5 and C# 5.0 you should use Task-based Asynchronous Pattern (TAP) along with async-await keywords in all areas (including the GUI):\n\n\n  TAP is the recommended asynchronous design pattern for new development\n\n\ninstead of Asynchronous Programming Model (APM) and Event-based Asynchronous Pattern (EAP) (the latter includes the BackgroundWorker Class).\n\nThen, the recommended solution for new development is:\n\n\nAsynchronous implementation of an event handler (Yes, that\u0027s all):\n\nprivate async void Button_Clicked(object sender, EventArgs e)\n{\n    var progress = new Progress\u003Cstring\u003E(s =\u003E label.Text = s);\n    await Task.Factory.StartNew(() =\u003E SecondThreadConcern.LongWork(progress),\n                                TaskCreationOptions.LongRunning);\n    label.Text = \u0022completed\u0022;\n}\n\nImplementation of the second thread that notifies the UI thread:\n\nclass SecondThreadConcern\n{\n    public static void LongWork(IProgress\u003Cstring\u003E progress)\n    {\n        // Perform a long running work...\n        for (var i = 0; i \u003C 10; i\u002B\u002B)\n        {\n            Task.Delay(500).Wait();\n            progress.Report(i.ToString());\n        }\n    }\n}\n\n\n\nNotice the following: \n\n\nShort and clean code written in sequential manner without callbacks and explicit threads.\nTask instead of Thread.\nasync keyword, that allows to use await which in turn prevent the event handler from reaching the completion state till the task finished and in the meantime doesn\u0027t block the UI thread.\nProgress class (see IProgress Interface) that supports Separation of Concerns (SoC) design principle and doesn\u0027t require explicit dispatcher and invoking. It uses the current SynchronizationContext from its creation place (here the UI thread).\nTaskCreationOptions.LongRunning that hints to do not queue the task into ThreadPool.\n\n\nFor a more verbose examples see: The Future of C#: Good things come to those who \u0027await\u0027 by Joseph Albahari.\n\nSee also about UI Threading Model concept.\n\nHandling exceptions\n\nThe below snippet is an example of how to handle exceptions and toggle button\u0027s Enabled property to prevent multiple clicks during background execution.\n\nprivate async void Button_Click(object sender, EventArgs e)\n{\n    button.Enabled = false;\n\n    try\n    {\n        var progress = new Progress\u003Cstring\u003E(s =\u003E button.Text = s);\n        await Task.Run(() =\u003E SecondThreadConcern.FailingWork(progress));\n        button.Text = \u0022Completed\u0022;\n    }\n    catch(Exception exception)\n    {\n        button.Text = \u0022Failed: \u0022 \u002B exception.Message;\n    }\n\n    button.Enabled = true;\n}\n\nclass SecondThreadConcern\n{\n    public static void FailingWork(IProgress\u003Cstring\u003E progress)\n    {\n        progress.Report(\u0022I will fail in...\u0022);\n        Task.Delay(500).Wait();\n\n        for (var i = 0; i \u003C 3; i\u002B\u002B)\n        {\n            progress.Report((3 - i).ToString());\n            Task.Delay(500).Wait();\n        }\n\n        throw new Exception(\u0022Oops...\u0022);\n    }\n}\n\n    ","\nVariation of Marc Gravell\u0027s simplest solution for .NET 4:\n\ncontrol.Invoke((MethodInvoker) (() =\u003E control.Text = \u0022new text\u0022));\n\n\nOr use Action delegate instead:\n\ncontrol.Invoke(new Action(() =\u003E control.Text = \u0022new text\u0022));\n\n\nSee here for a comparison of the two: MethodInvoker vs Action for Control.BeginInvoke\n    ","\nFire and forget extension method for .NET 3.5\u002B\n\nusing System;\nusing System.Windows.Forms;\n\npublic static class ControlExtensions\n{\n    /// \u003Csummary\u003E\n    /// Executes the Action asynchronously on the UI thread, does not block execution on the calling thread.\n    /// \u003C/summary\u003E\n    /// \u003Cparam name=\u0022control\u0022\u003E\u003C/param\u003E\n    /// \u003Cparam name=\u0022code\u0022\u003E\u003C/param\u003E\n    public static void UIThread(this Control @this, Action code)\n    {\n        if (@this.InvokeRequired)\n        {\n            @this.BeginInvoke(code);\n        }\n        else\n        {\n            code.Invoke();\n        }\n    }\n}\n\n\nThis can be called using the following line of code:\n\nthis.UIThread(() =\u003E this.myLabel.Text = \u0022Text Goes Here\u0022);\n\n    ","\nThis is the classic way you should do this:\n\nusing System;\nusing System.Windows.Forms;\nusing System.Threading;\n\nnamespace Test\n{\n    public partial class UIThread : Form\n    {\n        Worker worker;\n\n        Thread workerThread;\n\n        public UIThread()\n        {\n            InitializeComponent();\n\n            worker = new Worker();\n            worker.ProgressChanged \u002B= new EventHandler\u003CProgressChangedArgs\u003E(OnWorkerProgressChanged);\n            workerThread = new Thread(new ThreadStart(worker.StartWork));\n            workerThread.Start();\n        }\n\n        private void OnWorkerProgressChanged(object sender, ProgressChangedArgs e)\n        {\n            // Cross thread - so you don\u0027t get the cross-threading exception\n            if (this.InvokeRequired)\n            {\n                this.BeginInvoke((MethodInvoker)delegate\n                {\n                    OnWorkerProgressChanged(sender, e);\n                });\n                return;\n            }\n\n            // Change control\n            this.label1.Text = e.Progress;\n        }\n    }\n\n    public class Worker\n    {\n        public event EventHandler\u003CProgressChangedArgs\u003E ProgressChanged;\n\n        protected void OnProgressChanged(ProgressChangedArgs e)\n        {\n            if(ProgressChanged!=null)\n            {\n                ProgressChanged(this,e);\n            }\n        }\n\n        public void StartWork()\n        {\n            Thread.Sleep(100);\n            OnProgressChanged(new ProgressChangedArgs(\u0022Progress Changed\u0022));\n            Thread.Sleep(100);\n        }\n    }\n\n\n    public class ProgressChangedArgs : EventArgs\n    {\n        public string Progress {get;private set;}\n        public ProgressChangedArgs(string progress)\n        {\n            Progress = progress;\n        }\n    }\n}\n\n\nYour worker thread has an event. Your UI thread starts off another thread to do the work and hooks up that worker event so you can display the state of the worker thread.\n\nThen in the UI you need to cross threads to change the actual control... like a label or a progress bar.\n    ","\nThe simple solution is to use Control.Invoke.\n\nvoid DoSomething()\n{\n    if (InvokeRequired) {\n        Invoke(new MethodInvoker(updateGUI));\n    } else {\n        // Do Something\n        updateGUI();\n    }\n}\n\nvoid updateGUI() {\n    // update gui here\n}\n\n    ","\nThreading code is often buggy and always hard to test. You don\u0027t need to write threading code to update the user interface from a background task. Just use the BackgroundWorker class to run the task and its ReportProgress method to update the user interface. Usually, you just report a percentage complete, but there\u0027s another overload that includes a state object. Here\u0027s an example that just reports a string object:\n\n    private void button1_Click(object sender, EventArgs e)\n    {\n        backgroundWorker1.WorkerReportsProgress = true;\n        backgroundWorker1.RunWorkerAsync();\n    }\n\n    private void backgroundWorker1_DoWork(object sender, DoWorkEventArgs e)\n    {\n        Thread.Sleep(5000);\n        backgroundWorker1.ReportProgress(0, \u0022A\u0022);\n        Thread.Sleep(5000);\n        backgroundWorker1.ReportProgress(0, \u0022B\u0022);\n        Thread.Sleep(5000);\n        backgroundWorker1.ReportProgress(0, \u0022C\u0022);\n    }\n\n    private void backgroundWorker1_ProgressChanged(\n        object sender, \n        ProgressChangedEventArgs e)\n    {\n        label1.Text = e.UserState.ToString();\n    }\n\n\nThat\u0027s fine if you always want to update the same field. If you\u0027ve got more complicated updates to make, you could define a class to represent the UI state and pass it to the ReportProgress method.\n\nOne final thing, be sure to set the WorkerReportsProgress flag, or the ReportProgress method will be completely ignored.\n    ","\nThe vast majority of answers use Control.Invoke which is a race condition waiting to happen. For example, consider the accepted answer:\n\nstring newText = \u0022abc\u0022; // running on worker thread\nthis.Invoke((MethodInvoker)delegate { \n    someLabel.Text = newText; // runs on UI thread\n});\n\n\nIf the user closes the form just before this.Invoke is called (remember, this is the Form object), an ObjectDisposedException will be likely fired.\n\nThe solution is to use SynchronizationContext, specifically SynchronizationContext.Current as hamilton.danielb suggests (other answers rely on specific SynchronizationContext implementations which is completely unnecessary). I would slightly modify his code to use SynchronizationContext.Post rather than SynchronizationContext.Send though (as there\u0027s typically no need for the worker thread to wait):\n\npublic partial class MyForm : Form\n{\n    private readonly SynchronizationContext _context;\n    public MyForm()\n    {\n        _context = SynchronizationContext.Current\n        ...\n    }\n\n    private MethodOnOtherThread()\n    {\n         ...\n         _context.Post(status =\u003E someLabel.Text = newText,null);\n    }\n}\n\n\nNote that on .NET 4.0 and up you should really be using tasks for async operations. See n-san\u0027s answer for the equivalent task-based approach (using TaskScheduler.FromCurrentSynchronizationContext). \n\nFinally, on .NET 4.5 and up you can also use Progress\u003CT\u003E (which basically captures SynchronizationContext.Current upon its creation) as demonstrated by Ryszard D\u017Cegan\u0027s for cases where the long-running operation needs to run UI code while still working.\n    ","\nYou\u0027ll have to make sure that the update happens on the correct thread; the UI thread.\n\nIn order to do this, you\u0027ll have to Invoke the event-handler instead of calling it directly.\n\nYou can do this by raising your event like this:\n\n(The code is typed here out of my head, so I haven\u0027t checked for correct syntax, etc., but it should get you going.)\n\nif( MyEvent != null )\n{\n   Delegate[] eventHandlers = MyEvent.GetInvocationList();\n\n   foreach( Delegate d in eventHandlers )\n   {\n      // Check whether the target of the delegate implements \n      // ISynchronizeInvoke (Winforms controls do), and see\n      // if a context-switch is required.\n      ISynchronizeInvoke target = d.Target as ISynchronizeInvoke;\n\n      if( target != null \u0026\u0026 target.InvokeRequired )\n      {\n         target.Invoke (d, ... );\n      }\n      else\n      {\n          d.DynamicInvoke ( ... );\n      }\n   }\n}\n\n\nNote that the code above will not work on WPF projects, since WPF controls do not implement the ISynchronizeInvoke interface.\n\nIn order to make sure that the code above works with Windows Forms and WPF, and all other platforms, you can have a look at the AsyncOperation, AsyncOperationManager and SynchronizationContext classes.\n\nIn order to easily raise events this way, I\u0027ve created an extension method, which allows me to simplify raising an event by just calling:\n\nMyEvent.Raise(this, EventArgs.Empty);\n\n\nOf course, you can also make use of the BackGroundWorker class, which will abstract this matter for you.\n    ","\nYou\u0027ll need to Invoke the method on the GUI thread. You can do that by calling Control.Invoke.\n\nFor example:\n\ndelegate void UpdateLabelDelegate (string message);\n\nvoid UpdateLabel (string message)\n{\n    if (InvokeRequired)\n    {\n         Invoke (new UpdateLabelDelegate (UpdateLabel), message);\n         return;\n    }\n\n    MyLabelControl.Text = message;\n}\n\n    ","\nBecause of the triviality of the scenario I would actually have the UI thread poll for the status. I think you will find that it can be quite elegant.\n\npublic class MyForm : Form\n{\n  private volatile string m_Text = \u0022\u0022;\n  private System.Timers.Timer m_Timer;\n\n  private MyForm()\n  {\n    m_Timer = new System.Timers.Timer();\n    m_Timer.SynchronizingObject = this;\n    m_Timer.Interval = 1000;\n    m_Timer.Elapsed \u002B= (s, a) =\u003E { MyProgressLabel.Text = m_Text; };\n    m_Timer.Start();\n    var thread = new Thread(WorkerThread);\n    thread.Start();\n  }\n\n  private void WorkerThread()\n  {\n    while (...)\n    {\n      // Periodically publish progress information.\n      m_Text = \u0022Still working...\u0022;\n    }\n  }\n}\n\n\nThe approach avoids the marshaling operation required when using the ISynchronizeInvoke.Invoke and ISynchronizeInvoke.BeginInvoke methods. There is nothing wrong with using the marshaling technique, but there are a couple of caveats you need to be aware of.\n\n\nMake sure you do not call BeginInvoke too frequently or it could overrun the message pump.\nCalling Invoke on the worker thread is a blocking call. It will temporarily halt the work being done in that thread.\n\n\nThe strategy I propose in this answer reverses the communication roles of the threads. Instead of the worker thread pushing the data the UI thread polls for it. This a common pattern used in many scenarios. Since all you are wanting to do is display progress information from the worker thread then I think you will find that this solution is a great alternative to the marshaling solution. It has the following advantages.\n\n\nThe UI and worker threads remain loosely coupled as opposed to the Control.Invoke or Control.BeginInvoke approach which tightly couples them.\nThe UI thread will not impede the progress of the worker thread.\nThe worker thread cannot dominate the time the UI thread spends updating.\nThe intervals at which the UI and worker threads perform operations can remain independent.\nThe worker thread cannot overrun the UI thread\u0027s message pump.\nThe UI thread gets to dictate when and how often the UI gets updated.\n\n    ","\nNone of the Invoke stuff in the previous answers is necessary.\n\nYou need to look at WindowsFormsSynchronizationContext:\n\n// In the main thread\nWindowsFormsSynchronizationContext mUiContext = new WindowsFormsSynchronizationContext();\n\n...\n\n// In some non-UI Thread\n\n// Causes an update in the GUI thread.\nmUiContext.Post(UpdateGUI, userData);\n\n...\n\nvoid UpdateGUI(object userData)\n{\n    // Update your GUI controls here\n}\n\n    ","\nThis one is similar to the solution above using .NET Framework 3.0, but it solved the issue of compile-time safety support.\n\npublic  static class ControlExtension\n{\n    delegate void SetPropertyValueHandler\u003CTResult\u003E(Control souce, Expression\u003CFunc\u003CControl, TResult\u003E\u003E selector, TResult value);\n\n    public static void SetPropertyValue\u003CTResult\u003E(this Control source, Expression\u003CFunc\u003CControl, TResult\u003E\u003E selector, TResult value)\n    {\n        if (source.InvokeRequired)\n        {\n            var del = new SetPropertyValueHandler\u003CTResult\u003E(SetPropertyValue);\n            source.Invoke(del, new object[]{ source, selector, value});\n        }\n        else\n        {\n            var propInfo = ((MemberExpression)selector.Body).Member as PropertyInfo;\n            propInfo.SetValue(source, value, null);\n        }\n    }\n}\n\n\nTo use:\n\nthis.lblTimeDisplay.SetPropertyValue(a =\u003E a.Text, \u0022some string\u0022);\nthis.lblTimeDisplay.SetPropertyValue(a =\u003E a.Visible, false);\n\n\nThe compiler will fail if the user passes the wrong data type.\n\nthis.lblTimeDisplay.SetPropertyValue(a =\u003E a.Visible, \u0022sometext\u0022);\n\n    ","\nSalvete! Having searched for this question, I found the answers by FrankG and Oregon Ghost to be the easiest most useful to me. Now, I code in Visual Basic and ran this snippet through a convertor; so I\u0027m not sure quite how it turns out.\n\nI have a dialog form called form_Diagnostics, which has a richtext box, called updateDiagWindow, which I am using as a sort of logging display.  I needed to be able to update its text from all threads. The extra lines allow the window to automatically scroll to the newest lines.\n\nAnd so, I can now update the display with one line, from anywhere in the entire program in the manner which you think it would work without any threading:\n\n  form_Diagnostics.updateDiagWindow(whatmessage);\n\n\nMain Code (put this inside of your form\u0027s class code):\n\n#region \u0022---------Update Diag Window Text------------------------------------\u0022\n// This sub allows the diag window to be updated by all threads\npublic void updateDiagWindow(string whatmessage)\n{\n    var _with1 = diagwindow;\n    if (_with1.InvokeRequired) {\n        _with1.Invoke(new UpdateDiagDelegate(UpdateDiag), whatmessage);\n    } else {\n        UpdateDiag(whatmessage);\n    }\n}\n// This next line makes the private UpdateDiagWindow available to all threads\nprivate delegate void UpdateDiagDelegate(string whatmessage);\nprivate void UpdateDiag(string whatmessage)\n{\n    var _with2 = diagwindow;\n    _with2.appendtext(whatmessage);\n    _with2.SelectionStart = _with2.Text.Length;\n    _with2.ScrollToCaret();\n}\n#endregion\n\n    ","\nFor many purposes it\u0027s as simple as this:\n\npublic delegate void serviceGUIDelegate();\nprivate void updateGUI()\n{\n  this.Invoke(new serviceGUIDelegate(serviceGUI));\n}\n\n\n\u0022serviceGUI()\u0022 is a GUI level method within the form (this) that can change as many controls as you want. Call \u0022updateGUI()\u0022 from the other thread. Parameters can be added to pass values, or (probably faster) use class scope variables with locks on them as required if there is any possibility of a clash between threads accessing them that could cause instability.  Use BeginInvoke instead of Invoke if the non-GUI thread is time critical (keeping Brian Gideon\u0027s warning in mind). \n    ","\nThis in my C# 3.0 variation of Ian Kemp\u0027s solution:\n\npublic static void SetPropertyInGuiThread\u003CC,V\u003E(this C control, Expression\u003CFunc\u003CC, V\u003E\u003E property, V value) where C : Control\n{\n    var memberExpression = property.Body as MemberExpression;\n    if (memberExpression == null)\n        throw new ArgumentException(\u0022The \u0027property\u0027 expression must specify a property on the control.\u0022);\n\n    var propertyInfo = memberExpression.Member as PropertyInfo;\n    if (propertyInfo == null)\n        throw new ArgumentException(\u0022The \u0027property\u0027 expression must specify a property on the control.\u0022);\n\n    if (control.InvokeRequired)\n        control.Invoke(\n            (Action\u003CC, Expression\u003CFunc\u003CC, V\u003E\u003E, V\u003E)SetPropertyInGuiThread,\n            new object[] { control, property, value }\n        );\n    else\n        propertyInfo.SetValue(control, value, null);\n}\n\n\nYou call it like this:\n\nmyButton.SetPropertyInGuiThread(b =\u003E b.Text, \u0022Click Me!\u0022)\n\n\n\nIt adds null-checking to the result of the \u0022as MemberExpression\u0022.\nIt improves the static type-safety.\n\n\nOtherwise, the original is a very nice solution.\n    ","\nLabel lblText; //initialized elsewhere\n\nvoid AssignLabel(string text)\n{\n   if (InvokeRequired)\n   {\n      BeginInvoke((Action\u003Cstring\u003E)AssignLabel, text);\n      return;\n   }\n\n   lblText.Text = text;           \n}\n\n\nNote that BeginInvoke() is preferred over Invoke() because it\u0027s less likely to cause deadlocks (however, this is not an issue here when just assigning text to a label): \n\nWhen using Invoke() you are waiting for the method to return. Now, it may be that you do something in the invoked code that will need to wait for the thread, which may not be immediately obvious if it\u0027s buried in some functions that you are calling, which itself may happen indirectly via event handlers. So you would be waiting for the thread, the thread would be waiting for you and you are deadlocked. \n\nThis actually caused some of our released software to hang. It was easy enough to fix by replacing Invoke() with BeginInvoke(). Unless you have a need for synchronous operation, which may be the case if you need a return value, use BeginInvoke().\n    ","\nWhen I encountered the same issue I sought help from Google, but rather than give me a simple solution it confused me more by giving examples of MethodInvoker and blah blah blah. So I decided to solve it on my own. Here is my solution:\n\nMake a delegate like this:\n\nPublic delegate void LabelDelegate(string s);\n\nvoid Updatelabel(string text)\n{\n   if (label.InvokeRequired)\n   {\n       LabelDelegate LDEL = new LabelDelegate(Updatelabel);\n       label.Invoke(LDEL, text);\n   }\n   else\n       label.Text = text\n}\n\n\nYou can call this function in a new thread like this\n\nThread th = new Thread(() =\u003E Updatelabel(\u0022Hello World\u0022));\nth.start();\n\n\nDon\u0027t be confused with Thread(() =\u003E .....). I use an anonymous function or lambda expression when I work on a thread. To reduce the lines of code you can use the ThreadStart(..) method too which I am not supposed to explain here.\n    ","\nSimply use something like this:\n\n this.Invoke((MethodInvoker)delegate\n            {\n                progressBar1.Value = e.ProgressPercentage; // runs on UI thread\n            });\n\n    ","\nYou may use the already-existing delegate Action:\n\nprivate void UpdateMethod()\n{\n    if (InvokeRequired)\n    {\n        Invoke(new Action(UpdateMethod));\n    }\n}\n\n    ","\nMy version is to insert one line of recursive \u0022mantra\u0022:\n\nFor no arguments:\n\n    void Aaaaaaa()\n    {\n        if (InvokeRequired) { Invoke(new Action(Aaaaaaa)); return; } //1 line of mantra\n\n        // Your code!\n    }\n\n\nFor a function that has arguments:\n\n    void Bbb(int x, string text)\n    {\n        if (InvokeRequired) { Invoke(new Action\u003Cint, string\u003E(Bbb), new[] { x, text }); return; }\n        // Your code!\n    }\n\n\nTHAT is IT.\n\n\n\nSome argumentation: Usually it is bad for code readability to put {} after an if () statement in one line. But in this case it is routine all-the-same \u0022mantra\u0022. It doesn\u0027t break code readability if this method is consistent over the project. And it saves your code from littering (one line of code instead of five).\n\nAs you see if(InvokeRequired) {something long} you just know \u0022this function is safe to call from another thread\u0022.\n    ","\nTry to refresh the label using this\n\npublic static class ExtensionMethods\n{\n    private static Action EmptyDelegate = delegate() { };\n\n    public static void Refresh(this UIElement uiElement)\n    {\n        uiElement.Dispatcher.Invoke(DispatcherPriority.Render, EmptyDelegate);\n    }\n}\n\n    ","\nCreate a class variable:\n\nSynchronizationContext _context;\n\n\nSet it in the constructor that creates your UI:\n\nvar _context = SynchronizationContext.Current;\n\n\nWhen you want to update the label:\n\n_context.Send(status =\u003E{\n    // UPDATE LABEL\n}, null);\n\n    ","\nMost of the other answers are a little complex for me on this question (I\u0027m new to C#), so I am writing mine:\n\nI have a WPF application and have defined a worker as below:\n\nIssue:\n\nBackgroundWorker workerAllocator;\nworkerAllocator.DoWork \u002B= delegate (object sender1, DoWorkEventArgs e1) {\n    // This is my DoWork function.\n    // It is given as an anonymous function, instead of a separate DoWork function\n\n    // I need to update a message to textbox (txtLog) from this thread function\n\n    // Want to write below line, to update UI\n    txt.Text = \u0022my message\u0022\n\n    // But it fails with:\n    //  \u0027System.InvalidOperationException\u0027:\n    //  \u0022The calling thread cannot access this object because a different thread owns it\u0022\n}\n\n\nSolution:\n\nworkerAllocator.DoWork \u002B= delegate (object sender1, DoWorkEventArgs e1)\n{\n    // The below single line works\n    txtLog.Dispatcher.BeginInvoke((Action)(() =\u003E txtLog.Text = \u0022my message\u0022));\n}\n\n\nI am yet to find out what the above line means, but it works.\n\nFor WinForms:\n\nSolution:\n\ntxtLog.Invoke((MethodInvoker)delegate\n{\n    txtLog.Text = \u0022my message\u0022;\n});\n\n    ","\nYou must use invoke and delegate\n\nprivate delegate void MyLabelDelegate();\nlabel1.Invoke( new MyLabelDelegate(){ label1.Text \u002B= 1; });\n\n    ","\nThe easiest way I think:\n\n   void Update()\n   {\n       BeginInvoke((Action)delegate()\n       {\n           //do your update\n       });\n   }\n\n    ","\nFor example, access a control other than in the current thread:\n\nSpeed_Threshold = 30;\ntextOutput.Invoke(new EventHandler(delegate\n{\n    lblThreshold.Text = Speed_Threshold.ToString();\n}));\n\n\nThere the lblThreshold is a Label and Speed_Threshold is a global variable.\n    ","\nWhen you\u0027re in the UI thread you could ask it for its synchronization context task scheduler. It would give you a TaskScheduler that schedules everything on the UI thread.\n\nThen you can chain your tasks so that when the result is ready then another task (which is scheduled on the UI thread) picks it and assigns it to a label.\n\npublic partial class MyForm : Form\n{\n  private readonly TaskScheduler _uiTaskScheduler;\n  public MyForm()\n  {\n    InitializeComponent();\n    _uiTaskScheduler = TaskScheduler.FromCurrentSynchronizationContext();\n  }\n\n  private void buttonRunAsyncOperation_Click(object sender, EventArgs e)\n  {\n    RunAsyncOperation();\n  }\n\n  private void RunAsyncOperation()\n  {\n    var task = new Task\u003Cstring\u003E(LengthyComputation);\n    task.ContinueWith(antecedent =\u003E\n                         UpdateResultLabel(antecedent.Result), _uiTaskScheduler);\n    task.Start();\n  }\n\n  private string LengthyComputation()\n  {\n    Thread.Sleep(3000);\n    return \u002247\u0022;\n  }\n\n  private void UpdateResultLabel(string text)\n  {\n    labelResult.Text = text;\n  }\n}\n\n\nThis works for tasks (not threads) which are the preferred way of writing concurrent code now.\n    ","\nI just read the answers and this appears to be a very hot topic. I\u0027m currently using .NET 3.5 SP1 and Windows Forms.\n\nThe well-known formula greatly described in the previous answers that makes use of the InvokeRequired property covers most of the cases, but not the entire pool.\n\nWhat if the Handle has not been created yet?\n\nThe InvokeRequired property, as described here (Control.InvokeRequired Property reference to MSDN) returns true if the call was made from a thread that is not the GUI thread, false either if the call was made from the GUI thread, or if the Handle was not created yet.\n\nYou can come across an exception if you want to have a modal form shown and updated by another thread. Because you want that form shown modally, you could do the following:\n\nprivate MyForm _gui;\n\npublic void StartToDoThings()\n{\n    _gui = new MyForm();\n    Thread thread = new Thread(SomeDelegate);\n    thread.Start();\n    _gui.ShowDialog();\n}\n\n\nAnd the delegate can update a Label on the GUI:\n\nprivate void SomeDelegate()\n{\n    // Operations that can take a variable amount of time, even no time\n    //... then you update the GUI\n    if(_gui.InvokeRequired)\n        _gui.Invoke((Action)delegate { _gui.Label1.Text = \u0022Done!\u0022; });\n    else\n        _gui.Label1.Text = \u0022Done!\u0022;\n}\n\n\nThis can cause an InvalidOperationException if the operations before the label\u0027s update \u0022take less time\u0022 (read it and interpret it as a simplification) than the time it takes for the GUI thread to create the Form\u0027s Handle. This happens within the ShowDialog() method.\n\nYou should also check for the Handle like this:\n\nprivate void SomeDelegate()\n{\n    // Operations that can take a variable amount of time, even no time\n    //... then you update the GUI\n    if(_gui.IsHandleCreated)  //  \u003C---- ADDED\n        if(_gui.InvokeRequired)\n            _gui.Invoke((Action)delegate { _gui.Label1.Text = \u0022Done!\u0022; });\n        else\n            _gui.Label1.Text = \u0022Done!\u0022;\n}\n\n\nYou can handle the operation to perform if the Handle has not been created yet: You can just ignore the GUI update (like shown in the code above) or you can wait (more risky).\nThis should answer the question.\n\nOptional stuff:\nPersonally I came up coding the following:\n\npublic class ThreadSafeGuiCommand\n{\n  private const int SLEEPING_STEP = 100;\n  private readonly int _totalTimeout;\n  private int _timeout;\n\n  public ThreadSafeGuiCommand(int totalTimeout)\n  {\n    _totalTimeout = totalTimeout;\n  }\n\n  public void Execute(Form form, Action guiCommand)\n  {\n    _timeout = _totalTimeout;\n    while (!form.IsHandleCreated)\n    {\n      if (_timeout \u003C= 0) return;\n\n      Thread.Sleep(SLEEPING_STEP);\n      _timeout -= SLEEPING_STEP;\n    }\n\n    if (form.InvokeRequired)\n      form.Invoke(guiCommand);\n    else\n      guiCommand();\n  }\n}\n\n\nI feed my forms that get updated by another thread with an instance of this ThreadSafeGuiCommand, and I define methods that update the GUI (in my Form) like this:\n\npublic void SetLabeTextTo(string value)\n{\n  _threadSafeGuiCommand.Execute(this, delegate { Label1.Text = value; });\n}\n\n\nIn this way I\u0027m quite sure that I will have my GUI updated whatever thread will make the call, optionally waiting for a well-defined amount of time (the timeout).\n    ","\n                \n                There are cases when this.GetType() evaluates to the same as propertyInfo.ReflectedType (e.g. LinkLabel on WinForms). I don\u0027t have a large C# experience, but I think that the condition for exception should be:  if (propertyInfo == null ||                 (!@this.GetType().IsSubclassOf(propertyInfo.ReflectedType) \u0026\u0026 @this.GetType() != propertyInfo.ReflectedType) ||                 @this.GetType().GetProperty(propertyInfo.Name, propertyInfo.PropertyType) == null)\n                \n\u2013\u00A0Corvin\n                Jan 31 \u002711 at 13:03\n                        \n                            \n                        \n            ","\n                \n                @lan can this SetControlPropertyThreadSafe(myLabel, \u0022Text\u0022, status) be called from another module or class or form\n                \n\u2013\u00A0Smith\n                Jun 23 \u002711 at 10:58\n            ","\n                \n                The solution provided is unnecessarily complex. See Marc Gravell\u0027s solution, or Zaid Masud\u0027s solution, if you value simplicity.\n                \n\u2013\u00A0Frank Hileman\n                Mar 28 \u002714 at 17:23\n            ","\n                \n                This solution does waste ton\u0027s of resources if you update multiple properties as every Invoke costs a lot of resources. I don\u0027t think this is how the feature of Thread Safety was intended anyway. Do Encapsulte your UI update actions and Invoke it ONCE (and not per property)\n                \n\u2013\u00A0Console\n                Aug 6 \u002714 at 12:09\n            ","\n                \n                Why on earth would you use this code over the BackgroundWorker component?\n                \n\u2013\u00A0Andy\n                Oct 8 \u002716 at 17:11\n            ","\n                \n                But, then your processing function must be a member method of your GUI form ?\n                \n\u2013\u00A0Frederik Gheysels\n                Mar 19 \u002709 at 10:25\n            ","\n                \n                Seeing as the OP hasn\u0027t mentioned any class/instance except the form, that isn\u0027t a bad default...\n                \n\u2013\u00A0Marc Gravell\u2666\n                Mar 19 \u002709 at 10:30\n            ","\n                \n                Don\u0027t forget the \u0022this\u0022 keyword is referencing a \u0022Control\u0022 class.\n                \n\u2013\u00A0AZ.\n                Mar 16 \u002710 at 19:49\n            ","\n                \n                @codecompleting it is safe either way, and we already know we\u0027re on a worker, so why check something we know?\n                \n\u2013\u00A0Marc Gravell\u2666\n                Dec 1 \u002711 at 16:50\n            ","\n                \n                @Dragouf not really - one of the point of using this method is that you already know which parts run on the worker, and which run on the UI thread. No need to check.\n                \n\u2013\u00A0Marc Gravell\u2666\n                Feb 16 \u002712 at 18:16\n            ","\n                \n                If SecondThreadConcern.LongWork() throws an exception, can it be caught by the UI thread?  This is an excellent post, btw.\n                \n\u2013\u00A0kdbanman\n                Aug 13 \u002715 at 17:53\n            ","\n                \n                I have added an additional section to the answer to fulfil your requirements. Regards.\n                \n\u2013\u00A0Ryszard D\u017Cegan\n                Aug 14 \u002715 at 8:14\n            ","\n                \n                The ExceptionDispatchInfo class is responsible for that miracle of rethrowing background exception on UI thread in async-await pattern.\n                \n\u2013\u00A0Ryszard D\u017Cegan\n                Aug 18 \u002715 at 6:45\n            ","\n                \n                Is it just me in thinking that this way of doing this is way more verbose than just invoking Invoke/Begin?!\n                \n\u2013\u00A0MeTitus\n                Sep 28 \u002715 at 12:36\n            ","\n                \n                Task.Delay(500).Wait()? What\u0027s the point of creating a Task to just block the current thread? You should never block a thread pool thread!\n                \n\u2013\u00A0Yarik\n                Dec 15 \u002716 at 19:22\n            ","\n                \n                what is \u0027control\u0027 in this example? My UI control? Trying to implement this in WPF on a label control, and Invoke is not a member of my label.\n                \n\u2013\u00A0Dbloom\n                Feb 9 \u002717 at 22:17\n            ","\n                \n                What\u0027s about extension method like @styxriver  stackoverflow.com/a/3588137/206730 ?\n                \n\u2013\u00A0Kiquenet\n                Apr 3 \u002717 at 14:17\n            ","\n                \n                declare \u0027Action y;\u0027 inside the class or method changing the text property and  update the text with this piece of code \u0027yourcontrol.Invoke(y=() =\u003E yourcontrol.Text = \u0022new text\u0022);\u0027\n                \n\u2013\u00A0Antonio Leite\n                Aug 25 \u002717 at 15:20\n                        \n                            \n                        \n            ","\n                \n                @Dbloom it\u0027s not a member because it\u0027s only for WinForms. For WPF you use Dispatcher.Invoke\n                \n\u2013\u00A0sLw\n                Mar 22 \u002718 at 13:09\n            ","\n                \n                I was following this solution but sometimes my UI was not getting updated. I found that i need this.refresh() to force invalidate and repaint the GUI .. if it is helpful ..\n                \n\u2013\u00A0Rakibul Haq\n                Apr 5 \u002718 at 10:47\n                        \n                            \n                        \n            ","\n                \n                What\u0027s the point of the @this usage?  Wouldn\u0027t \u0022control\u0022 be equivalent?  Are there any benefits to @this?\n                \n\u2013\u00A0argyle\n                Sep 9 \u002713 at 0:03\n            ","\n                \n                @jeromeyers - The @this is simply the variable name, in this case the reference to the current control calling the extension. You could rename it to source, or whatever floats your boat. I use @this, because it\u0027s referring to \u0027this Control\u0027 that is calling the extension and is consistent (in my head, at least) with using the \u0027this\u0027 keyword in normal (non-extension) code.\n                \n\u2013\u00A0StyxRiver\n                Sep 12 \u002713 at 4:26\n            ","\n                \n                This is great, easy and for me the best solution. You could include all the work you have to do in the ui thread. Example:            this.UIThread(() =\u003E             {                 txtMessage.Text = message;                 listBox1.Items.Add(message);             });\n                \n\u2013\u00A0Auto\n                Feb 23 \u002716 at 19:39\n                        \n                            \n                        \n            ","\n                \n                I really like this solution. Minor nit:  I would name this method OnUIThread rather than UIThread.\n                \n\u2013\u00A0ToolmakerSteve\n                May 16 \u002716 at 18:08\n                        \n                            \n                        \n            ","\n                \n                That\u0027s why I named this extension RunOnUiThread. But thats just personal taste.\n                \n\u2013\u00A0Grisgram\n                Jan 30 \u002719 at 8:11\n            ","\n                \n                well done for the simplicity! not only simple, but also works well! I really did not understand why microsoft could not make it simpler as it is meant to be! for calling 1 line on the main thread, we should write couple of functions!\n                \n\u2013\u00A0MBH\n                Dec 19 \u002715 at 9:17\n            ","\n                \n                @MBH Agree.  BTW, did you notice stackoverflow.com/a/3588137/199364 answer above, which defines an extension method?  Do that once in a custom utilities class, then don\u0027t have to care any more that Microsoft did not do it for us :)\n                \n\u2013\u00A0ToolmakerSteve\n                May 16 \u002716 at 18:14\n            ","\n                \n                @ToolmakerSteve Thats exactly what it meant to be! you are right we can find a way, but i mean from DRY (don\u0027t repeat yourself) point of view, the problem that has common solution, can be solved by them with minimum effort by Microsoft which will save a lot of time for programmers :)\n                \n\u2013\u00A0MBH\n                May 16 \u002716 at 18:56\n            ","\n                \n                At the end of processing, it is also possible to update the user interface via backgroundWorker1_RunWorkerCompleted.\n                \n\u2013\u00A0DavidRR\n                Apr 1 \u002716 at 19:18\n                        \n                            \n                        \n            ","\n                \n                Indeed, but I don\u0027t like to \u0027clutter\u0027 my GUI code with this matter.  My GUI shouldn\u0027t care whether it needs to Invoke or not. In other words: i don\u0027t think that it is the responsability of the GUI to perform the context-swithc.\n                \n\u2013\u00A0Frederik Gheysels\n                Mar 19 \u002709 at 9:51\n            ","\n                \n                Breaking the delegate apart etc seems overkill - why not just: SynchronizationContext.Current.Send(delegate { MyEvent(...); }, null);\n                \n\u2013\u00A0Marc Gravell\u2666\n                Mar 19 \u002709 at 11:07\n            ","\n                \n                Do you always have access to the SynchronizationContext ?  Even if your class is in a class lib ?\n                \n\u2013\u00A0Frederik Gheysels\n                Mar 19 \u002709 at 11:42\n            ","\n                \n                The invoke line gives me a compiler error. The best overloaded method match for \u0027System.Windows.Forms.Control.Invoke(System.Delegate, object[])\u0027 has some invalid arguments\n                \n\u2013\u00A0CruelIO\n                Mar 19 \u002709 at 11:12\n            ","\n                \n                Good idea. The only thing you didn\u0027t mention is how you properly dispose the timer once the WorkerThread is finished. Note this can cause trouble when the application ends (i.e. the user closes the application). Do you have an idea how to solve this?\n                \n\u2013\u00A0Matt\n                Nov 11 \u002713 at 10:24\n                        \n                            \n                        \n            ","\n                \n                @Matt Instead of using an anonymous handler for Elapsed event, you use a member method so you can remove the timer when the form is disposed...\n                \n\u2013\u00A0Phil1970\n                Apr 20 \u002718 at 0:54\n            ","\n                \n                @Phil1970 - Good point. You meant like System.Timers.ElapsedEventHandler handler = (s, a) =\u003E { MyProgressLabel.Text = m_Text; }; and assigning it via m_Timer.Elapsed \u002B= handler;, later in the dispose context doing a m_Timer.Elapsed -= handler; am I right? And for the disposing/closing following the advice as discussed here.\n                \n\u2013\u00A0Matt\n                Apr 20 \u002718 at 8:37\n                        \n                            \n                        \n            ","\n                \n                what do you think the Post method uses under the hood? :)\n                \n\u2013\u00A0increddibelly\n                May 5 \u002716 at 9:09\n            ","\n                \n                If you have e.ProgressPercentage, aren\u0027t you already in the UI thread from the method you are calling this?\n                \n\u2013\u00A0LarsTech\n                Jan 11 \u002716 at 19:55\n            ","\n                \n                The ProgressChanged event runs on the UI thread.  That\u0027s one of the conveniences of using the BackgroundWorker.  The Completed event runs on the gui, too.  The only thing running in the non-UI thread is the DoWork method.\n                \n\u2013\u00A0LarsTech\n                Jan 11 \u002716 at 20:18\n            ","\n                \n                Is it for Windows Forms ?\n                \n\u2013\u00A0Kiquenet\n                Apr 3 \u002717 at 14:13\n            ","\n                \n                The question was about Winforms, not WPF.\n                \n\u2013\u00A0Marc L.\n                Jul 10 \u002718 at 17:52\n            ","\n                \n                Thanks. Added WinForms solution above.\n                \n\u2013\u00A0Manohar Reddy Poreddy\n                Jul 11 \u002718 at 4:12\n            ","\n                \n                ...which is just a copy of however many other answers on this same question, but okay. Why not be part of the solution and just delete your answer?\n                \n\u2013\u00A0Marc L.\n                Jul 11 \u002718 at 13:52\n            ","\n                \n                hmm, correct you are, if only, you read my answer with attention, the beginning part (the reason why i wrote the answer), and hopefully with a little more attention you see there is someone who had exact same problem \u0026 upvoted today for my simple answer, and with even more attn if you could foresee the real story on why all this happened, that google sends me here even when i search for wpf. Sure since you missed these more or less obvious 3 reasons, i can understand why you won\u0027t remove your downvote. Instead of cleaning the okay one, create something new which is much more difficult.\n                \n\u2013\u00A0Manohar Reddy Poreddy\n                Jul 11 \u002718 at 15:51\n                        \n                            \n                        \n            ","\n                \n                Calling Task.Start is typically not a good practice blogs.msdn.com/b/pfxteam/archive/2012/01/14/10256832.aspx\n                \n\u2013\u00A0Ohad Schneider\n                May 24 \u002714 at 8:07\n            ","\n                \n                Came here to find this, as I also check for IsHandleCreated. One other property to check is IsDisposed. If your form is disposed, you cannot call Invoke() on it.  If the user closed the form before your background thread could complete you don\u0027t want it trying to call back to the UI when the form is disposed.\n                \n\u2013\u00A0Jon\n                Feb 11 \u002716 at 18:04\n            ","\n                \n                I would say that it is a bad idea to start with... Normally, you would show the child form immediately and have a progress bar or some other feedback while doing background processing. Or you would do all processing first and then pass the result to the new form at creation. Doing both at the same time would generally have marginal benefits but much less maintainable code.\n                \n\u2013\u00A0Phil1970\n                Dec 18 \u002716 at 15:00\n            ","\n                \n                The described scenario takes into account a modal form used as a progress view of a background-thread job. Because it must be modal, it must be shown by calling the Form.ShowDialog() method. By doing this, you prevent your code that follows the call to be executed until the form is closed. So, unless you can start the background thread differently from the given example (and, of course, you can) this form must be modally shown after the background thread has started. In this case, you need to check for the Handle to be created. If you don\u0027t need a modal form, then it\u0027s another story.\n                \n\u2013\u00A0Sume\n                Mar 30 \u002717 at 13:42\n            "]},{"Id":"51e91e4a-abaf-4c90-9e8c-145239ff0d63","QuestionId":232535,"Description":"How do I use reflection to call a generic method?","Votes":1108,"Views":269679,"Tags":["c#",".net","generics","reflection"],"Discussions":["\nYou need to use reflection to get the method to start with, then \u0022construct\u0022 it by supplying type arguments with MakeGenericMethod:\n\nMethodInfo method = typeof(Sample).GetMethod(nameof(Sample.GenericMethod));\nMethodInfo generic = method.MakeGenericMethod(myType);\ngeneric.Invoke(this, null);\n\n\nFor a static method, pass null as the first argument to Invoke. That\u0027s nothing to do with generic methods - it\u0027s just normal reflection.\n\nAs noted, a lot of this is simpler as of C# 4 using dynamic - if you can use type inference, of course. It doesn\u0027t help in cases where type inference isn\u0027t available, such as the exact example in the question.\n    ","\nJust an addition to the original answer. While this will work:\n\nMethodInfo method = typeof(Sample).GetMethod(\u0022GenericMethod\u0022);\nMethodInfo generic = method.MakeGenericMethod(myType);\ngeneric.Invoke(this, null);\n\n\nIt is also a little dangerous in that you lose compile-time check for GenericMethod. If you later do a refactoring and rename GenericMethod, this code won\u0027t notice and will fail at run time. Also, if there is any post-processing of the assembly (for example obfuscating or removing unused methods/classes) this code might break too.\n\nSo, if you know the method you are linking to at compile time, and this isn\u0027t called millions of times so overhead doesn\u0027t matter, I would change this code to be:\n\nAction\u003C\u003E GenMethod = GenericMethod\u003Cint\u003E;  //change int by any base type \n                                          //accepted by GenericMethod\nMethodInfo method = this.GetType().GetMethod(GenMethod.Method.Name);\nMethodInfo generic = method.MakeGenericMethod(myType);\ngeneric.Invoke(this, null);\n\n\nWhile not very pretty, you have a compile time reference to GenericMethod here, and if you refactor, delete or do anything with GenericMethod, this code will keep working, or at least break at compile time (if for example you remove GenericMethod). \n\nOther way to do the same would be to create a new wrapper class, and create it through Activator. I don\u0027t know if there is a better way.\n    ","\nCalling a generic method with a type parameter known only at runtime can be greatly simplified by using a dynamic type instead of the reflection API.\nTo use this technique the type must be known from the actual object (not just an instance of the Type class). Otherwise, you have to create an object of that type or use the standard reflection API solution. You can create an object by using the Activator.CreateInstance method.\nIf you want to call a generic method, that in \u0022normal\u0022 usage would have had its type inferred, then it simply comes to casting the object of unknown type to dynamic. Here\u0027s an example:\nclass Alpha { }\nclass Beta { }\nclass Service\n{\n    public void Process\u003CT\u003E(T item)\n    {\n        Console.WriteLine(\u0022item.GetType(): \u0022 \u002B item.GetType()\n                          \u002B \u0022\\ttypeof(T): \u0022 \u002B typeof(T));\n    }\n}\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        var a = new Alpha();\n        var b = new Beta();\n\n        var service = new Service();\n        service.Process(a); // Same as \u0022service.Process\u003CAlpha\u003E(a)\u0022\n        service.Process(b); // Same as \u0022service.Process\u003CBeta\u003E(b)\u0022\n\n        var objects = new object[] { a, b };\n        foreach (var o in objects)\n        {\n            service.Process(o); // Same as \u0022service.Process\u003Cobject\u003E(o)\u0022\n        }\n        foreach (var o in objects)\n        {\n            dynamic dynObj = o;\n            service.Process(dynObj); // Or write \u0022service.Process((dynamic)o)\u0022\n        }\n    }\n}\n\nAnd here\u0027s the output of this program:\nitem.GetType(): Alpha    typeof(T): Alpha\nitem.GetType(): Beta     typeof(T): Beta\nitem.GetType(): Alpha    typeof(T): System.Object\nitem.GetType(): Beta     typeof(T): System.Object\nitem.GetType(): Alpha    typeof(T): Alpha\nitem.GetType(): Beta     typeof(T): Beta\n\nProcess is a generic instance method that writes the real type of the passed argument (by using the GetType() method) and the type of the generic parameter (by using typeof operator).\nBy casting the object argument to dynamic type we deferred providing the type parameter until runtime. When the Process method is called with the dynamic argument then the compiler doesn\u0027t care about the type of this argument. The compiler generates code that at runtime checks the real types of passed arguments (by using reflection) and choose the best method to call. Here there is only this one generic method, so it\u0027s invoked with a proper type parameter.\nIn this example, the output is the same as if you wrote:\nforeach (var o in objects)\n{\n    MethodInfo method = typeof(Service).GetMethod(\u0022Process\u0022);\n    MethodInfo generic = method.MakeGenericMethod(o.GetType());\n    generic.Invoke(service, new object[] { o });\n}\n\nThe version with a dynamic type is definitely shorter and easier to write. You also shouldn\u0027t worry about performance of calling this function multiple times. The next call with arguments of the same type should be faster thanks to the caching mechanism in DLR. Of course, you can write code that cache invoked delegates, but by using the dynamic type you get this behaviour for free.\nIf the generic method you want to call don\u0027t have an argument of a parametrized type (so its type parameter can\u0027t be inferred) then you can wrap the invocation of the generic method in a helper method like in the following example:\nclass Program\n{\n    static void Main(string[] args)\n    {\n        object obj = new Alpha();\n\n        Helper((dynamic)obj);\n    }\n\n    public static void Helper\u003CT\u003E(T obj)\n    {\n        GenericMethod\u003CT\u003E();\n    }\n\n    public static void GenericMethod\u003CT\u003E()\n    {\n        Console.WriteLine(\u0022GenericMethod\u003C\u0022 \u002B typeof(T) \u002B \u0022\u003E\u0022);\n    }\n}\n\nIncreased type safety\nWhat is really great about using dynamic object as a replacement for using reflection API is that you only lose compile time checking of this particular type that you don\u0027t know until runtime. Other arguments and the name of the method are staticly analysed by the compiler as usual. If you remove or add more arguments, change their types or rename method name then you\u0027ll get a compile-time error. This won\u0027t happen if you provide the method name as a string in Type.GetMethod and arguments as the objects array in MethodInfo.Invoke.\nBelow is a simple example that illustrates how some errors can be caught at compile time (commented code) and other at runtime. It also shows how the DLR tries to resolve which method to call.\ninterface IItem { }\nclass FooItem : IItem { }\nclass BarItem : IItem { }\nclass Alpha { }\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        var objects = new object[] { new FooItem(), new BarItem(), new Alpha() };\n        for (int i = 0; i \u003C objects.Length; i\u002B\u002B)\n        {\n            ProcessItem((dynamic)objects[i], \u0022test\u0022 \u002B i, i);\n\n            //ProcesItm((dynamic)objects[i], \u0022test\u0022 \u002B i, i);\n            //compiler error: The name \u0027ProcesItm\u0027 does not\n            //exist in the current context\n\n            //ProcessItem((dynamic)objects[i], \u0022test\u0022 \u002B i);\n            //error: No overload for method \u0027ProcessItem\u0027 takes 2 arguments\n        }\n    }\n\n    static string ProcessItem\u003CT\u003E(T item, string text, int number)\n        where T : IItem\n    {\n        Console.WriteLine(\u0022Generic ProcessItem\u003C{0}\u003E, text {1}, number:{2}\u0022,\n                          typeof(T), text, number);\n        return \u0022OK\u0022;\n    }\n    static void ProcessItem(BarItem item, string text, int number)\n    {\n        Console.WriteLine(\u0022ProcessItem with Bar, \u0022 \u002B text \u002B \u0022, \u0022 \u002B number);\n    }\n}\n\nHere we again execute some method by casting the argument to the dynamic type. Only verification of first argument\u0027s type is postponed to runtime. You will get a compiler error if the name of the method you\u0027re calling doesn\u0027t exist or if other arguments are invalid (wrong number of arguments or wrong types).\nWhen you pass the dynamic argument to a method then this call is lately bound. Method overload resolution happens at runtime and tries to choose the best overload. So if you invoke the ProcessItem method with an object of BarItem type then you\u0027ll actually call the non-generic method, because it is a better match for this type. However, you\u0027ll get a runtime error when you pass an argument of the Alpha type because there\u0027s no method that can handle this object (a generic method has the constraint where T : IItem and Alpha class doesn\u0027t implement this interface). But that\u0027s the whole point. The compiler doesn\u0027t have information that this call is valid. You as a programmer know this, and you should make sure that this code runs without errors.\nReturn type gotcha\nWhen you\u0027re calling a non-void method with a parameter of dynamic type, its return type will probably be dynamic too. So if you\u0027d change previous example to this code:\nvar result = ProcessItem((dynamic)testObjects[i], \u0022test\u0022 \u002B i, i);\n\nthen the type of the result object would be dynamic. This is because the compiler don\u0027t always know which method will be called. If you know the return type of the function call then you should implicitly convert it to the required type so the rest of the code is statically typed:\nstring result = ProcessItem((dynamic)testObjects[i], \u0022test\u0022 \u002B i, i);\n\nYou\u0027ll get a runtime error if the type doesn\u0027t match.\nActually, if you try to get the result value in the previous example then you\u0027ll get a runtime error in the second loop iteration. This is because you tried to save the return value of a void function.\n    ","\nWith C# 4.0, reflection isn\u0027t necessary as the DLR can call it using runtime types. Since using the DLR library is kind of a pain dynamically (instead of the C# compiler generating code for you), the open source framework Dynamitey (.net standard 1.5) gives you easy cached run-time access to the same calls the compiler would generate for you.\n\nvar name = InvokeMemberName.Create;\nDynamic.InvokeMemberAction(this, name(\u0022GenericMethod\u0022, new[]{myType}));\n\n\nvar staticContext = InvokeContext.CreateStatic;\nDynamic.InvokeMemberAction(staticContext(typeof(Sample)), name(\u0022StaticMethod\u0022, new[]{myType}));\n\n    ","\nAdding on to Adrian Gallero\u0027s answer:\n\nCalling a generic method from type info involves three steps.\n\nTLDR: Calling a known generic method with a type object can be accomplished by:\n\n((Action)GenericMethod\u003Cobject\u003E)\n    .Method\n    .GetGenericMethodDefinition()\n    .MakeGenericMethod(typeof(string))\n    .Invoke(this, null);\n\n\nwhere GenericMethod\u003Cobject\u003E is the method name to call and any type that satisfies the generic constraints.\n\n(Action) matches the signature of the method to be called i.e. (Func\u003Cstring,string,int\u003E or Action\u003Cbool\u003E)\n\nStep 1 is getting the MethodInfo for the generic method definition\n\nMethod 1: Use GetMethod() or GetMethods() with appropriate types or binding flags.\n\nMethodInfo method = typeof(Sample).GetMethod(\u0022GenericMethod\u0022);\n\n\nMethod 2: Create a delegate, get the MethodInfo object and then call GetGenericMethodDefinition\n\nFrom inside the class that contains the methods:\n\nMethodInfo method = ((Action)GenericMethod\u003Cobject\u003E)\n    .Method\n    .GetGenericMethodDefinition();\n\nMethodInfo method = ((Action)StaticMethod\u003Cobject\u003E)\n    .Method\n    .GetGenericMethodDefinition();\n\n\nFrom outside of the class that contains the methods:\n\nMethodInfo method = ((Action)(new Sample())\n    .GenericMethod\u003Cobject\u003E)\n    .Method\n    .GetGenericMethodDefinition();\n\nMethodInfo method = ((Action)Sample.StaticMethod\u003Cobject\u003E)\n    .Method\n    .GetGenericMethodDefinition();\n\n\nIn C#, the name of a method, i.e. \u0022ToString\u0022 or \u0022GenericMethod\u0022 actually refers to a group of methods that may contain one or more methods.  Until you provide the types of the method parameters, it is not known which\nmethod you are referring to.\n\n((Action)GenericMethod\u003Cobject\u003E) refers to the delegate for a specific method.  ((Func\u003Cstring, int\u003E)GenericMethod\u003Cobject\u003E)\nrefers to a different overload of GenericMethod\n\nMethod 3: Create a lambda expression containing a method call expression, get the MethodInfo object and then GetGenericMethodDefinition\n\nMethodInfo method = ((MethodCallExpression)((Expression\u003CAction\u003CSample\u003E\u003E)(\n    (Sample v) =\u003E v.GenericMethod\u003Cobject\u003E()\n    )).Body).Method.GetGenericMethodDefinition();\n\n\nThis breaks down to\n\nCreate a lambda expression where the body is a call to your desired method.\n\nExpression\u003CAction\u003CSample\u003E\u003E expr = (Sample v) =\u003E v.GenericMethod\u003Cobject\u003E();\n\n\nExtract the body and cast to MethodCallExpression\n\nMethodCallExpression methodCallExpr = (MethodCallExpression)expr.Body;\n\n\nGet the generic method definition from the method\n\nMethodInfo methodA = methodCallExpr.Method.GetGenericMethodDefinition();\n\n\nStep 2 is calling MakeGenericMethod to create a generic method with the appropriate type(s).\n\nMethodInfo generic = method.MakeGenericMethod(myType);\n\n\nStep 3 is invoking the method with the appropriate arguments.\n\ngeneric.Invoke(this, null);\n\n    ","\nNobody provided the \u0022classic Reflection\u0022 solution, so here is a complete code example:\n\nusing System;\nusing System.Collections;\nusing System.Collections.Generic;\n\nnamespace DictionaryRuntime\n{\n    public class DynamicDictionaryFactory\n    {\n        /// \u003Csummary\u003E\n        /// Factory to create dynamically a generic Dictionary.\n        /// \u003C/summary\u003E\n        public IDictionary CreateDynamicGenericInstance(Type keyType, Type valueType)\n        {\n            //Creating the Dictionary.\n            Type typeDict = typeof(Dictionary\u003C,\u003E);\n\n            //Creating KeyValue Type for Dictionary.\n            Type[] typeArgs = { keyType, valueType };\n\n            //Passing the Type and create Dictionary Type.\n            Type genericType = typeDict.MakeGenericType(typeArgs);\n\n            //Creating Instance for Dictionary\u003CK,T\u003E.\n            IDictionary d = Activator.CreateInstance(genericType) as IDictionary;\n\n            return d;\n\n        }\n    }\n}\n\n\nThe above DynamicDictionaryFactory class has a method \n\nCreateDynamicGenericInstance(Type keyType, Type valueType)\n\nand it creates and returns an IDictionary instance, the types of whose keys and values are exactly the specified on the call keyType and valueType.\n\nHere is a complete example how to call this method to instantiate and use a Dictionary\u003CString, int\u003E :\n\nusing System;\nusing System.Collections.Generic;\n\nnamespace DynamicDictionary\n{\n    class Test\n    {\n        static void Main(string[] args)\n        {\n            var factory = new DictionaryRuntime.DynamicDictionaryFactory();\n            var dict = factory.CreateDynamicGenericInstance(typeof(String), typeof(int));\n\n            var typedDict = dict as Dictionary\u003CString, int\u003E;\n\n            if (typedDict != null)\n            {\n                Console.WriteLine(\u0022Dictionary\u003CString, int\u003E\u0022);\n\n                typedDict.Add(\u0022One\u0022, 1);\n                typedDict.Add(\u0022Two\u0022, 2);\n                typedDict.Add(\u0022Three\u0022, 3);\n\n                foreach(var kvp in typedDict)\n                {\n                    Console.WriteLine(\u0022\\\u0022\u0022 \u002B kvp.Key \u002B \u0022\\\u0022: \u0022 \u002B kvp.Value);\n                }\n            }\n            else\n                Console.WriteLine(\u0022null\u0022);\n        }\n    }\n}\n\n\nWhen the above console application is executed, we get the correct, expected result:\n\nDictionary\u003CString, int\u003E\n\u0022One\u0022: 1\n\u0022Two\u0022: 2\n\u0022Three\u0022: 3\n\n    ","\nThis is my 2 cents based on Grax\u0027s answer, but with two parameters required for a generic method.\n\nAssume your method is defined as follows in an Helpers class:\n\npublic class Helpers\n{\n    public static U ConvertCsvDataToCollection\u003CU, T\u003E(string csvData)\n    where U : ObservableCollection\u003CT\u003E\n    {\n      //transform code here\n    }\n}\n\n\nIn my case, U type is always an observable collection storing object of type T.\n\nAs I have my types predefined, I first create the \u0022dummy\u0022 objects that represent the observable collection (U) and the object stored in it (T) and that will be used below to get their type when calling the Make\n\nobject myCollection = Activator.CreateInstance(collectionType);\nobject myoObject = Activator.CreateInstance(objectType);\n\n\nThen call the GetMethod to find your Generic function:\n\nMethodInfo method = typeof(Helpers).\nGetMethod(\u0022ConvertCsvDataToCollection\u0022);\n\n\nSo far, the above call is pretty much identical as to what was explained above but with a small difference when you need have to pass multiple parameters to it.\n\nYou need to pass an Type[] array to the MakeGenericMethod function that contains the \u0022dummy\u0022 objects\u0027 types that were create above:\n\nMethodInfo generic = method.MakeGenericMethod(\nnew Type[] {\n   myCollection.GetType(),\n   myObject.GetType()\n});\n\n\nOnce that\u0027s done, you need to call the Invoke method as mentioned above.\n\ngeneric.Invoke(null, new object[] { csvData });\n\n\nAnd you\u0027re done. Works a charm!\n\nUPDATE:\n\nAs @Bevan highlighted, I do not need to create an array when calling the MakeGenericMethod function as it takes in params and I do not need to create an object in order to get the types as I can just pass the types directly to this function. In my case, since I have the types predefined in another class, I simply changed my code to:\n\nobject myCollection = null;\n\nMethodInfo method = typeof(Helpers).\nGetMethod(\u0022ConvertCsvDataToCollection\u0022);\n\nMethodInfo generic = method.MakeGenericMethod(\n   myClassInfo.CollectionType,\n   myClassInfo.ObjectType\n);\n\nmyCollection = generic.Invoke(null, new object[] { csvData });\n\n\nmyClassInfo contains 2 properties of type Type which I set at run time based on an enum value passed to the constructor and will provide me with the relevant types which I then use in the MakeGenericMethod.\n\nThanks again for highlighting this @Bevan.\n    ","\nInspired by Enigmativity\u0027s answer - let\u0027s assume you have two (or more) classes, like\n\npublic class Bar { }\npublic class Square { }\n\n\nand you want to call the method Foo\u003CT\u003E with Bar and Square, which is declared as\n\npublic class myClass\n{\n    public void Foo\u003CT\u003E(T item)\n    {\n        Console.WriteLine(typeof(T).Name);\n    }\n}\n\n\nThen you can implement an Extension method like:\n\npublic static class Extension\n{\n    public static void InvokeFoo\u003CT\u003E(this T t)\n    {\n        var fooMethod = typeof(myClass).GetMethod(\u0022Foo\u0022);\n        var tType = typeof(T);\n        var fooTMethod = fooMethod.MakeGenericMethod(new[] { tType });\n        fooTMethod.Invoke(new myClass(), new object[] { t });\n    }\n}\n\n\nWith this, you can simply invoke Foo like:\n\nvar objSquare = new Square();\nobjSquare.InvokeFoo();\n\nvar objBar = new Bar();\nobjBar.InvokeFoo();\n\n\nwhich works for every class. In this case, it will output:\n\n\n  Square \n  Bar\n\n    ","\n                \n                \u002B1; note that GetMethod() only considers public instance methods by default, so you may need BindingFlags.Static and/or BindingFlags.NonPublic.\n                \n\u2013\u00A0user565869\n                Dec 16 \u002711 at 22:32\n            ","\n                \n                The correct combination of flags is BindingFlags.NonPublic | BindingFlags.Instance (and optionally BindingFlags.Static).\n                \n\u2013\u00A0Lars Kemmann\n                Feb 15 \u002713 at 19:10\n            ","\n                \n                A question getting marked dupe of this wonders how to do this with static methods - and technically so does the question here. generic.Invoke()\u0027s first parameter should be null when calling static methods. The first parameter is only necessary when calling instance methods.\n                \n\u2013\u00A0Chris Moschini\n                Mar 22 \u002713 at 21:30\n            ","\n                \n                @ChrisMoschini: Added that to the answer.\n                \n\u2013\u00A0Jon Skeet\n                Mar 22 \u002713 at 21:32\n            ","\n                \n                @gzou: I\u0027ve added something to the answer - but note that for calling the generic methods in the question, dynamic doesn\u0027t help because type inference isn\u0027t available. (There are no arguments the compiler can use to determine the type argument.)\n                \n\u2013\u00A0Jon Skeet\n                Apr 24 \u002715 at 9:44\n            ","\n                \n                In cases where reflection is used to call a method, it\u0027s usual that the method name is itself discovered by another method. Knowing the method name in advance isn\u0027t common.\n                \n\u2013\u00A0Bevan\n                Feb 27 \u002711 at 21:59\n            ","\n                \n                Well, I agree for common uses of reflection. But the original question was how to call \u0022GenericMethod\u003CmyType\u003E()\u0022 If that syntax was allowed, we wouldn\u0027t need GetMethod() at all. But for the question \u0022how do I write \u0022GenericMethod\u003CmyType\u003E\u0022? I think the answer should include a way to avoid losing the compile-time link with GenericMethod. Now if this question is common or not I don\u0027t know, but I do know I had this exact problem yesterday, and that\u0027s why I landed in this question.\n                \n\u2013\u00A0Adrian Gallero\n                Feb 28 \u002711 at 21:24\n                        \n                            \n                        \n            ","\n                \n                You could do GenMethod.Method.GetGenericMethodDefinition() instead of this.GetType().GetMethod(GenMethod.Method.Name). It\u2019s slightly cleaner and probably safer.\n                \n\u2013\u00A0Daniel Cassidy\n                May 10 \u002711 at 10:10\n            ","\n                \n                What does mean \u0022myType\u0022 in your sample?\n                \n\u2013\u00A0DmitryBoyko\n                Dec 7 \u002711 at 13:45\n            ","\n                \n                Now you can use nameof(GenericMethod)\n                \n\u2013\u00A0dmigo\n                Mar 17 \u002716 at 10:02\n            ","\n                \n                Mariusz, confused by \u0022However, you\u0027ll get runtime error when you pass argument of Alpha type because there\u0027s no method that can handle this object. \u0022 If I call var a = new Alpha() ProcessItem(a,\u0022test\u0022 \u002B i, i)  Why wouldn\u0027t the generic ProcessItem method handle this effectively, outputting \u0022General Process Item\u0022?\n                \n\u2013\u00A0Alex Edelstein\n                Mar 21 \u002715 at 18:51\n                        \n                            \n                        \n            ","\n                \n                @AlexEdelstein I edited my answer to clarify a bit. It\u0027s because generic ProcessItem method has generic constraint and accepts only object that implements IItem interface. When you will call ProcessItem(new Aplha(), \u0022test\u0022 , 1); or ProcessItem((object)(new Aplha()), \u0022test\u0022 , 1); you\u0027ll get a compiler error but when casting to dynamic you postpone that check to runtime.\n                \n\u2013\u00A0Mariusz Pawelski\n                Mar 23 \u002715 at 11:38\n            ","\n                \n                Great answer and explanation, works perfectly for me. Much better than the accepted answer, shorter to write, more performant, and safer.\n                \n\u2013\u00A0ygoe\n                Aug 28 \u002715 at 9:08\n            ","\n                \n                The arguments to MakeGenericMethod() have the params keyword so you don\u0027t need to create an array; nor do you need to create instances to get the types - methodInfo.MakeGenericMethod(typeof(TCollection), typeof(TObject)) would be sufficient.\n                \n\u2013\u00A0Bevan\n                Oct 26 \u002715 at 21:58\n            "]},{"Id":"acbaab84-0b74-4f45-ab41-7eed795b22e1","QuestionId":263400,"Description":"What is the best algorithm for overriding GetHashCode?","Votes":1499,"Views":223209,"Tags":[".net","algorithm","hashcode","gethashcode"],"Discussions":["\nI usually go with something like the implementation given in Josh Bloch\u0027s fabulous Effective Java. It\u0027s fast and creates a pretty good hash which is unlikely to cause collisions. Pick two different prime numbers, e.g. 17 and 23, and do:\n\npublic override int GetHashCode()\n{\n    unchecked // Overflow is fine, just wrap\n    {\n        int hash = 17;\n        // Suitable nullity checks etc, of course :)\n        hash = hash * 23 \u002B field1.GetHashCode();\n        hash = hash * 23 \u002B field2.GetHashCode();\n        hash = hash * 23 \u002B field3.GetHashCode();\n        return hash;\n    }\n}\n\n\nAs noted in comments, you may find it\u0027s better to pick a large prime to multiply by instead. Apparently 486187739 is good... and although most examples I\u0027ve seen with small numbers tend to use primes, there are at least similar algorithms where non-prime numbers are often used. In the not-quite-FNV example later, for example, I\u0027ve used numbers which apparently work well - but the initial value isn\u0027t a prime. (The multiplication constant is prime though. I don\u0027t know quite how important that is.)\n\nThis is better than the common practice of XORing hashcodes for two main reasons. Suppose we have a type with two int fields:\n\nXorHash(x, x) == XorHash(y, y) == 0 for all x, y\nXorHash(x, y) == XorHash(y, x) for all x, y\n\n\nBy the way, the earlier algorithm is the one currently used by the C# compiler for anonymous types.\n\nThis page gives quite a few options. I think for most cases the above is \u0022good enough\u0022 and it\u0027s incredibly easy to remember and get right. The FNV alternative is similarly simple, but uses different constants and XOR instead of ADD as a combining operation. It looks something like the code below, but the normal FNV algorithm operates on individual bytes, so this would require modifying to perform one iteration per byte, instead of per 32-bit hash value. FNV is also designed for variable lengths of data, whereas the way we\u0027re using it here is always for the same number of field values. Comments on this answer suggest that the code here doesn\u0027t actually work as well (in the sample case tested) as the addition approach above.\n\n// Note: Not quite FNV!\npublic override int GetHashCode()\n{\n    unchecked // Overflow is fine, just wrap\n    {\n        int hash = (int) 2166136261;\n        // Suitable nullity checks etc, of course :)\n        hash = (hash * 16777619) ^ field1.GetHashCode();\n        hash = (hash * 16777619) ^ field2.GetHashCode();\n        hash = (hash * 16777619) ^ field3.GetHashCode();\n        return hash;\n    }\n}\n\n\nNote that one thing to be aware of is that ideally you should prevent your equality-sensitive (and thus hashcode-sensitive) state from changing after adding it to a collection that depends on the hash code.\n\nAs per the documentation:\n\n\n  You can override GetHashCode for immutable reference types. In general, for mutable reference types, you should override GetHashCode only if:\n  \n  \n  You can compute the hash code from fields that are not mutable; or\n  You can ensure that the hash code of a mutable object does not change while the object is contained in a collection that relies on its hash code.\n  \n\n    ","\nValueTuple - Update for C# 7\nAs @cactuaroid mentions in the comments, a value tuple can be used. This saves a few keystrokes and more importantly executes purely on the stack (no Garbage):\n(PropA, PropB, PropC, PropD).GetHashCode();\n\n(Note: The original technique using anonymous types seems to create an object on the heap, i.e. garbage, since anonymous types are implemented as classes, though this might be optimized out by the compiler. It would be interesting to benchmark these options, but the tuple option should be superior.)\nAnonymous Type (Original Answer)\nMicrosoft already provides a good generic HashCode generator: Just copy your property/field values to an anonymous type and hash it:\nnew { PropA, PropB, PropC, PropD }.GetHashCode();\n\nThis will work for any number of properties. It does not use boxing. It just uses the algorithm already implemented in the framework for anonymous types.\n    ","\nHere is my hashcode helper.\nIt\u0027s advantage is that it uses generic type arguments and therefore will not cause boxing:\n\npublic static class HashHelper\n{\n    public static int GetHashCode\u003CT1, T2\u003E(T1 arg1, T2 arg2)\n    {\n         unchecked\n         {\n             return 31 * arg1.GetHashCode() \u002B arg2.GetHashCode();\n         }\n    }\n\n    public static int GetHashCode\u003CT1, T2, T3\u003E(T1 arg1, T2 arg2, T3 arg3)\n    {\n        unchecked\n        {\n            int hash = arg1.GetHashCode();\n            hash = 31 * hash \u002B arg2.GetHashCode();\n            return 31 * hash \u002B arg3.GetHashCode();\n        }\n    }\n\n    public static int GetHashCode\u003CT1, T2, T3, T4\u003E(T1 arg1, T2 arg2, T3 arg3, \n        T4 arg4)\n    {\n        unchecked\n        {\n            int hash = arg1.GetHashCode();\n            hash = 31 * hash \u002B arg2.GetHashCode();\n            hash = 31 * hash \u002B arg3.GetHashCode();\n            return 31 * hash \u002B arg4.GetHashCode();\n        }\n    }\n\n    public static int GetHashCode\u003CT\u003E(T[] list)\n    {\n        unchecked\n        {\n            int hash = 0;\n            foreach (var item in list)\n            {\n                hash = 31 * hash \u002B item.GetHashCode();\n            }\n            return hash;\n        }\n    }\n\n    public static int GetHashCode\u003CT\u003E(IEnumerable\u003CT\u003E list)\n    {\n        unchecked\n        {\n            int hash = 0;\n            foreach (var item in list)\n            {\n                hash = 31 * hash \u002B item.GetHashCode();\n            }\n            return hash;\n        }\n    }\n\n    /// \u003Csummary\u003E\n    /// Gets a hashcode for a collection for that the order of items \n    /// does not matter.\n    /// So {1, 2, 3} and {3, 2, 1} will get same hash code.\n    /// \u003C/summary\u003E\n    public static int GetHashCodeForOrderNoMatterCollection\u003CT\u003E(\n        IEnumerable\u003CT\u003E list)\n    {\n        unchecked\n        {\n            int hash = 0;\n            int count = 0;\n            foreach (var item in list)\n            {\n                hash \u002B= item.GetHashCode();\n                count\u002B\u002B;\n            }\n            return 31 * hash \u002B count.GetHashCode();\n        }\n    }\n\n    /// \u003Csummary\u003E\n    /// Alternative way to get a hashcode is to use a fluent \n    /// interface like this:\u003Cbr /\u003E\n    /// return 0.CombineHashCode(field1).CombineHashCode(field2).\n    ///     CombineHashCode(field3);\n    /// \u003C/summary\u003E\n    public static int CombineHashCode\u003CT\u003E(this int hashCode, T arg)\n    {\n        unchecked\n        {\n            return 31 * hashCode \u002B arg.GetHashCode();   \n        }\n    }\n\n\nAlso it has extension method to provide a fluent interface, so you can use it like this:\n\npublic override int GetHashCode()\n{\n    return HashHelper.GetHashCode(Manufacturer, PartN, Quantity);\n}\n\n\nor like this:  \n\npublic override int GetHashCode()\n{\n    return 0.CombineHashCode(Manufacturer)\n        .CombineHashCode(PartN)\n        .CombineHashCode(Quantity);\n}\n\n    ","\nI have a Hashing class in Helper library that I use it for this purpose.\n\n/// \u003Csummary\u003E \n/// This is a simple hashing function from Robert Sedgwicks Hashing in C book.\n/// Also, some simple optimizations to the algorithm in order to speed up\n/// its hashing process have been added. from: www.partow.net\n/// \u003C/summary\u003E\n/// \u003Cparam name=\u0022input\u0022\u003Earray of objects, parameters combination that you need\n/// to get a unique hash code for them\u003C/param\u003E\n/// \u003Creturns\u003EHash code\u003C/returns\u003E\npublic static int RSHash(params object[] input)\n{\n    const int b = 378551;\n    int a = 63689;\n    int hash = 0;\n\n    // If it overflows then just wrap around\n    unchecked\n    {\n        for (int i = 0; i \u003C input.Length; i\u002B\u002B)\n        {\n            if (input[i] != null)\n            {\n                hash = hash * a \u002B input[i].GetHashCode();\n                a = a * b;\n            }\n        }\n    }\n\n    return hash;\n}\n\n\nThen, simply you can use it as:\n\npublic override int GetHashCode()\n{\n    return Hashing.RSHash(_field1, _field2, _field3);\n}\n\n\nI didn\u0027t assess its performance, so any feedback is welcomed.\n    ","\nHere\u0027s my helper class using Jon Skeet\u0027s implementation.\n\npublic static class HashCode\n{\n    public const int Start = 17;\n\n    public static int Hash\u003CT\u003E(this int hash, T obj)\n    {\n        var h = EqualityComparer\u003CT\u003E.Default.GetHashCode(obj);\n        return unchecked((hash * 31) \u002B h);\n    }\n}\n\n\nUsage:\n\npublic override int GetHashCode()\n{\n    return HashCode.Start\n        .Hash(_field1)\n        .Hash(_field2)\n        .Hash(_field3);\n}\n\n\nIf you want to avoid writing an extension method for System.Int32:\n\npublic readonly struct HashCode\n{\n    private readonly int _value;\n\n    public HashCode(int value) =\u003E _value = value;\n\n    public static HashCode Start { get; } = new HashCode(17);\n\n    public static implicit operator int(HashCode hash) =\u003E hash._value;\n\n    public HashCode Hash\u003CT\u003E(T obj)\n    {\n        var h = EqualityComparer\u003CT\u003E.Default.GetHashCode(obj);\n        return unchecked(new HashCode((_value * 31) \u002B h));\n    }\n\n    public override int GetHashCode() =\u003E _value;\n}\n\n\nIt still avoids any heap allocation and is used exactly the same way:\n\npublic override int GetHashCode()\n{\n    // This time \u0060HashCode.Start\u0060 is not an \u0060Int32\u0060, it\u0027s a \u0060HashCode\u0060 instance.\n    // And the result is implicitly converted to \u0060Int32\u0060.\n    return HashCode.Start\n        .Hash(_field1)\n        .Hash(_field2)     \n        .Hash(_field3);\n}\n\n\nEdit (May 2018): EqualityComparer\u003CT\u003E.Default getter is now a JIT intrinsic - the pull request is mentioned by Stephen Toub in this blog post.\n    ","\n.NET Standard 2.1 And Above\nIf you are using .NET Standard 2.1 or above, you can use the System.HashCode struct. There are two methods of using it:\nHashCode.Combine\nThe Combine method can be used to create a hash code, given up to eight objects.\npublic override int GetHashCode() =\u003E HashCode.Combine(this.object1, this.object2);\n\nHashCode.Add\nThe Add method helps you to deal with collections:\npublic override int GetHashCode()\n{\n    var hashCode = new HashCode();\n    hashCode.Add(this.object1);\n    foreach (var item in this.collection)\n    {\n        hashCode.Add(item);\n    }\n    return hashCode.ToHashCode();\n}\n\nGetHashCode Made Easy\nYou can read the full blog post \u0027GetHashCode Made Easy\u0027 for more details and comments.\nUsage Example\npublic class SuperHero\n{\n    public int Age { get; set; }\n    public string Name { get; set; }\n    public List\u003Cstring\u003E Powers { get; set; }\n\n    public override int GetHashCode() =\u003E\n        HashCode.Of(this.Name).And(this.Age).AndEach(this.Powers);\n}\n\nImplementation\npublic struct HashCode : IEquatable\u003CHashCode\u003E\n{\n    private const int EmptyCollectionPrimeNumber = 19;\n    private readonly int value;\n\n    private HashCode(int value) =\u003E this.value = value;\n\n    public static implicit operator int(HashCode hashCode) =\u003E hashCode.value;\n\n    public static bool operator ==(HashCode left, HashCode right) =\u003E left.Equals(right);\n\n    public static bool operator !=(HashCode left, HashCode right) =\u003E !(left == right);\n\n    public static HashCode Of\u003CT\u003E(T item) =\u003E new HashCode(GetHashCode(item));\n\n    public static HashCode OfEach\u003CT\u003E(IEnumerable\u003CT\u003E items) =\u003E\n        items == null ? new HashCode(0) : new HashCode(GetHashCode(items, 0));\n\n    public HashCode And\u003CT\u003E(T item) =\u003E \n        new HashCode(CombineHashCodes(this.value, GetHashCode(item)));\n\n    public HashCode AndEach\u003CT\u003E(IEnumerable\u003CT\u003E items)\n    {\n        if (items == null)\n        {\n            return new HashCode(this.value);\n        }\n\n        return new HashCode(GetHashCode(items, this.value));\n    }\n\n    public bool Equals(HashCode other) =\u003E this.value.Equals(other.value);\n\n    public override bool Equals(object obj)\n    {\n        if (obj is HashCode)\n        {\n            return this.Equals((HashCode)obj);\n        }\n\n        return false;\n    }\n\n    public override int GetHashCode() =\u003E this.value.GetHashCode();\n\n    private static int CombineHashCodes(int h1, int h2)\n    {\n        unchecked\n        {\n            // Code copied from System.Tuple a good way to combine hashes.\n            return ((h1 \u003C\u003C 5) \u002B h1) ^ h2;\n        }\n    }\n\n    private static int GetHashCode\u003CT\u003E(T item) =\u003E item?.GetHashCode() ?? 0;\n\n    private static int GetHashCode\u003CT\u003E(IEnumerable\u003CT\u003E items, int startHashCode)\n    {\n        var temp = startHashCode;\n\n        var enumerator = items.GetEnumerator();\n        if (enumerator.MoveNext())\n        {\n            temp = CombineHashCodes(temp, GetHashCode(enumerator.Current));\n\n            while (enumerator.MoveNext())\n            {\n                temp = CombineHashCodes(temp, GetHashCode(enumerator.Current));\n            }\n        }\n        else\n        {\n            temp = CombineHashCodes(temp, EmptyCollectionPrimeNumber);\n        }\n\n        return temp;\n    }\n}\n\nWhat Makes a Good Algorithm?\nPerformance\nThe algorithm that calculates a hash code needs to be fast. A simple algorithm is usually going to be a faster one. One that does not allocate extra memory will also reduce need for garbage collection, which will in turn also improve performance.\nDeterministic\nThe hashing algorithm needs to be deterministic i.e. given the same input it must always produce the same output.\nReduce Collisions\nThe algorithm that calculates a hash code needs to keep hash collisions to a minumum. A hash collision is a situation that occurs when two calls to GetHashCode on two different objects produce identical hash codes. Note that collisions are allowed (some have the misconceptions that they are not) but they should be kept to a minimum.\nA good hash function should map the expected inputs as evenly as possible over its output range. It should have uniformity.\nPrevent\u0027s DoS\nIn .NET Core each time you restart an application you will get different hash codes. This is a security feature to prevent Denial of Service attacks (DoS). For .NET Framework you should enable this feature by adding the following App.config file:\n\u003C?xml version =\u00221.0\u0022?\u003E  \n\u003Cconfiguration\u003E  \n   \u003Cruntime\u003E  \n      \u003CUseRandomizedStringHashAlgorithm enabled=\u00221\u0022 /\u003E  \n   \u003C/runtime\u003E  \n\u003C/configuration\u003E\n\nBecause of this feature, hash codes should never be used outside of the application domain in which they were created, they should never be used as key fields in a collection and they should never be persisted.\nRead more about this here.\nCryptographically Secure?\nThe algorithm does not have to be a Cryptographic hash function. Meaning it does not have to satisfy the following conditions:\n\nIt is infeasible to generate a message that yields a given hash value\nIt is infeasible to find two different messages with the same hash value\nA small change to a message should change the hash value so extensively that the new hash value appears uncorrelated with the old hash value (avalanche effect).\n\n    ","\nIn most cases where Equals() compares multiple fields it doesn\u0027t really matter if your GetHash() hashes on one field or on many. You just have to make sure that calculating the hash is really cheap (No allocations, please) and fast (No heavy computations and certainly no database connections) and provides a good distribution.\n\nThe heavy lifting should be part of the Equals() method; the hash should be a very cheap operation to enable calling Equals() on as few items as possible.\n\nAnd one final tip: Don\u0027t rely on GetHashCode() being stable over multiple aplication runs. Many .Net types don\u0027t guarantee their hash codes to stay the same after a restart, so you should only use the value of GetHashCode() for in memory data structures.\n    ","\nUp until recently my answer would have been very close to Jon Skeet\u0027s here. However, I recently started a project which used power-of-two hash tables, that is hash tables where the size of the internal table is 8, 16, 32, etc. There\u0027s a good reason for favouring prime-number sizes, but there are some advantages to power-of-two sizes too.\n\nAnd it pretty much sucked. So after a bit of experimentation and research I started re-hashing my hashes with the following:\n\npublic static int ReHash(int source)\n{\n  unchecked\n  {\n    ulong c = 0xDEADBEEFDEADBEEF \u002B (ulong)source;\n    ulong d = 0xE2ADBEEFDEADBEEF ^ c;\n    ulong a = d \u002B= c = c \u003C\u003C 15 | c \u003E\u003E -15;\n    ulong b = a \u002B= d = d \u003C\u003C 52 | d \u003E\u003E -52;\n    c ^= b \u002B= a = a \u003C\u003C 26 | a \u003E\u003E -26;\n    d ^= c \u002B= b = b \u003C\u003C 51 | b \u003E\u003E -51;\n    a ^= d \u002B= c = c \u003C\u003C 28 | c \u003E\u003E -28;\n    b ^= a \u002B= d = d \u003C\u003C 9 | d \u003E\u003E -9;\n    c ^= b \u002B= a = a \u003C\u003C 47 | a \u003E\u003E -47;\n    d ^= c \u002B= b \u003C\u003C 54 | b \u003E\u003E -54;\n    a ^= d \u002B= c \u003C\u003C 32 | c \u003E\u003E 32;\n    a \u002B= d \u003C\u003C 25 | d \u003E\u003E -25;\n    return (int)(a \u003E\u003E 1);\n  }\n}\n\n\nAnd then my power-of-two hash table didn\u0027t suck any more.\n\nThis disturbed me though, because the above shouldn\u0027t work. Or more precisely, it shouldn\u0027t work unless the original GetHashCode() was poor in a very particular way.\n\nRe-mixing a hashcode can\u0027t improve a great hashcode, because the only possible effect is that we introduce a few more collisions.\n\nRe-mixing a hash code can\u0027t improve a terrible hash code, because the only possible effect is we change e.g. a large number of collisions on value 53 to a large number of value 18,3487,291.\n\nRe-mixing a hash code can only improve a hash code that did at least fairly well in avoiding absolute collisions throughout its range (232 possible values) but badly at avoiding collisions when modulo\u0027d down for actual use in a hash table. While the simpler modulo of a power-of-two table made this more apparent, it was also having a negative effect with the more common prime-number tables, that just wasn\u0027t as obvious (the extra work in rehashing would outweigh the benefit, but the benefit would still be there).\n\nEdit: I was also using open-addressing, which would also have increased the sensitivity to collision, perhaps more so than the fact it was power-of-two.\n\nAnd well, it was disturbing how much the string.GetHashCode() implementations in .NET (or study here) could be improved this way (on the order of tests running about 20-30 times faster due to fewer collisions) and more disturbing how much my own hash codes could be improved (much more than that).\n\nAll the GetHashCode() implementations I\u0027d coded in the past, and indeed used as the basis of answers on this site, were much worse than I\u0027d throught. Much of the time it was \u0022good enough\u0022 for much of the uses, but I wanted something better.\n\nSo I put that project to one side (it was a pet project anyway) and started looking at how to produce a good, well-distributed hash code in .NET quickly.\n\nIn the end I settled on porting SpookyHash to .NET. Indeed the code above is a fast-path version of using SpookyHash to produce a 32-bit output from a 32-bit input.\n\nNow, SpookyHash is not a nice quick to remember piece of code. My port of it is even less so because I hand-inlined a lot of it for better speed*. But that\u0027s what code reuse is for.\n\nThen I put that project to one side, because just as the original project had produced the question of how to produce a better hash code, so that project produced the question of how to produce a better .NET memcpy.\n\nThen I came back, and produced a lot of overloads to easily feed just about all of the native types (except decimal\u2020) into a hash code.\n\nIt\u0027s fast, for which Bob Jenkins deserves most of the credit because his original code I ported from is faster still, especially on 64-bit machines which the algorithm is optimised for\u2021.\n\nThe full code can be seen at https://bitbucket.org/JonHanna/spookilysharp/src but consider that the code above is a simplified version of it.\n\nHowever, since it\u0027s now already written, one can make use of it more easily:\n\npublic override int GetHashCode()\n{\n  var hash = new SpookyHash();\n  hash.Update(field1);\n  hash.Update(field2);\n  hash.Update(field3);\n  return hash.Final().GetHashCode();\n}\n\n\nIt also takes seed values, so if you need to deal with untrusted input and want to protect against Hash DoS attacks you can set a seed based on uptime or similar, and make the results unpredictable by attackers:\n\nprivate static long hashSeed0 = Environment.TickCount;\nprivate static long hashSeed1 = DateTime.Now.Ticks;\npublic override int GetHashCode()\n{\n  //produce different hashes ever time this application is restarted\n  //but remain consistent in each run, so attackers have a harder time\n  //DoSing the hash tables.\n  var hash = new SpookyHash(hashSeed0, hashSeed1);\n  hash.Update(field1);\n  hash.Update(field2);\n  hash.Update(field3);\n  return hash.Final().GetHashCode();\n}\n\n\n*A big surprise in this is that hand-inlining a rotation method that returned (x \u003C\u003C n) | (x \u003E\u003E -n) improved things. I would have been sure that the jitter would have inlined that for me, but profiling showed otherwise.\n\n\u2020decimal isn\u0027t native from the .NET perspective though it is from the C#. The problem with it is that its own GetHashCode() treats precision as significant while its own Equals() does not. Both are valid choices, but not mixed like that. In implementing your own version, you need to choose to do one, or the other, but I can\u0027t know which you\u0027d want.\n\n\u2021By way of comparison. If used on a string, the SpookyHash on 64 bits is considerably faster than string.GetHashCode() on 32 bits which is slightly faster than string.GetHashCode() on 64 bits, which is considerably faster than SpookyHash on 32 bits, though still fast enough to be a reasonable choice.\n    ","\nAs of https://github.com/dotnet/coreclr/pull/14863, there is a new way to generate hash codes that is super simple! Just write\n\npublic override int GetHashCode()\n    =\u003E HashCode.Combine(field1, field2, field3);\n\n\nThis will generate a quality hash code without you having to worry about the implementation details.\n    ","\nThis is a good one:\n\n/// \u003Csummary\u003E\n/// Helper class for generating hash codes suitable \n/// for use in hashing algorithms and data structures like a hash table. \n/// \u003C/summary\u003E\npublic static class HashCodeHelper\n{\n    private static int GetHashCodeInternal(int key1, int key2)\n    {\n        unchecked\n        {\n           var num = 0x7e53a269;\n           num = (-1521134295 * num) \u002B key1;\n           num \u002B= (num \u003C\u003C 10);\n           num ^= (num \u003E\u003E 6);\n\n           num = ((-1521134295 * num) \u002B key2);\n           num \u002B= (num \u003C\u003C 10);\n           num ^= (num \u003E\u003E 6);\n\n           return num;\n        }\n    }\n\n    /// \u003Csummary\u003E\n    /// Returns a hash code for the specified objects\n    /// \u003C/summary\u003E\n    /// \u003Cparam name=\u0022arr\u0022\u003EAn array of objects used for generating the \n    /// hash code.\u003C/param\u003E\n    /// \u003Creturns\u003E\n    /// A hash code, suitable for use in hashing algorithms and data \n    /// structures like a hash table. \n    /// \u003C/returns\u003E\n    public static int GetHashCode(params object[] arr)\n    {\n        int hash = 0;\n        foreach (var item in arr)\n            hash = GetHashCodeInternal(hash, item.GetHashCode());\n        return hash;\n    }\n\n    /// \u003Csummary\u003E\n    /// Returns a hash code for the specified objects\n    /// \u003C/summary\u003E\n    /// \u003Cparam name=\u0022obj1\u0022\u003EThe first object.\u003C/param\u003E\n    /// \u003Cparam name=\u0022obj2\u0022\u003EThe second object.\u003C/param\u003E\n    /// \u003Cparam name=\u0022obj3\u0022\u003EThe third object.\u003C/param\u003E\n    /// \u003Cparam name=\u0022obj4\u0022\u003EThe fourth object.\u003C/param\u003E\n    /// \u003Creturns\u003E\n    /// A hash code, suitable for use in hashing algorithms and\n    /// data structures like a hash table.\n    /// \u003C/returns\u003E\n    public static int GetHashCode\u003CT1, T2, T3, T4\u003E(T1 obj1, T2 obj2, T3 obj3,\n        T4 obj4)\n    {\n        return GetHashCode(obj1, GetHashCode(obj2, obj3, obj4));\n    }\n\n    /// \u003Csummary\u003E\n    /// Returns a hash code for the specified objects\n    /// \u003C/summary\u003E\n    /// \u003Cparam name=\u0022obj1\u0022\u003EThe first object.\u003C/param\u003E\n    /// \u003Cparam name=\u0022obj2\u0022\u003EThe second object.\u003C/param\u003E\n    /// \u003Cparam name=\u0022obj3\u0022\u003EThe third object.\u003C/param\u003E\n    /// \u003Creturns\u003E\n    /// A hash code, suitable for use in hashing algorithms and data \n    /// structures like a hash table. \n    /// \u003C/returns\u003E\n    public static int GetHashCode\u003CT1, T2, T3\u003E(T1 obj1, T2 obj2, T3 obj3)\n    {\n        return GetHashCode(obj1, GetHashCode(obj2, obj3));\n    }\n\n    /// \u003Csummary\u003E\n    /// Returns a hash code for the specified objects\n    /// \u003C/summary\u003E\n    /// \u003Cparam name=\u0022obj1\u0022\u003EThe first object.\u003C/param\u003E\n    /// \u003Cparam name=\u0022obj2\u0022\u003EThe second object.\u003C/param\u003E\n    /// \u003Creturns\u003E\n    /// A hash code, suitable for use in hashing algorithms and data \n    /// structures like a hash table. \n    /// \u003C/returns\u003E\n    public static int GetHashCode\u003CT1, T2\u003E(T1 obj1, T2 obj2)\n    {\n        return GetHashCodeInternal(obj1.GetHashCode(), obj2.GetHashCode());\n    }\n}\n\n\nAnd here is how to use it:\n\nprivate struct Key\n{\n    private Type _type;\n    private string _field;\n\n    public Type Type { get { return _type; } }\n    public string Field { get { return _field; } }\n\n    public Key(Type type, string field)\n    {\n        _type = type;\n        _field = field;\n    }\n\n    public override int GetHashCode()\n    {\n        return HashCodeHelper.GetHashCode(_field, _type);\n    }\n\n    public override bool Equals(object obj)\n    {\n        if (!(obj is Key))\n            return false;\n        var tf = (Key)obj;\n        return tf._field.Equals(_field) \u0026\u0026 tf._type.Equals(_type);\n    }\n}\n\n    ","\nHere is another fluent implementation of the algorithm posted above by Jon Skeet, but which includes no allocations or boxing operations:\n\npublic static class Hash\n{\n    public const int Base = 17;\n\n    public static int HashObject(this int hash, object obj)\n    {\n        unchecked { return hash * 23 \u002B (obj == null ? 0 : obj.GetHashCode()); }\n    }\n\n    public static int HashValue\u003CT\u003E(this int hash, T value)\n        where T : struct\n    {\n        unchecked { return hash * 23 \u002B value.GetHashCode(); }\n    }\n}\n\n\nUsage:\n\npublic class MyType\u003CT\u003E\n{\n    public string Name { get; set; }\n\n    public string Description { get; set; }\n\n    public int Value { get; set; }\n\n    public IEnumerable\u003CT\u003E Children { get; set; }\n\n    public override int GetHashCode()\n    {\n        return Hash.Base\n            .HashObject(this.Name)\n            .HashObject(this.Description)\n            .HashValue(this.Value)\n            .HashObject(this.Children);\n    }\n}\n\n\nThe compiler will ensure HashValue is not called with a class due to the generic type constraint. But there is no compiler support for HashObject since adding a generic argument also adds a boxing operation.\n    ","\nHere is my simplistic approach. I am using the classic builder pattern for this. It is typesafe (no boxing/unboxing) and also compatbile with .NET 2.0 (no extension methods etc.).\n\nIt is used like this:\n\npublic override int GetHashCode()\n{\n    HashBuilder b = new HashBuilder();\n    b.AddItems(this.member1, this.member2, this.member3);\n    return b.Result;\n} \n\n\nAnd here is the acutal builder class:\n\ninternal class HashBuilder\n{\n    private const int Prime1 = 17;\n    private const int Prime2 = 23;\n    private int result = Prime1;\n\n    public HashBuilder()\n    {\n    }\n\n    public HashBuilder(int startHash)\n    {\n        this.result = startHash;\n    }\n\n    public int Result\n    {\n        get\n        {\n            return this.result;\n        }\n    }\n\n    public void AddItem\u003CT\u003E(T item)\n    {\n        unchecked\n        {\n            this.result = this.result * Prime2 \u002B item.GetHashCode();\n        }\n    }\n\n    public void AddItems\u003CT1, T2\u003E(T1 item1, T2 item2)\n    {\n        this.AddItem(item1);\n        this.AddItem(item2);\n    }\n\n    public void AddItems\u003CT1, T2, T3\u003E(T1 item1, T2 item2, T3 item3)\n    {\n        this.AddItem(item1);\n        this.AddItem(item2);\n        this.AddItem(item3);\n    }\n\n    public void AddItems\u003CT1, T2, T3, T4\u003E(T1 item1, T2 item2, T3 item3, \n        T4 item4)\n    {\n        this.AddItem(item1);\n        this.AddItem(item2);\n        this.AddItem(item3);\n        this.AddItem(item4);\n    }\n\n    public void AddItems\u003CT1, T2, T3, T4, T5\u003E(T1 item1, T2 item2, T3 item3, \n        T4 item4, T5 item5)\n    {\n        this.AddItem(item1);\n        this.AddItem(item2);\n        this.AddItem(item3);\n        this.AddItem(item4);\n        this.AddItem(item5);\n    }        \n\n    public void AddItems\u003CT\u003E(params T[] items)\n    {\n        foreach (T item in items)\n        {\n            this.AddItem(item);\n        }\n    }\n}\n\n    ","\nReSharper users can generate GetHashCode, Equals, and others with ReSharper -\u003E Edit -\u003E Generate Code -\u003E Equality Members.\n\n// ReSharper\u0027s GetHashCode looks like this\npublic override int GetHashCode() {\n    unchecked {\n        int hashCode = Id;\n        hashCode = (hashCode * 397) ^ IntMember;\n        hashCode = (hashCode * 397) ^ OtherIntMember;\n        hashCode = (hashCode * 397) ^ (RefMember != null ? RefMember.GetHashCode() : 0);\n        // ...\n        return hashCode;\n    }\n}\n\n    ","\nIf we have no more than 8 properties (hopefully), here is another alternative.\n\nValueTuple is a struct and appears to have a solid GetHashCode implementation.\n\nThat means we could simply do this:\n\n// Yay, no allocations and no custom implementations!\npublic override int GetHashCode() =\u003E (this.PropA, this.PropB).GetHashCode();\n\n\nLet\u0027s take a look at .NET Core\u0027s current implementation for ValueTuple\u0027s GetHashCode.\n\nThis is from ValueTuple:\n\n    internal static int CombineHashCodes(int h1, int h2)\n    {\n        return HashHelpers.Combine(HashHelpers.Combine(HashHelpers.RandomSeed, h1), h2);\n    }\n\n    internal static int CombineHashCodes(int h1, int h2, int h3)\n    {\n        return HashHelpers.Combine(CombineHashCodes(h1, h2), h3);\n    }\n\n\nAnd this is from HashHelper:\n\n    public static readonly int RandomSeed = Guid.NewGuid().GetHashCode();\n\n    public static int Combine(int h1, int h2)\n    {\n        unchecked\n        {\n            // RyuJIT optimizes this to use the ROL instruction\n            // Related GitHub pull request: dotnet/coreclr#1830\n            uint rol5 = ((uint)h1 \u003C\u003C 5) | ((uint)h1 \u003E\u003E 27);\n            return ((int)rol5 \u002B h1) ^ h2;\n        }\n    }\n\n\nIn English:\n\n\nLeft rotate (circular shift) h1 by 5 positions.\nAdd the result and h1 together.\nXOR the result with h2.\nStart by performing the above operation on { static random seed, h1 }.\nFor each further item, perform the operation on the previous result and the next item (e.g. h2).\n\n\nIt would be nice to know more about the properties of this ROL-5 hash code algorithm.\n\nRegrettably, deferring to ValueTuple for our own GetHashCode may not be as fast as we would like and expect. This comment in a related discussion illustrates that directly calling HashHelpers.Combine is more performant. On the flip side, that one is internal, so we\u0027d have to copy the code, sacrificing much of what we had gained here. Also, we\u0027d be responsible for remembering to first Combine with the random seed. I don\u0027t know what the consequences are if we skip that step.\n    ","\nMost of my work is done with database connectivity which means that my classes all have a unique identifier from the database.  I always use the ID from the database to generate the hashcode.\n\n// Unique ID from database\nprivate int _id;\n\n...    \n{\n  return _id.GetHashCode();\n}\n\n    ","\nPretty much similar to nightcoder\u0027s solution except it\u0027s easier to raise primes if you want to. \n\nPS: This is one of those times where you puke a little in your mouth, knowing that this could be refactored into one method with 9 default\u0027s but it would be slower, so you just close your eyes and try to forget about it.\n\n/// \u003Csummary\u003E\n/// Try not to look at the source code. It works. Just rely on it.\n/// \u003C/summary\u003E\npublic static class HashHelper\n{\n    private const int PrimeOne = 17;\n    private const int PrimeTwo = 23;\n\n    public static int GetHashCode\u003CT1, T2, T3, T4, T5, T6, T7, T8, T9, T10\u003E(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10)\n    {\n        unchecked\n        {\n            int hash = PrimeOne;\n            hash = hash * PrimeTwo \u002B arg1.GetHashCode();\n            hash = hash * PrimeTwo \u002B arg2.GetHashCode();\n            hash = hash * PrimeTwo \u002B arg3.GetHashCode();\n            hash = hash * PrimeTwo \u002B arg4.GetHashCode();\n            hash = hash * PrimeTwo \u002B arg5.GetHashCode();\n            hash = hash * PrimeTwo \u002B arg6.GetHashCode();\n            hash = hash * PrimeTwo \u002B arg7.GetHashCode();\n            hash = hash * PrimeTwo \u002B arg8.GetHashCode();\n            hash = hash * PrimeTwo \u002B arg9.GetHashCode();\n            hash = hash * PrimeTwo \u002B arg10.GetHashCode();\n\n            return hash;\n        }\n    }\n\n    public static int GetHashCode\u003CT1, T2, T3, T4, T5, T6, T7, T8, T9\u003E(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9)\n    {\n        unchecked\n        {\n            int hash = PrimeOne;\n            hash = hash * PrimeTwo \u002B arg1.GetHashCode();\n            hash = hash * PrimeTwo \u002B arg2.GetHashCode();\n            hash = hash * PrimeTwo \u002B arg3.GetHashCode();\n            hash = hash * PrimeTwo \u002B arg4.GetHashCode();\n            hash = hash * PrimeTwo \u002B arg5.GetHashCode();\n            hash = hash * PrimeTwo \u002B arg6.GetHashCode();\n            hash = hash * PrimeTwo \u002B arg7.GetHashCode();\n            hash = hash * PrimeTwo \u002B arg8.GetHashCode();\n            hash = hash * PrimeTwo \u002B arg9.GetHashCode();\n\n            return hash;\n        }\n    }\n\n    public static int GetHashCode\u003CT1, T2, T3, T4, T5, T6, T7, T8\u003E(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8)\n    {\n        unchecked\n        {\n            int hash = PrimeOne;\n            hash = hash * PrimeTwo \u002B arg1.GetHashCode();\n            hash = hash * PrimeTwo \u002B arg2.GetHashCode();\n            hash = hash * PrimeTwo \u002B arg3.GetHashCode();\n            hash = hash * PrimeTwo \u002B arg4.GetHashCode();\n            hash = hash * PrimeTwo \u002B arg5.GetHashCode();\n            hash = hash * PrimeTwo \u002B arg6.GetHashCode();\n            hash = hash * PrimeTwo \u002B arg7.GetHashCode();\n            hash = hash * PrimeTwo \u002B arg8.GetHashCode();\n\n            return hash;\n        }\n    }\n\n    public static int GetHashCode\u003CT1, T2, T3, T4, T5, T6, T7\u003E(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7)\n    {\n        unchecked\n        {\n            int hash = PrimeOne;\n            hash = hash * PrimeTwo \u002B arg1.GetHashCode();\n            hash = hash * PrimeTwo \u002B arg2.GetHashCode();\n            hash = hash * PrimeTwo \u002B arg3.GetHashCode();\n            hash = hash * PrimeTwo \u002B arg4.GetHashCode();\n            hash = hash * PrimeTwo \u002B arg5.GetHashCode();\n            hash = hash * PrimeTwo \u002B arg6.GetHashCode();\n            hash = hash * PrimeTwo \u002B arg7.GetHashCode();\n\n            return hash;\n        }\n    }\n\n    public static int GetHashCode\u003CT1, T2, T3, T4, T5, T6\u003E(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6)\n    {\n        unchecked\n        {\n            int hash = PrimeOne;\n            hash = hash * PrimeTwo \u002B arg1.GetHashCode();\n            hash = hash * PrimeTwo \u002B arg2.GetHashCode();\n            hash = hash * PrimeTwo \u002B arg3.GetHashCode();\n            hash = hash * PrimeTwo \u002B arg4.GetHashCode();\n            hash = hash * PrimeTwo \u002B arg5.GetHashCode();\n            hash = hash * PrimeTwo \u002B arg6.GetHashCode();\n\n            return hash;\n        }\n    }\n\n    public static int GetHashCode\u003CT1, T2, T3, T4, T5\u003E(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5)\n    {\n        unchecked\n        {\n            int hash = PrimeOne;\n            hash = hash * PrimeTwo \u002B arg1.GetHashCode();\n            hash = hash * PrimeTwo \u002B arg2.GetHashCode();\n            hash = hash * PrimeTwo \u002B arg3.GetHashCode();\n            hash = hash * PrimeTwo \u002B arg4.GetHashCode();\n            hash = hash * PrimeTwo \u002B arg5.GetHashCode();\n\n            return hash;\n        }\n    }\n\n    public static int GetHashCode\u003CT1, T2, T3, T4\u003E(T1 arg1, T2 arg2, T3 arg3, T4 arg4)\n    {\n        unchecked\n        {\n            int hash = PrimeOne;\n            hash = hash * PrimeTwo \u002B arg1.GetHashCode();\n            hash = hash * PrimeTwo \u002B arg2.GetHashCode();\n            hash = hash * PrimeTwo \u002B arg3.GetHashCode();\n            hash = hash * PrimeTwo \u002B arg4.GetHashCode();\n\n            return hash;\n        }\n    }\n\n    public static int GetHashCode\u003CT1, T2, T3\u003E(T1 arg1, T2 arg2, T3 arg3)\n    {\n        unchecked\n        {\n            int hash = PrimeOne;\n            hash = hash * PrimeTwo \u002B arg1.GetHashCode();\n            hash = hash * PrimeTwo \u002B arg2.GetHashCode();\n            hash = hash * PrimeTwo \u002B arg3.GetHashCode();\n\n            return hash;\n        }\n    }\n\n    public static int GetHashCode\u003CT1, T2\u003E(T1 arg1, T2 arg2)\n    {\n        unchecked\n        {\n            int hash = PrimeOne;\n            hash = hash * PrimeTwo \u002B arg1.GetHashCode();\n            hash = hash * PrimeTwo \u002B arg2.GetHashCode();\n\n            return hash;\n        }\n    }\n}\n\n    ","\nMicrosoft lead for several way of hashing...\n\n//for classes that contain a single int value\nreturn this.value;\n\n//for classes that contain multiple int value\nreturn x ^ y;\n\n//for classes that contain single number bigger than int    \nreturn ((int)value ^ (int)(value \u003E\u003E 32)); \n\n//for classes that contain class instance fields which inherit from object\nreturn obj1.GetHashCode();\n\n//for classes that contain multiple class instance fields which inherit from object\nreturn obj1.GetHashCode() ^ obj2.GetHashCode() ^ obj3.GetHashCode(); \n\n\nI can guess that for multiple big int you can use this:\n\nint a=((int)value1 ^ (int)(value1 \u003E\u003E 32));\nint b=((int)value2 ^ (int)(value2 \u003E\u003E 32));\nint c=((int)value3 ^ (int)(value3 \u003E\u003E 32));\nreturn a ^ b ^ c;\n\n\nAnd same for multi-type: all converted first to int using GetHashCode()\nthen the int values will be xor\u0027ed and the result is your hash.\n\nFor those who use hash as ID (I mean an unique value), hash is naturally limited to a number of digits, I think it was 5 bytes for hashing algorithm, at least MD5.\n\nYou may turn multiple values to a hashed value and some of them be same, so don\u0027t use it as an identifier. (maybe some day I am going to use your component)\n    ","\nI ran into an issue with floats and decimals using the implementation selected as the answer above.  \n\nThis test fails (floats; hash is the same even though I switched 2 values to be negative):\n\n        var obj1 = new { A = 100m, B = 100m, C = 100m, D = 100m};\n        var obj2 = new { A = 100m, B = 100m, C = -100m, D = -100m};\n        var hash1 = ComputeHash(obj1.A, obj1.B, obj1.C, obj1.D);\n        var hash2 = ComputeHash(obj2.A, obj2.B, obj2.C, obj2.D);\n        Assert.IsFalse(hash1 == hash2, string.Format(\u0022Hashcode values should be different   hash1:{0}  hash2:{1}\u0022,hash1,hash2));\n\n\nBut this test passes (with ints):\n\n        var obj1 = new { A = 100m, B = 100m, C = 100, D = 100};\n        var obj2 = new { A = 100m, B = 100m, C = -100, D = -100};\n        var hash1 = ComputeHash(obj1.A, obj1.B, obj1.C, obj1.D);\n        var hash2 = ComputeHash(obj2.A, obj2.B, obj2.C, obj2.D);\n        Assert.IsFalse(hash1 == hash2, string.Format(\u0022Hashcode values should be different   hash1:{0}  hash2:{1}\u0022,hash1,hash2));\n\n\nI changed my implementation to not use GetHashCode for the primitive types and it seems to work better\n\n    private static int InternalComputeHash(params object[] obj)\n    {\n        unchecked\n        {\n            var result = (int)SEED_VALUE_PRIME;\n            for (uint i = 0; i \u003C obj.Length; i\u002B\u002B)\n            {\n                var currval = result;\n                var nextval = DetermineNextValue(obj[i]);\n                result = (result * MULTIPLIER_VALUE_PRIME) \u002B nextval;\n\n            }\n            return result;\n        }\n    }\n\n\n\n    private static int DetermineNextValue(object value)\n    {\n        unchecked\n        {\n\n                int hashCode;\n                if (value is short\n                    || value is int\n                    || value is byte\n                    || value is sbyte\n                    || value is uint\n                    || value is ushort\n                    || value is ulong\n                    || value is long\n                    || value is float\n                    || value is double\n                    || value is decimal)\n                {\n                    return Convert.ToInt32(value);\n                }\n                else\n                {\n                    return value != null ? value.GetHashCode() : 0;\n                }\n        }\n    }\n\n    ","\nThis is a static helper class that implements Josh Bloch\u0027s implementation; and provides explicit overloads to \u0022prevent\u0022 boxing, and also to implement the hash specifically for the long primitives.\n\nYou can pass a string comparison that matches your equals implementation.\n\nBecause the Hash output is always an int, you can just chain Hash calls.\n\nusing System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.Reflection;\nusing System.Runtime.CompilerServices;\n\n\nnamespace Sc.Util.System\n{\n    /// \u003Csummary\u003E\n    /// Static methods that allow easy implementation of hashCode. Example usage:\n    /// \u003Ccode\u003E\n    /// public override int GetHashCode()\n    ///     =\u003E HashCodeHelper.Seed\n    ///         .Hash(primitiveField)\n    ///         .Hsh(objectField)\n    ///         .Hash(iEnumerableField);\n    /// \u003C/code\u003E\n    /// \u003C/summary\u003E\n    public static class HashCodeHelper\n    {\n        /// \u003Csummary\u003E\n        /// An initial value for a hashCode, to which is added contributions from fields.\n        /// Using a non-zero value decreases collisions of hashCode values.\n        /// \u003C/summary\u003E\n        public const int Seed = 23;\n\n        private const int oddPrimeNumber = 37;\n\n\n        /// \u003Csummary\u003E\n        /// Rotates the seed against a prime number.\n        /// \u003C/summary\u003E\n        /// \u003Cparam name=\u0022aSeed\u0022\u003EThe hash\u0027s first term.\u003C/param\u003E\n        /// \u003Creturns\u003EThe new hash code.\u003C/returns\u003E\n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n        private static int rotateFirstTerm(int aSeed)\n        {\n            unchecked {\n                return HashCodeHelper.oddPrimeNumber * aSeed;\n            }\n        }\n\n\n        /// \u003Csummary\u003E\n        /// Contributes a boolean to the developing HashCode seed.\n        /// \u003C/summary\u003E\n        /// \u003Cparam name=\u0022aSeed\u0022\u003EThe developing HashCode value or seed.\u003C/param\u003E\n        /// \u003Cparam name=\u0022aBoolean\u0022\u003EThe value to contribute.\u003C/param\u003E\n        /// \u003Creturns\u003EThe new hash code.\u003C/returns\u003E\n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n        public static int Hash(this int aSeed, bool aBoolean)\n        {\n            unchecked {\n                return HashCodeHelper.rotateFirstTerm(aSeed)\n                        \u002B (aBoolean\n                                ? 1\n                                : 0);\n            }\n        }\n\n        /// \u003Csummary\u003E\n        /// Contributes a char to the developing HashCode seed.\n        /// \u003C/summary\u003E\n        /// \u003Cparam name=\u0022aSeed\u0022\u003EThe developing HashCode value or seed.\u003C/param\u003E\n        /// \u003Cparam name=\u0022aChar\u0022\u003EThe value to contribute.\u003C/param\u003E\n        /// \u003Creturns\u003EThe new hash code.\u003C/returns\u003E\n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n        public static int Hash(this int aSeed, char aChar)\n        {\n            unchecked {\n                return HashCodeHelper.rotateFirstTerm(aSeed)\n                        \u002B aChar;\n            }\n        }\n\n        /// \u003Csummary\u003E\n        /// Contributes an int to the developing HashCode seed.\n        /// Note that byte and short are handled by this method, through implicit conversion.\n        /// \u003C/summary\u003E\n        /// \u003Cparam name=\u0022aSeed\u0022\u003EThe developing HashCode value or seed.\u003C/param\u003E\n        /// \u003Cparam name=\u0022aInt\u0022\u003EThe value to contribute.\u003C/param\u003E\n        /// \u003Creturns\u003EThe new hash code.\u003C/returns\u003E\n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n        public static int Hash(this int aSeed, int aInt)\n        {\n            unchecked {\n                return HashCodeHelper.rotateFirstTerm(aSeed)\n                        \u002B aInt;\n            }\n        }\n\n        /// \u003Csummary\u003E\n        /// Contributes a long to the developing HashCode seed.\n        /// \u003C/summary\u003E\n        /// \u003Cparam name=\u0022aSeed\u0022\u003EThe developing HashCode value or seed.\u003C/param\u003E\n        /// \u003Cparam name=\u0022aLong\u0022\u003EThe value to contribute.\u003C/param\u003E\n        /// \u003Creturns\u003EThe new hash code.\u003C/returns\u003E\n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n        public static int Hash(this int aSeed, long aLong)\n        {\n            unchecked {\n                return HashCodeHelper.rotateFirstTerm(aSeed)\n                        \u002B (int)(aLong ^ (aLong \u003E\u003E 32));\n            }\n        }\n\n        /// \u003Csummary\u003E\n        /// Contributes a float to the developing HashCode seed.\n        /// \u003C/summary\u003E\n        /// \u003Cparam name=\u0022aSeed\u0022\u003EThe developing HashCode value or seed.\u003C/param\u003E\n        /// \u003Cparam name=\u0022aFloat\u0022\u003EThe value to contribute.\u003C/param\u003E\n        /// \u003Creturns\u003EThe new hash code.\u003C/returns\u003E\n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n        public static int Hash(this int aSeed, float aFloat)\n        {\n            unchecked {\n                return HashCodeHelper.rotateFirstTerm(aSeed)\n                        \u002B Convert.ToInt32(aFloat);\n            }\n        }\n\n        /// \u003Csummary\u003E\n        /// Contributes a double to the developing HashCode seed.\n        /// \u003C/summary\u003E\n        /// \u003Cparam name=\u0022aSeed\u0022\u003EThe developing HashCode value or seed.\u003C/param\u003E\n        /// \u003Cparam name=\u0022aDouble\u0022\u003EThe value to contribute.\u003C/param\u003E\n        /// \u003Creturns\u003EThe new hash code.\u003C/returns\u003E\n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n        public static int Hash(this int aSeed, double aDouble)\n            =\u003E aSeed.Hash(Convert.ToInt64(aDouble));\n\n        /// \u003Csummary\u003E\n        /// Contributes a string to the developing HashCode seed.\n        /// \u003C/summary\u003E\n        /// \u003Cparam name=\u0022aSeed\u0022\u003EThe developing HashCode value or seed.\u003C/param\u003E\n        /// \u003Cparam name=\u0022aString\u0022\u003EThe value to contribute.\u003C/param\u003E\n        /// \u003Cparam name=\u0022stringComparison\u0022\u003EOptional comparison that creates the hash.\u003C/param\u003E\n        /// \u003Creturns\u003EThe new hash code.\u003C/returns\u003E\n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n        public static int Hash(\n                this int aSeed,\n                string aString,\n                StringComparison stringComparison = StringComparison.Ordinal)\n        {\n            if (aString == null)\n                return aSeed.Hash(0);\n            switch (stringComparison) {\n                case StringComparison.CurrentCulture :\n                    return StringComparer.CurrentCulture.GetHashCode(aString);\n                case StringComparison.CurrentCultureIgnoreCase :\n                    return StringComparer.CurrentCultureIgnoreCase.GetHashCode(aString);\n                case StringComparison.InvariantCulture :\n                    return StringComparer.InvariantCulture.GetHashCode(aString);\n                case StringComparison.InvariantCultureIgnoreCase :\n                    return StringComparer.InvariantCultureIgnoreCase.GetHashCode(aString);\n                case StringComparison.OrdinalIgnoreCase :\n                    return StringComparer.OrdinalIgnoreCase.GetHashCode(aString);\n                default :\n                    return StringComparer.Ordinal.GetHashCode(aString);\n            }\n        }\n\n        /// \u003Csummary\u003E\n        /// Contributes a possibly-null array to the developing HashCode seed.\n        /// Each element may be a primitive, a reference, or a possibly-null array.\n        /// \u003C/summary\u003E\n        /// \u003Cparam name=\u0022aSeed\u0022\u003EThe developing HashCode value or seed.\u003C/param\u003E\n        /// \u003Cparam name=\u0022aArray\u0022\u003ECAN be null.\u003C/param\u003E\n        /// \u003Creturns\u003EThe new hash code.\u003C/returns\u003E\n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n        public static int Hash(this int aSeed, IEnumerable aArray)\n        {\n            if (aArray == null)\n                return aSeed.Hash(0);\n            int countPlusOne = 1; // So it differs from null\n            foreach (object item in aArray) {\n                \u002B\u002BcountPlusOne;\n                if (item is IEnumerable arrayItem) {\n                    if (!object.ReferenceEquals(aArray, arrayItem))\n                        aSeed = aSeed.Hash(arrayItem); // recursive call!\n                } else\n                    aSeed = aSeed.Hash(item);\n            }\n            return aSeed.Hash(countPlusOne);\n        }\n\n        /// \u003Csummary\u003E\n        /// Contributes a possibly-null array to the developing HashCode seed.\n        /// You must provide the hash function for each element.\n        /// \u003C/summary\u003E\n        /// \u003Cparam name=\u0022aSeed\u0022\u003EThe developing HashCode value or seed.\u003C/param\u003E\n        /// \u003Cparam name=\u0022aArray\u0022\u003ECAN be null.\u003C/param\u003E\n        /// \u003Cparam name=\u0022hashElement\u0022\u003ERequired: yields the hash for each element\n        /// in \u003Cparamref name=\u0022aArray\u0022/\u003E.\u003C/param\u003E\n        /// \u003Creturns\u003EThe new hash code.\u003C/returns\u003E\n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n        public static int Hash\u003CT\u003E(this int aSeed, IEnumerable\u003CT\u003E aArray, Func\u003CT, int\u003E hashElement)\n        {\n            if (aArray == null)\n                return aSeed.Hash(0);\n            int countPlusOne = 1; // So it differs from null\n            foreach (T item in aArray) {\n                \u002B\u002BcountPlusOne;\n                aSeed = aSeed.Hash(hashElement(item));\n            }\n            return aSeed.Hash(countPlusOne);\n        }\n\n        /// \u003Csummary\u003E\n        /// Contributes a possibly-null object to the developing HashCode seed.\n        /// \u003C/summary\u003E\n        /// \u003Cparam name=\u0022aSeed\u0022\u003EThe developing HashCode value or seed.\u003C/param\u003E\n        /// \u003Cparam name=\u0022aObject\u0022\u003ECAN be null.\u003C/param\u003E\n        /// \u003Creturns\u003EThe new hash code.\u003C/returns\u003E\n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n        public static int Hash(this int aSeed, object aObject)\n        {\n            switch (aObject) {\n                case null :\n                    return aSeed.Hash(0);\n                case bool b :\n                    return aSeed.Hash(b);\n                case char c :\n                    return aSeed.Hash(c);\n                case int i :\n                    return aSeed.Hash(i);\n                case long l :\n                    return aSeed.Hash(l);\n                case float f :\n                    return aSeed.Hash(f);\n                case double d :\n                    return aSeed.Hash(d);\n                case string s :\n                    return aSeed.Hash(s);\n                case IEnumerable iEnumerable :\n                    return aSeed.Hash(iEnumerable);\n            }\n            return aSeed.Hash(aObject.GetHashCode());\n        }\n\n\n        /// \u003Csummary\u003E\n        /// This utility method uses reflection to iterate all specified properties that are readable\n        /// on the given object, excluding any property names given in the params arguments, and\n        /// generates a hashcode.\n        /// \u003C/summary\u003E\n        /// \u003Cparam name=\u0022aSeed\u0022\u003EThe developing hash code, or the seed: if you have no seed, use\n        /// the \u003Csee cref=\u0022Seed\u0022/\u003E.\u003C/param\u003E\n        /// \u003Cparam name=\u0022aObject\u0022\u003ECAN be null.\u003C/param\u003E\n        /// \u003Cparam name=\u0022propertySelector\u0022\u003E\u003Csee cref=\u0022BindingFlags\u0022/\u003E to select the properties to hash.\u003C/param\u003E\n        /// \u003Cparam name=\u0022ignorePropertyNames\u0022\u003EOptional.\u003C/param\u003E\n        /// \u003Creturns\u003EA hash from the properties contributed to \u003Cc\u003EaSeed\u003C/c\u003E.\u003C/returns\u003E\n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n        public static int HashAllProperties(\n                this int aSeed,\n                object aObject,\n                BindingFlags propertySelector\n                        = BindingFlags.Instance\n                        | BindingFlags.Public\n                        | BindingFlags.GetProperty,\n                params string[] ignorePropertyNames)\n        {\n            if (aObject == null)\n                return aSeed.Hash(0);\n            if ((ignorePropertyNames != null)\n                    \u0026\u0026 (ignorePropertyNames.Length != 0)) {\n                foreach (PropertyInfo propertyInfo in aObject.GetType()\n                        .GetProperties(propertySelector)) {\n                    if (!propertyInfo.CanRead\n                            || (Array.IndexOf(ignorePropertyNames, propertyInfo.Name) \u003E= 0))\n                        continue;\n                    aSeed = aSeed.Hash(propertyInfo.GetValue(aObject));\n                }\n            } else {\n                foreach (PropertyInfo propertyInfo in aObject.GetType()\n                        .GetProperties(propertySelector)) {\n                    if (propertyInfo.CanRead)\n                        aSeed = aSeed.Hash(propertyInfo.GetValue(aObject));\n                }\n            }\n            return aSeed;\n        }\n\n\n        /// \u003Csummary\u003E\n        /// NOTICE: this method is provided to contribute a \u003Csee cref=\u0022KeyValuePair{TKey,TValue}\u0022/\u003E to\n        /// the developing HashCode seed; by hashing the key and the value independently. HOWEVER,\n        /// this method has a different name since it will not be automatically invoked by\n        /// \u003Csee cref=\u0022Hash(int,object)\u0022/\u003E, \u003Csee cref=\u0022Hash(int,IEnumerable)\u0022/\u003E,\n        /// or \u003Csee cref=\u0022HashAllProperties\u0022/\u003E --- you MUST NOT mix this method with those unless\n        /// you are sure that no KeyValuePair instances will be passed to those methods; or otherwise\n        /// the generated hash code will not be consistent. This method itself ALSO will not invoke\n        /// this method on the Key or Value here if that itself is a KeyValuePair.\n        /// \u003C/summary\u003E\n        /// \u003Cparam name=\u0022aSeed\u0022\u003EThe developing HashCode value or seed.\u003C/param\u003E\n        /// \u003Cparam name=\u0022keyValuePair\u0022\u003EThe value to contribute.\u003C/param\u003E\n        /// \u003Creturns\u003EThe new hash code.\u003C/returns\u003E\n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n        public static int HashKeyAndValue\u003CTKey, TValue\u003E(this int aSeed, KeyValuePair\u003CTKey, TValue\u003E keyValuePair)\n            =\u003E aSeed.Hash(keyValuePair.Key)\n                    .Hash(keyValuePair.Value);\n\n        /// \u003Csummary\u003E\n        /// NOTICE: this method is provided to contribute a collection of \u003Csee cref=\u0022KeyValuePair{TKey,TValue}\u0022/\u003E\n        /// to the developing HashCode seed; by hashing the key and the value independently. HOWEVER,\n        /// this method has a different name since it will not be automatically invoked by\n        /// \u003Csee cref=\u0022Hash(int,object)\u0022/\u003E, \u003Csee cref=\u0022Hash(int,IEnumerable)\u0022/\u003E,\n        /// or \u003Csee cref=\u0022HashAllProperties\u0022/\u003E --- you MUST NOT mix this method with those unless\n        /// you are sure that no KeyValuePair instances will be passed to those methods; or otherwise\n        /// the generated hash code will not be consistent. This method itself ALSO will not invoke\n        /// this method on a Key or Value here if that itself is a KeyValuePair or an Enumerable of\n        /// KeyValuePair.\n        /// \u003C/summary\u003E\n        /// \u003Cparam name=\u0022aSeed\u0022\u003EThe developing HashCode value or seed.\u003C/param\u003E\n        /// \u003Cparam name=\u0022keyValuePairs\u0022\u003EThe values to contribute.\u003C/param\u003E\n        /// \u003Creturns\u003EThe new hash code.\u003C/returns\u003E\n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n        public static int HashKeysAndValues\u003CTKey, TValue\u003E(\n                this int aSeed,\n                IEnumerable\u003CKeyValuePair\u003CTKey, TValue\u003E\u003E keyValuePairs)\n        {\n            if (keyValuePairs == null)\n                return aSeed.Hash(null);\n            foreach (KeyValuePair\u003CTKey, TValue\u003E keyValuePair in keyValuePairs) {\n                aSeed = aSeed.HashKeyAndValue(keyValuePair);\n            }\n            return aSeed;\n        }\n    }\n}\n\n    ","\nIn case you want to polyfill HashCode from netstandard2.1\n\npublic static class HashCode\n{\n    public static int Combine(params object[] instances)\n    {\n        int hash = 17;\n\n        foreach (var i in instances)\n        {\n            hash = unchecked((hash * 31) \u002B (i?.GetHashCode() ?? 0));\n        }\n\n        return hash;\n    }\n}\n\n\nNote: If used with struct, it will allocate memory due to boxing\n    ","\n                \n                The algorithm described in the book you mention is infact a little more detailed it especailly describes what to do for different data types of the fields. E.g.: for fields of type long use (int)(field ^ f \u003E\u003E\u003E 32) instead of simply calling GetHashcode. Is long.GetHashCodes implemented that way ?\n                \n\u2013\u00A0bitbonk\n                Nov 4 \u002708 at 21:44\n            ","\n                \n                Yup, Int64.GetHashCode does exactly that. In Java that would require boxing, of course. That reminds me - time to add a link to the book...\n                \n\u2013\u00A0Jon Skeet\n                Nov 4 \u002708 at 21:51\n            ","\n                \n                23 is no good choice, since(as of .net 3.5 SP1) Dictionary\u003CTKey,TValue\u003E assumes good distribution modulo certain primes. And 23 is one of them. So if you have a dictionary with Capacity 23 only the last contribution to GetHashCode influences the compound hashcode. So I\u0027d rather use 29 instead of 23.\n                \n\u2013\u00A0CodesInChaos\n                Nov 21 \u002710 at 22:41\n            ","\n                \n                @CodeInChaos: Only the last contribution influences the bucket - so it might, at worst, have to look through all 23 entries in the dictionary. It\u0027s still going to check the actual hash code of each entry, which will be cheap. If you\u0027ve got a dictionary that small, it\u0027s unlikely to matter much.\n                \n\u2013\u00A0Jon Skeet\n                Nov 21 \u002710 at 23:14\n            ","\n                \n                @Vajda: I usually use 0 as the effective hash code for null - which isn\u0027t the same as ignoring the field.\n                \n\u2013\u00A0Jon Skeet\n                Jan 22 \u002713 at 16:49\n            ","\n                \n                Yes, anonymous GetHashCode implementation is very effective (BTW it\u0027s the same as the one in the Jon Skeet\u0027s answer), but the only problem with this solution is that you generate a new instance at any GetHashCode call. It can be a bit overhead-ish in particular in case of intensive access to big hashed collections...\n                \n\u2013\u00A0digEmAll\n                Jan 8 \u002711 at 9:50\n                        \n                            \n                        \n            ","\n                \n                @digEmAll Good point, I didn\u0027t think about the overhead of creating an new object. Jon Skeet\u0027s answer is the most efficient and won\u0027t use boxing. (@Kumba To solve the unchecked in VB, just use a Int64 (long) and truncate it after the calculations.)\n                \n\u2013\u00A0Rick Love\n                Apr 2 \u002711 at 17:30\n                        \n                            \n                        \n            ","\n                \n                could just say new { PropA, PropB, PropC, PropD }.GetHashCode() too\n                \n\u2013\u00A0sehe\n                Apr 22 \u002711 at 19:51\n            ","\n                \n                VB.NET must use Key in anonymous type creation: New With {Key PropA}.GetHashCode() Otherwise GetHashCode will not return the same hashcode for different objects with the same \u0027identifying\u0027 properties.\n                \n\u2013\u00A0David Osborne\n                Aug 20 \u002714 at 15:58\n                        \n                            \n                        \n            ","\n                \n                For those who like this, (PropA, PropB, PropC, PropD).GetHashCode() is now available on C#7 without GC pressure @digEmAll concerns. Quick and Simple Hash Code Combinations\n                \n\u2013\u00A0cactuaroid\n                Aug 16 \u002718 at 11:59\n                        \n                            \n                        \n            ","\n                \n                No need for T[] separately as it is already IEnumerable\u003CT\u003E\n                \n\u2013\u00A0nawfal\n                Apr 14 \u002713 at 12:43\n            ","\n                \n                You could refactor those methods and restrict the core logic to one function\n                \n\u2013\u00A0nawfal\n                Apr 14 \u002713 at 13:06\n            ","\n                \n                Incidentally, 31 is a shift and subtract on the CPU, which is exceedingly fast.\n                \n\u2013\u00A0Chui Tey\n                Aug 22 \u002713 at 23:14\n            ","\n                \n                @nightcoder you could use params.\n                \n\u2013\u00A0ANeves thinks SE is evil\n                Feb 9 \u002715 at 13:54\n            ","\n                \n                @ChuiTey This is something all Mersenne Primes have in common.\n                \n\u2013\u00A0Pharap\n                Jun 12 \u002715 at 3:11\n            ","\n                \n                Well, it will cause boxing, if fields are value types.\n                \n\u2013\u00A0nightcoder\n                Apr 4 \u002710 at 15:39\n            ","\n                \n                \u0022can be enhanced later by catching the OverflowException\u0022 The whole point of the unchecked is to avoid exceptions on overflow which is desired on GetHashCode. So it\u0027s not incorrect if the value overflows int and it does not hurt at all.\n                \n\u2013\u00A0Tim Schmelter\n                Feb 24 \u002714 at 13:06\n                        \n                            \n                        \n            ","\n                \n                One issue with this algorithm is that any array full of nulls will always return 0, regardless of it\u0027s length\n                \n\u2013\u00A0Nathan Adams\n                Apr 17 \u002715 at 12:12\n            ","\n                \n                This helper method also allocates a new object[]\n                \n\u2013\u00A0James Newton-King\n                Jul 20 \u002716 at 12:35\n            ","\n                \n                As @NathanAdams mentions, the fact that null is skipped entirely could give you unexpected results. Instead of skipping them, you should just use some constant value instead of input[i].GetHashCode() when input[i] is null.\n                \n\u2013\u00A0David Schwartz\n                Oct 28 \u002716 at 19:04\n            ","\n                \n                I would change the line with the tertiary operator to be: var h = Equals(obj, default(T)) ? 0 : obj.GetHashCode();\n                \n\u2013\u00A0Bill Barry\n                Sep 5 \u002714 at 17:12\n                        \n                            \n                        \n            ","\n                \n                I believe that the ternary operator with obj != null will compile to a box instruction which will allocate memory if T is a value type. Instead you can use obj.Equals(null) which will compile to a virtual call of the Equals method.\n                \n\u2013\u00A0Martin Liversage\n                Sep 13 \u002714 at 23:00\n            ","\n                \n                Because this.hashCode != h. It wouldn\u0027t return the same value.\n                \n\u2013\u00A0\u015Eafak G\u00FCr\n                Jun 15 \u002715 at 8:01\n            ","\n                \n                Sorry, manage to remove my comment instead of editing it. Is it more beneficial to create a new struct then change the hashCode to non-readonly and do: \u0022unchecked { this.hashCode ^= h * 397; } return this;\u0022 for example?\n                \n\u2013\u00A0Erik Karlsson\n                Jun 15 \u002715 at 8:28\n            ","\n                \n                Immutability has its benefits (Why are mutable structs evil?). About performance, what I do is pretty cheap since it does not allocate any space in the heap.\n                \n\u2013\u00A0\u015Eafak G\u00FCr\n                Jun 15 \u002715 at 10:35\n            ","\n                \n                This is very good answer. As an addition, you could consider changing \u0022speed\u0022 to \u0022performance\u0022 and adding the property of being allocation-free. The built-in HashCode type satisfies that too.\n                \n\u2013\u00A0Timo\n                Jul 10 at 15:22\n            ","\n                \n                \u0022In most cases where Equals() compares multiple fields it doesn\u0027t really matter if your GetHash() hashes on one field or on many.\u0022 This is dangerous advice, because for objects which only differ in the un-hashed fields, you will get hash collisions. If this happens frequently, the performance of hash-based collections (HashMap, HashSet etc.) will degrade (up to O(n) in the worst case).\n                \n\u2013\u00A0sleske\n                Apr 15 \u002710 at 15:44\n            ","\n                \n                This actually happened in Java: In early versions of the JDK String.hashCode() only considered the beginning of the string; this lead to performance problems if you used Strings as keys in HashMaps which only differed at the end (which is common e.g. for URLs). The algorithm was therefore changed ( in JDK 1.2 or 1.3 I believe).\n                \n\u2013\u00A0sleske\n                Apr 15 \u002710 at 15:51\n                        \n                            \n                        \n            ","\n                \n                If that one field \u0027provides a good distribution\u0027 (last part of my answer), then one field is enough.. If it doesn\u0027t provide a good distribution, then (and just then) you need another calculation. (E.g. just use another field that does provide a good distribution, or use multiple fields)\n                \n\u2013\u00A0Bert Huijben\n                Apr 16 \u002710 at 9:12\n                        \n                            \n                        \n            ","\n                \n                I don\u0027t think there\u0027s a problem with having GetHashCode perform memory allocations, provided that it only does so the first time it\u0027s used (with subsequent invocations simply returning a cached result).  The important thing is not that one should go to great lengths to avoid collisions, but rather that one should avoid \u0022systemic\u0022 collisions.  If a type has two int fields oldX and newX which frequently differ by one, a hash value of oldX^newX would assign 90% of such records hash values of 1, 2, 4, or 8. Using oldX\u002BnewX [unchecked arithmetic] might generate more collisions...\n                \n\u2013\u00A0supercat\n                Sep 7 \u002713 at 21:02\n            ","\n                \n                ...than would more sophisticated function, but a collection of 1,000,000 things that have 500,000 different hash values will very well if each hash value has two associated things, and very badly if one hash value has 500,001 things and the others have one each.\n                \n\u2013\u00A0supercat\n                Sep 7 \u002713 at 21:04\n                        \n                            \n                        \n            ","\n                \n                When combining multiple hash values into one, I tend to use long values for the intermediate results, and then munge the final result down to an int.  Does that seem like a good idea?  My concern is that one uses e.g. hash=(hash*31)\u002BnextField, then pairs of matching values will only affect the upper 27 bits of the hash.  Letting the calculation extend to a long and wrapping stuff in would minimize that danger.\n                \n\u2013\u00A0supercat\n                Apr 24 \u002714 at 21:31\n            ","\n                \n                @supercat it depends on the distribution of your final munging. The SpookilySharp library would ensure that the distribution was good, ideally (because it won\u0027t need object creation) by passing a pointer to a blittable type, or passing one of the enumerables it handles directly, but if you don\u0027t already have blittable data or a suitable enumeration, then calling .Update() with the multiple values as per the answer above will do the trick.\n                \n\u2013\u00A0Jon Hanna\n                Apr 24 \u002714 at 22:48\n            ","\n                \n                @JonHanna would you be willing to be more precise with the problematic behavior you encountered?  I\u0027m trying to implement a library that makes implementing value objects trivial (ValueUtils) and I\u0027d love a testset demonstrating poor hash miscibility in power-of-two hashtables.\n                \n\u2013\u00A0Eamon Nerbonne\n                Jun 1 \u002714 at 14:19\n            ","\n                \n                @EamonNerbonne I don\u0027t really have anything more precise than \u0022overall time was slower that way\u0022. As I added in an edit, the fact that I was using open-addressing may have been more important than the power-of-two factor. I do plan to do some test cases on a particular project where I\u0027ll be comparing a few different approaches, so I may have a better answer for you after that, though that\u0027s not a high-priority (a personal project with no pressing need, so I\u0027ll get to it when I get to it...)\n                \n\u2013\u00A0Jon Hanna\n                Jun 2 \u002714 at 14:01\n            ","\n                \n                @JonHanna: yeah I know how the personal project schedule goes - good luck!  In any case, I see I didn\u0027t phrase that last comment well: I meant to ask for the problematic input, and not necessarily the details of the problems that resulted.  I\u0027d love to use that as a test set (or inspiration for a test set).  In any case - good luck with your pet project :-).\n                \n\u2013\u00A0Eamon Nerbonne\n                Jun 2 \u002714 at 15:23\n            ","\n                \n                That looks like a sweet addition... any way to know what version of .NET Core that\u0027ll ship in?\n                \n\u2013\u00A0Dan J\n                Dec 14 \u002717 at 0:37\n                        \n                            \n                        \n            ","\n                \n                @DanJ What a happy coincidence, the HashCode changes for corefx were merged just a couple of hours before your comment :) The type is slated to ship in .NET Core 2.1.\n                \n\u2013\u00A0James Ko\n                Dec 14 \u002717 at 0:41\n            ","\n                \n                That is awesome - and quite the turnaround time. Upvoted. :)\n                \n\u2013\u00A0Dan J\n                Dec 14 \u002717 at 0:48\n            ","\n                \n                @DanJ Even better news-- it should be available right now on the nightly builds of CoreFX hosted on the dotnet-core MyGet feed.\n                \n\u2013\u00A0James Ko\n                Dec 15 \u002717 at 23:44\n            ","\n                \n                Sweet - that doesn\u0027t help me at work, since we\u0027re not quite that bleeding-edge, but good to know. Cheers!\n                \n\u2013\u00A0Dan J\n                Dec 17 \u002717 at 22:18\n                        \n                            \n                        \n            ","\n                \n                How are the Keys determined? GetHashCode() doesn\u0027t take any parameters, so it needs to call this one with two Keys that need to be determined somehow. Sorry, without further explanation this only looks clever, but not that good.\n                \n\u2013\u00A0Michael Stum\u2666\n                Oct 7 \u002710 at 17:28\n            ","\n                \n                And why do you need the generic overloads? The type is not important (and not used in your code) since all objects have a GetHashCode() method, so you can always use the method with the params array parameter. Or am I missing something here?\n                \n\u2013\u00A0gehho\n                Oct 8 \u002710 at 9:31\n                        \n                            \n                        \n            ","\n                \n                When you\u0027d use object instead of generics you\u0027d get boxing and memory allocations, which you don\u0027t want in GetHashCode. So generics are the way to go.\n                \n\u2013\u00A0CodesInChaos\n                Nov 21 \u002710 at 22:26\n            ","\n                \n                The trailing shift/xor steps (h \u002B= (h \u003C\u003C 10); h ^= (h \u003E\u003E 6); h \u002B= (h \u003C\u003C 3); h ^= (h \u003E\u003E 11); h \u002B= (h \u003C\u003C 15); have a codesmell: they do not depend on any of the input and look awfully redundant to me.\n                \n\u2013\u00A0sehe\n                Apr 22 \u002711 at 19:54\n                        \n                            \n                        \n            ","\n                \n                @Magnus yes right, I\u0027ll delete my original comment. Just a little note that this may not be as fast as some other solutions here, but as you say shouldn\u0027t matter. The distribution is great, better than most solutions here, so \u002B1 from me! :)\n                \n\u2013\u00A0nawfal\n                Dec 25 \u002712 at 11:28\n                        \n                            \n                        \n            ","\n                \n                you can avoid the object creation inside gethashcode function as in Mangus\u0027s answer. Just call the damn static hash functions (who cares about starter hash). Also, you could use AddItems\u003CT\u003E(params T[] items) method more often in the helper class (than calling AddItem(T) each time).\n                \n\u2013\u00A0nawfal\n                Apr 14 \u002713 at 12:52\n            ","\n                \n                And what benefit do you find doing this.result * Prime2 * item.GetHashCode() when often used is this.result * Prime2 \u002B item.GetHashCode()?\n                \n\u2013\u00A0nawfal\n                Apr 14 \u002713 at 12:54\n                        \n                            \n                        \n            ","\n                \n                I can\u0027t use AddItems\u003CT\u003E(params T[] items) more often because typeof(T1) != typeof(T2) etc.\n                \n\u2013\u00A0bitbonk\n                Apr 15 \u002713 at 6:25\n                        \n                            \n                        \n            ","\n                \n                oh yes I missed that.\n                \n\u2013\u00A0nawfal\n                Apr 15 \u002713 at 6:54\n            ","\n                \n                Assuming h1 \u003E\u003E 27 is 0 to ignore it, h1 \u003C\u003C 5 equals h1 * 32 therefore it is same as h1 * 33 ^ h2. According to this page, it is called \u0022Modified Bernstein\u0022.\n                \n\u2013\u00A0cactuaroid\n                Aug 17 \u002718 at 14:28\n            ","\n                \n                That means that if you have objects Person and Account and they both have and ID = 1, they will have the same hash code. And that is not ok.\n                \n\u2013\u00A0pero\n                Mar 22 \u002710 at 15:28\n            ","\n                \n                Actually the comment above is incorrect. There will always be the possibility of hash-code collisions (a hash code only locates the bucket, not the individual object).  So such an implementation - for a hashcode containing mixed objects - would lead to a lot of collisions, which is undesirable, but it would be absolutely fine if you only ever had objects of a single type in your hashtables.  Also it doesn\u0027t distribute evenly, however neither does the base implementation on system.object, so I wouldn\u0027t worry about it too much...\n                \n\u2013\u00A0piers7\n                Mar 29 \u002710 at 2:14\n                        \n                            \n                        \n            ","\n                \n                The hash code can just be the id, since the id is an integer.  There\u0027s no need to call GetHashCode on an integer (it\u0027s an identity function)\n                \n\u2013\u00A0Darrel Lee\n                Nov 23 \u002712 at 19:18\n                        \n                            \n                        \n            ","\n                \n                @DarrelLee but tomo his _id could be a Guid. It\u0027s a good coding practice to do _id.GetHashCode as the intent is clear.\n                \n\u2013\u00A0nawfal\n                Apr 14 \u002713 at 12:57\n            ","\n                \n                @1224 depending on use patterns it can be horrible for the reason you give, but it can also be great; if you\u0027ve a sequence of such numbers with no holes, then you\u0027ve a perfect hash, better than any algorithm can produce. If you know that\u0027s the case you can even count on it and skip the equality check.\n                \n\u2013\u00A0Jon Hanna\n                Jan 14 \u002714 at 18:29\n            ","\n                \n                Doesn\u0027t handle nulls.\n                \n\u2013\u00A0JJS\n                Dec 27 \u002716 at 17:09\n            ","\n                \n                Xoring integers to make a hashcode is a well-known antipattern that tends to result in a particularly high number of collisions with real-world values.\n                \n\u2013\u00A0Jon Hanna\n                Jan 14 \u002714 at 9:36\n            ","\n                \n                Every one here use integer, and there been never any kind of guarantee for hash to be same, it just tried to be as much vary as there are few collisions to happen.\n                \n\u2013\u00A0deadManN\n                Sep 16 \u002715 at 5:59\n            ","\n                \n                Yes, but your second and fifth don\u0027t try to avoid collisions.\n                \n\u2013\u00A0Jon Hanna\n                Sep 16 \u002715 at 8:44\n            ","\n                \n                Yes, that antipattern is quite common.\n                \n\u2013\u00A0Jon Hanna\n                Sep 19 \u002715 at 14:06\n            ","\n                \n                There\u0027s a balance to reach. Use a really good hash code like Spookyhash and you\u0027ll get much, much better collision avoidance but it will have much more calculation time than any of these (but when it comes to hashing very large amounts of data, Spookyhash is extremely quick). A simple shift on one of the values before xoring is only marginal extra cost for a good reduction in collision. Prime-number multiplication increasing both time and quality again. Which is better between shift or mult is hence debatable. Plain xor though very often has a lot of collisions on real data and is best avoided\n                \n\u2013\u00A0Jon Hanna\n                Sep 20 \u002715 at 16:57\n                        \n                            \n                        \n            ","\n                \n                In case you intended otherwise unchecked does NOT affect Convert.ToInt32: uint, long, float, double and decimal can all overflow here.\n                \n\u2013\u00A0Mark Hurd\n                Sep 30 \u002714 at 4:28\n                        \n                            \n                        \n            ","\n                \n                Yipes: I found a bug! The HashKeysAndValues method has been fixed: it invokes HashKeyAndValue.\n                \n\u2013\u00A0Steven Coco\n                May 9 \u002719 at 0:14\n            "]},{"Id":"d900447e-ca61-421d-af5c-ac22dda5e52e","QuestionId":78536,"Description":"Deep cloning objects","Votes":2310,"Views":840529,"Tags":["c#",".net","clone"],"Discussions":["\nWhilst the standard practice is to implement the ICloneable interface (described here, so I won\u0027t regurgitate), here\u0027s a nice deep clone object copier I found on The Code Project a while ago and incorporated it in our stuff.\nAs mentioned elsewhere, it requires your objects to be serializable.\nusing System;\nusing System.IO;\nusing System.Runtime.Serialization;\nusing System.Runtime.Serialization.Formatters.Binary;\n\n/// \u003Csummary\u003E\n/// Reference Article http://www.codeproject.com/KB/tips/SerializedObjectCloner.aspx\n/// Provides a method for performing a deep copy of an object.\n/// Binary Serialization is used to perform the copy.\n/// \u003C/summary\u003E\npublic static class ObjectCopier\n{\n    /// \u003Csummary\u003E\n    /// Perform a deep Copy of the object.\n    /// \u003C/summary\u003E\n    /// \u003Ctypeparam name=\u0022T\u0022\u003EThe type of object being copied.\u003C/typeparam\u003E\n    /// \u003Cparam name=\u0022source\u0022\u003EThe object instance to copy.\u003C/param\u003E\n    /// \u003Creturns\u003EThe copied object.\u003C/returns\u003E\n    public static T Clone\u003CT\u003E(T source)\n    {\n        if (!typeof(T).IsSerializable)\n        {\n            throw new ArgumentException(\u0022The type must be serializable.\u0022, nameof(source));\n        }\n\n        // Don\u0027t serialize a null object, simply return the default for that object\n        if (Object.ReferenceEquals(source, null))\n        {\n            return default(T);\n        }\n\n        IFormatter formatter = new BinaryFormatter();\n        Stream stream = new MemoryStream();\n        using (stream)\n        {\n            formatter.Serialize(stream, source);\n            stream.Seek(0, SeekOrigin.Begin);\n            return (T)formatter.Deserialize(stream);\n        }\n    }\n}\n\nThe idea is that, it serializes your object and then deserializes it into a fresh object. The benefit is that you don\u0027t have to concern yourself about cloning everything when an object gets too complex.\nAnd with the use of extension methods (also from the originally referenced source):\nIn case of you prefer to use the new extension methods of C# 3.0, change the method to have the following signature:\npublic static T Clone\u003CT\u003E(this T source)\n{\n   //...\n}\n\nNow the method call simply becomes objectBeingCloned.Clone();.\nEDIT (January 10 2015) Thought I\u0027d revisit this, to mention I recently started using (Newtonsoft) Json to do this, it should be lighter, and avoids the overhead of [Serializable] tags. (NB @atconway has pointed out in the comments that private members are not cloned using the JSON method)\n/// \u003Csummary\u003E\n/// Perform a deep Copy of the object, using Json as a serialization method. NOTE: Private members are not cloned using this method.\n/// \u003C/summary\u003E\n/// \u003Ctypeparam name=\u0022T\u0022\u003EThe type of object being copied.\u003C/typeparam\u003E\n/// \u003Cparam name=\u0022source\u0022\u003EThe object instance to copy.\u003C/param\u003E\n/// \u003Creturns\u003EThe copied object.\u003C/returns\u003E\npublic static T CloneJson\u003CT\u003E(this T source)\n{            \n    // Don\u0027t serialize a null object, simply return the default for that object\n    if (Object.ReferenceEquals(source, null))\n    {\n        return default(T);\n    }\n\n    // initialize inner objects individually\n    // for example in default constructor some list property initialized with some values,\n    // but in \u0027source\u0027 these items are cleaned -\n    // without ObjectCreationHandling.Replace default constructor values will be added to result\n    var deserializeSettings = new JsonSerializerSettings {ObjectCreationHandling = ObjectCreationHandling.Replace};\n\n    return JsonConvert.DeserializeObject\u003CT\u003E(JsonConvert.SerializeObject(source), deserializeSettings);\n}\n\n    ","\nI wanted a cloner for very simple objects of mostly primitives and lists.  If your object is out of the box JSON serializable then this method will do the trick.  This requires no modification or implementation of interfaces on the cloned class, just a JSON serializer like JSON.NET.\n\npublic static T Clone\u003CT\u003E(T source)\n{\n    var serialized = JsonConvert.SerializeObject(source);\n    return JsonConvert.DeserializeObject\u003CT\u003E(serialized);\n}\n\n\nAlso, you can use this extension method\n\npublic static class SystemExtension\n{\n    public static T Clone\u003CT\u003E(this T source)\n    {\n        var serialized = JsonConvert.SerializeObject(source);\n        return JsonConvert.DeserializeObject\u003CT\u003E(serialized);\n    }\n}\n\n    ","\nThe reason not to use ICloneable is not because it doesn\u0027t have a generic interface.  The reason not to use it is because it\u0027s vague.  It doesn\u0027t make clear whether you\u0027re getting a shallow or a deep copy; that\u0027s up to the implementer.\n\nYes, MemberwiseClone makes a shallow copy, but the opposite of MemberwiseClone isn\u0027t Clone; it would be, perhaps, DeepClone, which doesn\u0027t exist.  When you use an object through its ICloneable interface, you can\u0027t know which kind of cloning the underlying object performs.  (And XML comments won\u0027t make it clear, because you\u0027ll get the interface comments rather than the ones on the object\u0027s Clone method.)\n\nWhat I usually do is simply make a Copy method that does exactly what I want.\n    ","\nAfter much much reading about many of the options linked here, and possible solutions for this issue, I believe all the options are summarized pretty well at Ian P\u0027s link (all other options are variations of those) and the best solution is provided by Pedro77\u0027s link on the question comments.\n\nSo I\u0027ll just copy relevant parts of those 2 references here. That way we can have:\n\nThe best thing to do for cloning objects in C sharp!\n\nFirst and foremost, those are all our options:\n\n\nManually with ICloneable, which is Shallow and not Type-Safe\nMemberwiseClone, which uses ICloneable\nReflection by using Activator.CreateInstance and recursive MemberwiseClone\nSerialization, as pointed by johnc\u0027s preferred answer\nIntermediate Language, which I got no idea how works\nExtension Methods, such as this custom clone framework by Havard Straden\nExpression Trees\n\n\nThe article Fast Deep Copy by Expression Trees   has  also performance comparison of cloning by Serialization, Reflection and Expression Trees.\n\nWhy I choose ICloneable (i.e. manually)\n\nMr Venkat Subramaniam (redundant link here) explains in much detail why.\n\nAll his article circles around an example that tries to be applicable for most cases, using 3 objects: Person, Brain and City. We want to clone a person, which will have its own brain but the same city. You can either picture all problems any of the other methods above can bring or read the article.\n\nThis is my slightly modified version of his conclusion:\n\n\n  Copying an object by specifying New followed by the class name often leads to code that is not extensible. Using clone, the application of prototype pattern, is a better way to achieve this. However, using clone as it is provided in C# (and Java) can be quite problematic as well. It is better to provide a protected (non-public) copy constructor and invoke that from the clone method. This gives us the ability to delegate the task of creating an object to an instance of a class itself, thus providing extensibility and also, safely creating the objects using the protected copy constructor.\n\n\nHopefully this implementation can make things clear:\n\npublic class Person : ICloneable\n{\n    private final Brain brain; // brain is final since I do not want \n                // any transplant on it once created!\n    private int age;\n    public Person(Brain aBrain, int theAge)\n    {\n        brain = aBrain; \n        age = theAge;\n    }\n    protected Person(Person another)\n    {\n        Brain refBrain = null;\n        try\n        {\n            refBrain = (Brain) another.brain.clone();\n            // You can set the brain in the constructor\n        }\n        catch(CloneNotSupportedException e) {}\n        brain = refBrain;\n        age = another.age;\n    }\n    public String toString()\n    {\n        return \u0022This is person with \u0022 \u002B brain;\n        // Not meant to sound rude as it reads!\n    }\n    public Object clone()\n    {\n        return new Person(this);\n    }\n    \u2026\n}\n\n\nNow consider having a class derive from Person.\n\npublic class SkilledPerson extends Person\n{\n    private String theSkills;\n    public SkilledPerson(Brain aBrain, int theAge, String skills)\n    {\n        super(aBrain, theAge);\n        theSkills = skills;\n    }\n    protected SkilledPerson(SkilledPerson another)\n    {\n        super(another);\n        theSkills = another.theSkills;\n    }\n\n    public Object clone()\n    {\n        return new SkilledPerson(this);\n    }\n    public String toString()\n    {\n        return \u0022SkilledPerson: \u0022 \u002B super.toString();\n    }\n}\n\n\nYou may try running the following code:\n\npublic class User\n{\n    public static void play(Person p)\n    {\n        Person another = (Person) p.clone();\n        System.out.println(p);\n        System.out.println(another);\n    }\n    public static void main(String[] args)\n    {\n        Person sam = new Person(new Brain(), 1);\n        play(sam);\n        SkilledPerson bob = new SkilledPerson(new SmarterBrain(), 1, \u0022Writer\u0022);\n        play(bob);\n    }\n}\n\n\nThe output produced will be:\n\nThis is person with Brain@1fcc69\nThis is person with Brain@253498\nSkilledPerson: This is person with SmarterBrain@1fef6f\nSkilledPerson: This is person with SmarterBrain@209f4e\n\n\nObserve that, if we keep a count of the number of objects, the clone as implemented here will keep a correct count of the number of objects.\n    ","\nI prefer a copy constructor to a clone. The intent is clearer.\n    ","\nSimple extension method to copy all the public properties. Works for any objects and does not require class to be [Serializable]. Can be extended for other access level.\n\npublic static void CopyTo( this object S, object T )\n{\n    foreach( var pS in S.GetType().GetProperties() )\n    {\n        foreach( var pT in T.GetType().GetProperties() )\n        {\n            if( pT.Name != pS.Name ) continue;\n            ( pT.GetSetMethod() ).Invoke( T, new object[] \n            { pS.GetGetMethod().Invoke( S, null ) } );\n        }\n    };\n}\n\n    ","\nI\u0027ve just created CloneExtensions library project. It performs fast, deep clone using simple assignment operations generated by Expression Tree runtime code compilation.\n\nHow to use it?\n\nInstead of writing your own Clone or Copy methods with a tone of assignments between fields and properties make the program do it for yourself, using Expression Tree. GetClone\u003CT\u003E() method marked as extension method allows you to simply call it on your instance:\n\nvar newInstance = source.GetClone();\n\n\nYou can choose what should be copied from source to newInstance using CloningFlags enum:\n\nvar newInstance \n    = source.GetClone(CloningFlags.Properties | CloningFlags.CollectionItems);\n\n\nWhat can be cloned?\n\n\nPrimitive (int, uint, byte, double, char, etc.), known immutable\ntypes (DateTime, TimeSpan, String) and delegates (including\nAction, Func, etc)\nNullable\nT[] arrays\nCustom classes and structs, including generic classes and structs.\n\n\nFollowing class/struct members are cloned internally:\n\n\nValues of public, not readonly fields\nValues of public properties with both get and set accessors\nCollection items for types implementing ICollection\n\n\nHow fast it is?\n\nThe solution is faster then reflection, because members information has to be gathered only once, before GetClone\u003CT\u003E is used for the first time for given type T.\n\nIt\u0027s also faster than serialization-based solution when you clone more then couple instances of the same type T.\n\nand more...\n\nRead more about generated expressions on documentation.\n\nSample expression debug listing for List\u003Cint\u003E:\n\n.Lambda #Lambda1\u003CSystem.Func\u00604[System.Collections.Generic.List\u00601[System.Int32],CloneExtensions.CloningFlags,System.Collections.Generic.IDictionary\u00602[System.Type,System.Func\u00602[System.Object,System.Object]],System.Collections.Generic.List\u00601[System.Int32]]\u003E(\n    System.Collections.Generic.List\u00601[System.Int32] $source,\n    CloneExtensions.CloningFlags $flags,\n    System.Collections.Generic.IDictionary\u00602[System.Type,System.Func\u00602[System.Object,System.Object]] $initializers) {\n    .Block(System.Collections.Generic.List\u00601[System.Int32] $target) {\n        .If ($source == null) {\n            .Return #Label1 { null }\n        } .Else {\n            .Default(System.Void)\n        };\n        .If (\n            .Call $initializers.ContainsKey(.Constant\u003CSystem.Type\u003E(System.Collections.Generic.List\u00601[System.Int32]))\n        ) {\n            $target = (System.Collections.Generic.List\u00601[System.Int32]).Call ($initializers.Item[.Constant\u003CSystem.Type\u003E(System.Collections.Generic.List\u00601[System.Int32])]\n            ).Invoke((System.Object)$source)\n        } .Else {\n            $target = .New System.Collections.Generic.List\u00601[System.Int32]()\n        };\n        .If (\n            ((System.Byte)$flags \u0026 (System.Byte).Constant\u003CCloneExtensions.CloningFlags\u003E(Fields)) == (System.Byte).Constant\u003CCloneExtensions.CloningFlags\u003E(Fields)\n        ) {\n            .Default(System.Void)\n        } .Else {\n            .Default(System.Void)\n        };\n        .If (\n            ((System.Byte)$flags \u0026 (System.Byte).Constant\u003CCloneExtensions.CloningFlags\u003E(Properties)) == (System.Byte).Constant\u003CCloneExtensions.CloningFlags\u003E(Properties)\n        ) {\n            .Block() {\n                $target.Capacity = .Call CloneExtensions.CloneFactory.GetClone(\n                    $source.Capacity,\n                    $flags,\n                    $initializers)\n            }\n        } .Else {\n            .Default(System.Void)\n        };\n        .If (\n            ((System.Byte)$flags \u0026 (System.Byte).Constant\u003CCloneExtensions.CloningFlags\u003E(CollectionItems)) == (System.Byte).Constant\u003CCloneExtensions.CloningFlags\u003E(CollectionItems)\n        ) {\n            .Block(\n                System.Collections.Generic.IEnumerator\u00601[System.Int32] $var1,\n                System.Collections.Generic.ICollection\u00601[System.Int32] $var2) {\n                $var1 = (System.Collections.Generic.IEnumerator\u00601[System.Int32]).Call $source.GetEnumerator();\n                $var2 = (System.Collections.Generic.ICollection\u00601[System.Int32])$target;\n                .Loop  {\n                    .If (.Call $var1.MoveNext() != False) {\n                        .Call $var2.Add(.Call CloneExtensions.CloneFactory.GetClone(\n                                $var1.Current,\n                                $flags,\n\n\n                         $initializers))\n                } .Else {\n                    .Break #Label2 { }\n                }\n            }\n            .LabelTarget #Label2:\n        }\n    } .Else {\n        .Default(System.Void)\n    };\n    .Label\n        $target\n    .LabelTarget #Label1:\n}\n\n\n}\n\nwhat has the same meaning like following c# code:\n\n(source, flags, initializers) =\u003E\n{\n    if(source == null)\n        return null;\n\n    if(initializers.ContainsKey(typeof(List\u003Cint\u003E))\n        target = (List\u003Cint\u003E)initializers[typeof(List\u003Cint\u003E)].Invoke((object)source);\n    else\n        target = new List\u003Cint\u003E();\n\n    if((flags \u0026 CloningFlags.Properties) == CloningFlags.Properties)\n    {\n        target.Capacity = target.Capacity.GetClone(flags, initializers);\n    }\n\n    if((flags \u0026 CloningFlags.CollectionItems) == CloningFlags.CollectionItems)\n    {\n        var targetCollection = (ICollection\u003Cint\u003E)target;\n        foreach(var item in (ICollection\u003Cint\u003E)source)\n        {\n            targetCollection.Add(item.Clone(flags, initializers));\n        }\n    }\n\n    return target;\n}\n\n\nIsn\u0027t it quite like how you\u0027d write your own Clone method for List\u003Cint\u003E?\n    ","\nIf you\u0027re already using a 3rd party application like ValueInjecter or Automapper, you can do something like this:\n\nMyObject oldObj; // The existing object to clone\n\nMyObject newObj = new MyObject();\nnewObj.InjectFrom(oldObj); // Using ValueInjecter syntax\n\n\nUsing this method you don\u0027t have to implement ISerializable or ICloneable on your objects. This is common with the MVC/MVVM pattern, so simple tools like this have been created.\n\nsee the ValueInjecter deep cloning sample on GitHub.\n    ","\nWell I was having problems using ICloneable in Silverlight, but I liked the idea of seralization, I can seralize XML, so I did this:\n\nstatic public class SerializeHelper\n{\n    //Michael White, Holly Springs Consulting, 2009\n    //michael@hollyspringsconsulting.com\n    public static T DeserializeXML\u003CT\u003E(string xmlData) where T:new()\n    {\n        if (string.IsNullOrEmpty(xmlData))\n            return default(T);\n\n        TextReader tr = new StringReader(xmlData);\n        T DocItms = new T();\n        XmlSerializer xms = new XmlSerializer(DocItms.GetType());\n        DocItms = (T)xms.Deserialize(tr);\n\n        return DocItms == null ? default(T) : DocItms;\n    }\n\n    public static string SeralizeObjectToXML\u003CT\u003E(T xmlObject)\n    {\n        StringBuilder sbTR = new StringBuilder();\n        XmlSerializer xmsTR = new XmlSerializer(xmlObject.GetType());\n        XmlWriterSettings xwsTR = new XmlWriterSettings();\n\n        XmlWriter xmwTR = XmlWriter.Create(sbTR, xwsTR);\n        xmsTR.Serialize(xmwTR,xmlObject);\n\n        return sbTR.ToString();\n    }\n\n    public static T CloneObject\u003CT\u003E(T objClone) where T:new()\n    {\n        string GetString = SerializeHelper.SeralizeObjectToXML\u003CT\u003E(objClone);\n        return SerializeHelper.DeserializeXML\u003CT\u003E(GetString);\n    }\n}\n\n    ","\nThe best is to implement an extension method like\n\npublic static T DeepClone\u003CT\u003E(this T originalObject)\n{ /* the cloning code */ }\n\n\nand then use it anywhere in the solution by\n\nvar copy = anyObject.DeepClone();\n\n\nWe can have the following three implementations:\n\n\nBy Serialization (the shortest code)\nBy Reflection - 5x faster\nBy Expression Trees - 20x faster\n\n\nAll linked methods are well working and were deeply tested.\n    ","\nThe short answer is you inherit from the ICloneable interface and then implement the .clone function. Clone should do a memberwise copy and perform a deep copy on any member that requires it, then return the resulting object. This is a recursive operation ( it requires that all members of the class you want to clone are either value types or implement ICloneable and that their members are either value types or implement ICloneable, and so on).\n\nFor a more detailed explanation on Cloning using ICloneable, check out this article.\n\nThe long answer is \u0022it depends\u0022. As mentioned by others, ICloneable is not supported by generics, requires special considerations for circular class references, and is actually viewed by some as a \u0022mistake\u0022 in the .NET Framework. The serialization method depends on your objects being serializable, which they may not be and you may have no control over. There is still much debate in the community over which is the \u0022best\u0022 practice. In reality, none of the solutions are the one-size fits all best practice for all situations like ICloneable was originally interpreted to be.\n\nSee the this Developer\u0027s Corner article for a few more options (credit to Ian).\n    ","\n\nBasically you need to implement ICloneable interface and then realize object structure copying. \nIf it\u0027s deep copy of all members, you need to insure (not relating on solution you choose) that all children are clonable as well. \nSometimes you need to be aware of some restriction during this process, for example if you copying the ORM objects most of frameworks allow only one object attached to the session and you MUST NOT make clones of this object, or if it\u0027s possible you need to care about session attaching of these objects.\n\n\nCheers.\n    ","\nEDIT: project is discontinued\n\nIf you want true cloning to unknown types you can take a look at\nfastclone.\n\nThat\u0027s expression based cloning working about 10 times faster than binary serialization and maintaining complete object graph integrity.\n\nThat means: if you refer multiple times to the same object in your hierachy, the clone will also have a single instance beeing referenced.\n\nThere is no need for interfaces, attributes or any other modification to the objects being cloned.\n    ","\nKeep things simple and use AutoMapper as others mentioned, it\u0027s a simple little library to map one object to another... To copy an object to another with the same type, all you need is three lines of code:\n\nMyType source = new MyType();\nMapper.CreateMap\u003CMyType, MyType\u003E();\nMyType target = Mapper.Map\u003CMyType, MyType\u003E(source);\n\n\nThe target object is now a copy of the source object.\nNot simple enough? Create an extension method to use everywhere in your solution:\n\npublic static T Copy\u003CT\u003E(this T source)\n{\n    T copy = default(T);\n    Mapper.CreateMap\u003CT, T\u003E();\n    copy = Mapper.Map\u003CT, T\u003E(source);\n    return copy;\n}\n\n\nThe extension method can be used as follow:\n\nMyType copy = source.Copy();\n\n    ","\nIn general, you implement the ICloneable interface and implement Clone yourself.\nC# objects have a built-in MemberwiseClone method that performs a shallow copy that can help you out for all the primitives.\n\nFor a deep copy, there is no way it can know how to automatically do it.\n    ","\nI came up with this to overcome a .NET shortcoming having to manually deep copy List\u003CT\u003E.\n\nI use this:\n\nstatic public IEnumerable\u003CSpotPlacement\u003E CloneList(List\u003CSpotPlacement\u003E spotPlacements)\n{\n    foreach (SpotPlacement sp in spotPlacements)\n    {\n        yield return (SpotPlacement)sp.Clone();\n    }\n}\n\n\nAnd at another place:\n\npublic object Clone()\n{\n    OrderItem newOrderItem = new OrderItem();\n    ...\n    newOrderItem._exactPlacements.AddRange(SpotPlacement.CloneList(_exactPlacements));\n    ...\n    return newOrderItem;\n}\n\n\nI tried to come up with oneliner that does this, but it\u0027s not possible, due to yield not working inside anonymous method blocks.\n\nBetter still, use generic List\u003CT\u003E cloner:\n\nclass Utility\u003CT\u003E where T : ICloneable\n{\n    static public IEnumerable\u003CT\u003E CloneList(List\u003CT\u003E tl)\n    {\n        foreach (T t in tl)\n        {\n            yield return (T)t.Clone();\n        }\n    }\n}\n\n    ","\nQ. Why would I choose this answer?\n\nChoose this answer if you want the fastest speed .NET is capable of.\nIgnore this answer if you want a really, really easy method of cloning.\n\nIn other words, go with another answer unless you have a performance bottleneck that needs fixing, and you can prove it with a profiler.\n10x faster than other methods\nThe following method of performing a deep clone is:\n\n10x faster than anything that involves serialization/deserialization;\nPretty darn close to the theoretical maximum speed .NET is capable of.\n\nAnd the method ...\nFor ultimate speed, you can use Nested MemberwiseClone to do a deep copy. Its almost the same speed as copying a value struct, and is much faster than (a) reflection or (b) serialization (as described in other answers on this page).\nNote that if you use Nested MemberwiseClone for a deep copy, you have to manually implement a ShallowCopy for each nested level in the class, and a DeepCopy which calls all said ShallowCopy methods to create a complete clone. This is simple: only a few lines in total, see the demo code below.\nHere is the output of the code showing the relative performance difference for 100,000 clones:\n\n1.08 seconds for Nested MemberwiseClone on nested structs\n4.77 seconds for Nested MemberwiseClone on nested classes\n39.93 seconds for Serialization/Deserialization\n\nUsing Nested MemberwiseClone on a class almost as fast as copying a struct, and copying a struct is pretty darn close to the theoretical maximum speed .NET is capable of.\nDemo 1 of shallow and deep copy, using classes and MemberwiseClone:\n  Create Bob\n    Bob.Age=30, Bob.Purchase.Description=Lamborghini\n  Clone Bob \u003E\u003E BobsSon\n  Adjust BobsSon details\n    BobsSon.Age=2, BobsSon.Purchase.Description=Toy car\n  Proof of deep copy: If BobsSon is a true clone, then adjusting BobsSon details will not affect Bob:\n    Bob.Age=30, Bob.Purchase.Description=Lamborghini\n  Elapsed time: 00:00:04.7795670,30000000\n\nDemo 2 of shallow and deep copy, using structs and value copying:\n  Create Bob\n    Bob.Age=30, Bob.Purchase.Description=Lamborghini\n  Clone Bob \u003E\u003E BobsSon\n  Adjust BobsSon details:\n    BobsSon.Age=2, BobsSon.Purchase.Description=Toy car\n  Proof of deep copy: If BobsSon is a true clone, then adjusting BobsSon details will not affect Bob:\n    Bob.Age=30, Bob.Purchase.Description=Lamborghini\n  Elapsed time: 00:00:01.0875454,30000000\n\nDemo 3 of deep copy, using class and serialize/deserialize:\n  Elapsed time: 00:00:39.9339425,30000000\n\nTo understand how to do a deep copy using MemberwiseCopy, here is the demo project that was used to generate the times above:\n// Nested MemberwiseClone example. \n// Added to demo how to deep copy a reference class.\n[Serializable] // Not required if using MemberwiseClone, only used for speed comparison using serialization.\npublic class Person\n{\n    public Person(int age, string description)\n    {\n        this.Age = age;\n        this.Purchase.Description = description;\n    }\n    [Serializable] // Not required if using MemberwiseClone\n    public class PurchaseType\n    {\n        public string Description;\n        public PurchaseType ShallowCopy()\n        {\n            return (PurchaseType)this.MemberwiseClone();\n        }\n    }\n    public PurchaseType Purchase = new PurchaseType();\n    public int Age;\n    // Add this if using nested MemberwiseClone.\n    // This is a class, which is a reference type, so cloning is more difficult.\n    public Person ShallowCopy()\n    {\n        return (Person)this.MemberwiseClone();\n    }\n    // Add this if using nested MemberwiseClone.\n    // This is a class, which is a reference type, so cloning is more difficult.\n    public Person DeepCopy()\n    {\n            // Clone the root ...\n        Person other = (Person) this.MemberwiseClone();\n            // ... then clone the nested class.\n        other.Purchase = this.Purchase.ShallowCopy();\n        return other;\n    }\n}\n// Added to demo how to copy a value struct (this is easy - a deep copy happens by default)\npublic struct PersonStruct\n{\n    public PersonStruct(int age, string description)\n    {\n        this.Age = age;\n        this.Purchase.Description = description;\n    }\n    public struct PurchaseType\n    {\n        public string Description;\n    }\n    public PurchaseType Purchase;\n    public int Age;\n    // This is a struct, which is a value type, so everything is a clone by default.\n    public PersonStruct ShallowCopy()\n    {\n        return (PersonStruct)this;\n    }\n    // This is a struct, which is a value type, so everything is a clone by default.\n    public PersonStruct DeepCopy()\n    {\n        return (PersonStruct)this;\n    }\n}\n// Added only for a speed comparison.\npublic class MyDeepCopy\n{\n    public static T DeepCopy\u003CT\u003E(T obj)\n    {\n        object result = null;\n        using (var ms = new MemoryStream())\n        {\n            var formatter = new BinaryFormatter();\n            formatter.Serialize(ms, obj);\n            ms.Position = 0;\n            result = (T)formatter.Deserialize(ms);\n            ms.Close();\n        }\n        return (T)result;\n    }\n}\n\nThen, call the demo from main:\nvoid MyMain(string[] args)\n{\n    {\n        Console.Write(\u0022Demo 1 of shallow and deep copy, using classes and MemberwiseCopy:\\n\u0022);\n        var Bob = new Person(30, \u0022Lamborghini\u0022);\n        Console.Write(\u0022  Create Bob\\n\u0022);\n        Console.Write(\u0022    Bob.Age={0}, Bob.Purchase.Description={1}\\n\u0022, Bob.Age, Bob.Purchase.Description);\n        Console.Write(\u0022  Clone Bob \u003E\u003E BobsSon\\n\u0022);\n        var BobsSon = Bob.DeepCopy();\n        Console.Write(\u0022  Adjust BobsSon details\\n\u0022);\n        BobsSon.Age = 2;\n        BobsSon.Purchase.Description = \u0022Toy car\u0022;\n        Console.Write(\u0022    BobsSon.Age={0}, BobsSon.Purchase.Description={1}\\n\u0022, BobsSon.Age, BobsSon.Purchase.Description);\n        Console.Write(\u0022  Proof of deep copy: If BobsSon is a true clone, then adjusting BobsSon details will not affect Bob:\\n\u0022);\n        Console.Write(\u0022    Bob.Age={0}, Bob.Purchase.Description={1}\\n\u0022, Bob.Age, Bob.Purchase.Description);\n        Debug.Assert(Bob.Age == 30);\n        Debug.Assert(Bob.Purchase.Description == \u0022Lamborghini\u0022);\n        var sw = new Stopwatch();\n        sw.Start();\n        int total = 0;\n        for (int i = 0; i \u003C 100000; i\u002B\u002B)\n        {\n            var n = Bob.DeepCopy();\n            total \u002B= n.Age;\n        }\n        Console.Write(\u0022  Elapsed time: {0},{1}\\n\\n\u0022, sw.Elapsed, total);\n    }\n    {               \n        Console.Write(\u0022Demo 2 of shallow and deep copy, using structs:\\n\u0022);\n        var Bob = new PersonStruct(30, \u0022Lamborghini\u0022);\n        Console.Write(\u0022  Create Bob\\n\u0022);\n        Console.Write(\u0022    Bob.Age={0}, Bob.Purchase.Description={1}\\n\u0022, Bob.Age, Bob.Purchase.Description);\n        Console.Write(\u0022  Clone Bob \u003E\u003E BobsSon\\n\u0022);\n        var BobsSon = Bob.DeepCopy();\n        Console.Write(\u0022  Adjust BobsSon details:\\n\u0022);\n        BobsSon.Age = 2;\n        BobsSon.Purchase.Description = \u0022Toy car\u0022;\n        Console.Write(\u0022    BobsSon.Age={0}, BobsSon.Purchase.Description={1}\\n\u0022, BobsSon.Age, BobsSon.Purchase.Description);\n        Console.Write(\u0022  Proof of deep copy: If BobsSon is a true clone, then adjusting BobsSon details will not affect Bob:\\n\u0022);\n        Console.Write(\u0022    Bob.Age={0}, Bob.Purchase.Description={1}\\n\u0022, Bob.Age, Bob.Purchase.Description);                \n        Debug.Assert(Bob.Age == 30);\n        Debug.Assert(Bob.Purchase.Description == \u0022Lamborghini\u0022);\n        var sw = new Stopwatch();\n        sw.Start();\n        int total = 0;\n        for (int i = 0; i \u003C 100000; i\u002B\u002B)\n        {\n            var n = Bob.DeepCopy();\n            total \u002B= n.Age;\n        }\n        Console.Write(\u0022  Elapsed time: {0},{1}\\n\\n\u0022, sw.Elapsed, total);\n    }\n    {\n        Console.Write(\u0022Demo 3 of deep copy, using class and serialize/deserialize:\\n\u0022);\n        int total = 0;\n        var sw = new Stopwatch();\n        sw.Start();\n        var Bob = new Person(30, \u0022Lamborghini\u0022);\n        for (int i = 0; i \u003C 100000; i\u002B\u002B)\n        {\n            var BobsSon = MyDeepCopy.DeepCopy\u003CPerson\u003E(Bob);\n            total \u002B= BobsSon.Age;\n        }\n        Console.Write(\u0022  Elapsed time: {0},{1}\\n\u0022, sw.Elapsed, total);\n    }\n    Console.ReadKey();\n}\n\nAgain, note that if you use Nested MemberwiseClone for a deep copy, you have to manually implement a ShallowCopy for each nested level in the class, and a DeepCopy which calls all said ShallowCopy methods to create a complete clone. This is simple: only a few lines in total, see the demo code above.\nValue types vs. References Types\nNote that when it comes to cloning an object, there is is a big difference between a \u0022struct\u0022 and a \u0022class\u0022:\n\nIf you have a \u0022struct\u0022, it\u0027s a value type so you can just copy it, and the contents will be cloned (but it will only make a shallow clone unless you use the techniques in this post).\nIf you have a \u0022class\u0022, it\u0027s a reference type, so if you copy it, all you are doing is copying the pointer to it. To create a true clone, you have to be more creative, and use differences between value types and references types which creates another copy of the original object in memory.\n\nSee differences between value types and references types.\nChecksums to aid in debugging\n\nCloning objects incorrectly can lead to very difficult-to-pin-down bugs. In production code, I tend to implement a checksum to double check that the object has been cloned properly, and hasn\u0027t been corrupted by another reference to it. This checksum can be switched off in Release mode.\nI find this method quite useful: often, you only want to clone parts of the object, not the entire thing.\n\nReally useful for decoupling many threads from many other threads\nOne excellent use case for this code is feeding clones of a nested class or struct into a queue, to implement the producer / consumer pattern.\n\nWe can have one  (or more) threads modifying a class that they own, then pushing a complete copy of this class into a ConcurrentQueue.\nWe then have one (or more) threads pulling copies of these classes out and dealing with them.\n\nThis works extremely well in practice, and allows us to decouple many threads (the producers) from one or more threads (the consumers).\nAnd this method is blindingly fast too: if we use nested structs, it\u0027s 35x faster than serializing/deserializing nested classes, and allows us to take advantage of all of the threads available on the machine.\nUpdate\nApparently, ExpressMapper is as fast, if not faster, than hand coding such as above. I might have to see how they compare with a profiler.\n    ","\nI\u0027ve seen it implemented through reflection as well. Basically there was a method that would iterate through the members of an object and appropriately copy them to the new object. When it reached reference types or collections I think it did a recursive call on itself. Reflection is expensive, but it worked pretty well.\n    ","\nHere is a deep copy implementation:\n\npublic static object CloneObject(object opSource)\n{\n    //grab the type and create a new instance of that type\n    Type opSourceType = opSource.GetType();\n    object opTarget = CreateInstanceOfType(opSourceType);\n\n    //grab the properties\n    PropertyInfo[] opPropertyInfo = opSourceType.GetProperties(BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance);\n\n    //iterate over the properties and if it has a \u0027set\u0027 method assign it from the source TO the target\n    foreach (PropertyInfo item in opPropertyInfo)\n    {\n        if (item.CanWrite)\n        {\n            //value types can simply be \u0027set\u0027\n            if (item.PropertyType.IsValueType || item.PropertyType.IsEnum || item.PropertyType.Equals(typeof(System.String)))\n            {\n                item.SetValue(opTarget, item.GetValue(opSource, null), null);\n            }\n            //object/complex types need to recursively call this method until the end of the tree is reached\n            else\n            {\n                object opPropertyValue = item.GetValue(opSource, null);\n                if (opPropertyValue == null)\n                {\n                    item.SetValue(opTarget, null, null);\n                }\n                else\n                {\n                    item.SetValue(opTarget, CloneObject(opPropertyValue), null);\n                }\n            }\n        }\n    }\n    //return the new item\n    return opTarget;\n}\n\n    ","\nAs I couldn\u0027t find a cloner that meets all my requirements in different projects, I created a deep cloner that can be configured and adapted to different code structures instead of adapting my code to meet the cloners requirements. Its achieved by adding annotations to the code that shall be cloned or you just leave the code as it is to have the default behaviour. It uses reflection, type caches and is based on fasterflect. The cloning process is very fast for a huge amount of data and a high object hierarchy (compared to other reflection/serialization based algorithms). \n\nhttps://github.com/kalisohn/CloneBehave\n\nAlso available as a nuget package:\nhttps://www.nuget.org/packages/Clone.Behave/1.0.0\n\nFor example: The following code will deepClone Address, but only perform a shallow copy of the _currentJob field. \n\npublic class Person \n{\n  [DeepClone(DeepCloneBehavior.Shallow)]\n  private Job _currentJob;      \n\n  public string Name { get; set; }\n\n  public Job CurrentJob \n  { \n    get{ return _currentJob; }\n    set{ _currentJob = value; }\n  }\n\n  public Person Manager { get; set; }\n}\n\npublic class Address \n{      \n  public Person PersonLivingHere { get; set; }\n}\n\nAddress adr = new Address();\nadr.PersonLivingHere = new Person(\u0022John\u0022);\nadr.PersonLivingHere.BestFriend = new Person(\u0022James\u0022);\nadr.PersonLivingHere.CurrentJob = new Job(\u0022Programmer\u0022);\n\nAddress adrClone = adr.Clone();\n\n//RESULT\nadr.PersonLivingHere == adrClone.PersonLivingHere //false\nadr.PersonLivingHere.Manager == adrClone.PersonLivingHere.Manager //false\nadr.PersonLivingHere.CurrentJob == adrClone.PersonLivingHere.CurrentJob //true\nadr.PersonLivingHere.CurrentJob.AnyProperty == adrClone.PersonLivingHere.CurrentJob.AnyProperty //true\n\n    ","\nDeepCloner: Quick, easy, effective NuGet package to solve cloning\n\nAfter reading all answers I was surprised no one mentioned this excellent package: \n\nDeepCloner GitHub project  \n\nDeepCloner NuGet package\n\nElaborating a bit on its README, here are the reason why we chose it at work:\n\n\n  \n  It can deep or shallow copy \n  In deep cloning all object graph is maintained. \n  Uses code-generation in runtime, as result cloning is blazingly fast\n  Objects copied by internal structure, no methods or ctors called\n  You don\u0027t need to mark classes somehow (like Serializable-attribute, or implement interfaces)\n  No requirement to specify object type for cloning. Object can be casted to interface or as an abstract object (e.g. you can clone array of ints as abstract Array or IEnumerable; even null can be cloned without any errors)\n  Cloned object doesn\u0027t have any ability to determine that he is clone (except with very specific methods)\n  \n\n\nUsage:\n\nvar deepClone = new { Id = 1, Name = \u0022222\u0022 }.DeepClone();\nvar shallowClone = new { Id = 1, Name = \u0022222\u0022 }.ShallowClone();\n\n\nPerformance:\n\nThe README contains a performance comparison of various cloning libraries and methods: DeepCloner Performance.\n\nRequirements:\n\n\n.NET 4.0 or higher or .NET Standard 1.3 (.NET Core)\nRequires Full Trust permission set or Reflection permission (MemberAccess)\n\n    ","\nCode Generator\n\nWe have seen a lot of ideas from serialization over manual implementation to reflection and I want to propose a totally different approach using the CGbR Code Generator. The generate clone method is memory and CPU efficient and therefor 300x faster as the standard DataContractSerializer.\n\nAll you need is a partial class definition with ICloneable and the generator does the rest:\n\npublic partial class Root : ICloneable\n{\n    public Root(int number)\n    {\n        _number = number;\n    }\n    private int _number;\n\n    public Partial[] Partials { get; set; }\n\n    public IList\u003Culong\u003E Numbers { get; set; }\n\n    public object Clone()\n    {\n        return Clone(true);\n    }\n\n    private Root()\n    {\n    }\n} \n\npublic partial class Root\n{\n    public Root Clone(bool deep)\n    {\n        var copy = new Root();\n        // All value types can be simply copied\n        copy._number = _number; \n        if (deep)\n        {\n            // In a deep clone the references are cloned \n            var tempPartials = new Partial[Partials.Length];\n            for (var i = 0; i \u003C Partials.Length; i\u002B\u002B)\n            {\n                var value = Partials[i];\n                value = value.Clone(true);\n                tempPartials[i] = value;\n            }\n            copy.Partials = tempPartials;\n            var tempNumbers = new List\u003Culong\u003E(Numbers.Count);\n            for (var i = 0; i \u003C Numbers.Count; i\u002B\u002B)\n            {\n                var value = Numbers[i];\n                tempNumbers.Add(value);\n            }\n            copy.Numbers = tempNumbers;\n        }\n        else\n        {\n            // In a shallow clone only references are copied\n            copy.Partials = Partials; \n            copy.Numbers = Numbers; \n        }\n        return copy;\n    }\n}\n\n\nNote: Latest version has a more null checks, but I left them out for better understanding.\n    ","\nI like Copyconstructors like that:\n\n    public AnyObject(AnyObject anyObject)\n    {\n        foreach (var property in typeof(AnyObject).GetProperties())\n        {\n            property.SetValue(this, property.GetValue(anyObject));\n        }\n        foreach (var field in typeof(AnyObject).GetFields())\n        {\n            field.SetValue(this, field.GetValue(anyObject));\n        }\n    }\n\n\nIf you have more things to copy add them\n    ","\nThis method solved the problem for me:\n\nprivate static MyObj DeepCopy(MyObj source)\n        {\n\n            var DeserializeSettings = new JsonSerializerSettings { ObjectCreationHandling = ObjectCreationHandling.Replace };\n\n            return JsonConvert.DeserializeObject\u003CMyObj \u003E(JsonConvert.SerializeObject(source), DeserializeSettings);\n\n        }\n\n\nUse it like this: MyObj a = DeepCopy(b);\n    ","\nHere a solution fast and easy that worked for me without relaying on Serialization/Deserialization. \n\npublic class MyClass\n{\n    public virtual MyClass DeepClone()\n    {\n        var returnObj = (MyClass)MemberwiseClone();\n        var type = returnObj.GetType();\n        var fieldInfoArray = type.GetRuntimeFields().ToArray();\n\n        foreach (var fieldInfo in fieldInfoArray)\n        {\n            object sourceFieldValue = fieldInfo.GetValue(this);\n            if (!(sourceFieldValue is MyClass))\n            {\n                continue;\n            }\n\n            var sourceObj = (MyClass)sourceFieldValue;\n            var clonedObj = sourceObj.DeepClone();\n            fieldInfo.SetValue(returnObj, clonedObj);\n        }\n        return returnObj;\n    }\n}\n\n\nEDIT:\nrequires \n\n    using System.Linq;\n    using System.Reflection;\n\n\nThat\u0027s How I used it\n\npublic MyClass Clone(MyClass theObjectIneededToClone)\n{\n    MyClass clonedObj = theObjectIneededToClone.DeepClone();\n}\n\n    ","\nFollow these steps:\n\n\nDefine an ISelf\u003CT\u003E with a read-only Self property that returns T, and ICloneable\u003Cout T\u003E, which derives from ISelf\u003CT\u003E and includes a method T Clone().\nThen define a CloneBase type which implements a protected virtual generic VirtualClone casting MemberwiseClone to the passed-in type.  \nEach derived type should implement VirtualClone by calling the base clone method and then doing whatever needs to be done to properly clone those aspects of the derived type which the parent VirtualClone method hasn\u0027t yet handled.\n\n\nFor maximum inheritance versatility, classes exposing public cloning functionality should be sealed, but derive from a base class which is otherwise identical except for the lack of cloning.  Rather than passing variables of the explicit clonable type, take a parameter of type ICloneable\u003CtheNonCloneableType\u003E.  This will allow a routine that expects a cloneable derivative of  Foo to work with a cloneable derivative of DerivedFoo, but also allow the creation of non-cloneable derivatives of Foo.\n    ","\nI think you can try this.\n\nMyObject myObj = GetMyObj(); // Create and fill a new object\nMyObject newObj = new MyObject(myObj); //DeepClone it\n\n    ","\nDisclaimer: I\u0027m the author of the mentioned package.\n\nI was surprised how the top answers to this question in 2019 still use serialization or reflection. \n\nSerialization is limiting (requires attributes, specific constructors, etc.) and is very slow\n\nBinaryFormatter requires the Serializable attribute, JsonConverter requires a parameterless constructor or attributes, neither handle read only fields or interfaces very well and both are 10-30x slower than necessary.\n\nExpression Trees\n\nYou can instead use Expression Trees or Reflection.Emit to generate cloning code only once, then use that compiled code instead of slow reflection or serialization.\n\nHaving come across the problem myself and seeing no satisfactory solution, I decided to create a package that does just that and works with every type and is a almost as fast as custom written code.\n\nYou can find the project on GitHub: https://github.com/marcelltoth/ObjectCloner\n\nUsage\n\nYou can install it from NuGet. Either get the ObjectCloner package and use it as:\n\nvar clone = ObjectCloner.DeepClone(original);\n\n\nor if you don\u0027t mind polluting your object type with extensions get ObjectCloner.Extensions as well and write:\n\nvar clone = original.DeepClone();\n\n\nPerformance\n\nA simple benchmark of cloning a class hierarchy showed performance ~3x faster than using Reflection, ~12x faster than Newtonsoft.Json serialization and ~36x faster than the highly suggested BinaryFormatter.\n    ","\nI have created a version of the accepted answer that works with both \u0027[Serializable]\u0027 and \u0027[DataContract]\u0027. It has been a while since I wrote it, but if I remember correctly [DataContract] needed a different serializer.\n\nRequires System, System.IO, System.Runtime.Serialization, System.Runtime.Serialization.Formatters.Binary, System.Xml;\n\npublic static class ObjectCopier\n{\n\n    /// \u003Csummary\u003E\n    /// Perform a deep Copy of an object that is marked with \u0027[Serializable]\u0027 or \u0027[DataContract]\u0027\n    /// \u003C/summary\u003E\n    /// \u003Ctypeparam name=\u0022T\u0022\u003EThe type of object being copied.\u003C/typeparam\u003E\n    /// \u003Cparam name=\u0022source\u0022\u003EThe object instance to copy.\u003C/param\u003E\n    /// \u003Creturns\u003EThe copied object.\u003C/returns\u003E\n    public static T Clone\u003CT\u003E(T source)\n    {\n        if (typeof(T).IsSerializable == true)\n        {\n            return CloneUsingSerializable\u003CT\u003E(source);\n        }\n\n        if (IsDataContract(typeof(T)) == true)\n        {\n            return CloneUsingDataContracts\u003CT\u003E(source);\n        }\n\n        throw new ArgumentException(\u0022The type must be Serializable or use DataContracts.\u0022, \u0022source\u0022);\n    }\n\n\n    /// \u003Csummary\u003E\n    /// Perform a deep Copy of an object that is marked with \u0027[Serializable]\u0027\n    /// \u003C/summary\u003E\n    /// \u003Cremarks\u003E\n    /// Found on http://stackoverflow.com/questions/78536/cloning-objects-in-c-sharp\n    /// Uses code found on CodeProject, which allows free use in third party apps\n    /// - http://www.codeproject.com/KB/tips/SerializedObjectCloner.aspx\n    /// \u003C/remarks\u003E\n    /// \u003Ctypeparam name=\u0022T\u0022\u003EThe type of object being copied.\u003C/typeparam\u003E\n    /// \u003Cparam name=\u0022source\u0022\u003EThe object instance to copy.\u003C/param\u003E\n    /// \u003Creturns\u003EThe copied object.\u003C/returns\u003E\n    public static T CloneUsingSerializable\u003CT\u003E(T source)\n    {\n        if (!typeof(T).IsSerializable)\n        {\n            throw new ArgumentException(\u0022The type must be serializable.\u0022, \u0022source\u0022);\n        }\n\n        // Don\u0027t serialize a null object, simply return the default for that object\n        if (Object.ReferenceEquals(source, null))\n        {\n            return default(T);\n        }\n\n        IFormatter formatter = new BinaryFormatter();\n        Stream stream = new MemoryStream();\n        using (stream)\n        {\n            formatter.Serialize(stream, source);\n            stream.Seek(0, SeekOrigin.Begin);\n            return (T)formatter.Deserialize(stream);\n        }\n    }\n\n\n    /// \u003Csummary\u003E\n    /// Perform a deep Copy of an object that is marked with \u0027[DataContract]\u0027\n    /// \u003C/summary\u003E\n    /// \u003Ctypeparam name=\u0022T\u0022\u003EThe type of object being copied.\u003C/typeparam\u003E\n    /// \u003Cparam name=\u0022source\u0022\u003EThe object instance to copy.\u003C/param\u003E\n    /// \u003Creturns\u003EThe copied object.\u003C/returns\u003E\n    public static T CloneUsingDataContracts\u003CT\u003E(T source)\n    {\n        if (IsDataContract(typeof(T)) == false)\n        {\n            throw new ArgumentException(\u0022The type must be a data contract.\u0022, \u0022source\u0022);\n        }\n\n        // ** Don\u0027t serialize a null object, simply return the default for that object\n        if (Object.ReferenceEquals(source, null))\n        {\n            return default(T);\n        }\n\n        DataContractSerializer dcs = new DataContractSerializer(typeof(T));\n        using(Stream stream = new MemoryStream())\n        {\n            using (XmlDictionaryWriter writer = XmlDictionaryWriter.CreateBinaryWriter(stream))\n            {\n                dcs.WriteObject(writer, source);\n                writer.Flush();\n                stream.Seek(0, SeekOrigin.Begin);\n                using (XmlDictionaryReader reader = XmlDictionaryReader.CreateBinaryReader(stream, XmlDictionaryReaderQuotas.Max))\n                {\n                    return (T)dcs.ReadObject(reader);\n                }\n            }\n        }\n    }\n\n\n    /// \u003Csummary\u003E\n    /// Helper function to check if a class is a [DataContract]\n    /// \u003C/summary\u003E\n    /// \u003Cparam name=\u0022type\u0022\u003EThe type of the object to check.\u003C/param\u003E\n    /// \u003Creturns\u003EBoolean flag indicating if the class is a DataContract (true) or not (false) \u003C/returns\u003E\n    public static bool IsDataContract(Type type)\n    {\n        object[] attributes = type.GetCustomAttributes(typeof(DataContractAttribute), false);\n        return attributes.Length == 1;\n    }\n\n} \n\n    ","\nOk, there are some obvious example with reflection in this post, BUT reflection is usually slow, until you start to cache it properly.\n\nif you\u0027ll cache it properly, than it\u0027ll deep clone 1000000 object by 4,6s (measured by Watcher).\n\nstatic readonly Dictionary\u003CType, PropertyInfo[]\u003E ProperyList = new Dictionary\u003CType, PropertyInfo[]\u003E();\n\n\nthan you take cached properties or add new to dictionary and use them simply\n\nforeach (var prop in propList)\n{\n        var value = prop.GetValue(source, null);   \n        prop.SetValue(copyInstance, value, null);\n}\n\n\nfull code check in my post in another answer\n\nhttps://stackoverflow.com/a/34365709/4711853\n    ","\n                \n                stackoverflow.com/questions/78536/cloning-objects-in-c/\u2026 has a link to the code above [and references two other such implementations, one of which is more appropriate in my context]\n                \n\u2013\u00A0Ruben Bartelink\n                Feb 4 \u002709 at 13:13\n            ","\n                \n                Serialization/deserialization involves significant overhead that isn\u0027t necessary. See the ICloneable interface and .MemberWise() clone methods in C#.\n                \n\u2013\u00A03Dave\n                Jan 28 \u002710 at 17:28\n            ","\n                \n                @David, granted, but if the objects are light, and the performance hit when using it is not too high for your requirements, then it is a useful tip. I haven\u0027t used it intensively with large amounts of data in a loop, I admit, but I have never seen a single performance concern.\n                \n\u2013\u00A0johnc\n                Jan 29 \u002710 at 0:21\n                        \n                            \n                        \n            ","\n                \n                @Amir: actually, no: typeof(T).IsSerializable is also true if the type has been marked with the [Serializable] attribute. It doesn\u0027t have to implement the ISerializable interface.\n                \n\u2013\u00A0Daniel Gehriger\n                Jun 3 \u002711 at 15:25\n            ","\n                \n                Just thought I\u0027d mention that whilst this method is useful, and I\u0027ve used it myself many a time, it\u0027s not at all compatible with Medium Trust - so watch out if you\u0027re writing code that needs compatibility. BinaryFormatter access private fields and thus cannot work in the default permissionset for partial trust environments. You could try another serializer, but make sure your caller knows that the clone may not be perfect if the incoming object relies on private fields.\n                \n\u2013\u00A0Alex Norcliffe\n                Oct 17 \u002711 at 11:35\n                        \n                            \n                        \n            ","\n                \n                the solutiojn is even faster than the BinaryFormatter solution, .NET Serialization Performance Comparison\n                \n\u2013\u00A0esskar\n                Mar 12 \u002714 at 10:25\n                        \n                            \n                        \n            ","\n                \n                Thanks for this.  I was able to do essentially the same thing with the BSON serializer that ships with the MongoDB driver for C#.\n                \n\u2013\u00A0Mark Ewer\n                Jun 18 \u002714 at 0:58\n            ","\n                \n                This is the best way for me, However, I use Newtonsoft.Json.JsonConvert but it is the same\n                \n\u2013\u00A0Pierre\n                Feb 4 \u002715 at 12:20\n            ","\n                \n                For this to work the object to clone needs to be serializable as already mentioned - this also means for example that it may not have circular dependencies\n                \n\u2013\u00A0radomeit\n                Feb 22 \u002718 at 10:03\n                        \n                            \n                        \n            ","\n                \n                I think this is the best solution as the implementation can be applied on most programming languages.\n                \n\u2013\u00A0mr5\n                Jan 2 \u002719 at 7:58\n            ","\n                \n                I\u0027m not clear why ICloneable is considered vague.  Given a type like Dictionary(Of T,U), I would expect that ICloneable.Clone should do whatever level of deep and shallow copying is necessary to make the new dictionary be an independent dictionary that contains the same T\u0027s and U\u0027s (struct contents, and/or object references) as the original.  Where\u0027s the ambiguity?  To be sure, a generic ICloneable(Of T), which inherited ISelf(Of T), which included a \u0022Self\u0022 method, would be much better, but I don\u0027t see ambiguity on deep vs shallow cloning.\n                \n\u2013\u00A0supercat\n                Jan 12 \u002711 at 18:35\n                        \n                            \n                        \n            ","\n                \n                Your example illustrates the problem.  Suppose you have a Dictionary\u003Cstring, Customer\u003E.  Should the cloned Dictionary have the same Customer objects as the original, or copies of those Customer objects?  There are reasonable use cases for either one.  But ICloneable doesn\u0027t make clear which one you\u0027ll get.  That\u0027s why it\u0027s not useful.\n                \n\u2013\u00A0Ryan Lundy\n                Jan 12 \u002711 at 18:53\n            ","\n                \n                @Kyralessa The Microsoft MSDN article actually states this very problem of not knowing if you are requesting a deep or shallow copy.\n                \n\u2013\u00A0crush\n                May 28 \u002714 at 19:05\n            ","\n                \n                The answer from the duplicate stackoverflow.com/questions/129389/\u2026 describes Copy extension, based on recursive MembershipClone\n                \n\u2013\u00A0Michael Freidgeim\n                Jan 23 \u002718 at 12:15\n            ","\n                \n                MS recommends not using ICloneable for public members. \u0022Because callers of Clone cannot depend on the method performing a predictable cloning operation, we recommend that ICloneable not be implemented in public APIs.\u0022 msdn.microsoft.com/en-us/library/\u2026 However, based on the explanation given by Venkat Subramaniam in your linked article, I think it makes sense to use in this situation as long as the creators of the ICloneable objects have a deep understanding of which properties should be deep vs. shallow copies (i.e. deep copy Brain, shallow copy City)\n                \n\u2013\u00A0BateTech\n                Jan 9 \u002715 at 16:57\n            ","\n                \n                First off, I\u0027m far from an expert in this topic (public APIs). I think for once that MS remark makes a lot of sense. And I don\u0027t think it\u0027s safe to assume the users of that API will have such a deep understanding. So, it only makes sense implementing it on a public API if it really won\u0027t matter for whoever is going to use it. I guess having some kind of UML very explicitly making the distinction on each property could help. But I\u0027d like to hear from someone with more experience. :P\n                \n\u2013\u00A0cregox\n                Jan 10 \u002715 at 3:45\n            ","\n                \n                You can use the CGbR Clone Generator and get a similar result without manually writing the code.\n                \n\u2013\u00A0Toxantron\n                Jun 9 \u002716 at 20:53\n            ","\n                \n                Intermediate Language implementation is useful\n                \n\u2013\u00A0Michael Freidgeim\n                Jan 23 \u002718 at 12:35\n            ","\n                \n                There\u0027s no final in C#\n                \n\u2013\u00A0Konrad\n                Sep 5 \u002718 at 11:31\n            ","\n                \n                .Net doesn\u0027t have copy constructors.\n                \n\u2013\u00A0Pop Catalin\n                Sep 17 \u002708 at 0:45\n            ","\n                \n                Sure it does: new MyObject(objToCloneFrom)  Just declare a ctor which takes the object to clone as a parameter.\n                \n\u2013\u00A0Nick\n                Sep 17 \u002708 at 11:49\n            ","\n                \n                It\u0027s not the same thing. You have to add it to every class manually, and you don\u0027t even know if you\u0027re garantueeing a deep copy.\n                \n\u2013\u00A0Dave Van den Eynde\n                Jun 4 \u002709 at 8:01\n            ","\n                \n                \u002B1 for copy ctor. You have to manually write a clone() function for each type of object too, and good luck with that when your class hierarchy gets a few levels deep.\n                \n\u2013\u00A0Andrew Grant\n                Sep 15 \u002709 at 0:50\n            ","\n                \n                With copy constructors you lose hierarchy though. agiledeveloper.com/articles/cloning072002.htm\n                \n\u2013\u00A0Will\n                Nov 6 \u002711 at 21:10\n            ","\n                \n                This, unfortunately, is flawed. It\u0027s equivalent to calling objectOne.MyProperty = objectTwo.MyProperty (i.e., it will just copy the reference across). It will not clone the values of the properties.\n                \n\u2013\u00A0Alex Norcliffe\n                Oct 18 \u002711 at 0:59\n            ","\n                \n                to Alex Norcliffe : author of question asked about \u0022copying each property\u0022 rather then cloning. in most cases exact duplication of properties is not needed.\n                \n\u2013\u00A0Konstantin Salavatov\n                Mar 28 \u002712 at 9:41\n            ","\n                \n                i think about using this method but with recursion. so if the value of a property is a reference, create a new object and call CopyTo again. i just see one problem, that all used classes must have a constructor without parameters. Anybody tried this already? i also wonder if this will actually work with properties containing .net classes like DataRow and DataTable?\n                \n\u2013\u00A0Koryu\n                Jul 25 \u002713 at 9:22\n            ","\n                \n                What are the chances of this getting on NuGet? It seems like the best solution. How does it compare to NClone?\n                \n\u2013\u00A0crush\n                May 28 \u002714 at 19:56\n            ","\n                \n                I think this answer should be upvoted more times. Manually implementing ICloneable is tedious and error-prone, using reflection or serialization is slow if performance is important and you need to copy thousands of objects during a short period of time.\n                \n\u2013\u00A0nightcoder\n                Jul 28 \u002715 at 14:15\n                        \n                            \n                        \n            ","\n                \n                Not at all, you wrong about reflection, you should simply cache this properly.  Check my answer below stackoverflow.com/a/34368738/4711853\n                \n\u2013\u00A0Roma Borodov\n                Dec 19 \u002715 at 9:32\n                        \n                            \n                        \n            ","\n                \n                cloning code using Expression trees that you have posted codeproject.com/Articles/1111658/\u2026, is failing with newer versions of .Net framework with a security exception, Operation could destabilize the runtime, it is basically an exception due to malformed expression tree, which is used to generate the Func at runtime, please check if you have some solution.In fact I have seen issue only with complex objects with deep hierarchy, simple one easily get copied\n                \n\u2013\u00A0Mrinal Kamboj\n                Dec 24 \u002717 at 14:36\n            ","\n                \n                ExpressionTree implementation seems very good. It even works with circular references and private members. No attributes needed. Best answer I\u0027ve found.\n                \n\u2013\u00A0N73k\n                Jul 1 \u002719 at 20:29\n                        \n                            \n                        \n            ","\n                \n                The best answer, worked very well, you saved my day\n                \n\u2013\u00A0Adel Mourad\n                Jan 12 at 17:40\n            ","\n                \n                ICloneable doesn\u0027t have a generic interface, so it is not recommended to use that interface.\n                \n\u2013\u00A0Karg\n                Sep 17 \u002708 at 0:15\n            ","\n                \n                Your solution works until it needs to handle circular references, then things start to complicate, it\u0027s better to try implement deep cloning using deep serialization.\n                \n\u2013\u00A0Pop Catalin\n                Sep 17 \u002708 at 0:46\n            ","\n                \n                Unfortunately, not all objects are serializable either, so you can\u0027t always use that method either. Ian\u0027s link is the most comprehensive answer so far.\n                \n\u2013\u00A0Zach Burlingame\n                Sep 17 \u002708 at 0:56\n            ","\n                \n                ICloneable doesn\u0027t have a generic interface, so it is not recommended to use that interface.\n                \n\u2013\u00A0Karg\n                Sep 17 \u002708 at 0:13\n            ","\n                \n                Simple and concise answers are the best.\n                \n\u2013\u00A0DavidGuaita\n                Apr 20 \u002718 at 0:45\n            ","\n                \n                This one seems to be pretty useful\n                \n\u2013\u00A0LuckyLikey\n                Apr 20 \u002715 at 13:53\n            ","\n                \n                It\u0027s easier to start working from one code snapshot than for overall system, especially closed one. It\u0027s quite understandable that no library can solve all problems with one shot. Some relaxations should be made.\n                \n\u2013\u00A0TarmoPikaro\n                Apr 24 \u002715 at 19:56\n            ","\n                \n                I\u0027ve tried your solution and it seems to work well, thanks!  I think this answer should be upvoted more times. Manually implementing ICloneable is tedious and error-prone, using reflection or serialization is slow if performance is important and you need to copy thousands of objects during a short period of time.\n                \n\u2013\u00A0nightcoder\n                Jul 28 \u002715 at 15:25\n                        \n                            \n                        \n            ","\n                \n                I tried it and it didn\u0027t work at all for me. Throws a MemberAccess exception.\n                \n\u2013\u00A0Michael Brown\n                Nov 15 \u002718 at 22:22\n            ","\n                \n                It doesn\u0027t work with newer versions of .NET and is discontinued\n                \n\u2013\u00A0Michael Sander\n                Nov 19 \u002718 at 15:55\n            ","\n                \n                Be careful with this one, it performs really poorly. I ended up switching to johnc answer which is as short as this one and performs a lot better.\n                \n\u2013\u00A0Agorilla\n                Apr 11 \u002717 at 7:42\n            ","\n                \n                This only does a shallow copy.\n                \n\u2013\u00A0N73k\n                Jul 1 \u002719 at 18:27\n            ","\n                \n                ICloneable doesn\u0027t have a generic interface, so it is not recommended to use that interface.\n                \n\u2013\u00A0Karg\n                Sep 17 \u002708 at 0:12\n            ","\n                \n                If you copy a struct you get a shallow copy, you might still need specific implementation for a deep copy.\n                \n\u2013\u00A0Lasse V. Karlsen\n                Jul 4 \u002715 at 17:34\n            ","\n                \n                @Lasse V. Karlsen. Yes, you\u0027re absolutely correct, I\u0027ve updated the answer to make this clearer. This method can be used to make deep copies of structs and classes. You can run the included example demo code to show how its done, it has an example of deep cloning a nested struct, and another example of deep cloning a nested class.\n                \n\u2013\u00A0Contango\n                Jul 4 \u002715 at 17:51\n                        \n                            \n                        \n            ","\n                \n                This looks like memberwise clone because does not aware of reference type properties\n                \n\u2013\u00A0sll\n                Nov 6 \u002711 at 10:17\n                        \n                            \n                        \n            ","\n                \n                If you want blindingly fast performance, don\u0027t go for this implementation: it uses reflection, so it won\u0027t be that fast. Conversely, \u0022premature optmization is the of all evil\u0022, so ignore the performance side until after you\u0027ve run a profiler.\n                \n\u2013\u00A0Contango\n                Dec 30 \u002711 at 17:30\n            ","\n                \n                CreateInstanceOfType is not defined?\n                \n\u2013\u00A0MonsterMMORPG\n                Oct 14 \u002715 at 19:40\n            ","\n                \n                It fails on interger: \u0022Non-static method requires a target.\u0022\n                \n\u2013\u00A0Mr.B\n                May 17 \u002716 at 9:08\n            ","\n                \n                This question is quite old. I think this answer should go up so people can actually see the value here.\n                \n\u2013\u00A0EduLopez\n                May 18 at 22:38\n            ","\n                \n                The reason Serialization is still popular in 2019 is because code generation ONLY works in trusted environments.  This means it won\u0027t work in Unity or iOS and probably never will.  So code generation is non-portable.\n                \n\u2013\u00A0JamesHoux\n                Jul 4 at 21:28\n            ","\n                \n                Calling prop.GetValue(...) is still reflection and can\u0027t be cached. In an expression tree its compiled though, so faster\n                \n\u2013\u00A0Tseng\n                Sep 28 \u002716 at 14:17\n            "]},{"Id":"1422fadc-fe3b-4513-9521-99278c0e16a9","QuestionId":32260,"Description":"Sending email in .NET through Gmail","Votes":900,"Views":576405,"Tags":["c#",".net","email","smtp","gmail"],"Discussions":["\nBe sure to use System.Net.Mail, not the deprecated System.Web.Mail. Doing SSL with System.Web.Mail is a gross mess of hacky extensions.\n\nusing System.Net;\nusing System.Net.Mail;\n\nvar fromAddress = new MailAddress(\u0022from@gmail.com\u0022, \u0022From Name\u0022);\nvar toAddress = new MailAddress(\u0022to@example.com\u0022, \u0022To Name\u0022);\nconst string fromPassword = \u0022fromPassword\u0022;\nconst string subject = \u0022Subject\u0022;\nconst string body = \u0022Body\u0022;\n\nvar smtp = new SmtpClient\n{\n    Host = \u0022smtp.gmail.com\u0022,\n    Port = 587,\n    EnableSsl = true,\n    DeliveryMethod = SmtpDeliveryMethod.Network,\n    UseDefaultCredentials = false,\n    Credentials = new NetworkCredential(fromAddress.Address, fromPassword)\n};\nusing (var message = new MailMessage(fromAddress, toAddress)\n{\n    Subject = subject,\n    Body = body\n})\n{\n    smtp.Send(message);\n}\n\n    ","\nThe above answer doesn\u0027t work. You have to set DeliveryMethod = SmtpDeliveryMethod.Network or it will come back with a \u0022client was not authenticated\u0022 error. Also it\u0027s always a good idea to put a timeout.\n\nRevised code:\n\nusing System.Net.Mail;\nusing System.Net;\n\nvar fromAddress = new MailAddress(\u0022from@gmail.com\u0022, \u0022From Name\u0022);\nvar toAddress = new MailAddress(\u0022to@yahoo.com\u0022, \u0022To Name\u0022);\nconst string fromPassword = \u0022password\u0022;\nconst string subject = \u0022test\u0022;\nconst string body = \u0022Hey now!!\u0022;\n\nvar smtp = new SmtpClient\n{\n    Host = \u0022smtp.gmail.com\u0022,\n    Port = 587,\n    EnableSsl = true,\n    DeliveryMethod = SmtpDeliveryMethod.Network,\n    Credentials = new NetworkCredential(fromAddress.Address, fromPassword),\n    Timeout = 20000\n};\nusing (var message = new MailMessage(fromAddress, toAddress)\n{\n    Subject = subject,\n    Body = body\n})\n{\n    smtp.Send(message);\n}\n\n    ","\nFor the other answers to work \u0022from a server\u0022 first Turn On Access for less secure apps in the gmail account.\n\nLooks like recently google changed it\u0027s security policy. The top rated answer no longer works, until you change your account settings as described here: https://support.google.com/accounts/answer/6010255?hl=en-GB\n\n\n\nAs of March 2016, google changed the setting location again!\n    ","\nThis is to send email with attachement.. Simple and short..\n\nsource: http://coding-issues.blogspot.in/2012/11/sending-email-with-attachments-from-c.html\n\nusing System.Net;\nusing System.Net.Mail;\n\npublic void email_send()\n{\n    MailMessage mail = new MailMessage();\n    SmtpClient SmtpServer = new SmtpClient(\u0022smtp.gmail.com\u0022);\n    mail.From = new MailAddress(\u0022your mail@gmail.com\u0022);\n    mail.To.Add(\u0022to_mail@gmail.com\u0022);\n    mail.Subject = \u0022Test Mail - 1\u0022;\n    mail.Body = \u0022mail with attachment\u0022;\n\n    System.Net.Mail.Attachment attachment;\n    attachment = new System.Net.Mail.Attachment(\u0022c:/textfile.txt\u0022);\n    mail.Attachments.Add(attachment);\n\n    SmtpServer.Port = 587;\n    SmtpServer.Credentials = new System.Net.NetworkCredential(\u0022your mail@gmail.com\u0022, \u0022your password\u0022);\n    SmtpServer.EnableSsl = true;\n\n    SmtpServer.Send(mail);\n\n}\n\n    ","\nGoogle may block sign in attempts from some apps or devices that do not use modern security standards. Since these apps and devices are easier to break into, blocking them helps keep your account safer.\n\nSome examples of apps that do not support the latest security standards include:\n\n\nThe Mail app on your iPhone or iPad with iOS 6 or below\nThe Mail app on your Windows phone preceding the 8.1 release\nSome Desktop mail clients like Microsoft Outlook and Mozilla Thunderbird\n\n\nTherefore, you have to enable Less Secure Sign-In in your google account.\n\nAfter sign into google account, go to:\n\nhttps://myaccount.google.com/lesssecureapps \nor \nhttps://www.google.com/settings/security/lesssecureapps \n\nIn C#, you can use the following code:\n\nusing (MailMessage mail = new MailMessage())\n{\n    mail.From = new MailAddress(\u0022email@gmail.com\u0022);\n    mail.To.Add(\u0022somebody@domain.com\u0022);\n    mail.Subject = \u0022Hello World\u0022;\n    mail.Body = \u0022\u003Ch1\u003EHello\u003C/h1\u003E\u0022;\n    mail.IsBodyHtml = true;\n    mail.Attachments.Add(new Attachment(\u0022C:\\\\file.zip\u0022));\n\n    using (SmtpClient smtp = new SmtpClient(\u0022smtp.gmail.com\u0022, 587))\n    {\n        smtp.Credentials = new NetworkCredential(\u0022email@gmail.com\u0022, \u0022password\u0022);\n        smtp.EnableSsl = true;\n        smtp.Send(mail);\n    }\n}\n\n    ","\nFor me to get it to work, i had to enable my gmail account making it possible for other apps to gain access. This is done with the \u0022enable less secure apps\u0022 and also using this link:\nhttps://accounts.google.com/b/0/DisplayUnlockCaptcha\n    ","\nHere is my version: \u0022Send Email In C # Using Gmail\u0022.\n\nusing System;\nusing System.Net;\nusing System.Net.Mail;\n\nnamespace SendMailViaGmail\n{\n   class Program\n   {\n   static void Main(string[] args)\n   {\n\n      //Specify senders gmail address\n      string SendersAddress = \u0022Sendersaddress@gmail.com\u0022;\n      //Specify The Address You want to sent Email To(can be any valid email address)\n      string ReceiversAddress = \u0022ReceiversAddress@yahoo.com\u0022;\n      //Specify The password of gmial account u are using to sent mail(pw of sender@gmail.com)\n      const string SendersPassword = \u0022Password\u0022;\n      //Write the subject of ur mail\n      const string subject = \u0022Testing\u0022;\n      //Write the contents of your mail\n      const string body = \u0022Hi This Is my Mail From Gmail\u0022;\n\n      try\n      {\n        //we will use Smtp client which allows us to send email using SMTP Protocol\n        //i have specified the properties of SmtpClient smtp within{}\n        //gmails smtp server name is smtp.gmail.com and port number is 587\n        SmtpClient smtp = new SmtpClient\n        {\n           Host = \u0022smtp.gmail.com\u0022,\n           Port = 587,\n           EnableSsl = true,\n           DeliveryMethod = SmtpDeliveryMethod.Network,\n           Credentials    = new NetworkCredential(SendersAddress, SendersPassword),\n           Timeout = 3000\n        };\n\n        //MailMessage represents a mail message\n        //it is 4 parameters(From,TO,subject,body)\n\n        MailMessage message = new MailMessage(SendersAddress, ReceiversAddress, subject, body);\n        /*WE use smtp sever we specified above to send the message(MailMessage message)*/\n\n        smtp.Send(message);\n        Console.WriteLine(\u0022Message Sent Successfully\u0022);\n        Console.ReadKey();\n     }\n\n     catch (Exception ex)\n     {\n        Console.WriteLine(ex.Message);\n        Console.ReadKey();\n     }\n    }\n   }\n }\n\n    ","\nI hope this code will work fine. You can have a try.\n\n// Include this.                \nusing System.Net.Mail;\n\nstring fromAddress = \u0022xyz@gmail.com\u0022;\nstring mailPassword = \u0022*****\u0022;       // Mail id password from where mail will be sent.\nstring messageBody = \u0022Write the body of the message here.\u0022;\n\n\n// Create smtp connection.\nSmtpClient client = new SmtpClient();\nclient.Port = 587;//outgoing port for the mail.\nclient.Host = \u0022smtp.gmail.com\u0022;\nclient.EnableSsl = true;\nclient.Timeout = 10000;\nclient.DeliveryMethod = SmtpDeliveryMethod.Network;\nclient.UseDefaultCredentials = false;\nclient.Credentials = new System.Net.NetworkCredential(fromAddress, mailPassword);\n\n\n// Fill the mail form.\nvar send_mail = new MailMessage();\n\nsend_mail.IsBodyHtml = true;\n//address from where mail will be sent.\nsend_mail.From = new MailAddress(\u0022from@gmail.com\u0022);\n//address to which mail will be sent.           \nsend_mail.To.Add(new MailAddress(\u0022to@example.com\u0022);\n//subject of the mail.\nsend_mail.Subject = \u0022put any subject here\u0022;\n\nsend_mail.Body = messageBody;\nclient.Send(send_mail);\n\n    ","\nSource : Send email in ASP.NET C#\n\nBelow is a sample working code for sending in a mail using C#, in the below example I am using google\u2019s smtp server. \n\nThe code is pretty self explanatory, replace email and password with your email and password values.\n\npublic void SendEmail(string address, string subject, string message)\n{\n    string email = \u0022yrshaikh.mail@gmail.com\u0022;\n    string password = \u0022put-your-GMAIL-password-here\u0022;\n\n    var loginInfo = new NetworkCredential(email, password);\n    var msg = new MailMessage();\n    var smtpClient = new SmtpClient(\u0022smtp.gmail.com\u0022, 587);\n\n    msg.From = new MailAddress(email);\n    msg.To.Add(new MailAddress(address));\n    msg.Subject = subject;\n    msg.Body = message;\n    msg.IsBodyHtml = true;\n\n    smtpClient.EnableSsl = true;\n    smtpClient.UseDefaultCredentials = false;\n    smtpClient.Credentials = loginInfo;\n    smtpClient.Send(msg);\n}\n\n    ","\nInclude this,\n\nusing System.Net.Mail;\n\n\nAnd then,\n\nMailMessage sendmsg = new MailMessage(SendersAddress, ReceiversAddress, subject, body); \nSmtpClient client = new SmtpClient(\u0022smtp.gmail.com\u0022);\n\nclient.Port = Convert.ToInt16(\u0022587\u0022);\nclient.Credentials = new System.Net.NetworkCredential(\u0022mail-id@gmail.com\u0022,\u0022password\u0022);\nclient.EnableSsl = true;\n\nclient.Send(sendmsg);\n\n    ","\nIf you want to send background email, then please do the below\n\n public void SendEmail(string address, string subject, string message)\n {\n Thread threadSendMails;\n threadSendMails = new Thread(delegate()\n    {\n\n      //Place your Code here \n\n     });\n  threadSendMails.IsBackground = true;\n  threadSendMails.Start();\n}\n\n\nand add namespace\n\nusing System.Threading;\n\n    ","\nTry This,\n\n    private void button1_Click(object sender, EventArgs e)\n    {\n        try\n        {\n            MailMessage mail = new MailMessage();\n            SmtpClient SmtpServer = new SmtpClient(\u0022smtp.gmail.com\u0022);\n\n            mail.From = new MailAddress(\u0022your_email_address@gmail.com\u0022);\n            mail.To.Add(\u0022to_address\u0022);\n            mail.Subject = \u0022Test Mail\u0022;\n            mail.Body = \u0022This is for testing SMTP mail from GMAIL\u0022;\n\n            SmtpServer.Port = 587;\n            SmtpServer.Credentials = new System.Net.NetworkCredential(\u0022username\u0022, \u0022password\u0022);\n            SmtpServer.EnableSsl = true;\n\n            SmtpServer.Send(mail);\n            MessageBox.Show(\u0022mail Send\u0022);\n        }\n        catch (Exception ex)\n        {\n            MessageBox.Show(ex.ToString());\n        }\n    }\n\n    ","\nTo avoid security issues in Gmail, you should generate an app password first from your Gmail settings and you can use this password instead of a real password to send an email even if you use two steps verification.\n    ","\nuse this way \n\nMailMessage sendmsg = new MailMessage(SendersAddress, ReceiversAddress, subject, body); \nSmtpClient client = new SmtpClient(\u0022smtp.gmail.com\u0022);\n\nclient.Port = Convert.ToInt32(\u0022587\u0022);\nclient.EnableSsl = true;\nclient.Credentials = new System.Net.NetworkCredential(\u0022mail-id@gmail.com\u0022,\u0022MyPassWord\u0022);\nclient.Send(sendmsg);\n\n\nDon\u0027t forget this :\n\nusing System.Net;\nusing System.Net.Mail;\n\n    ","\nChanging sender on Gmail / Outlook.com email:\n\nTo prevent spoofing - Gmail/Outlook.com won\u0027t let you send from an arbitrary user account name.\n\nIf you have a limited number of senders you can follow these instructions and then set the From field to this address: Sending mail from a different address\n\nIf you are wanting to send from an arbitrary email address (such as a feedback form on website where the user enters their email and you don\u0027t want them emailing you directly) about the best you can do is this :\n\n        msg.ReplyToList.Add(new System.Net.Mail.MailAddress(email, friendlyName));\n\n\nThis would let you just hit \u0027reply\u0027 in your email account to reply to the fan of your band on a feedback page, but they wouldn\u0027t get your actual email which would likely lead to a tonne of spam.\n\nIf you\u0027re in a controlled environment this works great, but please note that I\u0027ve seen some email clients send to the from address even when reply-to is specified (I don\u0027t know which).\n    ","\nI had the same issue, but it was resolved by going to gmail\u0027s security settings and Allowing Less Secure apps.\nThe Code from Domenic \u0026 Donny works, but only if you enabled that setting\n\nIf you are signed in (to Google) you can follow this link and toggle \u0022Turn on\u0022 for \u0022Access for less secure apps\u0022\n    ","\nusing System;\nusing System.Net;\nusing System.Net.Mail;\n\nnamespace SendMailViaGmail\n{\n   class Program\n   {\n   static void Main(string[] args)\n   {\n\n      //Specify senders gmail address\n      string SendersAddress = \u0022Sendersaddress@gmail.com\u0022;\n      //Specify The Address You want to sent Email To(can be any valid email address)\n      string ReceiversAddress = \u0022ReceiversAddress@yahoo.com\u0022;\n      //Specify The password of gmial account u are using to sent mail(pw of sender@gmail.com)\n      const string SendersPassword = \u0022Password\u0022;\n      //Write the subject of ur mail\n      const string subject = \u0022Testing\u0022;\n      //Write the contents of your mail\n      const string body = \u0022Hi This Is my Mail From Gmail\u0022;\n\n      try\n      {\n        //we will use Smtp client which allows us to send email using SMTP Protocol\n        //i have specified the properties of SmtpClient smtp within{}\n        //gmails smtp server name is smtp.gmail.com and port number is 587\n        SmtpClient smtp = new SmtpClient\n        {\n           Host = \u0022smtp.gmail.com\u0022,\n           Port = 587,\n           EnableSsl = true,\n           DeliveryMethod = SmtpDeliveryMethod.Network,\n           Credentials = new NetworkCredential(SendersAddress, SendersPassword),\n           Timeout = 3000\n        };\n\n        //MailMessage represents a mail message\n        //it is 4 parameters(From,TO,subject,body)\n\n        MailMessage message = new MailMessage(SendersAddress, ReceiversAddress, subject, body);\n        /*WE use smtp sever we specified above to send the message(MailMessage message)*/\n\n        smtp.Send(message);\n        Console.WriteLine(\u0022Message Sent Successfully\u0022);\n        Console.ReadKey();\n     }\n     catch (Exception ex)\n     {\n        Console.WriteLine(ex.Message);\n        Console.ReadKey();\n     }\n}\n}\n}\n\n    ","\nHere is one method to send mail and getting credentials from web.config:\n\npublic static string SendEmail(string To, string Subject, string Msg, bool bodyHtml = false, bool test = false, Stream AttachmentStream = null, string AttachmentType = null, string AttachmentFileName = null)\n{\n    try\n    {\n        System.Net.Mail.MailMessage newMsg = new System.Net.Mail.MailMessage(System.Configuration.ConfigurationManager.AppSettings[\u0022mailCfg\u0022], To, Subject, Msg);\n        newMsg.BodyEncoding = System.Text.Encoding.UTF8;\n        newMsg.HeadersEncoding = System.Text.Encoding.UTF8;\n        newMsg.SubjectEncoding = System.Text.Encoding.UTF8;\n\n        System.Net.Mail.SmtpClient smtpClient = new System.Net.Mail.SmtpClient();\n        if (AttachmentStream != null \u0026\u0026 AttachmentType != null \u0026\u0026 AttachmentFileName != null)\n        {\n            System.Net.Mail.Attachment attachment = new System.Net.Mail.Attachment(AttachmentStream, AttachmentFileName);\n            System.Net.Mime.ContentDisposition disposition = attachment.ContentDisposition;\n            disposition.FileName = AttachmentFileName;\n            disposition.DispositionType = System.Net.Mime.DispositionTypeNames.Attachment;\n\n            newMsg.Attachments.Add(attachment);\n        }\n        if (test)\n        {\n            smtpClient.PickupDirectoryLocation = \u0022C:\\\\TestEmail\u0022;\n            smtpClient.DeliveryMethod = System.Net.Mail.SmtpDeliveryMethod.SpecifiedPickupDirectory;\n        }\n        else\n        {\n            //smtpClient.EnableSsl = true;\n        }\n\n        newMsg.IsBodyHtml = bodyHtml;\n        smtpClient.Send(newMsg);\n        return SENT_OK;\n    }\n    catch (Exception ex)\n    {\n\n        return \u0022Error: \u0022 \u002B ex.Message\n             \u002B \u0022\u003Cbr/\u003E\u003Cbr/\u003EInner Exception: \u0022\n             \u002B ex.InnerException;\n    }\n\n}\n\n\nAnd the corresponding section in web.config:\n\n\u003CappSettings\u003E\n    \u003Cadd key=\u0022mailCfg\u0022 value=\u0022yourmail@example.com\u0022/\u003E\n\u003C/appSettings\u003E\n\u003Csystem.net\u003E\n  \u003CmailSettings\u003E\n    \u003Csmtp deliveryMethod=\u0022Network\u0022 from=\u0022yourmail@example.com\u0022\u003E\n      \u003Cnetwork defaultCredentials=\u0022false\u0022 host=\u0022mail.exapmple.com\u0022 userName=\u0022yourmail@example.com\u0022 password=\u0022your_password\u0022 port=\u002225\u0022/\u003E\n    \u003C/smtp\u003E\n  \u003C/mailSettings\u003E\n\u003C/system.net\u003E\n\n    ","\nTry this one \n\npublic static bool Send(string receiverEmail, string ReceiverName, string subject, string body)\n{\n        MailMessage mailMessage = new MailMessage();\n        MailAddress mailAddress = new MailAddress(\u0022abc@gmail.com\u0022, \u0022Sender Name\u0022); // abc@gmail.com = input Sender Email Address \n        mailMessage.From = mailAddress;\n        mailAddress = new MailAddress(receiverEmail, ReceiverName);\n        mailMessage.To.Add(mailAddress);\n        mailMessage.Subject = subject;\n        mailMessage.Body = body;\n        mailMessage.IsBodyHtml = true;\n\n        SmtpClient mailSender = new SmtpClient(\u0022smtp.gmail.com\u0022, 587)\n        {\n            EnableSsl = true,\n            UseDefaultCredentials = false,\n            DeliveryMethod = System.Net.Mail.SmtpDeliveryMethod.Network,\n            Credentials = new NetworkCredential(\u0022abc@gmail.com\u0022, \u0022pass\u0022)   // abc@gmail.com = input sender email address  \n                                                                           //pass = sender email password\n        };\n\n        try\n        {\n            mailSender.Send(mailMessage);\n            return true;\n        }\n        catch (SmtpFailedRecipientException ex)\n        { \n          // Write the exception to a Log file.\n        }\n        catch (SmtpException ex)\n        { \n           // Write the exception to a Log file.\n        }\n        finally\n        {\n            mailSender = null;\n            mailMessage.Dispose();\n        }\n        return false;\n}\n\n    ","\nCopying from another answer, the above methods work but gmail always replaces the \u0022from\u0022 and \u0022reply to\u0022 email with the actual sending gmail account.  apparently there is a work around however:\n\nhttp://karmic-development.blogspot.in/2013/10/send-email-from-aspnet-using-gmail-as.html\n\n\u00223. In the Accounts Tab, Click on the link \u0022Add another email address you own\u0022 then verify it\u0022\n\nOr possibly this\n\nUpdate 3: Reader Derek Bennett says, \u0022The solution is to go into your gmail Settings:Accounts and \u0022Make default\u0022 an account other than your gmail account. This will cause gmail to re-write the From field with whatever the default account\u0027s email address is.\u0022\n    ","\nYou can try Mailkit. It gives you better and advance functionality for send mail. You can find more from this Here is an example \n\n    MimeMessage message = new MimeMessage();\n    message.From.Add(new MailboxAddress(\u0022FromName\u0022, \u0022YOU_FROM_ADDRESS@gmail.com\u0022));\n    message.To.Add(new MailboxAddress(\u0022ToName\u0022, \u0022YOU_TO_ADDRESS@gmail.com\u0022));\n    message.Subject = \u0022MyEmailSubject\u0022;\n\n    message.Body = new TextPart(\u0022plain\u0022)\n    {\n        Text = @\u0022MyEmailBodyOnlyTextPart\u0022\n    };\n\n    using (var client = new SmtpClient())\n    {\n        client.Connect(\u0022SERVER\u0022, 25); // 25 is port you can change accordingly\n\n        // Note: since we don\u0027t have an OAuth2 token, disable\n        // the XOAUTH2 authentication mechanism.\n        client.AuthenticationMechanisms.Remove(\u0022XOAUTH2\u0022);\n\n        // Note: only needed if the SMTP server requires authentication\n        client.Authenticate(\u0022YOUR_USER_NAME\u0022, \u0022YOUR_PASSWORD\u0022);\n\n        client.Send(message);\n        client.Disconnect(true);\n    }\n\n    ","\n\nIf your Google password doesn\u0027t work, you may need to create an app-specific password for Gmail on Google.\nhttps://support.google.com/accounts/answer/185833?hl=en\n    ","\n                \n                You can still get user not logged in errors if Google just suddenly decides you have sent too many in the past xx number of minutes.  You should always add a trySend, if it errors sleep a while, and then attempt again.\n                \n\u2013\u00A0Jason Short\n                Aug 26 \u002709 at 6:30\n            ","\n                \n                Interesting note: If you swap \u0027UseDefaultCredentials = false,\u0027 and \u0027Credentials = ...\u0027 it won\u0027t authenticate.\n                \n\u2013\u00A0Nathan Wheeler\n                Nov 17 \u002709 at 16:56\n            ","\n                \n                There are no problems with SPF using this method. Every email client can be configured to do exactly this. You just may get problems if you use your own server (i.e. something else than smtp.gmail.com) with something@gmail.com as sender. Btw: smtp.gmail.com automatically overwrites the sender address if it\u0027s not yours.\n                \n\u2013\u00A0Meinersbur\n                Mar 18 \u002710 at 18:39\n            ","\n                \n                I was having a hard time getting this working even with trying various tweaks.  As suggested on a related post, I found that it was actually my antivirus that was preventing emails from being successfully sent.  The antivirus in question is McAffee, and its \u0022Access Protection\u0022 has a \u0022Antivirus Standard Protection\u0022 category that has a \u0022Prevent mass mailing worms from sending email\u0022 rule.  Tweaking / disabling that rule got this code working for me!\n                \n\u2013\u00A0yourbuddypal\n                Aug 5 \u002712 at 17:02\n            ","\n                \n                I was getting the 5.5.1 Authentication Required error message until I realized I was testing with an account (my personal one) that had two factor authentication turned on.  Once I used an account that didn\u0027t have that, it worked fine.  I could also have generated a password for my application that I was testing from in my personal acct, but I didn\u0027t want to do that.\n                \n\u2013\u00A0Nick DeVore\n                Jun 17 \u002713 at 16:18\n            ","\n                \n                Interesting; it works on my machine (TM). But since this seems plausible, I\u0027ll add it to my answer.\n                \n\u2013\u00A0Domenic\n                Mar 16 \u002709 at 19:53\n            ","\n                \n                Hmm my guess is that SmtpDeliveryMethod.Network is the default, but maybe the default gets changed when running in IIS---was that what you were doing?\n                \n\u2013\u00A0Domenic\n                Mar 16 \u002709 at 19:55\n            ","\n                \n                I am using same code in Console application, it\u0027s through error \u0022Failure sending mail.\u0022\n                \n\u2013\u00A0Karthikeyan P\n                Aug 26 \u002715 at 15:02\n            ","\n                \n                This answer doesnt work. Please, look at the question stackoverflow.com/questions/34851484/\u2026\n                \n\u2013\u00A0user5515846\n                Jan 19 \u002716 at 15:22\n            ","\n                \n                This worked for me. And is also concerning. Not sure I want to turn that security off. May need to rethink...\n                \n\u2013\u00A0Sully\n                Apr 13 \u002716 at 12:41\n            ","\n                \n                From security point of view better to turn on 2-step Verification and then generate and use app password- see How to send an email in .Net according to new security policies?\n                \n\u2013\u00A0Michael Freidgeim\n                Jun 5 \u002716 at 12:57\n            ","\n                \n                @BCS Software, inmy program, the user insert any email which my program has to use it to send the message throught. So, how I can make the email user able to send the email even if the 2-factor authentication is turned on??\n                \n\u2013\u00A0Alaa\u0027\n                Jan 18 \u002718 at 13:44\n            ","\n                \n                This is the same setting you need to alter if you wanted to use a Microsoft Outlook client (on a desktop, mobile phone, etc) to send/receive emails through Google\u0027s GMail.\n                \n\u2013\u00A0Brett Rigby\n                Apr 23 \u002719 at 10:44\n            ","\n                \n                This did the trick for me. But make sure you put it back as quickly as you can :)\n                \n\u2013\u00A0Andrei Bazanov\n                Oct 6 at 9:10\n            ","\n                \n                This answer needs to go top.\n                \n\u2013\u00A0Cute Bear\n                Sep 6 at 20:26\n            ","\n                \n                While your article may in fact answer the question, it would be preferable to include the essential parts of the answer here, and provide the link for reference. Stack Overflow is only as useful as its questions and answers, and if your blog host goes down or your URLs get moved around, this answer becomes useless. Thanks!\n                \n\u2013\u00A0sarnold\n                Jan 16 \u002712 at 6:08\n                        \n                            \n                        \n            ","\n                \n                message send_mail = new MailMessage();                                           How is this line suppose to work? You can\u0027t implicitly convert  \u0027System.Net.Mail.MailMessage\u0027 to \u0027System.Windows.Forms.Message\u0027\n                \n\u2013\u00A0Debaprasad\n                Mar 18 \u002714 at 6:23\n                        \n                            \n                        \n            ","\n                \n                Instead of var ,I have used class name like NetworkCredential,MailMessage and SmtpClient.It work for me.\n                \n\u2013\u00A0Jui Test\n                Feb 28 \u002713 at 7:33\n            ","\n                \n                This worked for me. Besides all the good points which are valid and mentioned above as well such as gmail security stuff mentioned above. The reason it worked was that one needs to switch off the default credentials of the object first, which are probably null or left empty BEFORE they can set their SmtpClient credentials, not AFTER. Thanks Yasser Shaikh.\n                \n\u2013\u00A0Soliman Samir Soliman\n                Sep 15 at 3:21\n            "]},{"Id":"07ad0327-6c2a-4092-892d-d71204b24bec","QuestionId":151005,"Description":"How do I create an Excel (.XLS and .XLSX) file in C# without installing Microsoft Office?","Votes":1951,"Views":1141356,"Tags":["c#",".net","excel","file-io"],"Discussions":["\nYou can use a library called ExcelLibrary. It\u0027s a free, open source library posted on Google Code:\n\nExcelLibrary\n\nThis looks to be a port of the PHP ExcelWriter that you mentioned above. It will not write to the new .xlsx format yet, but they are working on adding that functionality in.\n\nIt\u0027s very simple, small and easy to use. Plus it has a DataSetHelper that lets you use DataSets and DataTables to easily work with Excel data.\n\nExcelLibrary seems to still only work for the older Excel format (.xls files), but may be adding support in the future for newer 2007/2010 formats. \n\nYou can also use EPPlus, which works only for Excel 2007/2010 format files (.xlsx files). There\u0027s also NPOI which works with both.\n\nThere are a few known bugs with each library as noted in the comments. In all, EPPlus seems to be the best choice as time goes on. It seems to be more actively updated and documented as well.\n\nAlso, as noted by @\u0410\u0440\u0442\u0451\u043C\u0426\u0430\u0440\u0438\u043E\u043D\u043E\u0432 below, EPPlus has support for Pivot Tables and ExcelLibrary may have some support (Pivot table issue in ExcelLibrary)\n\nHere are a couple links for quick reference:\nExcelLibrary - GNU Lesser GPL\nEPPlus - GNU (LGPL) - No longer maintained\nEPPlus 5 - Polyform Noncommercial - Starting May 2020\nNPOI - Apache License\n\nHere some example code for ExcelLibrary:\n\nHere is an example taking data from a database and creating a workbook from it. Note that the ExcelLibrary code is the single line at the bottom:\n\n//Create the data set and table\nDataSet ds = new DataSet(\u0022New_DataSet\u0022);\nDataTable dt = new DataTable(\u0022New_DataTable\u0022);\n\n//Set the locale for each\nds.Locale = System.Threading.Thread.CurrentThread.CurrentCulture;\ndt.Locale = System.Threading.Thread.CurrentThread.CurrentCulture;\n\n//Open a DB connection (in this example with OleDB)\nOleDbConnection con = new OleDbConnection(dbConnectionString);\ncon.Open();\n\n//Create a query and fill the data table with the data from the DB\nstring sql = \u0022SELECT Whatever FROM MyDBTable;\u0022;\nOleDbCommand cmd = new OleDbCommand(sql, con);\nOleDbDataAdapter adptr = new OleDbDataAdapter();\n\nadptr.SelectCommand = cmd;\nadptr.Fill(dt);\ncon.Close();\n\n//Add the table to the data set\nds.Tables.Add(dt);\n\n//Here\u0027s the easy part. Create the Excel worksheet from the data set\nExcelLibrary.DataSetHelper.CreateWorkbook(\u0022MyExcelFile.xls\u0022, ds);\n\n\nCreating the Excel file is as easy as that. You can also manually create Excel files, but the above functionality is what really impressed me.\n    ","\nIf you are happy with the xlsx format, try my GitHub project, EPPlus. It started with the source from ExcelPackage, but today it\u0027s a total rewrite.\nIt supports ranges, cell styling, charts, shapes, pictures, named ranges, AutoFilter and a lot of other stuff.\n    ","\nAnd what about using Open XML SDK 2.0 for Microsoft Office?\n\nA few benefits:\n\n\nDoesn\u0027t require Office installed\nMade by Microsoft = decent MSDN documentation\nJust one .Net dll to use in project\nSDK comes with many tools like diff, validator, etc\n\n\nLinks:\n\n\nGithub\nMain MSDN Landing\n\u0022How Do I...\u0022 starter page\nblogs.MSDN brian_jones announcing SDK\nblogs.MSDN brian_jones describing SDK handling large files without crashing (unlike DOM method)\n\n    ","\nI\u0027ve used with success the following open source projects:\n\n\nExcelPackage for OOXML formats (Office 2007)\nNPOI for .XLS format (Office 2003). NPOI 2.0 (Beta) also supports XLSX.\n\n\nTake a look at my blog posts:\n\nCreating Excel spreadsheets .XLS and .XLSX in C#\n\nNPOI with Excel Table and dynamic Chart\n    ","\nYou can use OLEDB to create and manipulate Excel files. Check this: Reading and Writing Excel using OLEDB. \n\nTypical example:\n\nusing (OleDbConnection conn = new OleDbConnection(\u0022Provider=Microsoft.Jet.OLEDB.4.0;Data Source=C:\\\\temp\\\\test.xls;Extended Properties=\u0027Excel 8.0;HDR=Yes\u0027\u0022))\n{\n  conn.Open();\n  OleDbCommand cmd = new OleDbCommand(\u0022CREATE TABLE [Sheet1] ([Column1] string, [Column2] string)\u0022, conn);\n  cmd.ExecuteNonQuery();\n}\n\n\nEDIT - Some more links:\n\n\nHey, Scripting Guy! How Can I Read from Excel Without Using Excel?\nHow To Use ADO.NET to Retrieve and Modify Records in an Excel Workbook With Visual Basic .NET\nReading and Writing Excel Spreadsheets Using ADO.NET C# DbProviderFactory\n\n    ","\nThe commercial solution, SpreadsheetGear for .NET will do it.\n\nYou can see live ASP.NET (C# and VB) samples here and download an evaluation version here.\n\nDisclaimer: I own SpreadsheetGear LLC\n    ","\nA few options I have used:\n\nIf XLSX is a must: ExcelPackage is a good start but died off when the developer quit working on it. ExML picked up from there and added a few features. ExML isn\u0027t a bad option, I\u0027m still using it in a couple of production websites.\n\nFor all of my new projects, though, I\u0027m using NPOI, the .NET port of Apache POI. \nNPOI 2.0 (Alpha) also supports XLSX.\n    ","\nAn extremely lightweight option may be to use HTML tables.  Just create head, body, and table tags in a file, and save it as a file with an .xls extension.  There are Microsoft specific attributes that you can use to style the output, including formulas.\n\nI realize that you may not be coding this in a web application, but here is an example of the composition of an Excel file via an HTML table.  This technique could be used if you were coding a console app, desktop app, or service.\n    ","\nIf you\u0027re creating Excel 2007/2010 files give this open source project a try: https://github.com/closedxml/closedxml\n\n\n  It provides an object oriented way to manipulate the files (similar to\n  VBA) without dealing with the hassles of XML Documents. It can be used\n  by any .NET language like C# and Visual Basic (VB).\n  \n  ClosedXML allows you to create Excel 2007/2010 files without the Excel\n  application. The typical example is creating Excel reports on a web\n  server:\n\nvar workbook = new XLWorkbook();\nvar worksheet = workbook.Worksheets.Add(\u0022Sample Sheet\u0022);\nworksheet.Cell(\u0022A1\u0022).Value = \u0022Hello World!\u0022;\nworkbook.SaveAs(\u0022HelloWorld.xlsx\u0022);\n\n\n    ","\nYou can use ExcelXmlWriter.\n\nIt works fine.\n    ","\nYou actually might want to check out the interop classes available in C# (e.g. Microsoft.Office.Interop.Excel. You say no OLE (which this isn\u0027t), but the interop classes are very easy to use. Check out the C# Documentation here (Interop for Excel starts on page 1072 of the C# PDF).\n\nYou might be impressed if you haven\u0027t tried them.\n\nPlease be warned of Microsoft\u0027s stance on this:\n\n\n  Microsoft does not currently recommend, and does not support,\n  Automation of Microsoft Office applications from any unattended,\n  non-interactive client application or component (including ASP,\n  ASP.NET, DCOM, and NT Services), because Office may exhibit unstable\n  behavior and/or deadlock when Office is run in this environment.\n\n    ","\nHere\u0027s a completely free C# library, which lets you export from a DataSet, DataTable or List\u003C\u003E into a genuine Excel 2007 .xlsx file, using the OpenXML libraries:\n\nhttp://mikesknowledgebase.com/pages/CSharp/ExportToExcel.htm\n\nFull source code is provided - free of charge - along with instructions, and a demo application.\n\nAfter adding this class to your application, you can export your DataSet to Excel in just one line of code:\n\nCreateExcelFile.CreateExcelDocument(myDataSet, \u0022C:\\\\Sample.xlsx\u0022);\n\n\nIt doesn\u0027t get much simpler than that...\n\nAnd it doesn\u0027t even require Excel to be present on your server.\n    ","\nYou could consider creating your files using the XML Spreadsheet 2003 format. This is a simple XML format using a well documented schema.\n    ","\nYou may want to take a look at GemBox.Spreadsheet.\n\nThey have a free version with all features but limited to 150 rows per sheet and 5 sheets per workbook, if that falls within your needs.\n\nI haven\u0027t had need to use it myself yet, but does look interesting.\n    ","\nSyncfusion Essential XlsIO can do this. It has no dependency on Microsoft office and also has specific support for different platforms.\n\n\nASP.NET\nASP.NET MVC\nUWP\nXamarin\nWPF and Windows Forms\nWindows Service and batch based operations\n\n\nCode sample:\n\n//Creates a new instance for ExcelEngine.\nExcelEngine excelEngine = new ExcelEngine();\n//Loads or open an existing workbook through Open method of IWorkbooks\nIWorkbook workbook = excelEngine.Excel.Workbooks.Open(fileName);\n//To-Do some manipulation|\n//To-Do some manipulation\n//Set the version of the workbook.\nworkbook.Version = ExcelVersion.Excel2013;\n//Save the workbook in file system as xlsx format\nworkbook.SaveAs(outputFileName);\n\n\nThe whole suite of controls is available for free through the community license program if you qualify (less than 1 million USD in revenue). Note: I work for Syncfusion.\n    ","\nWell,\n\nyou can also use a third party library like Aspose.\n\nThis library has the benefit that it does not require Excel to be installed on your machine which would be ideal in your case.\n    ","\nOpenXML is also a good alternative that helps avoid installing MS Excel on Server.The Open XML SDK 2.0 provided by Microsoft simplifies the task of manipulating Open XML packages and the underlying Open XML schema elements within a package. The Open XML Application Programming Interface (API) encapsulates many common tasks that developers perform on Open XML packages.\n\nCheck this out OpenXML: Alternative that helps avoid installing MS Excel on Server\n    ","\nThe various Office 2003 XML libraries avaliable work pretty well for smaller excel files. However, I find the sheer size of a large workbook saved in the XML format to be a problem. For example, a workbook I work with that would be 40MB in the new (and admittedly more tightly packed) XLSX format becomes a 360MB XML file.\n\nAs far as my research has taken me, there are two commercial packages that allow output to the older binary file formats. They are:\n\n\nGembox\nComponentOne Excel\n\n\nNeither are cheap (500USD and 800USD respectively, I think). but both work independant of Excel itself.\n\nWhat I would be curious about is the Excel output module for the likes of OpenOffice.org. I wonder if they can be ported from Java to .Net.\n    ","\nI agree about generating XML Spreadsheets, here\u0027s an example on how to do it for C# 3 (everyone just blogs about it in VB 9 :P) http://www.aaron-powell.com/linq-to-xml-to-excel\n    ","\nI\u0027ve just recently used FlexCel.NET and found it to be an excellent library! I don\u0027t say that about too many software products. No point in giving the whole sales pitch here, you can read all the features on their website.\n\nIt is a commercial product, but you get the full source if you buy it. So I suppose you could compile it into your assembly if you really wanted to. Otherwise it\u0027s just one extra assembly to xcopy - no configuration or installation or anything like that.\n\nI don\u0027t think you\u0027ll find any way to do this without third-party libraries as .NET framework, obviously, does not have built in support for it and OLE Automation is just a whole world of pain.\n    ","\nI have written a simple code to export dataset to excel without using excel object by using System.IO.StreamWriter.\n\nBelow is the code which will read all tables from dataset and write them to sheets one by one. I took help from this article.\n\npublic static void exportToExcel(DataSet source, string fileName)\n{\n        const string endExcelXML = \u0022\u003C/Workbook\u003E\u0022;\n        const string startExcelXML = \u0022\u003Cxml version\u003E\\r\\n\u003CWorkbook \u0022 \u002B\n                 \u0022xmlns=\\\u0022urn:schemas-microsoft-com:office:spreadsheet\\\u0022\\r\\n\u0022 \u002B\n                 \u0022 xmlns:o=\\\u0022urn:schemas-microsoft-com:office:office\\\u0022\\r\\n \u0022 \u002B\n                 \u0022xmlns:x=\\\u0022urn:schemas-    microsoft-com:office:\u0022 \u002B\n                 \u0022excel\\\u0022\\r\\n xmlns:ss=\\\u0022urn:schemas-microsoft-com:\u0022 \u002B\n                 \u0022office:spreadsheet\\\u0022\u003E\\r\\n \u003CStyles\u003E\\r\\n \u0022 \u002B\n                 \u0022\u003CStyle ss:ID=\\\u0022Default\\\u0022 ss:Name=\\\u0022Normal\\\u0022\u003E\\r\\n \u0022 \u002B\n                 \u0022\u003CAlignment ss:Vertical=\\\u0022Bottom\\\u0022/\u003E\\r\\n \u003CBorders/\u003E\u0022 \u002B\n                 \u0022\\r\\n \u003CFont/\u003E\\r\\n \u003CInterior/\u003E\\r\\n \u003CNumberFormat/\u003E\u0022 \u002B\n                 \u0022\\r\\n \u003CProtection/\u003E\\r\\n \u003C/Style\u003E\\r\\n \u0022 \u002B\n                 \u0022\u003CStyle ss:ID=\\\u0022BoldColumn\\\u0022\u003E\\r\\n \u003CFont \u0022 \u002B\n                 \u0022x:Family=\\\u0022Swiss\\\u0022 ss:Bold=\\\u00221\\\u0022/\u003E\\r\\n \u003C/Style\u003E\\r\\n \u0022 \u002B\n                 \u0022\u003CStyle     ss:ID=\\\u0022StringLiteral\\\u0022\u003E\\r\\n \u003CNumberFormat\u0022 \u002B\n                 \u0022 ss:Format=\\\u0022@\\\u0022/\u003E\\r\\n \u003C/Style\u003E\\r\\n \u003CStyle \u0022 \u002B\n                 \u0022ss:ID=\\\u0022Decimal\\\u0022\u003E\\r\\n \u003CNumberFormat \u0022 \u002B\n                 \u0022ss:Format=\\\u00220.0000\\\u0022/\u003E\\r\\n \u003C/Style\u003E\\r\\n \u0022 \u002B\n                 \u0022\u003CStyle ss:ID=\\\u0022Integer\\\u0022\u003E\\r\\n \u003CNumberFormat \u0022 \u002B\n                 \u0022ss:Format=\\\u00220\\\u0022/\u003E\\r\\n \u003C/Style\u003E\\r\\n \u003CStyle \u0022 \u002B\n                 \u0022ss:ID=\\\u0022DateLiteral\\\u0022\u003E\\r\\n \u003CNumberFormat \u0022 \u002B\n                 \u0022ss:Format=\\\u0022mm/dd/yyyy;@\\\u0022/\u003E\\r\\n \u003C/Style\u003E\\r\\n \u0022 \u002B\n                 \u0022\u003C/Styles\u003E\\r\\n \u0022;\n        System.IO.StreamWriter excelDoc = null;\n        excelDoc = new System.IO.StreamWriter(fileName);\n\n        int sheetCount = 1;\n        excelDoc.Write(startExcelXML);\n        foreach (DataTable table in source.Tables)\n        {\n            int rowCount = 0;\n            excelDoc.Write(\u0022\u003CWorksheet ss:Name=\\\u0022\u0022 \u002B table.TableName \u002B \u0022\\\u0022\u003E\u0022);\n            excelDoc.Write(\u0022\u003CTable\u003E\u0022);\n            excelDoc.Write(\u0022\u003CRow\u003E\u0022);\n            for (int x = 0; x \u003C table.Columns.Count; x\u002B\u002B)\n            {\n                excelDoc.Write(\u0022\u003CCell ss:StyleID=\\\u0022BoldColumn\\\u0022\u003E\u003CData ss:Type=\\\u0022String\\\u0022\u003E\u0022);\n                excelDoc.Write(table.Columns[x].ColumnName);\n                excelDoc.Write(\u0022\u003C/Data\u003E\u003C/Cell\u003E\u0022);\n            }\n            excelDoc.Write(\u0022\u003C/Row\u003E\u0022);\n            foreach (DataRow x in table.Rows)\n            {\n                rowCount\u002B\u002B;\n                //if the number of rows is \u003E 64000 create a new page to continue output\n                if (rowCount == 64000)\n                {\n                    rowCount = 0;\n                    sheetCount\u002B\u002B;\n                    excelDoc.Write(\u0022\u003C/Table\u003E\u0022);\n                    excelDoc.Write(\u0022 \u003C/Worksheet\u003E\u0022);\n                    excelDoc.Write(\u0022\u003CWorksheet ss:Name=\\\u0022\u0022 \u002B table.TableName \u002B \u0022\\\u0022\u003E\u0022);\n                    excelDoc.Write(\u0022\u003CTable\u003E\u0022);\n                }\n                excelDoc.Write(\u0022\u003CRow\u003E\u0022); //ID=\u0022 \u002B rowCount \u002B \u0022\n                for (int y = 0; y \u003C table.Columns.Count; y\u002B\u002B)\n                {\n                    System.Type rowType;\n                    rowType = x[y].GetType();\n                    switch (rowType.ToString())\n                    {\n                        case \u0022System.String\u0022:\n                            string XMLstring = x[y].ToString();\n                            XMLstring = XMLstring.Trim();\n                            XMLstring = XMLstring.Replace(\u0022\u0026\u0022, \u0022\u0026\u0022);\n                            XMLstring = XMLstring.Replace(\u0022\u003E\u0022, \u0022\u003E\u0022);\n                            XMLstring = XMLstring.Replace(\u0022\u003C\u0022, \u0022\u003C\u0022);\n                            excelDoc.Write(\u0022\u003CCell ss:StyleID=\\\u0022StringLiteral\\\u0022\u003E\u0022 \u002B\n                                           \u0022\u003CData ss:Type=\\\u0022String\\\u0022\u003E\u0022);\n                            excelDoc.Write(XMLstring);\n                            excelDoc.Write(\u0022\u003C/Data\u003E\u003C/Cell\u003E\u0022);\n                            break;\n                        case \u0022System.DateTime\u0022:\n                            //Excel has a specific Date Format of YYYY-MM-DD followed by  \n                            //the letter \u0027T\u0027 then hh:mm:sss.lll Example 2005-01-31T24:01:21.000\n                            //The Following Code puts the date stored in XMLDate \n                            //to the format above\n                            DateTime XMLDate = (DateTime)x[y];\n                            string XMLDatetoString = \u0022\u0022; //Excel Converted Date\n                            XMLDatetoString = XMLDate.Year.ToString() \u002B\n                                 \u0022-\u0022 \u002B\n                                 (XMLDate.Month \u003C 10 ? \u00220\u0022 \u002B\n                                 XMLDate.Month.ToString() : XMLDate.Month.ToString()) \u002B\n                                 \u0022-\u0022 \u002B\n                                 (XMLDate.Day \u003C 10 ? \u00220\u0022 \u002B\n                                 XMLDate.Day.ToString() : XMLDate.Day.ToString()) \u002B\n                                 \u0022T\u0022 \u002B\n                                 (XMLDate.Hour \u003C 10 ? \u00220\u0022 \u002B\n                                 XMLDate.Hour.ToString() : XMLDate.Hour.ToString()) \u002B\n                                 \u0022:\u0022 \u002B\n                                 (XMLDate.Minute \u003C 10 ? \u00220\u0022 \u002B\n                                 XMLDate.Minute.ToString() : XMLDate.Minute.ToString()) \u002B\n                                 \u0022:\u0022 \u002B\n                                 (XMLDate.Second \u003C 10 ? \u00220\u0022 \u002B\n                                 XMLDate.Second.ToString() : XMLDate.Second.ToString()) \u002B\n                                 \u0022.000\u0022;\n                            excelDoc.Write(\u0022\u003CCell ss:StyleID=\\\u0022DateLiteral\\\u0022\u003E\u0022 \u002B\n                                         \u0022\u003CData ss:Type=\\\u0022DateTime\\\u0022\u003E\u0022);\n                            excelDoc.Write(XMLDatetoString);\n                            excelDoc.Write(\u0022\u003C/Data\u003E\u003C/Cell\u003E\u0022);\n                            break;\n                        case \u0022System.Boolean\u0022:\n                            excelDoc.Write(\u0022\u003CCell ss:StyleID=\\\u0022StringLiteral\\\u0022\u003E\u0022 \u002B\n                                        \u0022\u003CData ss:Type=\\\u0022String\\\u0022\u003E\u0022);\n                            excelDoc.Write(x[y].ToString());\n                            excelDoc.Write(\u0022\u003C/Data\u003E\u003C/Cell\u003E\u0022);\n                            break;\n                        case \u0022System.Int16\u0022:\n                        case \u0022System.Int32\u0022:\n                        case \u0022System.Int64\u0022:\n                        case \u0022System.Byte\u0022:\n                            excelDoc.Write(\u0022\u003CCell ss:StyleID=\\\u0022Integer\\\u0022\u003E\u0022 \u002B\n                                    \u0022\u003CData ss:Type=\\\u0022Number\\\u0022\u003E\u0022);\n                            excelDoc.Write(x[y].ToString());\n                            excelDoc.Write(\u0022\u003C/Data\u003E\u003C/Cell\u003E\u0022);\n                            break;\n                        case \u0022System.Decimal\u0022:\n                        case \u0022System.Double\u0022:\n                            excelDoc.Write(\u0022\u003CCell ss:StyleID=\\\u0022Decimal\\\u0022\u003E\u0022 \u002B\n                                  \u0022\u003CData ss:Type=\\\u0022Number\\\u0022\u003E\u0022);\n                            excelDoc.Write(x[y].ToString());\n                            excelDoc.Write(\u0022\u003C/Data\u003E\u003C/Cell\u003E\u0022);\n                            break;\n                        case \u0022System.DBNull\u0022:\n                            excelDoc.Write(\u0022\u003CCell ss:StyleID=\\\u0022StringLiteral\\\u0022\u003E\u0022 \u002B\n                                  \u0022\u003CData ss:Type=\\\u0022String\\\u0022\u003E\u0022);\n                            excelDoc.Write(\u0022\u0022);\n                            excelDoc.Write(\u0022\u003C/Data\u003E\u003C/Cell\u003E\u0022);\n                            break;\n                        default:\n                            throw (new Exception(rowType.ToString() \u002B \u0022 not handled.\u0022));\n                    }\n                }\n                excelDoc.Write(\u0022\u003C/Row\u003E\u0022);\n            }\n            excelDoc.Write(\u0022\u003C/Table\u003E\u0022);\n            excelDoc.Write(\u0022 \u003C/Worksheet\u003E\u0022);\n            sheetCount\u002B\u002B;\n        }\n\n\n        excelDoc.Write(endExcelXML);\n        excelDoc.Close();\n    }\n\n    ","\nJust want to add another reference to a third party solution that directly addresses your issue:  http://www.officewriter.com\n\n(Disclaimer: I work for SoftArtisans, the company that makes OfficeWriter)\n    ","\nIKVM \u002B POI\n\nOr, you could use the Interop ...\n    ","\nHere\u0027s a way to do it with LINQ to XML, complete with sample code:\n\nQuickly Import and Export Excel Data with LINQ to XML\n\nIt\u0027s a little complex, since you have to import namespaces and so forth, but it does let you avoid any external dependencies.\n\n(Also, of course, it\u0027s VB .NET, not C#, but you can always isolate the VB .NET stuff in its own project to use XML Literals, and do everything else in C#.)\n    ","\nSome 3rd party component vendors like Infragistics or Syncfusion provide very good Excel export capabilities that do not require Microsoft Excel to be installed. \n\nSince these vendors also provide advanced UI grid components, these components are particularly handy if you want the style and layout of an excel export to mimic the current state of a grid in the user interface of your application.\n\nIf your export is intended to be executed server side with emphasis on the data to be exported and with no link to the UI, then I would go for one of the free open source options (e.g. ExcelLibrary). \n\nI have previously been involved with projects that attempted to use server side automation on the Microsoft Office suite. Based on this experience I would strongly recommend against that approach. \n    ","\npublic class GridViewExportUtil\n{\n    public static void Export(string fileName, GridView gv)\n    {\n        HttpContext.Current.Response.Clear();\n        HttpContext.Current.Response.AddHeader(\n            \u0022content-disposition\u0022, string.Format(\u0022attachment; filename={0}\u0022, fileName));\n        HttpContext.Current.Response.ContentType = \u0022application/ms-excel\u0022;\n\n        using (StringWriter sw = new StringWriter())\n        {\n            using (HtmlTextWriter htw = new HtmlTextWriter(sw))\n            {\n                //  Create a form to contain the grid\n                Table table = new Table();\n\n                //  add the header row to the table\n                if (gv.HeaderRow != null)\n                {\n                    GridViewExportUtil.PrepareControlForExport(gv.HeaderRow);\n                    table.Rows.Add(gv.HeaderRow);\n                }\n\n                //  add each of the data rows to the table\n                foreach (GridViewRow row in gv.Rows)\n                {\n                    GridViewExportUtil.PrepareControlForExport(row);\n                    table.Rows.Add(row);\n                }\n\n                //  add the footer row to the table\n                if (gv.FooterRow != null)\n                {\n                    GridViewExportUtil.PrepareControlForExport(gv.FooterRow);\n                    table.Rows.Add(gv.FooterRow);\n                }\n\n                //  render the table into the htmlwriter\n                table.RenderControl(htw);\n\n                //  render the htmlwriter into the response\n                HttpContext.Current.Response.Write(sw.ToString());\n                HttpContext.Current.Response.End();\n            }\n        }\n    }\n\n    /// \u003Csummary\u003E\n    /// Replace any of the contained controls with literals\n    /// \u003C/summary\u003E\n    /// \u003Cparam name=\u0022control\u0022\u003E\u003C/param\u003E\n    private static void PrepareControlForExport(Control control)\n    {\n        for (int i = 0; i \u003C control.Controls.Count; i\u002B\u002B)\n        {\n            Control current = control.Controls[i];\n            if (current is LinkButton)\n            {\n                control.Controls.Remove(current);\n                control.Controls.AddAt(i, new LiteralControl((current as LinkButton).Text));\n            }\n            else if (current is ImageButton)\n            {\n                control.Controls.Remove(current);\n                control.Controls.AddAt(i, new LiteralControl((current as ImageButton).AlternateText));\n            }\n            else if (current is HyperLink)\n            {\n                control.Controls.Remove(current);\n                control.Controls.AddAt(i, new LiteralControl((current as HyperLink).Text));\n            }\n            else if (current is DropDownList)\n            {\n                control.Controls.Remove(current);\n                control.Controls.AddAt(i, new LiteralControl((current as DropDownList).SelectedItem.Text));\n            }\n            else if (current is CheckBox)\n            {\n                control.Controls.Remove(current);\n                control.Controls.AddAt(i, new LiteralControl((current as CheckBox).Checked ? \u0022True\u0022 : \u0022False\u0022));\n            }\n\n            if (current.HasControls())\n            {\n                GridViewExportUtil.PrepareControlForExport(current);\n            }\n        }\n    }\n}\n\n\nHi this solution is to export your grid view to your excel file it might help you out\n    ","\nYou can create nicely formatted Excel files using this library:\nhttp://officehelper.codeplex.com/documentation\n\nSee below sample:\n\nusing (ExcelHelper helper = new ExcelHelper(TEMPLATE_FILE_NAME, GENERATED_FILE_NAME))\n{\n    helper.Direction = ExcelHelper.DirectionType.TOP_TO_DOWN;\n    helper.CurrentSheetName = \u0022Sheet1\u0022;\n    helper.CurrentPosition = new CellRef(\u0022C3\u0022);\n\n    //the template xlsx should contains the named range \u0022header\u0022; use the command \u0022insert\u0022/\u0022name\u0022.\n    helper.InsertRange(\u0022header\u0022);\n\n    //the template xlsx should contains the named range \u0022sample1\u0022;\n    //inside this range you should have cells with these values:\n    //\u003Cname\u003E , \u003Cvalue\u003E and \u003Ccomment\u003E, which will be replaced by the values from the getSample()\n    CellRangeTemplate sample1 = helper.CreateCellRangeTemplate(\u0022sample1\u0022, new List\u003Cstring\u003E {\u0022name\u0022, \u0022value\u0022, \u0022comment\u0022}); \n    helper.InsertRange(sample1, getSample());\n\n    //you could use here other named ranges to insert new cells and call InsertRange as many times you want, \n    //it will be copied one after another;\n    //even you can change direction or the current cell/sheet before you insert\n\n    //typically you put all your \u0022template ranges\u0022 (the names) on the same sheet and then you just delete it\n    helper.DeleteSheet(\u0022Sheet3\u0022);\n}        \n\n\nwhere sample look like this:\n\nprivate IEnumerable\u003CList\u003Cobject\u003E\u003E getSample()\n{\n    var random = new Random();\n\n    for (int loop = 0; loop \u003C 3000; loop\u002B\u002B)\n    {\n        yield return new List\u003Cobject\u003E {\u0022test\u0022, DateTime.Now.AddDays(random.NextDouble()*100 - 50), loop};\n    }\n}\n\n    ","\nThe simplest and fastest way to create an Excel file from C# is to use the Open XML Productivity Tool.  The Open XML Productivity Tool comes with the Open XML SDK installation.  The tool reverse engineers any Excel file into C# code.  The C# code can then be used to re-generate that file.\n\nAn overview of the process involved is:\n\n\nInstall the Open XML SDK with the tool.\nCreate an Excel file using the latest Excel client with desired look.  Name it DesiredLook.xlsx.\nWith the tool open DesiredLook.xlsx and click the Reflect Code button near the top.\n \nThe C# code for your file will be generated in the right pane of the tool.  Add this to your C# solution and generate files with that desired look.\n\n\nAs a bonus, this method works for any Word and PowerPoint files.  As the C# developer, you will then make changes to the code to fit your needs.\n\nI have developed a simple WPF app on github which will run on Windows for this purpose.  There is a placeholder class called GeneratedClass where you can paste the generated code.  If you go back one version of the file, it will generate an excel file like this:\n\n\n    ","\nSome useful Excel automation in C# , u can find from the following link.\n\nhttp://csharp.net-informations.com/excel/csharp-excel-tutorial.htm\n\nbolton.\n    ","\nLook at samples how to create Excel files.\n\nThere are examples in C# and VB.NET\n\nIt manages XSL XSLX and CSV Excel files.\n\n\n  http://www.devtriogroup.com/ExcelJetcell/Samples\n\n    ","\n                \n                ExcelLibrary has been superseded by the exceptional EPPlus - epplus.codeplex.com.  Jan updates it regularly.  Have been using it and it is one of the finest open source projects we\u0027ve worked with.\n                \n\u2013\u00A0Mark A\n                Nov 4 \u002710 at 0:11\n                        \n                            \n                        \n            ","\n                \n                It should be noted that ExcelLibrary has a lot of performance issues when dealing with large datasets(larger than 5000 rows with lots of columns). Currently doing a heavy modification of the code base at work so we can use it in a project.\n                \n\u2013\u00A0rossisdead\n                Oct 18 \u002711 at 23:17\n                        \n                            \n                        \n            ","\n                \n                EPPlus seems far less buggy than ExcelLibrary, BUT it is GPL and therefore only a solution for open source projects.\n                \n\u2013\u00A0Seth\n                Jan 26 \u002712 at 23:21\n            ","\n                \n                -1 If you\u0027re going to post sample code you might as well make sure it\u0027s correct. Use the Dispose method of this interface to explicitly release unmanaged resources in conjunction with the garbage collector. The consumer of an object can call this method when the object is no longer needed.\n                \n\u2013\u00A0ta.speot.is\n                Feb 22 \u002714 at 9:44\n            ","\n                \n                What about ClosedXML? I may prove to be useful in your projects.\n                \n\u2013\u00A0Amadeus S\u00E1nchez\n                Nov 30 \u002715 at 18:10\n            ","\n                \n                License is now LGPL, release notes here: epplus.codeplex.com/releases/view/79802\n                \n\u2013\u00A0Simon D\n                Feb 5 \u002712 at 12:30\n            ","\n                \n                The examples were helpful. I was able to change my code from using Microsoft interop library (horribly slow) to this library (version 4.x) in a couple hours. My benchmark writes a file with two tabs and about 750,000 cells. Using MS interop it took 13 minutes. Using EPPlus it took 10 seconds, a roughly 80x speedup. Very happy!\n                \n\u2013\u00A0Paul Chernoch\n                Feb 10 \u002715 at 18:55\n            ","\n                \n                For clarity in this thread, the LGPL allows the software to be linked to without the infective part of the GPL occuring. You only need to open source changes you make to ClosedXml or if you directly put the source code (as opposed to referencing the ClosedXml assemblies) inside of your application then you need to open source your application.\n                \n\u2013\u00A0Chris Marisic\n                Aug 12 \u002715 at 16:10\n            ","\n                \n                @Paul Chernoch:  We populate large Excel sheets with interop very quickly.  The secret is to do a bulk update.  Create a object [,] block, populate that, then write that matrix to Excel at one time:  excelWorksheet.get_Range(range).Value2 = block;\n                \n\u2013\u00A0Marc Meketon\n                Feb 15 \u002718 at 22:53\n            ","\n                \n                Looks like the licensing is moving from LGPL to Polyform Noncommercial 1.0.0 license\n                \n\u2013\u00A0Luke\n                Feb 21 at 6:48\n            ","\n                \n                Important to note that the DLL for this is just over 5 MB and limited to Office 2007 formats.  But certainly the easiest and fastest solution which works for me.\n                \n\u2013\u00A0Josh Brown\n                Sep 20 \u002711 at 13:03\n            ","\n                \n                Just a heads up that v2.5 is out and can be downloaded here.\n                \n\u2013\u00A0Snuffleupagus\n                Jan 4 \u002713 at 16:47\n            ","\n                \n                The SDK models the XML into classes, so that each XML tag is mapped to a tag, and then you have to build the class hierarchy (each instance has a collection of child instances/tags) correctly. This means you have to know the XML structure of an Excel file, which is very complicated. It\u0027s much easier to use a wrapper such as EPPlus, mentioned above, which simplifies things.\n                \n\u2013\u00A0Tsahi Asher\n                Dec 24 \u002714 at 16:27\n            ","\n                \n                A great sample of Microsoft Open XML SDK - Open XML Writer can be found at polymathprogrammer.com/2012/08/06/\u2026  Or see Stack Overflow solution   stackoverflow.com/questions/11370672/\u2026\n                \n\u2013\u00A0Greg\n                Feb 17 \u002717 at 17:51\n            ","\n                \n                I found Microsoft Open XML SDK\u0027s Open XML Writer to be great.  Using the solutions above, (Especially Vincent Tom\u0027s sample (Poly Math)), it\u0027s easy to build a writer that streams through big sets of data, and writes records in a manner similiar and not too much more complex to what you\u0027d do for CSV; but that you\u0027re instead writing xml.  Open XML is the mindset that Microsoft considers it\u0027s new Office formats in.  And you can always rename them from .xslx to .zip files if you feel like poking at their XML contents.\n                \n\u2013\u00A0Greg\n                Feb 17 \u002717 at 17:54\n                        \n                            \n                        \n            ","\n                \n                A note on NPOI - Row and Column references are zero-based. Does work well for populating an existing template.\n                \n\u2013\u00A0John M\n                Apr 30 \u002710 at 13:45\n            ","\n                \n                Can someone confirm if this works when running in x64?  I am pretty sure Jet only works if your app is compiled or running in 32-bit mode.\n                \n\u2013\u00A0Lamar\n                Sep 30 \u002708 at 1:45\n            ","\n                \n                I\u0027ve just tested this connection and it failed on a Windows Server 2008 R2 x64 RC, seems like one have to install the 2007 Office System Driver: Data Connectivity Components [microsoft.com/downloads/\u2026\n                \n\u2013\u00A0Chris Richner\n                Jun 16 \u002709 at 7:31\n            ","\n                \n                Be very careful with this -- it\u0027s a big ugly cludge (for example, sometimes it guesses a column type and discards all the data that does not fit).\n                \n\u2013\u00A0dbkk\n                Sep 29 \u002709 at 9:02\n            ","\n                \n                One should be very careful if using this method. I\u0027ve found it very flaky for data that isn\u0027t in a perfect format.\n                \n\u2013\u00A0Kenny Mann\n                Jun 9 \u002710 at 16:03\n            ","\n                \n                As a person who had to use OleDb in a big project, I say STAY AWAY FROM IT! It sometimes is not able to retrieve a cell value just because it couldn\u0027t understand the format. It doesn\u0027t have a delete operation. It works totally different and unpredictable even with a slightest provider change. I\u0027d say go for a proven commercial solution.\n                \n\u2013\u00A0Caner \u00D6nc\u00FC\n                Sep 13 \u002714 at 18:32\n            ","\n                \n                You have a great product but I think a lot of people here are expecting free solutions. That might explain the down votes.\n                \n\u2013\u00A0md1337\n                Feb 3 \u002711 at 18:43\n            ","\n                \n                Be careful with ExcelPackage if you need to support XLS. I had a hard time with it and eventually switched to ExcelLibrary.\n                \n\u2013\u00A0Jeremy\n                Sep 17 \u002710 at 13:55\n            ","\n                \n                Definitely true. ExcelPackage/ExML is only a good option if you need the XLSX support.\n                \n\u2013\u00A0Nate\n                Sep 21 \u002710 at 15:16\n                        \n                            \n                        \n            ","\n                \n                Note that ExcelPackage has a successor: EPPlus (epplus.codeplex.com) which supports XLSX. My only concern, compared to NPOI for example, is performance, e.g. when there is a lot of columns.\n                \n\u2013\u00A0Pragmateek\n                Nov 3 \u002713 at 19:00\n            ","\n                \n                It\u0027s so ad hoc but it works (not to mention excel issuing a warning on opening) and is so simple, it deserves to have a place as a solution. Though only for showing that you can export an excel file :))\n                \n\u2013\u00A0Luka Ramishvili\n                Jan 4 \u002712 at 7:23\n                        \n                            \n                        \n            ","\n                \n                This solution worked fine for me, just note you cannot use .xlsx extension\n                \n\u2013\u00A0Jill\n                Mar 30 \u002716 at 18:24\n            ","\n                \n                Some people at my organization can\u0027t open excel files made this way in Office 2010 and above.  Don\u0027t know what the problem is, but I had to roll my own OpenXML implementation. (see Sogger\u0027s answer)\n                \n\u2013\u00A0Kristen Hammack\n                Dec 8 \u002716 at 22:55\n                        \n                            \n                        \n            ","\n                \n                I tried using this in a project that builds pretty large Excel sheets. Excellent library, but extremely poor in performance. I just did a comparison for the project I\u0027m working on: ClosedXML (v 0.53.3) took 92,489 ms whereas EPPlus (v 2.9.03, for testing - we can\u0027t use because it\u0027s GPL) took 16,500 ms.\n                \n\u2013\u00A0Druid\n                Jun 8 \u002711 at 12:40\n            ","\n                \n                @Druid the license is LGPL assuming you don\u0027t modify the source code to ClosedXML it is free to use epplus.codeplex.com/license\n                \n\u2013\u00A0Chris Marisic\n                Aug 12 \u002715 at 16:08\n                        \n                            \n                        \n            ","\n                \n                But you have to make sure that you dispose of everything manually, otherwise you will leak memory\n                \n\u2013\u00A0MagicKat\n                Sep 29 \u002708 at 22:40\n            ","\n                \n                @Ricky B: Also, in my experience with the interop is that it does use excel.  Every time we used it, if Excel wasn\u0027t installed on the machine, we would get COM exceptions.\n                \n\u2013\u00A0MagicKat\n                Sep 29 \u002708 at 22:42\n            ","\n                \n                With the OLE, even with very careful disposals, it eventually leaks memory or crashes. This is argueably OK for attended applications/ workstations, but for servers is not recommended (MS has a KB stating this).  For our server, we just reboot it nightly. Again, that works OK.\n                \n\u2013\u00A0Jennifer Zouak\n                Mar 9 \u002710 at 21:54\n            ","\n                \n                @Geoffrey: ah OK you are going to make me work for it :) --\u003E  support.microsoft.com/kb/257757  Microsoft does not currently recommend, and does not support, Automation of Microsoft Office applications from any unattended, non-interactive client application...\n                \n\u2013\u00A0Jennifer Zouak\n                Mar 11 \u002710 at 17:49\n            ","\n                \n                I\u0027m coming to this discussion after struggling more than a week on interop, and unless your needs are very simple, this is not gonna work. The support for formatting your spreadsheet is abysmal, which is arguably the reason for generating an .xls file and not just a flat .csv file. For example, have you tried outputting more than 911 characters in a cell, or have you tried setting the width of merged cells in a consistent manner? I have, and I can\u0027t tell you how much I hate this crap now... Do yourself a favor and go with one of the free libraries mentioned on this discussion.\n                \n\u2013\u00A0md1337\n                Feb 3 \u002711 at 18:52\n                        \n                            \n                        \n            ","\n                \n                This seems a bit misleading, as you are asking for a donation to get all of the features.\n                \n\u2013\u00A0UrbanEsc\n                Jan 23 \u002717 at 15:33\n            ","\n                \n                That\u0027s partly true: The completely free version will generate a perfect .xlsx file for you, and all source code is provided.  If you donate $10 or more to one of those two charities (of which I receive absolutely nothing), then you get a \u0022better\u0022 version showing how to do formatting, dates, etc.   Given the cost of third-party products, I reckon donating $10 to a good cause instead is well worth it !\n                \n\u2013\u00A0Mike Gledhill\n                May 2 \u002717 at 14:15\n            ","\n                \n                To be more precise, you can use Aspose.Cells for .NET in order to create Excel (XLS, XLSX) files in your .NET application.\n                \n\u2013\u00A0Shahzad Latif\n                Aug 29 \u002711 at 11:55\n            ","\n                \n                Yes you can, if you don\u0027t mind paying a minimum license fee of $999.  Try the MikesKnowledgeBase library... which is $999 cheaper than this !!\n                \n\u2013\u00A0Mike Gledhill\n                Jan 5 \u002712 at 13:10\n            ","\n                \n                This one works on both .net and java,and is not expensive. SmartXLS  smartxls.com\n                \n\u2013\u00A0liya\n                Dec 3 \u002709 at 8:08\n            ","\n                \n                Like the article says though, that\u0027s XML that Excel will read rather than actually being an XLS file, which means that it might only work in Excel and not other programs that read spreadsheets. But it\u0027s probably better than the equivalent HTML table answers here!\n                \n\u2013\u00A0Rup\n                Jul 23 \u002715 at 9:39\n            ","\n                \n                Supports xlsx ? OpenXML ?\n                \n\u2013\u00A0Kiquenet\n                Feb 16 \u002717 at 14:52\n            ","\n                \n                No, this generates HTML marked as an Excel file rather than a true Excel file. Yes, Excel itself will open that OK but other programs that consume spreadsheets - including Microsoft\u0027s free Excel viewer, for example - won\u0027t accept it. You\u0027d do better to create a real Excel file using one of the libraries here.\n                \n\u2013\u00A0Rup\n                Apr 28 \u002711 at 11:46\n            ","\n                \n                You should also use System.Net.Mime.ContentDisposition to generate the content-disposition header text rather than a string append - that\u0027ll cope with filenames that contains spaces etc. correctly.\n                \n\u2013\u00A0Rup\n                Apr 28 \u002711 at 11:48\n            ","\n                \n                I haven\u0027t tried this Open XML SDK solution yet but Wow, I will definitely check it out. I\u0027ve worked with tools like this for many years and didn\u0027t know about this one. I\u0027ve published my own simple FOSS for converting files to XLSX with .NET: github.com/TonyGravagno/NebulaXConvert\n                \n\u2013\u00A0TonyG\n                Jul 26 \u002718 at 16:34\n            "]},{"Id":"51817e8a-4e65-41b2-8e12-ebdb2471f422","QuestionId":3142495,"Description":"Deserialize JSON into C# dynamic object?","Votes":1002,"Views":787977,"Tags":["c#",".net","json","serialization","dynamic"],"Discussions":["\nIf you are happy to have a dependency upon the System.Web.Helpers assembly, then you can use the Json class:\n\ndynamic data = Json.Decode(json);\n\n\nIt is included with the MVC framework as an additional download to the .NET 4 framework. Be sure to give Vlad an upvote if that\u0027s helpful! However if you cannot assume the client environment includes this DLL, then read on.\n\n\n\nAn alternative deserialisation approach is suggested here.  I modified the code slightly to fix a bug and suit my coding style.  All you need is this code and a reference to System.Web.Extensions from your project:\n\nusing System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.Collections.ObjectModel;\nusing System.Dynamic;\nusing System.Linq;\nusing System.Text;\nusing System.Web.Script.Serialization;\n\npublic sealed class DynamicJsonConverter : JavaScriptConverter\n{\n    public override object Deserialize(IDictionary\u003Cstring, object\u003E dictionary, Type type, JavaScriptSerializer serializer)\n    {\n        if (dictionary == null)\n            throw new ArgumentNullException(\u0022dictionary\u0022);\n\n        return type == typeof(object) ? new DynamicJsonObject(dictionary) : null;\n    }\n\n    public override IDictionary\u003Cstring, object\u003E Serialize(object obj, JavaScriptSerializer serializer)\n    {\n        throw new NotImplementedException();\n    }\n\n    public override IEnumerable\u003CType\u003E SupportedTypes\n    {\n        get { return new ReadOnlyCollection\u003CType\u003E(new List\u003CType\u003E(new[] { typeof(object) })); }\n    }\n\n    #region Nested type: DynamicJsonObject\n\n    private sealed class DynamicJsonObject : DynamicObject\n    {\n        private readonly IDictionary\u003Cstring, object\u003E _dictionary;\n\n        public DynamicJsonObject(IDictionary\u003Cstring, object\u003E dictionary)\n        {\n            if (dictionary == null)\n                throw new ArgumentNullException(\u0022dictionary\u0022);\n            _dictionary = dictionary;\n        }\n\n        public override string ToString()\n        {\n            var sb = new StringBuilder(\u0022{\u0022);\n            ToString(sb);\n            return sb.ToString();\n        }\n\n        private void ToString(StringBuilder sb)\n        {\n            var firstInDictionary = true;\n            foreach (var pair in _dictionary)\n            {\n                if (!firstInDictionary)\n                    sb.Append(\u0022,\u0022);\n                firstInDictionary = false;\n                var value = pair.Value;\n                var name = pair.Key;\n                if (value is string)\n                {\n                    sb.AppendFormat(\u0022{0}:\\\u0022{1}\\\u0022\u0022, name, value);\n                }\n                else if (value is IDictionary\u003Cstring, object\u003E)\n                {\n                    new DynamicJsonObject((IDictionary\u003Cstring, object\u003E)value).ToString(sb);\n                }\n                else if (value is ArrayList)\n                {\n                    sb.Append(name \u002B \u0022:[\u0022);\n                    var firstInArray = true;\n                    foreach (var arrayValue in (ArrayList)value)\n                    {\n                        if (!firstInArray)\n                            sb.Append(\u0022,\u0022);\n                        firstInArray = false;\n                        if (arrayValue is IDictionary\u003Cstring, object\u003E)\n                            new DynamicJsonObject((IDictionary\u003Cstring, object\u003E)arrayValue).ToString(sb);\n                        else if (arrayValue is string)\n                            sb.AppendFormat(\u0022\\\u0022{0}\\\u0022\u0022, arrayValue);\n                        else\n                            sb.AppendFormat(\u0022{0}\u0022, arrayValue);\n\n                    }\n                    sb.Append(\u0022]\u0022);\n                }\n                else\n                {\n                    sb.AppendFormat(\u0022{0}:{1}\u0022, name, value);\n                }\n            }\n            sb.Append(\u0022}\u0022);\n        }\n\n        public override bool TryGetMember(GetMemberBinder binder, out object result)\n        {\n            if (!_dictionary.TryGetValue(binder.Name, out result))\n            {\n                // return null to avoid exception.  caller can check for null this way...\n                result = null;\n                return true;\n            }\n\n            result = WrapResultObject(result);\n            return true;\n        }\n\n        public override bool TryGetIndex(GetIndexBinder binder, object[] indexes, out object result)\n        {\n            if (indexes.Length == 1 \u0026\u0026 indexes[0] != null)\n            {\n                if (!_dictionary.TryGetValue(indexes[0].ToString(), out result))\n                {\n                    // return null to avoid exception.  caller can check for null this way...\n                    result = null;\n                    return true;\n                }\n\n                result = WrapResultObject(result);\n                return true;\n            }\n\n            return base.TryGetIndex(binder, indexes, out result);\n        }\n\n        private static object WrapResultObject(object result)\n        {\n            var dictionary = result as IDictionary\u003Cstring, object\u003E;\n            if (dictionary != null)\n                return new DynamicJsonObject(dictionary);\n\n            var arrayList = result as ArrayList;\n            if (arrayList != null \u0026\u0026 arrayList.Count \u003E 0)\n            {\n                return arrayList[0] is IDictionary\u003Cstring, object\u003E \n                    ? new List\u003Cobject\u003E(arrayList.Cast\u003CIDictionary\u003Cstring, object\u003E\u003E().Select(x =\u003E new DynamicJsonObject(x))) \n                    : new List\u003Cobject\u003E(arrayList.Cast\u003Cobject\u003E());\n            }\n\n            return result;\n        }\n    }\n\n    #endregion\n}\n\n\nYou can use it like this:\n\nstring json = ...;\n\nvar serializer = new JavaScriptSerializer();\nserializer.RegisterConverters(new[] { new DynamicJsonConverter() });\n\ndynamic obj = serializer.Deserialize(json, typeof(object));\n\n\nSo, given a JSON string:\n\n{\n  \u0022Items\u0022:[\n    { \u0022Name\u0022:\u0022Apple\u0022, \u0022Price\u0022:12.3 },\n    { \u0022Name\u0022:\u0022Grape\u0022, \u0022Price\u0022:3.21 }\n  ],\n  \u0022Date\u0022:\u002221/11/2010\u0022\n}\n\n\nThe following code will work at runtime:\n\ndynamic data = serializer.Deserialize(json, typeof(object));\n\ndata.Date; // \u002221/11/2010\u0022\ndata.Items.Count; // 2\ndata.Items[0].Name; // \u0022Apple\u0022\ndata.Items[0].Price; // 12.3 (as a decimal)\ndata.Items[1].Name; // \u0022Grape\u0022\ndata.Items[1].Price; // 3.21 (as a decimal)\n\n    ","\nIt\u0027s pretty simple using Json.NET:\n\ndynamic stuff = JsonConvert.DeserializeObject(\u0022{ \u0027Name\u0027: \u0027Jon Smith\u0027, \u0027Address\u0027: { \u0027City\u0027: \u0027New York\u0027, \u0027State\u0027: \u0027NY\u0027 }, \u0027Age\u0027: 42 }\u0022);\n\nstring name = stuff.Name;\nstring address = stuff.Address.City;\n\n\nAlso using Newtonsoft.Json.Linq:\n\ndynamic stuff = JObject.Parse(\u0022{ \u0027Name\u0027: \u0027Jon Smith\u0027, \u0027Address\u0027: { \u0027City\u0027: \u0027New York\u0027, \u0027State\u0027: \u0027NY\u0027 }, \u0027Age\u0027: 42 }\u0022);\n\nstring name = stuff.Name;\nstring address = stuff.Address.City;\n\n\nDocumentation: Querying JSON with dynamic\n    ","\nYou can do this using System.Web.Helpers.Json - its Decode method returns a dynamic object which you can traverse as you like.\n\nIt\u0027s included in the System.Web.Helpers assembly (.NET 4.0).\n\nvar dynamicObject = Json.Decode(jsonString);\n\n    ","\n.NET 4.0 has a built-in library to do this:\n\nusing System.Web.Script.Serialization;\nJavaScriptSerializer jss = new JavaScriptSerializer();\nvar d = jss.Deserialize\u003Cdynamic\u003E(str);\n\n\nThis is the simplest way.\n    ","\nSimple \u0022string JSON data\u0022 to object without any third-party DLL file:\n\nWebClient client = new WebClient();\nstring getString = client.DownloadString(\u0022https://graph.facebook.com/zuck\u0022);\n\nJavaScriptSerializer serializer = new JavaScriptSerializer();\ndynamic item = serializer.Deserialize\u003Cobject\u003E(getString);\nstring name = item[\u0022name\u0022];\n\n//note: JavaScriptSerializer in this namespaces\n//System.Web.Script.Serialization.JavaScriptSerializer\n\n\nNote: You can also using your custom object.\n\nPersonel item = serializer.Deserialize\u003CPersonel\u003E(getString);\n\n    ","\nJsonFx can deserialize JSON content into dynamic objects.\n\n\n  Serialize to/from dynamic types (default for .NET 4.0):\n\n\nvar reader = new JsonReader(); var writer = new JsonWriter();\n\nstring input = @\u0022{ \u0022\u0022foo\u0022\u0022: true, \u0022\u0022array\u0022\u0022: [ 42, false, \u0022\u0022Hello!\u0022\u0022, null ] }\u0022;\ndynamic output = reader.Read(input);\nConsole.WriteLine(output.array[0]); // 42\nstring json = writer.Write(output);\nConsole.WriteLine(json); // {\u0022foo\u0022:true,\u0022array\u0022:[42,false,\u0022Hello!\u0022,null]}\n\n    ","\nAnother way using Newtonsoft.Json:\n\ndynamic stuff = Newtonsoft.Json.JsonConvert.DeserializeObject(\u0022{ color: \u0027red\u0027, value: 5 }\u0022);\nstring color = stuff.color;\nint value = stuff.value;\n\n    ","\nI made a new version of the DynamicJsonConverter that uses Expando Objects. I used expando objects, because I wanted to Serialize the dynamic back into JSON using Json.NET.\n\nusing System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.Collections.ObjectModel;\nusing System.Dynamic;\nusing System.Web.Script.Serialization;\n\npublic static class DynamicJson\n{\n    public static dynamic Parse(string json)\n    {\n        JavaScriptSerializer jss = new JavaScriptSerializer();\n        jss.RegisterConverters(new JavaScriptConverter[] { new DynamicJsonConverter() });\n\n        dynamic glossaryEntry = jss.Deserialize(json, typeof(object)) as dynamic;\n        return glossaryEntry;\n    }\n\n    class DynamicJsonConverter : JavaScriptConverter\n    {\n        public override object Deserialize(IDictionary\u003Cstring, object\u003E dictionary, Type type, JavaScriptSerializer serializer)\n        {\n            if (dictionary == null)\n                throw new ArgumentNullException(\u0022dictionary\u0022);\n\n            var result = ToExpando(dictionary);\n\n            return type == typeof(object) ? result : null;\n        }\n\n        private static ExpandoObject ToExpando(IDictionary\u003Cstring, object\u003E dictionary)\n        {\n            var result = new ExpandoObject();\n            var dic = result as IDictionary\u003CString, object\u003E;\n\n            foreach (var item in dictionary)\n            {\n                var valueAsDic = item.Value as IDictionary\u003Cstring, object\u003E;\n                if (valueAsDic != null)\n                {\n                    dic.Add(item.Key, ToExpando(valueAsDic));\n                    continue;\n                }\n                var arrayList = item.Value as ArrayList;\n                if (arrayList != null \u0026\u0026 arrayList.Count \u003E 0)\n                {\n                    dic.Add(item.Key, ToExpando(arrayList));\n                    continue;\n                }\n\n                dic.Add(item.Key, item.Value);\n            }\n            return result;\n        }\n\n        private static ArrayList ToExpando(ArrayList obj)\n        {\n            ArrayList result = new ArrayList();\n\n            foreach (var item in obj)\n            {\n                var valueAsDic = item as IDictionary\u003Cstring, object\u003E;\n                if (valueAsDic != null)\n                {\n                    result.Add(ToExpando(valueAsDic));\n                    continue;\n                }\n\n                var arrayList = item as ArrayList;\n                if (arrayList != null \u0026\u0026 arrayList.Count \u003E 0)\n                {\n                    result.Add(ToExpando(arrayList));\n                    continue;\n                }\n\n                result.Add(item);\n            }\n            return result;\n        }\n\n        public override IDictionary\u003Cstring, object\u003E Serialize(object obj, JavaScriptSerializer serializer)\n        {\n            throw new NotImplementedException();\n        }\n\n        public override IEnumerable\u003CType\u003E SupportedTypes\n        {\n            get { return new ReadOnlyCollection\u003CType\u003E(new List\u003CType\u003E(new[] { typeof(object) })); }\n        }\n    }\n}\n\n    ","\nYou can achieve that with the help of Newtonsoft.Json. Install Newtonsoft.Json from Nuget and the :\n\nusing Newtonsoft.Json;\n\ndynamic results = JsonConvert.DeserializeObject\u003Cdynamic\u003E(YOUR_JSON);\n\n    ","\nThe simplest way is:\n\nJust include this DLL file.\n\nUse the code like this:\n\ndynamic json = new JDynamic(\u0022{a:\u0027abc\u0027}\u0022);\n// json.a is a string \u0022abc\u0022\n\ndynamic json = new JDynamic(\u0022{a:3.1416}\u0022);\n// json.a is 3.1416m\n\ndynamic json = new JDynamic(\u0022{a:1}\u0022);\n// json.a is\n\ndynamic json = new JDynamic(\u0022[1,2,3]\u0022);\n/json.Length/json.Count is 3\n// And you can use json[0]/ json[2] to get the elements\n\ndynamic json = new JDynamic(\u0022{a:[1,2,3]}\u0022);\n//json.a.Length /json.a.Count is 3.\n// And you can use  json.a[0]/ json.a[2] to get the elements\n\ndynamic json = new JDynamic(\u0022[{b:1},{c:1}]\u0022);\n// json.Length/json.Count is 2.\n// And you can use the  json[0].b/json[1].c to get the num.\n\n    ","\nI use http://json2csharp.com/ to get a class representing the JSON object.\n\nInput:\n\n{\n   \u0022name\u0022:\u0022John\u0022,\n   \u0022age\u0022:31,\n   \u0022city\u0022:\u0022New York\u0022,\n   \u0022Childs\u0022:[\n      {\n         \u0022name\u0022:\u0022Jim\u0022,\n         \u0022age\u0022:11\n      },\n      {\n         \u0022name\u0022:\u0022Tim\u0022,\n         \u0022age\u0022:9\n      }\n   ]\n}\n\n\nOutput:\n\npublic class Child\n{\n    public string name { get; set; }\n    public int age { get; set; }\n}\n\npublic class Person\n{\n    public string name { get; set; }\n    public int age { get; set; }\n    public string city { get; set; }\n    public List\u003CChild\u003E Childs { get; set; }\n}\n\n\nAfter that I use Newtonsoft.Json to fill the class:\n\nusing Newtonsoft.Json;\n\nnamespace GitRepositoryCreator.Common\n{\n    class JObjects\n    {\n        public static string Get(object p_object)\n        {\n            return JsonConvert.SerializeObject(p_object);\n        }\n        internal static T Get\u003CT\u003E(string p_object)\n        {\n            return JsonConvert.DeserializeObject\u003CT\u003E(p_object);\n        }\n    }\n}\n\n\nYou can call it like this:\n\nPerson jsonClass = JObjects.Get\u003CPerson\u003E(stringJson);\n\nstring stringJson = JObjects.Get(jsonClass);\n\n\nPS:\n\nIf your JSON variable name is not a valid C# name (name starts with $) you can fix that like this:\n\npublic class Exception\n{\n   [JsonProperty(PropertyName = \u0022$id\u0022)]\n   public string id { get; set; }\n   public object innerException { get; set; }\n   public string message { get; set; }\n   public string typeName { get; set; }\n   public string typeKey { get; set; }\n   public int errorCode { get; set; }\n   public int eventId { get; set; }\n}\n\n    ","\nYou can extend the JavaScriptSerializer to recursively copy the dictionary it created to expando object(s) and then use them dynamically:\n\nstatic class JavaScriptSerializerExtensions\n{\n    public static dynamic DeserializeDynamic(this JavaScriptSerializer serializer, string value)\n    {\n        var dictionary = serializer.Deserialize\u003CIDictionary\u003Cstring, object\u003E\u003E(value);\n        return GetExpando(dictionary);\n    }\n\n    private static ExpandoObject GetExpando(IDictionary\u003Cstring, object\u003E dictionary)\n    {\n        var expando = (IDictionary\u003Cstring, object\u003E)new ExpandoObject();\n\n        foreach (var item in dictionary)\n        {\n            var innerDictionary = item.Value as IDictionary\u003Cstring, object\u003E;\n            if (innerDictionary != null)\n            {\n                expando.Add(item.Key, GetExpando(innerDictionary));\n            }\n            else\n            {\n                expando.Add(item.Key, item.Value);\n            }\n        }\n\n        return (ExpandoObject)expando;\n    }\n}\n\n\nThen you just need to having a using statement for the namespace you defined the extension in (consider just defining them in System.Web.Script.Serialization... another trick is to not use a namespace, then you don\u0027t need the using statement at all) and you can consume them like so:\n\nvar serializer = new JavaScriptSerializer();\nvar value = serializer.DeserializeDynamic(\u0022{ \u0027Name\u0027: \u0027Jon Smith\u0027, \u0027Address\u0027: { \u0027City\u0027: \u0027New York\u0027, \u0027State\u0027: \u0027NY\u0027 }, \u0027Age\u0027: 42 }\u0022);\n\nvar name = (string)value.Name; // Jon Smith\nvar age = (int)value.Age;      // 42\n\nvar address = value.Address;\nvar city = (string)address.City;   // New York\nvar state = (string)address.State; // NY\n\n    ","\nYou can use using Newtonsoft.Json\n\nvar jRoot = \n JsonConvert.DeserializeObject\u003Cdynamic\u003E(Encoding.UTF8.GetString(resolvedEvent.Event.Data));\n\n\nresolvedEvent.Event.Data is my response getting from calling core Event .\n    ","\nFor that I would use JSON.NET to do the low-level parsing of the JSON stream and then build up the object hierarchy out of instances of the ExpandoObject class.\n    ","\nI am using like this in my code and it\u0027s working fine\n\nusing System.Web.Script.Serialization;\nJavaScriptSerializer oJS = new JavaScriptSerializer();\nRootObject oRootObject = new RootObject();\noRootObject = oJS.Deserialize\u003CRootObject\u003E(Your JSon String);\n\n    ","\nLook at the article I wrote on CodeProject, one that answers the question precisely:\n\nDynamic types with JSON.NET\n\nThere is way too much for re-posting it all here, and even less point since that article has an attachment with the key/required source file.\n    ","\nAnother option is to \u0022Paste JSON as classes\u0022 so it can be deserialised quick and easy.\n\n\nSimply copy your entire JSON\nIn Visual Studio: Click Edit \u2192 Paste Special \u2192 Paste JSON as classes\n\n\nHere is a better explanation n piccas... \u2018Paste JSON As Classes\u2019 in ASP.NET and Web Tools 2012.2 RC\n    ","\nTo get an ExpandoObject:\n\nusing Newtonsoft.Json;\nusing Newtonsoft.Json.Converters;\n\nContainer container = JsonConvert.Deserialize\u003CContainer\u003E(jsonAsString, new ExpandoObjectConverter());\n\n    ","\nDeserializing in JSON.NET can be dynamic using the JObject class, which is included in that library.  My JSON string represents these classes:\n\npublic class Foo {\n   public int Age {get;set;}\n   public Bar Bar {get;set;}\n}\n\npublic class Bar {\n   public DateTime BDay {get;set;}\n}\n\n\nNow we deserialize the string WITHOUT referencing the above classes:\n\nvar dyn = JsonConvert.DeserializeObject\u003CJObject\u003E(jsonAsFooString);\n\nJProperty propAge = dyn.Properties().FirstOrDefault(i=\u003Ei.Name == \u0022Age\u0022);\nif(propAge != null) {\n    int age = int.Parse(propAge.Value.ToString());\n    Console.WriteLine(\u0022age=\u0022 \u002B age);\n}\n\n//or as a one-liner:\nint myage = int.Parse(dyn.Properties().First(i=\u003Ei.Name == \u0022Age\u0022).Value.ToString());\n\n\nOr if you want to go deeper:\n\nvar propBar = dyn.Properties().FirstOrDefault(i=\u003Ei.Name == \u0022Bar\u0022);\nif(propBar != null) {\n    JObject o = (JObject)propBar.First();\n    var propBDay = o.Properties().FirstOrDefault (i =\u003E i.Name==\u0022BDay\u0022);\n    if(propBDay != null) {\n        DateTime bday = DateTime.Parse(propBDay.Value.ToString());\n        Console.WriteLine(\u0022birthday=\u0022 \u002B bday.ToString(\u0022MM/dd/yyyy\u0022));\n    }\n}\n\n//or as a one-liner:\nDateTime mybday = DateTime.Parse(((JObject)dyn.Properties().First(i=\u003Ei.Name == \u0022Bar\u0022).First()).Properties().First(i=\u003Ei.Name == \u0022BDay\u0022).Value.ToString());\n\n\nSee post for a complete example.\n    ","\nThe object you want DynamicJSONObject is included in the System.Web.Helpers.dll from the ASP.NET Web Pages package, which is part of WebMatrix.\n    ","\nThere is a lightweight JSON library for C# called SimpleJson.\n\nIt supports .NET 3.5\u002B, Silverlight and Windows Phone 7.\n\nIt supports dynamic for .NET 4.0\n\nIt can also be installed as a NuGet package\n\nInstall-Package SimpleJson\n\n    ","\nUse DataSet(C#) with JavaScript. A simple function for creating a JSON stream with DataSet input. Create JSON content like (multi table dataset):\n\n[[{a:1,b:2,c:3},{a:3,b:5,c:6}],[{a:23,b:45,c:35},{a:58,b:59,c:45}]]\n\n\nJust client side, use eval. For example,\n\nvar d = eval(\u0027[[{a:1,b:2,c:3},{a:3,b:5,c:6}],[{a:23,b:45,c:35},{a:58,b:59,c:45}]]\u0027)\n\n\nThen use:\n\nd[0][0].a // out 1 from table 0 row 0\n\nd[1][1].b // out 59 from table 1 row 1\n\n// Created by Behnam Mohammadi And Saeed Ahmadian\npublic string jsonMini(DataSet ds)\n{\n    int t = 0, r = 0, c = 0;\n    string stream = \u0022[\u0022;\n\n    for (t = 0; t \u003C ds.Tables.Count; t\u002B\u002B)\n    {\n        stream \u002B= \u0022[\u0022;\n        for (r = 0; r \u003C ds.Tables[t].Rows.Count; r\u002B\u002B)\n        {\n            stream \u002B= \u0022{\u0022;\n            for (c = 0; c \u003C ds.Tables[t].Columns.Count; c\u002B\u002B)\n            {\n                stream \u002B= ds.Tables[t].Columns[c].ToString() \u002B \u0022:\u0027\u0022 \u002B\n                          ds.Tables[t].Rows[r][c].ToString() \u002B \u0022\u0027,\u0022;\n            }\n            if (c\u003E0)\n                stream = stream.Substring(0, stream.Length - 1);\n            stream \u002B= \u0022},\u0022;\n        }\n        if (r\u003E0)\n            stream = stream.Substring(0, stream.Length - 1);\n        stream \u002B= \u0022],\u0022;\n    }\n    if (t\u003E0)\n        stream = stream.Substring(0, stream.Length - 1);\n    stream \u002B= \u0022];\u0022;\n    return stream;\n}\n\n    ","\nTry this:\n\n  var units = new { Name = \u0022Phone\u0022, Color= \u0022White\u0022 };\n    var jsonResponse = JsonConvert.DeserializeAnonymousType(json, units);\n\n    ","\nHow to parse easy JSON content with dynamic \u0026 JavaScriptSerializer\n\nPlease add reference of System.Web.Extensions and add this namespace using System.Web.Script.Serialization; at top:\n\npublic static void EasyJson()\n{\n    var jsonText = @\u0022{\n        \u0022\u0022some_number\u0022\u0022: 108.541,\n        \u0022\u0022date_time\u0022\u0022: \u0022\u00222011-04-13T15:34:09Z\u0022\u0022,\n        \u0022\u0022serial_number\u0022\u0022: \u0022\u0022SN1234\u0022\u0022\n    }\u0022;\n\n    var jss = new JavaScriptSerializer();\n    var dict = jss.Deserialize\u003Cdynamic\u003E(jsonText);\n\n    Console.WriteLine(dict[\u0022some_number\u0022]);\n    Console.ReadLine();\n}\n\n\nHow to parse nested \u0026 complex json with dynamic \u0026 JavaScriptSerializer\n\nPlease add reference of System.Web.Extensions and add this namespace using System.Web.Script.Serialization; at top:\n\npublic static void ComplexJson()\n{\n    var jsonText = @\u0022{\n        \u0022\u0022some_number\u0022\u0022: 108.541,\n        \u0022\u0022date_time\u0022\u0022: \u0022\u00222011-04-13T15:34:09Z\u0022\u0022,\n        \u0022\u0022serial_number\u0022\u0022: \u0022\u0022SN1234\u0022\u0022,\n        \u0022\u0022more_data\u0022\u0022: {\n            \u0022\u0022field1\u0022\u0022: 1.0,\n            \u0022\u0022field2\u0022\u0022: \u0022\u0022hello\u0022\u0022\n        }\n    }\u0022;\n\n    var jss = new JavaScriptSerializer();\n    var dict = jss.Deserialize\u003Cdynamic\u003E(jsonText);\n\n    Console.WriteLine(dict[\u0022some_number\u0022]);\n    Console.WriteLine(dict[\u0022more_data\u0022][\u0022field2\u0022]);\n    Console.ReadLine();\n}\n\n    ","\nWith Cinchoo ETL - an open source library available to parse JSON into a dynamic object:\n\nstring json = @\u0022{\n    \u0022\u0022key1\u0022\u0022: [\n        {\n            \u0022\u0022action\u0022\u0022: \u0022\u0022open\u0022\u0022,\n            \u0022\u0022timestamp\u0022\u0022: \u0022\u00222018-09-05 20:46:00\u0022\u0022,\n            \u0022\u0022url\u0022\u0022: null,\n            \u0022\u0022ip\u0022\u0022: \u0022\u002266.102.6.98\u0022\u0022\n        }\n    ]\n}\u0022;\nusing (var p = ChoJSONReader.LoadText(json)\n    .WithJSONPath(\u0022$.*\u0022)\n    )\n{\n    foreach (var rec in p)\n    {\n        Console.WriteLine(\u0022Action: \u0022 \u002B rec.action);\n        Console.WriteLine(\u0022Timestamp: \u0022 \u002B rec.timestamp);\n        Console.WriteLine(\u0022URL: \u0022 \u002B rec.url);\n        Console.WriteLine(\u0022IP address: \u0022 \u002B rec.ip);\n    }\n}\n\n\nOutput:\n\nAction: open\nTimestamp: 2018-09-05 20:46:00\nURL: http://www.google.com\nIP address: 66.102.6.98\n\n\nDisclaimer: I\u0027m the author of this library.\n    ","\nCreating dynamic objects with Newtonsoft.Json works really great.\n//json is your string containing the JSON value\ndynamic data = JsonConvert.DeserializeObject\u003Cdynamic\u003E(json);\n\nNow you can access the data object just like if it was a regular object. This is the JSON object we currently have as an example:\n{ \u0022ID\u0022:123,\u0022Name\u0022:\u0022Jack\u0022,\u0022Numbers\u0022:[1, 2, 3] }\n\nThis is how you access it after deserialization:\ndata.ID //Retrieve the int\ndata.Name //Retrieve the string\ndata.Numbers[0] //Retrieve the first element in the array\n\n    ","\nI want to do this programmatically in unit tests, I do have the luxury of typing it out.\nMy solution is:\nvar dict = JsonConvert.DeserializeObject\u003CExpandoObject\u003E(json) as IDictionary\u003Cstring, object\u003E;\n\nNow I can assert that\ndict.ContainsKey(\u0022ExpectedProperty\u0022);\n\n    ","\ntry this way!\n\nJSON example:\n\n  [{\n            \u0022id\u0022: 140,\n            \u0022group\u0022: 1,\n            \u0022text\u0022: \u0022xxx\u0022,\n            \u0022creation_date\u0022: 123456,\n            \u0022created_by\u0022: \u0022xxx@gmail.co\u0022,\n            \u0022tags\u0022: [\u0022xxxxx\u0022]\n        }, {\n            \u0022id\u0022: 141,\n            \u0022group\u0022: 1,\n            \u0022text\u0022: \u0022xxxx\u0022,\n            \u0022creation_date\u0022: 123456,\n            \u0022created_by\u0022: \u0022xxx@gmail.com\u0022,\n            \u0022tags\u0022: [\u0022xxxxx\u0022]\n        }]\n\n\nC# code:\n\n        var jsonString = (File.ReadAllText(Path.Combine(Directory.GetCurrentDirectory(),\u0022delete_result.json\u0022)));\n        var objects = JsonConvert.DeserializeObject\u003Cdynamic\u003E(jsonString);\n        foreach(var o in objects)\n        {\n            Console.WriteLine($\u0022{o.id.ToString()}\u0022);\n        }\n\n    ","\n                \n                I get an error in dynamic obj = serializer.Deserialize(json, typeof(object));  saying that no overload for method with 2 arguments..wrong dll or what?\n                \n\u2013\u00A0Stewie Griffin\n                Jun 18 \u002711 at 20:17\n            ","\n                \n                You can use System.Web.Helpers.Json - it offers a Decode method that returns a dynamic object. I\u0027ve also posted this info as an answer.\n                \n\u2013\u00A0Vlad Iliescu\n                Feb 29 \u002712 at 7:30\n            ","\n                \n                This helped me a lot as well, but I\u0027m curious what I should do if I need to use the .Serialize method, which currently only throws a NotImplementedException... I\u0027m not too familiar with sealed classes and/or extended abstract classes. Can anyone point me in the right direction?\n                \n\u2013\u00A0Cory W.\n                Aug 29 \u002712 at 15:24\n            ","\n                \n                sometimes in js you have fields with special chars like \u0022background-color\u0022. To access such fields in js you do obj[\u0022background-color\u0022]. How can I access such fields from c# after deserializing to dynamic object? I can\u0027t do obj.background-color, of course, and obj[\u0022background-color\u0022] doesn\u0027t seem to work. It would be nice if the dynamic object could also be accessed as a dictionary, at the same time, exactly like in js.\n                \n\u2013\u00A0Radu Simionescu\n                Sep 28 \u002712 at 11:59\n                        \n                            \n                        \n            ","\n                \n                @RaduSimionescu I am probably a bit late, but maybe this helps future visitors. I had the same problem, just with the field-name params (which is a keyword in C#). In addition to TryGetMember you can override TryGetIndex, which gives you exactly the same behavior as in JS. Then you can do obj[\u0022params\u0022] or obj[\u0022background-color\u0022] for awkward field names.\n                \n\u2013\u00A0Martin Ender\n                Jan 20 \u002713 at 14:30\n            ","\n                \n                @HotLicks: To introspect the dynamic stuff do something like: foreach (Newtonsoft.Json.Linq.JProperty jproperty in stuff) { Console.WriteLine(\u0022jproperty.Name = {0}\u0022, jproperty.Name);}\n                \n\u2013\u00A0Matthias\n                Jun 15 \u002714 at 20:48\n                        \n                            \n                        \n            ","\n                \n                What\u0027s the difference between JsonConvert.DeserializeObject and JObject.Parse ? The answer is using them both in the same way to do the same thing but doesn\u0027t explain the difference.\n                \n\u2013\u00A0cja\n                Oct 8 \u002714 at 16:04\n                        \n                            \n                        \n            ","\n                \n                @TomPeplow Tried this. It didn\u0027t work for me. It says that \u0022JObject doesn\u0027t implement \u0027Name\u0027\u0022.\n                \n\u2013\u00A0Lee Louviere\n                Feb 18 \u002715 at 17:27\n            ","\n                \n                @cja no difference: stackoverflow.com/questions/23645034/\u2026\n                \n\u2013\u00A0nawfal\n                Jun 15 \u002715 at 9:16\n            ","\n                \n                I can\u0027t get this to work. I\u0027ve narrowed the issue down to being inside an async method. If I make the method synchronous it works as expected. However, make the method async and I can\u0027t get a dynamic, I just get an object. Explicit casting does nothing, still just gives me an object. Is anyone else experiencing this?\n                \n\u2013\u00A0codeConcussion\n                Dec 11 \u002715 at 19:57\n                        \n                            \n                        \n            ","\n                \n                FYI System.Web.Helpers.dll requires .net 4.0 but is not included in .net 4.0. It can be installed with ASP.NET MVC 3\n                \n\u2013\u00A0jbtule\n                Mar 30 \u002712 at 20:44\n            ","\n                \n                You will find this assembly in the Extensions group under Assemblies in Visual Studio 2012\n                \n\u2013\u00A0W3Max\n                Jan 17 \u002713 at 13:55\n            ","\n                \n                Any Issues with using dynamic ?  How can we handle exceptions efficiently if input JSON does not contain the properties..\n                \n\u2013\u00A0Usama Khalil\n                Apr 15 \u002713 at 10:24\n            ","\n                \n                If you\u0027re wanting to strongly type the model then be sure to use the Json.Decode\u003CT\u003E(string) method.\n                \n\u2013\u00A0Mike\n                Apr 15 \u002713 at 20:47\n            ","\n                \n                To add this library to your project: stackoverflow.com/questions/8037895/\u2026\n                \n\u2013\u00A0user565869\n                Jul 10 \u002714 at 17:50\n            ","\n                \n                have you tried this? It returns Dictionary\u003Cstring,object\u003E. Unless I\u0027m missing something, your example does not return a dynamic object.\n                \n\u2013\u00A0sergiopereira\n                Jun 13 \u002711 at 15:15\n            ","\n                \n                This doesn\u0027t work, it just return a dict in the form of a dynamic\n                \n\u2013\u00A0mattmanser\n                Jun 30 \u002711 at 15:56\n            ","\n                \n                @Peter Long I believe I have failed to state my case clearly, dear fellow.  Let me attempt to rectify my error.  I know what a dynamic is. This doesn\u0027t allow you to pass in a JSON object and use d.code, you\u0027d have to do d[\u0022code\u0022].Value, which isn\u0027t what most people finding this answer want, we already know how to get the dictionary and casting it to a dynamic is a total waste of time. I respectfully disagree, sir.\n                \n\u2013\u00A0mattmanser\n                Jul 1 \u002711 at 9:22\n                        \n                            \n                        \n            ","\n                \n                @mattmanser, we already know how to get the dictionary and casting it to a dynamic. It does not have to be a dictionay. Json also have lists besides dictionary. And also lists and dictionaries could be nested. My code could handle all of these situations. BUT your method can NOT.\n                \n\u2013\u00A0Peter Long\n                Jul 14 \u002711 at 2:44\n                        \n                            \n                        \n            ","\n                \n                @mattmanser is right; it is possible to implement  IDynamicMetaObjectProvider (or use e.g. ExpandoObject) that is able to intercept properties and look them up in an internal dictionary. This combined with the use of dynamic allows code such as d.code to be used. It\u0027s kind of pointless to cast a dictionary to a dynamic.\n                \n\u2013\u00A0Stephen Drew\n                Oct 23 \u002714 at 10:36\n            ","\n                \n                Id don\u0027t get it. This is by far most simple solution and nobody mentions it.\n                \n\u2013\u00A0cikatomo\n                Feb 20 \u002713 at 10:27\n            ","\n                \n                yes it\u0027s simple :) sometime you need serialize but don\u0027t want to include 3rd part dll\n                \n\u2013\u00A0\u0130brahim \u00D6zb\u00F6l\u00FCk\n                Aug 6 \u002713 at 11:48\n            ","\n                \n                Can you elaborate on  : how dynamic can access the DEserialized object via  : myObject[\u0022myprop\u0022] ? I know it\u0027s done on runtime but how accessing it via myObject[\u0022myprop\u0022] is valid ?\n                \n\u2013\u00A0Royi Namir\n                Sep 19 \u002713 at 16:05\n                        \n                            \n                        \n            ","\n                \n                You can deserialize your object like Personel item = serializer.Deserialize\u003CPersonel\u003E(getString); and if you use dynamic object also you can using array and everything is possible like everyobject\n                \n\u2013\u00A0\u0130brahim \u00D6zb\u00F6l\u00FCk\n                Sep 20 \u002713 at 11:27\n            ","\n                \n                To use the System.Web.Script.Serialization namespace your project needs a reference to System.Web.Extensions.\n                \n\u2013\u00A0StilgarISCA\n                Sep 8 \u002718 at 12:57\n            ","\n                \n                but that\u0027s not what the question is asking about. there\u0027s a different when you  have to specify the type for every json string and working with dynamic type.\n                \n\u2013\u00A0Illuminati\n                Jun 7 \u002716 at 12:31\n            ","\n                \n                this saved me a lot of time ! should be chosen as best answer !\n                \n\u2013\u00A0jsiot\n                Mar 17 at 13:27\n            ","\n                \n                This approach allow to \u0022traverse\u0022 the jSON document, so that you can manage situation where the JSON structure is unknown or variable (for example, many API returns a completely different JSON document when an error occurs). There are other libraries that permits to do that, apart from Newtonsoft.JSON (aka JSON.NET) ?\n                \n\u2013\u00A0Alex 75\n                Dec 20 \u002719 at 22:42\n            "]},{"Id":"ec8daca7-da98-4ac5-8f80-67bfb92bbc7f","QuestionId":2818179,"Description":"How do I force my .NET application to run as administrator?","Votes":899,"Views":494000,"Tags":["c#",".net","windows-7","administrator","elevated-privileges"],"Discussions":["\nYou\u0027ll want to modify the manifest that gets embedded in the program. This works on Visual\u00A0Studio\u00A02008 and higher: Project \u002B Add New Item, select \u0022Application Manifest File\u0022. Change the \u003CrequestedExecutionLevel\u003E element to:\n\n \u003CrequestedExecutionLevel level=\u0022requireAdministrator\u0022 uiAccess=\u0022false\u0022 /\u003E\n\n\nThe user gets the UAC prompt when they start the program. Use wisely; their patience can wear out quickly.\n    ","\nAdding a requestedExecutionLevel element to your manifest is only half the battle; you have to remember that UAC can be turned off. If it is, you have to perform the check the old school way and put up an error dialog if the user is not administrator  (call IsInRole(WindowsBuiltInRole.Administrator) on your thread\u0027s CurrentPrincipal).\n    ","\nThe detailed steps are as follow.\n\n\nAdd application manifest file to solution\nChange application setting to \u0022app.manifest\u0022\nUpdate tag of \u0022requestedExecutionLevel\u0022 to requireAdministrator.\n\n\n\n\n\n\n\n\n\n\nNote that using this code you need to turn off the security settings of ClickOnce, for do this, go inside Properties -\u003E Security -\u003E ClickOnce Security\n    ","\nI implemented some code to do it manually:\n\nusing System.Security.Principal;\npublic bool IsUserAdministrator()\n{\n    bool isAdmin;\n    try\n    {\n        WindowsIdentity user = WindowsIdentity.GetCurrent();\n        WindowsPrincipal principal = new WindowsPrincipal(user);\n        isAdmin = principal.IsInRole(WindowsBuiltInRole.Administrator);\n    }\n    catch (UnauthorizedAccessException ex)\n    {\n        isAdmin = false;\n    }\n    catch (Exception ex)\n    {\n        isAdmin = false;\n    }\n    return isAdmin;\n}\n\n    ","\nYou can embed a manifest file in the EXE file, which will cause Windows (7 or higher) to always run the program as an administrator.\n\nYou can find more details in Step 6: Create and Embed an Application Manifest (UAC) (MSDN).\n    ","\nWhile working on Visual\u00A0Studio\u00A02008, right click on Project -\u003E Add New Item and then chose Application Manifest File.\n\nIn the manifest file, you will find the tag requestedExecutionLevel, and you may set the level to three values:\n\n\u003CrequestedExecutionLevel  level=\u0022asInvoker\u0022 uiAccess=\u0022false\u0022 /\u003E\n\nOR\n\n\u003CrequestedExecutionLevel  level=\u0022requireAdministrator\u0022 uiAccess=\u0022false\u0022 /\u003E\n\nOR\n\n\u003CrequestedExecutionLevel  level=\u0022highestAvailable\u0022 uiAccess=\u0022false\u0022 /\u003E\n\nTo set your application to run as administrator, you have to chose the middle one.\n    ","\nAs per\n\n\u003CrequestedExecutionLevel level=\u0022highestAvailable\u0022 uiAccess=\u0022false\u0022 /\u003E\n\n\nyou will want to add an application manifest if you don\u0027t already have one or don\u0027t know how to add one. As some projects don\u0027t automatically add a separate manifest file, first go to project properties, navigate to the Application tab and check to make sure your project is not excluding the manifest at the bottom of the tap.\n\n\nNext, right click project\nAdd new Item\nLast, find and click Application Manifest File\n\n    ","\nAnother way of doing this, in code only, is to detect if the process is running as admin like in the answer by @NG.. And then open the application again and close the current one.\n\nI use this code when an application only needs admin privileges when run under certain conditions, such as when installing itself as a service. So it doesn\u0027t need to run as admin all the time like the other answers force it too.\n\nNote in the below code NeedsToRunAsAdmin is a method that detects if under current conditions admin privileges are required. If this returns false the code will not elevate itself. This is a major advantage of this approach over the others.\n\nAlthough this code has the advantages stated above, it does need to re-launch itself as a new process which isn\u0027t always what you want.\n\nprivate static void Main(string[] args)\n{\n    if (NeedsToRunAsAdmin() \u0026\u0026 !IsRunAsAdmin())\n    {\n        ProcessStartInfo proc = new ProcessStartInfo();\n        proc.UseShellExecute = true;\n        proc.WorkingDirectory = Environment.CurrentDirectory;\n        proc.FileName = Assembly.GetEntryAssembly().CodeBase;\n\n        foreach (string arg in args)\n        {\n            proc.Arguments \u002B= String.Format(\u0022\\\u0022{0}\\\u0022 \u0022, arg);\n        }\n\n        proc.Verb = \u0022runas\u0022;\n\n        try\n        {\n            Process.Start(proc);\n        }\n        catch\n        {\n            Console.WriteLine(\u0022This application requires elevated credentials in order to operate correctly!\u0022);\n        }\n    }\n    else\n    {\n        //Normal program logic...\n    }\n}\n\nprivate static bool IsRunAsAdmin()\n{\n    WindowsIdentity id = WindowsIdentity.GetCurrent();\n    WindowsPrincipal principal = new WindowsPrincipal(id);\n\n    return principal.IsInRole(WindowsBuiltInRole.Administrator);\n}\n\n    ","\nIn Visual Studio 2010 right click your project name.\nHit \u0022View Windows Settings\u0022, this generates and opens a file called \u0022app.manifest\u0022.\nWithin this file replace \u0022asInvoker\u0022 with \u0022requireAdministrator\u0022 as explained in the commented sections within the file.\n    ","\nYou can create the manifest using ClickOnce Security Settings, and then disable it:\n\nRight click on the Project -\u003E Properties -\u003E Security -\u003E Enable ClickOnce Security Settings\n\n\nAfter you clicked it, a file will be created under the Project\u0027s properties folder called app.manifest once this is created, you can uncheck the Enable ClickOnce Security Settings option\n\nOpen that file and change this line :\n\n\u003CrequestedExecutionLevel level=\u0022asInvoker\u0022 uiAccess=\u0022false\u0022 /\u003E\n\n\nto:\n\n \u003CrequestedExecutionLevel  level=\u0022requireAdministrator\u0022 uiAccess=\u0022false\u0022 /\u003E\n\n\nThis will make the program require administrator privileges.\n    ","\nTHIS DOES NOT FORCE APPLICATION TO WORK AS ADMINISTRATOR. \nThis is a simplified version of the this answer, above by @NG\npublic bool IsUserAdministrator()\n{\n    try\n    {\n        WindowsIdentity user = WindowsIdentity.GetCurrent();\n        WindowsPrincipal principal = new WindowsPrincipal(user);\n        return principal.IsInRole(WindowsBuiltInRole.Administrator);\n    }\n    catch\n    {\n        return false;\n    }\n}\n\n    ","\nRight click your executable, go to Properties \u003E Compatibility and check the \u0027Run this program as admin\u0027 box. \n\nIf you want to run it as admin for all users, do the same thing in \u0027change setting for all users\u0027.\n    ","\n                \n                If you get a ClickOnce error when trying to compile, see this answer: stackoverflow.com/questions/11023998/\u2026\n                \n\u2013\u00A0SSS\n                Dec 2 \u002713 at 6:47\n                        \n                            \n                        \n            ","\n                \n                Your project has to be set up to use the app manifest too - in Project Properties, check the \u0022Application\u0022 tab and make sure the \u0022Manifest:\u0022 under \u0027Resources\u0022 is set to your app.manifest (or whatever you named the .manifest file).\n                \n\u2013\u00A0Victor Chelaru\n                Apr 12 \u002716 at 5:12\n            ","\n                \n                I had to reload the project before VS would prompt me to restart in admin mode.\n                \n\u2013\u00A0Jon\n                Feb 28 \u002717 at 18:03\n            ","\n                \n                @Alejandro - Yes, UAC can be disabled, but when that is, the app will automatically run as administrator (assuming your user has administrator privileges), because disabling UAC means everything runs at the highest privilege the user is allowed.  It\u0027s kind of like complaining that if you install a fancy lock on the door, it won\u0027t work if the door is removed.\n                \n\u2013\u00A0Erik Funkenbusch\n                May 5 \u002718 at 7:52\n            ","\n                \n                @ErikFunkenbusch It won\u0027t \u0022automatically run as administrator\u0022, it\u0027ll run under the normal permissions of the user (admin if the user is admin, or standard if the user is standard). Relying on that particular case, even if it\u0027s the default, is what good programs will avoid like the plague. Following your analogy, the fancy lock is nice and all, but properly designed software must anticipate the case that the whole door is removed, even if it\u0027s a rare occurrence.\n                \n\u2013\u00A0Alejandro\n                May 5 \u002718 at 16:43\n            ","\n                \n                You could also use   \u003CrequestedExecutionLevel  level=\u0022highestAvailable\u0022 uiAccess=\u0022false\u0022 /\u003E   as well\n                \n\u2013\u00A0Mark Kram\n                Aug 14 \u002711 at 15:54\n                        \n                            \n                        \n            ","\n                \n                @MarkKram: What does highestAvailable have to do with this? The question is about forcing admin, highestAvailable is less restrictive than requireAdministrator and will let a non-admin user start the app un-elevated with no UAC prompt, only admins will get prompted...\n                \n\u2013\u00A0Anders\n                Sep 17 \u002713 at 19:09\n            ","\n                \n                Here is an MSDN example of the IsInRole, Anders talks about.\n                \n\u2013\u00A0Uwe Keim\n                Jun 16 \u002715 at 5:49\n            ","\n                \n                I don\u0027t remember the exact details anymore but I think this depends on what you mean by disabled. Putting the \u0022UAC slider\u0022 all the way to the bottom is not the same as disabling UAC (except on Vista). If UAC is fully disabled the whole integrity level mechanism is disabled and only the classic runas.exe feature from 2000/XP is available. The admin role check handles the runas.exe case.\n                \n\u2013\u00A0Anders\n                Aug 20 \u002719 at 13:39\n                        \n                            \n                        \n            ","\n                \n                I have set EnableLUA to 0 on Server 2008 R2 and removed myself from the Administrators group, rebooted, and now an exe that specifies level=\u0022requireAdministrator\u0022 runs without any prompt\n                \n\u2013\u00A0Tal Aloni\n                Aug 21 \u002719 at 8:15\n            ","\n                \n                New Item... isn\u0027t an option on my Installer Service project. How would I go about adding the app manifest? I can add it to my main project but not it\u0027s installer.\n                \n\u2013\u00A0HackSlash\n                Mar 26 at 16:39\n            ","\n                \n                This only detects if the context is running as Admin it does not forec the application to run as Admin as requested by the OP\n                \n\u2013\u00A0Matt Wilko\n                Dec 5 \u002713 at 14:02\n            ","\n                \n                I don\u0027t think there is any programmatic way to force an application to elevate its own perms. If there were, that would be quite the security risk, no?\n                \n\u2013\u00A0Mark Richman\n                Aug 18 \u002714 at 18:40\n            ","\n                \n                Although your solution is good but question was different. ;)\n                \n\u2013\u00A0Yash\n                Jul 25 \u002715 at 17:41\n            ","\n                \n                see a refactored version of this method here stackoverflow.com/a/50186997 (subjective)\n                \n\u2013\u00A0Hakan F\u0131st\u0131k\n                Dec 3 \u002718 at 13:09\n            ","\n                \n                This does not answer the question!\n                \n\u2013\u00A0Elmue\n                Oct 3 \u002719 at 20:09\n            ","\n                \n                This works. However, it made a blank cmd window appear when running the CMD application (using c# cmd app to run some exe in the background).\n                \n\u2013\u00A0W.M.\n                Oct 18 \u002717 at 18:25\n            ","\n                \n                \u002B1 for code-only approach. Note that you need UAC enabled for having a chance to launch anything with runas as administrator from a non-admin user, otherwise it will open silently with current user permissions (checked on windows 7 64 bit). As far as I can tell the only thing you can do with UAC disabled and the admin right is missing is to stop execution in a proper moment.\n                \n\u2013\u00A0reallynice\n                Aug 9 \u002719 at 15:57\n            ","\n                \n                This answer is about VB.NET :-) , not VS 2010 in general. The \u0022Add New Item\u0022 answers are about C#. In C\u002B\u002B you can do it in project settings.\n                \n\u2013\u00A0Philm\n                Aug 9 \u002713 at 15:02\n            ","\n                \n                This does not answer the question!\n                \n\u2013\u00A0Elmue\n                Oct 2 \u002719 at 21:22\n            ","\n                \n                @Elmue it is more logical to add your comment to the original answer that I just refactored, you can find a link to that answer in mine.\n                \n\u2013\u00A0Hakan F\u0131st\u0131k\n                Oct 3 \u002719 at 5:37\n                        \n                            \n                        \n            ","\n                \n                This doesn\u0027t answer the question. \u0022Once my program is installed on a client machine\u0022, not \u0022how do I\u0022.\n                \n\u2013\u00A0Joe\n                Mar 27 \u002714 at 10:36\n            ","\n                \n                Sorry for being unclear. Once your program is installed, change this setting in your executable\u0027s properties (your main program, not the installer).  He does want to force his program to run as admin.\n                \n\u2013\u00A0SlickJayD\n                Mar 27 \u002714 at 19:02\n                        \n                            \n                        \n            ","\n                \n                Its better to set the admin requirement in the manifest. I\u0027d argue it answers the question, but just barely.\n                \n\u2013\u00A0BradleyDotNET\n                Sep 2 \u002714 at 18:36\n            ","\n                \n                @Joe To be fair, the accepted answer doesn\u0027t answer the OPs question as requires you to reinstall the application exe. That\u0027s hardly a solution for \u0022Once my program is installed\u0022. If anything this downvoted answer is more correct than the accepted answer, so I don\u0027t understand why that answer has 400\u002B votes.\n                \n\u2013\u00A0NickG\n                Nov 7 \u002714 at 10:42\n            ","\n                \n                Actually, it answers both questions perfectly. Not much chance of changing the manifest once installed and programs should not try to elevate their permissions once running -- in many environments -- it is a good path to being called malware. In most companies -- this answer is the best because it puts the onus on the user and their permissions. I write a lot of code that I can neither \u0022see\u0022 or run once it is in production. Try not to be more clever than your own security concerns are.\n                \n\u2013\u00A0jinzai\n                Dec 20 \u002717 at 20:22\n            "]},{"Id":"60ef4b05-abde-4fdc-a698-0f86f92264e5","QuestionId":876473,"Description":"Is there a way to check if a file is in use?","Votes":869,"Views":562723,"Tags":["c#",".net","file","file-io","file-locking"],"Discussions":["\nUpdated NOTE on this solution: Checking with FileAccess.ReadWrite will fail for Read-Only files so the solution has been modified to check with FileAccess.Read. While this solution works because trying to check with FileAccess.Read will fail if the file has a Write or Read lock on it, however, this solution will not work if the file doesn\u0027t have a Write or Read lock on it, i.e. it has been opened (for reading or writing) with FileShare.Read or FileShare.Write access.\n\nORIGINAL:\nI\u0027ve used this code for the past several years, and I haven\u0027t had any issues with it.\n\nUnderstand your hesitation about using exceptions, but you can\u0027t avoid them all of the time:\n\nprotected virtual bool IsFileLocked(FileInfo file)\n{\n    try\n    {\n        using(FileStream stream = file.Open(FileMode.Open, FileAccess.Read, FileShare.None))\n        {\n            stream.Close();\n        }\n    }\n    catch (IOException)\n    {\n        //the file is unavailable because it is:\n        //still being written to\n        //or being processed by another thread\n        //or does not exist (has already been processed)\n        return true;\n    }\n\n    //file is not locked\n    return false;\n}\n\n    ","\nYou can suffer from a thread race condition on this which there are documented examples of this being used as a security vulnerability.  If you check that the file is available, but then try and use it you could throw at that point, which a malicious user could use to force and exploit in your code.\n\nYour best bet is a try catch / finally which tries to get the file handle.\n\ntry\n{\n   using (Stream stream = new FileStream(\u0022MyFilename.txt\u0022, FileMode.Open))\n   {\n        // File/Stream manipulating code here\n   }\n} catch {\n  //check here why it failed and ask user to retry if the file is in use.\n}\n\n    ","\nUse this to check if a file is locked:\n\nusing System.IO;\nusing System.Runtime.InteropServices;\ninternal static class Helper\n{\nconst int ERROR_SHARING_VIOLATION = 32;\nconst int ERROR_LOCK_VIOLATION = 33;\n\nprivate static bool IsFileLocked(Exception exception)\n{\n    int errorCode = Marshal.GetHRForException(exception) \u0026 ((1 \u003C\u003C 16) - 1);\n    return errorCode == ERROR_SHARING_VIOLATION || errorCode == ERROR_LOCK_VIOLATION;\n}\n\ninternal static bool CanReadFile(string filePath)\n{\n    //Try-Catch so we dont crash the program and can check the exception\n    try {\n        //The \u0022using\u0022 is important because FileStream implements IDisposable and\n        //\u0022using\u0022 will avoid a heap exhaustion situation when too many handles  \n        //are left undisposed.\n        using (FileStream fileStream = File.Open(filePath, FileMode.Open, FileAccess.ReadWrite, FileShare.None)) {\n            if (fileStream != null) fileStream.Close();  //This line is me being overly cautious, fileStream will never be null unless an exception occurs... and I know the \u0022using\u0022 does it but its helpful to be explicit - especially when we encounter errors - at least for me anyway!\n        }\n    }\n    catch (IOException ex) {\n        //THE FUNKY MAGIC - TO SEE IF THIS FILE REALLY IS LOCKED!!!\n        if (IsFileLocked(ex)) {\n            // do something, eg File.Copy or present the user with a MsgBox - I do not recommend Killing the process that is locking the file\n            return false;\n        }\n    }\n    finally\n    { }\n    return true;\n}\n}\n\n\nFor performance reasons I recommend you read the file content in the same operation. Here are some examples:\n\npublic static byte[] ReadFileBytes(string filePath)\n{\n    byte[] buffer = null;\n    try\n    {\n        using (FileStream fileStream = File.Open(filePath, FileMode.Open, FileAccess.ReadWrite, FileShare.None))\n        {\n            int length = (int)fileStream.Length;  // get file length\n            buffer = new byte[length];            // create buffer\n            int count;                            // actual number of bytes read\n            int sum = 0;                          // total number of bytes read\n\n            // read until Read method returns 0 (end of the stream has been reached)\n            while ((count = fileStream.Read(buffer, sum, length - sum)) \u003E 0)\n                sum \u002B= count;  // sum is a buffer offset for next reading\n\n            fileStream.Close(); //This is not needed, just me being paranoid and explicitly releasing resources ASAP\n        }\n    }\n    catch (IOException ex)\n    {\n        //THE FUNKY MAGIC - TO SEE IF THIS FILE REALLY IS LOCKED!!!\n        if (IsFileLocked(ex))\n        {\n            // do something? \n        }\n    }\n    catch (Exception ex)\n    {\n    }\n    finally\n    {\n    }\n    return buffer;\n}\n\npublic static string ReadFileTextWithEncoding(string filePath)\n{\n    string fileContents = string.Empty;\n    byte[] buffer;\n    try\n    {\n        using (FileStream fileStream = File.Open(filePath, FileMode.Open, FileAccess.ReadWrite, FileShare.None))\n        {\n            int length = (int)fileStream.Length;  // get file length\n            buffer = new byte[length];            // create buffer\n            int count;                            // actual number of bytes read\n            int sum = 0;                          // total number of bytes read\n\n            // read until Read method returns 0 (end of the stream has been reached)\n            while ((count = fileStream.Read(buffer, sum, length - sum)) \u003E 0)\n            {\n                sum \u002B= count;  // sum is a buffer offset for next reading\n            }\n\n            fileStream.Close(); //Again - this is not needed, just me being paranoid and explicitly releasing resources ASAP\n\n            //Depending on the encoding you wish to use - I\u0027ll leave that up to you\n            fileContents = System.Text.Encoding.Default.GetString(buffer);\n        }\n    }\n    catch (IOException ex)\n    {\n        //THE FUNKY MAGIC - TO SEE IF THIS FILE REALLY IS LOCKED!!!\n        if (IsFileLocked(ex))\n        {\n            // do something? \n        }\n    }\n    catch (Exception ex)\n    {\n    }\n    finally\n    { }     \n    return fileContents;\n}\n\npublic static string ReadFileTextNoEncoding(string filePath)\n{\n    string fileContents = string.Empty;\n    byte[] buffer;\n    try\n    {\n        using (FileStream fileStream = File.Open(filePath, FileMode.Open, FileAccess.ReadWrite, FileShare.None))\n        {\n            int length = (int)fileStream.Length;  // get file length\n            buffer = new byte[length];            // create buffer\n            int count;                            // actual number of bytes read\n            int sum = 0;                          // total number of bytes read\n\n            // read until Read method returns 0 (end of the stream has been reached)\n            while ((count = fileStream.Read(buffer, sum, length - sum)) \u003E 0) \n            {\n                sum \u002B= count;  // sum is a buffer offset for next reading\n            }\n\n            fileStream.Close(); //Again - this is not needed, just me being paranoid and explicitly releasing resources ASAP\n\n            char[] chars = new char[buffer.Length / sizeof(char) \u002B 1];\n            System.Buffer.BlockCopy(buffer, 0, chars, 0, buffer.Length);\n            fileContents = new string(chars);\n        }\n    }\n    catch (IOException ex)\n    {\n        //THE FUNKY MAGIC - TO SEE IF THIS FILE REALLY IS LOCKED!!!\n        if (IsFileLocked(ex))\n        {\n            // do something? \n        }\n    }\n    catch (Exception ex)\n    {\n    }\n    finally\n    {\n    }\n\n    return fileContents;\n}\n\n\nTry it out yourself:\n\nbyte[] output1 = Helper.ReadFileBytes(@\u0022c:\\temp\\test.txt\u0022);\nstring output2 = Helper.ReadFileTextWithEncoding(@\u0022c:\\temp\\test.txt\u0022);\nstring output3 = Helper.ReadFileTextNoEncoding(@\u0022c:\\temp\\test.txt\u0022);\n\n    ","\nPerhaps you could use a FileSystemWatcher and watch for the Changed event.\n\nI haven\u0027t used this myself, but it might be worth a shot. If the filesystemwatcher turns out to be a bit heavy for this case, I would go for the try/catch/sleep loop.\n    ","\nJust use the exception as intended.  Accept that the file is in use and try again, repeatedly until your action is completed.  This is also the most efficient because you do not waste any cycles checking the state before acting.\n\nUse the function below, for example\n\nTimeoutFileAction(() =\u003E { System.IO.File.etc...; return null; } );\n\n\nReusable method that times out after 2 seconds\n\nprivate T TimeoutFileAction\u003CT\u003E(Func\u003CT\u003E func)\n{\n    var started = DateTime.UtcNow;\n    while ((DateTime.UtcNow - started).TotalMilliseconds \u003C 2000)\n    {\n        try\n        {\n            return func();                    \n        }\n        catch (System.IO.IOException exception)\n        {\n            //ignore, or log somewhere if you want to\n        }\n    }\n    return default(T);\n}\n\n    ","\nYou can return a task which gives you a stream as soon as it becomes available. It\u0027s a simplified solution, but it is a good starting point. It\u0027s thread safe.\n\nprivate async Task\u003CStream\u003E GetStreamAsync()\n{\n    try\n    {\n        return new FileStream(\u0022sample.mp3\u0022, FileMode.Open, FileAccess.Write);\n    }\n    catch (IOException)\n    {\n        await Task.Delay(TimeSpan.FromSeconds(1));\n        return await GetStreamAsync();\n    }\n}\n\n\nYou can use this stream as usual:\n\nusing (var stream = await FileStreamGetter.GetStreamAsync())\n{\n    Console.WriteLine(stream.Length);\n}\n\n    ","\nthe only way I know of is to use the Win32 exclusive lock API which isn\u0027t too speedy, but examples exist.\n\nMost people, for a simple solution to this, simply to try/catch/sleep loops.\n    ","\nstatic bool FileInUse(string path)\n    {\n        try\n        {\n            using (FileStream fs = new FileStream(path, FileMode.OpenOrCreate))\n            {\n                fs.CanWrite\n            }\n            return false;\n        }\n        catch (IOException ex)\n        {\n            return true;\n        }\n    }\n\nstring filePath = \u0022C:\\\\Documents And Settings\\\\yourfilename\u0022;\nbool isFileInUse;\n\nisFileInUse = FileInUse(filePath);\n\n// Then you can do some checking\nif (isFileInUse)\n   Console.WriteLine(\u0022File is in use\u0022);\nelse\n   Console.WriteLine(\u0022File is not in use\u0022);\n\n\nHope this helps!\n    ","\nThe accepted answers above suffer an issue where if file has been opened for writing with a FileShare.Read mode or if the file has a Read-Only attribute the code will not work. This modified solution works most reliably, with two things to keep in mind (as true for the accepted solution also):\n\n\nIt will not work for files that has been opened with a write share mode\nThis does not take into account threading issues so you will need to lock it down or handle threading issues separately.\n\n\nKeeping the above in mind, this checks if the file is either locked for writing or locked to prevent reading:\n\npublic static bool FileLocked(string FileName)\n{\n    FileStream fs = null;\n\n    try\n    {\n        // NOTE: This doesn\u0027t handle situations where file is opened for writing by another process but put into write shared mode, it will not throw an exception and won\u0027t show it as write locked\n        fs = File.Open(FileName, FileMode.Open, FileAccess.ReadWrite, FileShare.None); // If we can\u0027t open file for reading and writing then it\u0027s locked by another process for writing\n    }\n    catch (UnauthorizedAccessException) // https://msdn.microsoft.com/en-us/library/y973b725(v=vs.110).aspx\n    {\n        // This is because the file is Read-Only and we tried to open in ReadWrite mode, now try to open in Read only mode\n        try\n        {\n            fs = File.Open(FileName, FileMode.Open, FileAccess.Read, FileShare.None);\n        }\n        catch (Exception)\n        {\n            return true; // This file has been locked, we can\u0027t even open it to read\n        }\n    }\n    catch (Exception)\n    {\n        return true; // This file has been locked\n    }\n    finally\n    {\n        if (fs != null)\n            fs.Close();\n    }\n    return false;\n}\n\n    ","\nAside from working 3-liners and just for reference: If you want the full blown information - there is a little project on Microsoft Dev Center:\n\nhttps://code.msdn.microsoft.com/windowsapps/How-to-know-the-process-704839f4\n\nFrom the Introduction:\n\n\n  The C# sample code developed in .NET Framework 4.0 would help in\n  finding out which is the process that is having a lock on a file.\n  RmStartSession function which is included in rstrtmgr.dll has been\n  used to create a restart manager session and according to the return\n  result a new instance of Win32Exception object is created. After\n  registering the resources to a Restart Manager session via\n  RmRegisterRescources function, RmGetList function is invoked to check\n  what are the applications are using a particular file by enumerating\n  the RM_PROCESS_INFO array.\n\n\nIt works by connecting to the \u0022Restart Manager Session\u0022.\n\n\n  The Restart Manager uses the list of resources registered with the session to\n  determine which applications and services must be shut down and restarted.\n  Resources can be identified by filenames, service short names, or\n  RM_UNIQUE_PROCESS structures that describe running applications.\n\n\nIt might be a little overengineered for your particular needs...\nBut if that is what you want, go ahead and grab the vs-project.\n    ","\nI once needed to upload PDFs to an online backup archive.  But the backup would fail if the user had the file open in another program (such as PDF reader).  In my haste, I attempted a few of the top answers in this thread but could not get them to work.  What did work for me was trying to move the PDF file to its own directory.  I found that this would fail if the file was open in another program, and if the move were successful there would be no restore-operation required as there would be if it were moved to a separate directory.  I want to post my basic solution in case it may be useful for others\u0027 specific use cases.\n\nstring str_path_and_name = str_path \u002B \u0027\\\\\u0027 \u002B str_filename;\nFileInfo fInfo = new FileInfo(str_path_and_name);\nbool open_elsewhere = false;\ntry\n{\n    fInfo.MoveTo(str_path_and_name);\n}\ncatch (Exception ex)\n{\n    open_elsewhere = true;\n}\n\nif (open_elsewhere)\n{\n    //handle case\n}\n\n    ","\nIn my experience, you usually want to do this, then \u0027protect\u0027 your files to do something fancy and then use the \u0027protected\u0027 files. If you have just one file you want to use like this, you can use the trick that\u0027s explained in the answer by Jeremy Thompson. However, if you attempt to do this on lots of files (say, for example when you\u0027re writing an installer), you\u0027re in for quite a bit of hurt.\n\nA very elegant way this can be solved is by using the fact that your file system will not allow you to change a folder name if one of the files there it\u0027s being used. Keep the folder in the same file system and it\u0027ll work like a charm.\n\nDo note that you should be aware of the obvious ways this can be exploited. After all, the files won\u0027t be locked. Also, be aware that there are other reasons that can result in your Move operation to fail. Obviously proper error handling (MSDN) can help out here.\n\nvar originalFolder = @\u0022c:\\myHugeCollectionOfFiles\u0022; // your folder name here\nvar someFolder = Path.Combine(originalFolder, \u0022..\u0022, Guid.NewGuid().ToString(\u0022N\u0022));\n\ntry\n{\n    Directory.Move(originalFolder, someFolder);\n\n    // Use files\n}\ncatch // TODO: proper exception handling\n{\n    // Inform user, take action\n}\nfinally\n{\n    Directory.Move(someFolder, originalFolder);\n}\n\n\nFor individual files I\u0027d stick with the locking suggestion posted by Jeremy Thompson.\n    ","\nHere is some code that as far as I can best tell does the same thing as the accepted answer but with less code:\n\n    public static bool IsFileLocked(string file)\n    {\n        try\n        {\n            using (var stream = File.OpenRead(file))\n                return false;\n        }\n        catch (IOException)\n        {\n            return true;\n        }        \n    }\n\n\nHowever I think it is more robust to do it in the following manner:\n\n    public static void TryToDoWithFileStream(string file, Action\u003CFileStream\u003E action, \n        int count, int msecTimeOut)\n    {\n        FileStream stream = null;\n        for (var i = 0; i \u003C count; \u002B\u002Bi)\n        {\n            try\n            {\n                stream = File.OpenRead(file);\n                break;\n            }\n            catch (IOException)\n            {\n                Thread.Sleep(msecTimeOut);\n            }\n        }\n        action(stream);\n    }\n\n    ","\nYou can use my library for accessing files from multiple apps.\n\nYou can install it from nuget: Install-Package Xabe.FileLock\n\nIf you want more information about it check\nhttps://github.com/tomaszzmuda/Xabe.FileLock\n\nILock fileLock = new FileLock(file);\nif(fileLock.Acquire(TimeSpan.FromSeconds(15), true))\n{\n    using(fileLock)\n    {\n        // file operations here\n    }\n}\n\n\nfileLock.Acquire method will return true only if can lock file exclusive for this object.\nBut app which uploading file must do it in file lock too.\nIf object is inaccessible metod returns false.\n    ","\nI\u0027m interested to see if this triggers any WTF reflexes. I have a process which creates and subsequently launches a PDF document from a console app. However, I was dealing with a frailty where if the user were to run the process multiple times, generating the same file without first closing the previously generated file, the app would throw an exception and die. This was a rather frequent occurrence because file names are based on sales quote numbers.\n\nRather than failing in such an ungraceful manner, I decided to rely on auto-incremented file versioning:\n\nprivate static string WriteFileToDisk(byte[] data, string fileName, int version = 0)\n{\n    try\n    {\n        var versionExtension = version \u003E 0 ? $\u0022_{version:000}\u0022 : string.Empty;\n        var filePath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, $\u0022{fileName}{versionExtension}.pdf\u0022);\n        using (var writer = new FileStream(filePath, FileMode.Create))\n        {\n            writer.Write(data, 0, data.Length);\n        }\n        return filePath;\n    }\n    catch (IOException)\n    {\n        return WriteFileToDisk(data, fileName, \u002B\u002Bversion);\n    }\n}\n\n\nProbably some more care can be given to the catch block to ensure I\u0027m catching the correct IOException(s). I\u0027ll probably also clear out the app storage on startup since these files are intended to be temporary anyways.\n\nI realize this goes beyond the scope of the OP\u0027s question of simply checking if the file is in use but this was indeed the problem I was looking to solve when I arrived here so perhaps it will be useful to someone else.\n    ","\nWould something like this help?\n\nvar fileWasWrittenSuccessfully = false;\nwhile (fileWasWrittenSuccessfully == false)\n{\n    try\n    {\n        lock (new Object())\n        {\n            using (StreamWriter streamWriter = new StreamWriter(filepath.txt\u0022), true))\n            {\n                streamWriter.WriteLine(\u0022text\u0022);\n            }\n        }\n\n        fileWasWrittenSuccessfully = true;\n    }\n    catch (Exception)\n    {\n\n    }\n}\n\n    ","\nretry_possibility:\n//somecode here\n\ntry\n{\n    using(FileStream stream = file.Open(FileMode.Open, FileAccess.Read, FileShare.None))\n    {\n        stream.Close();\n    }\n    //write or open your file here\n}\ncatch (IOException)\n{\n    DialogResult dialogResult = MessageBox.Show(\u0022This file is opened by you or another user. Please close it and press retry.\\n\u0022\u002B expFilePath, \u0022File Locked\u0022, MessageBoxButtons.RetryCancel);\n    if (dialogResult == DialogResult.Retry)\n    {\n        goto retry_possibility;\n    }\n    else if (dialogResult == DialogResult.Cancel)\n    {\n        //do nothing\n    }\n}\n\n    ","\nTry and move/copy the file to a temp dir. If you can, it has no lock and you can safely work in the temp dir without getting locks. Else just try to move it again in x seconds.\n    ","\nI use this workaround, but i have a timespan between when i check the file locking with IsFileLocked function and when i open the file. In this timespan some other thread can open the file, so i will get IOException.\n\nSo, i added extra code for this. In my case i want load XDocument:\n\n        XDocument xDoc = null;\n\n        while (xDoc == null)\n        {\n            while (IsFileBeingUsed(_interactionXMLPath))\n            {\n                Logger.WriteMessage(Logger.LogPrioritet.Warning, \u0022Deserialize can not open XML file. is being used by another process. wait...\u0022);\n                Thread.Sleep(100);\n            }\n            try\n            {\n                xDoc = XDocument.Load(_interactionXMLPath);\n            }\n            catch\n            {\n                Logger.WriteMessage(Logger.LogPrioritet.Error, \u0022Load working!!!!!\u0022);\n            }\n        }\n\n\nWhat do you think? Can i change some thing? Maybe i did not have to use IsFileBeingUsed function at all?\n\nThanks\n    ","\n                \n                This is a great solution, but I have one comment - you may wan\u0027t to open the File with access mode FileAccess.Read since ReadWrite will always fail if the file happens to be read-only.\n                \n\u2013\u00A0adeel825\n                Jan 29 \u002710 at 1:28\n            ","\n                \n                -1. This is a poor answer, because the file could become locked by another thread/process after it is closed in IsFileLocked, and before your thread gets a chance to open it.\n                \n\u2013\u00A0Polyfun\n                May 26 \u002710 at 15:58\n            ","\n                \n                I think this is a great answer. I\u0027m using this as an extension method \u00E1 la public static bool IsLocked(this FileInfo file) {/*...*/}.\n                \n\u2013\u00A0Manuzor\n                Jul 4 \u002712 at 11:06\n            ","\n                \n                @ChrisW: you might be wondering what is going on. Do not be alarmed. You\u0027re just being subject to the wrath of the Daily WTF community: thedailywtf.com/Comments/\u2026\n                \n\u2013\u00A0Pierre Lebeaupin\n                Mar 11 \u002713 at 13:15\n            ","\n                \n                @ChrisW Why is that a bad thing. This community is here to point out good and bad answers. If a bunch of professionals notice this is a bad thing, and join to downvote, then the site is WAI. And before you get negative, if you read that article, they say to \u0022upvote the right answer\u0022 not downvote the wrong one. Do you want them to explain their upvotes in comments as well. Thanks for introducing me to another good site!\n                \n\u2013\u00A0Lee Louviere\n                Mar 11 \u002713 at 15:12\n            ","\n                \n                \u002B1. There is no 100% safe way to \u0022learn if a file is in use\u0022 because milliseconds after you do the check, the file may not be in use anymore, or vice versa. Instead, you just open the file and use it if there are no exceptions.\n                \n\u2013\u00A0Sedat Kapanoglu\n                Jan 4 \u002711 at 7:16\n            ","\n                \n                Too bad .NET doesn\u0027t support CAS.  Something like, TryOpenFile(Ref FileHandle) that returns success/failure.  There should always be a work-around not rely on exception handling alone.  I wonder how Microsoft Office does it.\n                \n\u2013\u00A0TamusJRoyce\n                Jul 31 \u002711 at 22:37\n                        \n                            \n                        \n            ","\n                \n                The key thing to understand here is that this API is simply using the windows API to get a file handle.  As such they need to translate the error code received from the C API and wrap it to an exception to throw.  We have exception handling in .Net so why not use it.  That way you can write a clean forward path in your code and leave the error handling in a separate code path.\n                \n\u2013\u00A0Spence\n                Aug 1 \u002711 at 23:52\n            ","\n                \n                The using statement is to ensure the stream is closed after I\u0027m done.  I think you\u0027ll find that the using() {} is less characters than try {} finally { obj.Dispose() }. You\u0027ll also find that you now need to declare your object reference outside the using statement, which is more typing.  If you have a explicit interface you\u0027d also have to cast. Finally you want to dispose ASAP, and the finally logic may have UI or any other long running actions that have little to do with calling IDispose.  \u003C/rant\u003E\n                \n\u2013\u00A0Spence\n                Nov 27 \u002712 at 20:01\n            ","\n                \n                that doesn\u0027t negate the fact that you have to declare your object outside the try and have to explicitly call dispose, which using does for you and means the same thing.\n                \n\u2013\u00A0Spence\n                Jan 31 \u002713 at 0:27\n            ","\n                \n                I would upvote if there weren\u0027t so many \u0022magic numbers\u0022 in there en.wikipedia.org/wiki/Magic_number_(programming)\n                \n\u2013\u00A0Kris\n                Mar 11 \u002713 at 21:27\n            ","\n                \n                I was referring to the errorCode comparisons, not the bit shifts. though now you mention it...\n                \n\u2013\u00A0Kris\n                Mar 15 \u002713 at 9:35\n            ","\n                \n                Your Catch should be on IOException, instead of on general Exception and then a test on type.\n                \n\u2013\u00A0Askolein\n                Apr 22 \u002713 at 14:31\n            ","\n                \n                @JeremyThompson sadly you put the specific IOException after the general one. The general one will catch everything passing by and the specific IOException will always be lonely. Just swap the two.\n                \n\u2013\u00A0Askolein\n                Jun 18 \u002713 at 13:48\n            ","\n                \n                I like this solution.  One other suggestion: inside the catch as an else to the if(IsFileLocked(ex)) I would throw ex.  This will then handle the case where the file does not exist (or any other IOException) by throwing the exception.\n                \n\u2013\u00A0shindigo\n                Apr 18 \u002714 at 20:33\n            ","\n                \n                Using a FileSystemWatcher does not help, because the Created and Changed events raise at the beginning of a file creation/change. Even small files need more time to be written and closed by the operating system than the .NET application needs to run through the FileSystemEventHandler Callback. This is so sad, but there is no other option than to estimate the wait time before accessing the file or run into exception loops...\n                \n\u2013\u00A0user219337\n                Jul 8 \u002711 at 12:29\n            ","\n                \n                FileSystemWatcher doesn\u0027t handle lots of changes at the same time very well though, so be careful with that.\n                \n\u2013\u00A0Ben F\n                Jun 20 \u002712 at 7:59\n            ","\n                \n                BTW, have you guys noticed while debugging and watching threads that MS calls their own FSW \u0022FileSystemWather\u0022? What\u0027s a wather anyway?\n                \n\u2013\u00A0devlord\n                Apr 22 \u002713 at 0:29\n            ","\n                \n                Precisely I got this problem because a windows service with FileSystemWatcher try to read the file before the process closed it.\n                \n\u2013\u00A0freedeveloper\n                Aug 8 \u002718 at 15:09\n            ","\n                \n                How many seconds until a stack overflow from the recursion in GetStreamAsync()?\n                \n\u2013\u00A0CAD bloke\n                Jul 24 \u002717 at 11:14\n            ","\n                \n                @CADbloke, you have raised a very good point. Indeed my sample might have stack overflow exception, in case if a file is not available for a long time. Related to this answer stackoverflow.com/questions/4513438/\u2026, it might raise the exception in 5 hours.\n                \n\u2013\u00A0Ivan Branets\n                Jul 26 \u002717 at 8:51\n            ","\n                \n                Related to your use cases it is preferable to throw I/O exception if let\u0027s say 10 attempts to read the file have been failed. The other strategy might be increasing waiting time for a second once 10 attempts have been failed. You can also use a mix of both.\n                \n\u2013\u00A0Ivan Branets\n                Jul 26 \u002717 at 8:59\n            ","\n                \n                I would (and do) simply alert the user the file is locked. They generally locked it themselves so they will probably do something about it. Or not.\n                \n\u2013\u00A0CAD bloke\n                Jul 26 \u002717 at 12:25\n            ","\n                \n                In some cases, you need to use retry policy since a file might not be ready yet. Imagine a desktop application to download images in some temporary folder. The application starts downloading and at the same time you open this folder in file explorer. Windows wants to create a thumbnail immediately and lock the file. At the same time, your app tries to replace the locked image to some other place. You will receive an exception if you don\u0027t use retry policy.\n                \n\u2013\u00A0Ivan Branets\n                Jul 31 \u002717 at 13:16\n            ","\n                \n                You can\u0027t use this API without first opening the file, at which point you no longer need to.\n                \n\u2013\u00A0Harry Johnston\n                Sep 7 \u002717 at 21:15\n            ","\n                \n                Schrodinger\u0027s file.\n                \n\u2013\u00A0TheLastGIS\n                Feb 18 at 8:45\n            ","\n                \n                The actual check you perform is fine; putting it inside a function is misleading.  You do NOT want to use a function like this prior to opening a file.  Inside the function, the file is opened, checked, and closed.  Then the programmer ASSUMES the file is STILL ok to use and tries opening it for use.  This is bad because it could be used and locked by another process that was queued up to open this file.  Between the 1st time it was opened (for checking) and the 2nd time it was opened (for use), the OS could have descheduled your process and could be running another process.\n                \n\u2013\u00A0Lakey\n                Mar 25 \u002713 at 19:50\n                        \n                            \n                        \n            ","\n                \n                Still has the same problem as the accepted answer - it only tells you whether the file was locked by another process at one particular moment in time, which is not useful information.  By the time the function has returned the result may already be out of date!\n                \n\u2013\u00A0Harry Johnston\n                Oct 16 \u002715 at 19:57\n            ","\n                \n                that\u0027s true, one can only check at any given moment of time (or subscribe to events), the advantage of this approach over the accepted solution is that it can check for a read only attribute and a write lock and not return a false positive.\n                \n\u2013\u00A0rboy\n                Oct 17 \u002715 at 3:03\n                        \n                            \n                        \n            ","\n                \n                Hi, Since the order of answers changes can you clarify which post above you mean for readers of this popular QA. Thanks.\n                \n\u2013\u00A0Jeremy Thompson\n                Nov 21 \u002714 at 11:02\n                        \n                            \n                        \n            ","\n                \n                @JeremyThompson You\u0027re right, thanks, I\u0027ll edit the post. I\u0027d use the solution from you, mainly because of your correct use of FileShare and checking for a lock.\n                \n\u2013\u00A0atlaste\n                Nov 21 \u002714 at 11:09\n            ","\n                \n                Requires all the processes that are using the file to cooperate.  Unlikely to be applicable to the OPs original problem.\n                \n\u2013\u00A0Harry Johnston\n                Sep 7 \u002717 at 21:17\n            ","\n                \n                @jcolebrand locks what?  the one you copied?  Or the one you put in the temp dir?\n                \n\u2013\u00A0Cullub\n                Aug 7 \u002714 at 17:23\n            ","\n                \n                if you copy the file, expecting nobody else to be working on it, and you\u0027re going to use the temp file, and then someone locks it right after you copy it, then you\u0027ve potentially lost data.\n                \n\u2013\u00A0jcolebrand\n                Aug 7 \u002714 at 21:07\n            ","\n                \n                what is IsFileBeingUsed ? source code about IsFileBeingUsed ?\n                \n\u2013\u00A0Kiquenet\n                Jul 30 \u002713 at 6:01\n            "]},{"Id":"648a1cd6-c542-4835-b9fe-8b9a915fdc4a","QuestionId":56107,"Description":"What is the best way to parse html in C#? [closed]","Votes":66,"Views":460727,"Tags":["c#",".net","html","parsing","html-content-extraction"],"Discussions":["\nHtml Agility Pack\n\n\n  This is an agile HTML parser that builds a read/write DOM and supports plain XPATH or XSLT (you actually don\u0027t HAVE to understand XPATH nor XSLT to use it, don\u0027t worry...). It is a .NET code library that allows you to parse \u0022out of the web\u0022 HTML files. The parser is very tolerant with \u0022real world\u0022 malformed HTML. The object model is very similar to what proposes System.Xml, but for HTML documents (or streams).\n\n    ","\nYou could use TidyNet.Tidy to convert the HTML to XHTML, and then use an XML parser.\n\nAnother alternative would be to use the builtin engine mshtml:\n\nusing mshtml;\n...\nobject[] oPageText = { html };\nHTMLDocument doc = new HTMLDocumentClass();\nIHTMLDocument2 doc2 = (IHTMLDocument2)doc;\ndoc2.write(oPageText);\n\n\nThis allows you to use javascript-like functions like getElementById()\n    ","\nI found a project called Fizzler that takes a jQuery/Sizzler approach to selecting HTML elements.  It\u0027s based on HTML Agility Pack.  It\u0027s currently in beta and only supports a subset of CSS selectors, but it\u0027s pretty damn cool and refreshing to use CSS selectors over nasty XPath.\n\nhttp://code.google.com/p/fizzler/\n    ","\nYou can do a lot without going nuts on 3rd-party products and mshtml (i.e. interop).  use the System.Windows.Forms.WebBrowser.  From there, you can do such things as \u0022GetElementById\u0022 on an HtmlDocument or \u0022GetElementsByTagName\u0022 on HtmlElements.  If you want to actually inteface with the browser (simulate button clicks for example), you can use a little reflection (imo a lesser evil than Interop) to do it:\n\nvar wb = new WebBrowser()\n\n\n... tell the browser to navigate (tangential to this question). Then on the Document_Completed event you can simulate clicks like this.\n\nvar doc = wb.Browser.Document\nvar elem = doc.GetElementById(elementId);\nobject obj = elem.DomElement;\nSystem.Reflection.MethodInfo mi = obj.GetType().GetMethod(\u0022click\u0022);\nmi.Invoke(obj, new object[0]);\n\n\nyou can do similar reflection stuff to submit forms, etc.\n\nEnjoy.\n    ","\nI\u0027ve written some code that provides \u0022LINQ to HTML\u0022 functionality.  I thought I would share it here.  It is based on Majestic 12.  It takes the Majestic-12 results and produces LINQ XML elements.  At that point you can use all your LINQ to XML tools against the HTML.  As an example:\n\n        IEnumerable\u003CXNode\u003E auctionNodes = Majestic12ToXml.Majestic12ToXml.ConvertNodesToXml(byteArrayOfAuctionHtml);\n\n        foreach (XElement anchorTag in auctionNodes.OfType\u003CXElement\u003E().DescendantsAndSelf(\u0022a\u0022)) {\n\n            if (anchorTag.Attribute(\u0022href\u0022) == null)\n                continue;\n\n            Console.WriteLine(anchorTag.Attribute(\u0022href\u0022).Value);\n        }\n\n\nI wanted to use Majestic-12 because I know it has a lot of built-in knowledge with regards to HTML that is found in the wild.  What I\u0027ve found though is that to map the Majestic-12 results to something that LINQ will accept as XML requires additional work.  The code I\u0027m including does a lot of this cleansing, but as you use this you will find pages that are rejected.  You\u0027ll need to fix up the code to address that.  When an exception is thrown, check exception.Data[\u0022source\u0022] as it is likely set to the HTML tag that caused the exception.  Handling the HTML in a nice manner is at times not trivial...\n\nSo now that expectations are realistically low, here\u0027s the code :)\n\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing Majestic12;\nusing System.IO;\nusing System.Xml.Linq;\nusing System.Diagnostics;\nusing System.Text.RegularExpressions;\n\nnamespace Majestic12ToXml {\npublic class Majestic12ToXml {\n\n    static public IEnumerable\u003CXNode\u003E ConvertNodesToXml(byte[] htmlAsBytes) {\n\n        HTMLparser parser = OpenParser();\n        parser.Init(htmlAsBytes);\n\n        XElement currentNode = new XElement(\u0022document\u0022);\n\n        HTMLchunk m12chunk = null;\n\n        int xmlnsAttributeIndex = 0;\n        string originalHtml = \u0022\u0022;\n\n        while ((m12chunk = parser.ParseNext()) != null) {\n\n            try {\n\n                Debug.Assert(!m12chunk.bHashMode);  // popular default for Majestic-12 setting\n\n                XNode newNode = null;\n                XElement newNodesParent = null;\n\n                switch (m12chunk.oType) {\n                    case HTMLchunkType.OpenTag:\n\n                        // Tags are added as a child to the current tag, \n                        // except when the new tag implies the closure of \n                        // some number of ancestor tags.\n\n                        newNode = ParseTagNode(m12chunk, originalHtml, ref xmlnsAttributeIndex);\n\n                        if (newNode != null) {\n                            currentNode = FindParentOfNewNode(m12chunk, originalHtml, currentNode);\n\n                            newNodesParent = currentNode;\n\n                            newNodesParent.Add(newNode);\n\n                            currentNode = newNode as XElement;\n                        }\n\n                        break;\n\n                    case HTMLchunkType.CloseTag:\n\n                        if (m12chunk.bEndClosure) {\n\n                            newNode = ParseTagNode(m12chunk, originalHtml, ref xmlnsAttributeIndex);\n\n                            if (newNode != null) {\n                                currentNode = FindParentOfNewNode(m12chunk, originalHtml, currentNode);\n\n                                newNodesParent = currentNode;\n                                newNodesParent.Add(newNode);\n                            }\n                        }\n                        else {\n                            XElement nodeToClose = currentNode;\n\n                            string m12chunkCleanedTag = CleanupTagName(m12chunk.sTag, originalHtml);\n\n                            while (nodeToClose != null \u0026\u0026 nodeToClose.Name.LocalName != m12chunkCleanedTag)\n                                nodeToClose = nodeToClose.Parent;\n\n                            if (nodeToClose != null)\n                                currentNode = nodeToClose.Parent;\n\n                            Debug.Assert(currentNode != null);\n                        }\n\n                        break;\n\n                    case HTMLchunkType.Script:\n\n                        newNode = new XElement(\u0022script\u0022, \u0022REMOVED\u0022);\n                        newNodesParent = currentNode;\n                        newNodesParent.Add(newNode);\n                        break;\n\n                    case HTMLchunkType.Comment:\n\n                        newNodesParent = currentNode;\n\n                        if (m12chunk.sTag == \u0022!--\u0022)\n                            newNode = new XComment(m12chunk.oHTML);\n                        else if (m12chunk.sTag == \u0022![CDATA[\u0022)\n                            newNode = new XCData(m12chunk.oHTML);\n                        else\n                            throw new Exception(\u0022Unrecognized comment sTag\u0022);\n\n                        newNodesParent.Add(newNode);\n\n                        break;\n\n                    case HTMLchunkType.Text:\n\n                        currentNode.Add(m12chunk.oHTML);\n                        break;\n\n                    default:\n                        break;\n                }\n            }\n            catch (Exception e) {\n                var wrappedE = new Exception(\u0022Error using Majestic12.HTMLChunk, reason: \u0022 \u002B e.Message, e);\n\n                // the original html is copied for tracing/debugging purposes\n                originalHtml = new string(htmlAsBytes.Skip(m12chunk.iChunkOffset)\n                    .Take(m12chunk.iChunkLength)\n                    .Select(B =\u003E (char)B).ToArray()); \n\n                wrappedE.Data.Add(\u0022source\u0022, originalHtml);\n\n                throw wrappedE;\n            }\n        }\n\n        while (currentNode.Parent != null)\n            currentNode = currentNode.Parent;\n\n        return currentNode.Nodes();\n    }\n\n    static XElement FindParentOfNewNode(Majestic12.HTMLchunk m12chunk, string originalHtml, XElement nextPotentialParent) {\n\n        string m12chunkCleanedTag = CleanupTagName(m12chunk.sTag, originalHtml);\n\n        XElement discoveredParent = null;\n\n        // Get a list of all ancestors\n        List\u003CXElement\u003E ancestors = new List\u003CXElement\u003E();\n        XElement ancestor = nextPotentialParent;\n        while (ancestor != null) {\n            ancestors.Add(ancestor);\n            ancestor = ancestor.Parent;\n        }\n\n        // Check if the new tag implies a previous tag was closed.\n        if (\u0022form\u0022 == m12chunkCleanedTag) {\n\n            discoveredParent = ancestors\n                .Where(XE =\u003E m12chunkCleanedTag == XE.Name)\n                .Take(1)\n                .Select(XE =\u003E XE.Parent)\n                .FirstOrDefault();\n        }\n        else if (\u0022td\u0022 == m12chunkCleanedTag) {\n\n            discoveredParent = ancestors\n                .TakeWhile(XE =\u003E \u0022tr\u0022 != XE.Name)\n                .Where(XE =\u003E m12chunkCleanedTag == XE.Name)\n                .Take(1)\n                .Select(XE =\u003E XE.Parent)\n                .FirstOrDefault();\n        }\n        else if (\u0022tr\u0022 == m12chunkCleanedTag) {\n\n            discoveredParent = ancestors\n                .TakeWhile(XE =\u003E !(\u0022table\u0022 == XE.Name\n                                    || \u0022thead\u0022 == XE.Name\n                                    || \u0022tbody\u0022 == XE.Name\n                                    || \u0022tfoot\u0022 == XE.Name))\n                .Where(XE =\u003E m12chunkCleanedTag == XE.Name)\n                .Take(1)\n                .Select(XE =\u003E XE.Parent)\n                .FirstOrDefault();\n        }\n        else if (\u0022thead\u0022 == m12chunkCleanedTag\n                  || \u0022tbody\u0022 == m12chunkCleanedTag\n                  || \u0022tfoot\u0022 == m12chunkCleanedTag) {\n\n\n            discoveredParent = ancestors\n                .TakeWhile(XE =\u003E \u0022table\u0022 != XE.Name)\n                .Where(XE =\u003E m12chunkCleanedTag == XE.Name)\n                .Take(1)\n                .Select(XE =\u003E XE.Parent)\n                .FirstOrDefault();\n        }\n\n        return discoveredParent ?? nextPotentialParent;\n    }\n\n    static string CleanupTagName(string originalName, string originalHtml) {\n\n        string tagName = originalName;\n\n        tagName = tagName.TrimStart(new char[] { \u0027?\u0027 });  // for nodes \u003C?xml \u003E\n\n        if (tagName.Contains(\u0027:\u0027))\n            tagName = tagName.Substring(tagName.LastIndexOf(\u0027:\u0027) \u002B 1);\n\n        return tagName;\n    }\n\n    static readonly Regex _startsAsNumeric = new Regex(@\u0022^[0-9]\u0022, RegexOptions.Compiled);\n\n    static bool TryCleanupAttributeName(string originalName, ref int xmlnsIndex, out string result) {\n\n        result = null;\n        string attributeName = originalName;\n\n        if (string.IsNullOrEmpty(originalName))\n            return false;\n\n        if (_startsAsNumeric.IsMatch(originalName))\n            return false;\n\n        //\n        // transform xmlns attributes so they don\u0027t actually create any XML namespaces\n        //\n        if (attributeName.ToLower().Equals(\u0022xmlns\u0022)) {\n\n            attributeName = \u0022xmlns_\u0022 \u002B xmlnsIndex.ToString(); ;\n            xmlnsIndex\u002B\u002B;\n        }\n        else {\n            if (attributeName.ToLower().StartsWith(\u0022xmlns:\u0022)) {\n                attributeName = \u0022xmlns_\u0022 \u002B attributeName.Substring(\u0022xmlns:\u0022.Length);\n            }   \n\n            //\n            // trim trailing \\\u0022\n            //\n            attributeName = attributeName.TrimEnd(new char[] { \u0027\\\u0022\u0027 });\n\n            attributeName = attributeName.Replace(\u0022:\u0022, \u0022_\u0022);\n        }\n\n        result = attributeName;\n\n        return true;\n    }\n\n    static Regex _weirdTag = new Regex(@\u0022^\u003C!\\[.*\\]\u003E$\u0022);       // matches \u0022\u003C![if !supportEmptyParas]\u003E\u0022\n    static Regex _aspnetPrecompiled = new Regex(@\u0022^\u003C%.*%\u003E$\u0022); // matches \u0022\u003C%@ ... %\u003E\u0022\n    static Regex _shortHtmlComment = new Regex(@\u0022^\u003C!-.*-\u003E$\u0022); // matches \u0022\u003C!-Extra_Images-\u003E\u0022\n\n    static XElement ParseTagNode(Majestic12.HTMLchunk m12chunk, string originalHtml, ref int xmlnsIndex) {\n\n        if (string.IsNullOrEmpty(m12chunk.sTag)) {\n\n            if (m12chunk.sParams.Length \u003E 0 \u0026\u0026 m12chunk.sParams[0].ToLower().Equals(\u0022doctype\u0022))\n                return new XElement(\u0022doctype\u0022);\n\n            if (_weirdTag.IsMatch(originalHtml))\n                return new XElement(\u0022REMOVED_weirdBlockParenthesisTag\u0022);\n\n            if (_aspnetPrecompiled.IsMatch(originalHtml))\n                return new XElement(\u0022REMOVED_ASPNET_PrecompiledDirective\u0022);\n\n            if (_shortHtmlComment.IsMatch(originalHtml))\n                return new XElement(\u0022REMOVED_ShortHtmlComment\u0022);\n\n            // Nodes like \u0022\u003Cbr \u003Cbr\u003E\u0022 will end up with a m12chunk.sTag==\u0022\u0022...  We discard these nodes.\n            return null;\n        }\n\n        string tagName = CleanupTagName(m12chunk.sTag, originalHtml);\n\n        XElement result = new XElement(tagName);\n\n        List\u003CXAttribute\u003E attributes = new List\u003CXAttribute\u003E();\n\n        for (int i = 0; i \u003C m12chunk.iParams; i\u002B\u002B) {\n\n            if (m12chunk.sParams[i] == \u0022\u003C!--\u0022) {\n\n                // an HTML comment was embedded within a tag.  This comment and its contents\n                // will be interpreted as attributes by Majestic-12... skip this attributes\n                for (; i \u003C m12chunk.iParams; i\u002B\u002B) {\n\n                    if (m12chunk.sTag == \u0022--\u0022 || m12chunk.sTag == \u0022--\u003E\u0022)\n                        break;\n                }\n\n                continue;\n            }\n\n            if (m12chunk.sParams[i] == \u0022?\u0022 \u0026\u0026 string.IsNullOrEmpty(m12chunk.sValues[i]))\n                continue;\n\n            string attributeName = m12chunk.sParams[i];\n\n            if (!TryCleanupAttributeName(attributeName, ref xmlnsIndex, out attributeName))\n                continue;\n\n            attributes.Add(new XAttribute(attributeName, m12chunk.sValues[i]));\n        }\n\n        // If attributes are duplicated with different values, we complain.\n        // If attributes are duplicated with the same value, we remove all but 1.\n        var duplicatedAttributes = attributes.GroupBy(A =\u003E A.Name).Where(G =\u003E G.Count() \u003E 1);\n\n        foreach (var duplicatedAttribute in duplicatedAttributes) {\n\n            if (duplicatedAttribute.GroupBy(DA =\u003E DA.Value).Count() \u003E 1)\n                throw new Exception(\u0022Attribute value was given different values\u0022);\n\n            attributes.RemoveAll(A =\u003E A.Name == duplicatedAttribute.Key);\n            attributes.Add(duplicatedAttribute.First());\n        }\n\n        result.Add(attributes);\n\n        return result;\n    }\n\n    static HTMLparser OpenParser() {\n        HTMLparser oP = new HTMLparser();\n\n        // The code\u002Bcomments in this function are from the Majestic-12 sample documentation.\n\n        // ...\n\n        // This is optional, but if you want high performance then you may\n        // want to set chunk hash mode to FALSE. This would result in tag params\n        // being added to string arrays in HTMLchunk object called sParams and sValues, with number\n        // of actual params being in iParams. See code below for details.\n        //\n        // When TRUE (and its default) tag params will be added to hashtable HTMLchunk (object).oParams\n        oP.SetChunkHashMode(false);\n\n        // if you set this to true then original parsed HTML for given chunk will be kept - \n        // this will reduce performance somewhat, but may be desireable in some cases where\n        // reconstruction of HTML may be necessary\n        oP.bKeepRawHTML = false;\n\n        // if set to true (it is false by default), then entities will be decoded: this is essential\n        // if you want to get strings that contain final representation of the data in HTML, however\n        // you should be aware that if you want to use such strings into output HTML string then you will\n        // need to do Entity encoding or same string may fail later\n        oP.bDecodeEntities = true;\n\n        // we have option to keep most entities as is - only replace stuff like \u0026nbsp; \n        // this is called Mini Entities mode - it is handy when HTML will need\n        // to be re-created after it was parsed, though in this case really\n        // entities should not be parsed at all\n        oP.bDecodeMiniEntities = true;\n\n        if (!oP.bDecodeEntities \u0026\u0026 oP.bDecodeMiniEntities)\n            oP.InitMiniEntities();\n\n        // if set to true, then in case of Comments and SCRIPT tags the data set to oHTML will be\n        // extracted BETWEEN those tags, rather than include complete RAW HTML that includes tags too\n        // this only works if auto extraction is enabled\n        oP.bAutoExtractBetweenTagsOnly = true;\n\n        // if true then comments will be extracted automatically\n        oP.bAutoKeepComments = true;\n\n        // if true then scripts will be extracted automatically: \n        oP.bAutoKeepScripts = true;\n\n        // if this option is true then whitespace before start of tag will be compressed to single\n        // space character in string: \u0022 \u0022, if false then full whitespace before tag will be returned (slower)\n        // you may only want to set it to false if you want exact whitespace between tags, otherwise it is just\n        // a waste of CPU cycles\n        oP.bCompressWhiteSpaceBeforeTag = true;\n\n        // if true (default) then tags with attributes marked as CLOSED (/ at the end) will be automatically\n        // forced to be considered as open tags - this is no good for XML parsing, but I keep it for backwards\n        // compatibility for my stuff as it makes it easier to avoid checking for same tag which is both closed\n        // or open\n        oP.bAutoMarkClosedTagsWithParamsAsOpen = false;\n\n        return oP;\n    }\n}\n}  \n\n    ","\nThe Html Agility Pack has been mentioned before - if you are going for speed, you might also want to check out the Majestic-12 HTML parser. Its handling is rather clunky, but it delivers a really fast parsing experience.\n    ","\nI think @Erlend\u0027s use of HTMLDocument is the best way to go. However, I have also had good luck using this simple library:\n\nSgmlReader\n    ","\nNo 3rd party lib, WebBrowser class solution that can run on Console, and Asp.net\n\nusing System;\nusing System.Collections.Generic;\nusing System.Text;\nusing System.Windows.Forms;\nusing System.Threading;\n\nclass ParseHTML\n{\n    public ParseHTML() { }\n    private string ReturnString;\n\n    public string doParsing(string html)\n    {\n        Thread t = new Thread(TParseMain);\n        t.ApartmentState = ApartmentState.STA;\n        t.Start((object)html);\n        t.Join();\n        return ReturnString;\n    }\n\n    private void TParseMain(object html)\n    {\n        WebBrowser wbc = new WebBrowser();\n        wbc.DocumentText = \u0022feces of a dummy\u0022;        //;magic words        \n        HtmlDocument doc = wbc.Document.OpenNew(true);\n        doc.Write((string)html);\n        this.ReturnString = doc.Body.InnerHtml \u002B \u0022 do here something\u0022;\n        return;\n    }\n}\n\n\nusage:\n\nstring myhtml = \u0022\u003CHTML\u003E\u003CBODY\u003EThis is a new HTML document.\u003C/BODY\u003E\u003C/HTML\u003E\u0022;\nConsole.WriteLine(\u0022before:\u0022 \u002B myhtml);\nmyhtml = (new ParseHTML()).doParsing(myhtml);\nConsole.WriteLine(\u0022after:\u0022 \u002B myhtml);\n\n    ","\nThe trouble with parsing HTML is that it isn\u0027t an exact science. If it was XHTML that you were parsing, then things would be a lot easier (as you mention you could use a general XML parser). Because HTML isn\u0027t necessarily well-formed XML you will come into lots of problems trying to parse it. It almost needs to be done on a site-by-site basis.\n    ","\nI\u0027ve used ZetaHtmlTidy in the past to load random websites and then hit against various parts of the content with xpath (eg /html/body//p[@class=\u0027textblock\u0027]). It worked well but there were some exceptional sites that it had problems with, so I don\u0027t know if it\u0027s the absolute best solution.\n    ","\nYou could use a HTML DTD, and the generic XML parsing libraries.\n    ","\nUse WatiN if you need to see the impact of JS on the page [and you\u0027re prepared to start a browser]\n    ","\nDepending on your needs you might  go for the more feature-rich libraries. I tried most/all of the solutions suggested, but what stood out head \u0026 shoulders was Html Agility Pack. It is a very forgiving and flexible parser.\n    ","\nTry this script.\n\nhttp://www.biterscripting.com/SS_URLs.html\n\nWhen I use it with this url,\n\nscript SS_URLs.txt URL(\u0022http://stackoverflow.com/questions/56107/what-is-the-best-way-to-parse-html-in-c\u0022)\n\n\nIt shows me all the links on the page for this thread.\n\nhttp://sstatic.net/so/all.css\nhttp://sstatic.net/so/favicon.ico\nhttp://sstatic.net/so/apple-touch-icon.png\n.\n.\n.\n\n\nYou can modify that script to check for images, variables, whatever.\n    ","\nI wrote some classes for parsing HTML tags in C#. They are nice and simple if they meet your particular needs.\n\nYou can read an article about them and download the source code at http://www.blackbeltcoder.com/Articles/strings/parsing-html-tags-in-c.\n\nThere\u0027s also an article about a generic parsing helper class at http://www.blackbeltcoder.com/Articles/strings/a-text-parsing-helper-class.\n    ","\n                \n                It\u0027s worth noting that it doesn\u0027t deal well with self-closing tags like \u003Cp\u003E (which it interprets as empty) and really badly with optional end-tags like \u003Cli\u003E (which it interprets as missing an end tag, and so nests consecutive li tags).\n                \n\u2013\u00A0Eamon Nerbonne\n                May 14 \u002711 at 16:48\n            ","\n                \n                Call me crazy, but I am having trouble figuring out how to use mshtml.  Do you have any good links?\n                \n\u2013\u00A0Alex Baranosky\n                Jan 9 \u002709 at 5:52\n            ","\n                \n                @Alex you need to include Microsoft.mshtml can find a bit more info here: msdn.microsoft.com/en-us/library/aa290341(VS.71).aspx\n                \n\u2013\u00A0Wilfred Knievel\n                Jan 12 \u002710 at 23:17\n            ","\n                \n                I have a blogpost about Tidy.Net and ManagedTidy both are capable of parsing and validating (x)html files. If you do not need to validate stuff. I\u0027d go with the htmlagilitypack. jphellemons.nl/post/\u2026\n                \n\u2013\u00A0JP Hellemons\n                Oct 25 \u002711 at 7:03\n            ","\n                \n                thank you, this looks interesting!  i\u0027ve been surprised, what with jQuery\u0027s popularity, that it has been so hard to find a C# project inspired by it.  Now if only I could find something where document manipulation and more advanced traversal was also part of the package... :)\n                \n\u2013\u00A0Funka\n                May 14 \u002710 at 1:33\n            ","\n                \n                I just used this today and I have to say, it is very easy to use if you know jQuery.\n                \n\u2013\u00A0Chi Chan\n                Oct 14 \u002710 at 20:56\n            ","\n                \n                btw HtmlAgilityPack has worked well for me in the past, I just prefer LINQ.\n                \n\u2013\u00A0Frank Schwieterman\n                Mar 8 \u002709 at 22:21\n            ","\n                \n                What\u0027s the performance like when you add the LINQ conversion? Any idea how it compares with HtmlAgilityPack?\n                \n\u2013\u00A0user29439\n                Aug 3 \u002711 at 22:42\n            ","\n                \n                I never did a performance comparison.  These days I use HtmlAgilityPack, much less hassle.  Unfortunately the code above has lots of special cases I didn\u0027t bother to write tests for, so I can\u0027t really maintain it.\n                \n\u2013\u00A0Frank Schwieterman\n                Aug 4 \u002711 at 0:40\n            ","\n                \n                Isn\u0027t parsing well forming HTML as specified by the W3C as an exact science as XHTML?\n                \n\u2013\u00A0pupeno\n                Dec 8 \u002709 at 12:56\n            ","\n                \n                It should be, but people don\u0027t do it.\n                \n\u2013\u00A0Dominic K\n                Feb 16 \u002710 at 3:54\n            ","\n                \n                @J. Pablo Not nearly as easy though (and hence the reason for a library :p)... for instance, \u003Cp\u003E tags do not need to be explicitly closed under HTML4/5. Yikes!\n                \n\u2013\u00A0user166390\n                Dec 22 \u002710 at 4:13\n                        \n                            \n                        \n            ","\n                \n                Very few real-world HTML pages will survive an XML parsing library.\n                \n\u2013\u00A0Frank Krueger\n                Sep 11 \u002708 at 11:07\n            "]},{"Id":"4b51827d-c411-4a1a-aff7-06bfe39d2aa3","QuestionId":202011,"Description":"Encrypt and decrypt a string in C#?","Votes":715,"Views":703386,"Tags":["c#",".net","encryption","mono","cryptography"],"Discussions":["\nEDIT 2013-Oct: Although I\u0027ve edited this answer over time to address shortcomings, please see jbtule\u0027s answer for a more robust, informed solution.\n\nhttps://stackoverflow.com/a/10366194/188474\n\nOriginal Answer:\n\nHere\u0027s a working example derived from the \u0022RijndaelManaged Class\u0022 documentation and the MCTS Training Kit.  \n\nEDIT 2012-April: This answer was edited to pre-pend the IV per jbtule\u0027s suggestion and as illustrated here:\n\nhttp://msdn.microsoft.com/en-us/library/system.security.cryptography.aesmanaged%28v=vs.95%29.aspx\n\nGood luck!\n\npublic class Crypto\n{\n\n    //While an app specific salt is not the best practice for\n    //password based encryption, it\u0027s probably safe enough as long as\n    //it is truly uncommon. Also too much work to alter this answer otherwise.\n    private static byte[] _salt = __To_Do__(\u0022Add a app specific salt here\u0022);\n\n    /// \u003Csummary\u003E\n    /// Encrypt the given string using AES.  The string can be decrypted using \n    /// DecryptStringAES().  The sharedSecret parameters must match.\n    /// \u003C/summary\u003E\n    /// \u003Cparam name=\u0022plainText\u0022\u003EThe text to encrypt.\u003C/param\u003E\n    /// \u003Cparam name=\u0022sharedSecret\u0022\u003EA password used to generate a key for encryption.\u003C/param\u003E\n    public static string EncryptStringAES(string plainText, string sharedSecret)\n    {\n        if (string.IsNullOrEmpty(plainText))\n            throw new ArgumentNullException(\u0022plainText\u0022);\n        if (string.IsNullOrEmpty(sharedSecret))\n            throw new ArgumentNullException(\u0022sharedSecret\u0022);\n\n        string outStr = null;                       // Encrypted string to return\n        RijndaelManaged aesAlg = null;              // RijndaelManaged object used to encrypt the data.\n\n        try\n        {\n            // generate the key from the shared secret and the salt\n            Rfc2898DeriveBytes key = new Rfc2898DeriveBytes(sharedSecret, _salt);\n\n            // Create a RijndaelManaged object\n            aesAlg = new RijndaelManaged();\n            aesAlg.Key = key.GetBytes(aesAlg.KeySize / 8);\n\n            // Create a decryptor to perform the stream transform.\n            ICryptoTransform encryptor = aesAlg.CreateEncryptor(aesAlg.Key, aesAlg.IV);\n\n            // Create the streams used for encryption.\n            using (MemoryStream msEncrypt = new MemoryStream())\n            {\n                // prepend the IV\n                msEncrypt.Write(BitConverter.GetBytes(aesAlg.IV.Length), 0, sizeof(int));\n                msEncrypt.Write(aesAlg.IV, 0, aesAlg.IV.Length);\n                using (CryptoStream csEncrypt = new CryptoStream(msEncrypt, encryptor, CryptoStreamMode.Write))\n                {\n                    using (StreamWriter swEncrypt = new StreamWriter(csEncrypt))\n                    {\n                        //Write all data to the stream.\n                        swEncrypt.Write(plainText);\n                    }\n                }\n                outStr = Convert.ToBase64String(msEncrypt.ToArray());\n            }\n        }\n        finally\n        {\n            // Clear the RijndaelManaged object.\n            if (aesAlg != null)\n                aesAlg.Clear();\n        }\n\n        // Return the encrypted bytes from the memory stream.\n        return outStr;\n    }\n\n    /// \u003Csummary\u003E\n    /// Decrypt the given string.  Assumes the string was encrypted using \n    /// EncryptStringAES(), using an identical sharedSecret.\n    /// \u003C/summary\u003E\n    /// \u003Cparam name=\u0022cipherText\u0022\u003EThe text to decrypt.\u003C/param\u003E\n    /// \u003Cparam name=\u0022sharedSecret\u0022\u003EA password used to generate a key for decryption.\u003C/param\u003E\n    public static string DecryptStringAES(string cipherText, string sharedSecret)\n    {\n        if (string.IsNullOrEmpty(cipherText))\n            throw new ArgumentNullException(\u0022cipherText\u0022);\n        if (string.IsNullOrEmpty(sharedSecret))\n            throw new ArgumentNullException(\u0022sharedSecret\u0022);\n\n        // Declare the RijndaelManaged object\n        // used to decrypt the data.\n        RijndaelManaged aesAlg = null;\n\n        // Declare the string used to hold\n        // the decrypted text.\n        string plaintext = null;\n\n        try\n        {\n            // generate the key from the shared secret and the salt\n            Rfc2898DeriveBytes key = new Rfc2898DeriveBytes(sharedSecret, _salt);\n\n            // Create the streams used for decryption.                \n            byte[] bytes = Convert.FromBase64String(cipherText);\n            using (MemoryStream msDecrypt = new MemoryStream(bytes))\n            {\n                // Create a RijndaelManaged object\n                // with the specified key and IV.\n                aesAlg = new RijndaelManaged();\n                aesAlg.Key = key.GetBytes(aesAlg.KeySize / 8);\n                // Get the initialization vector from the encrypted stream\n                aesAlg.IV = ReadByteArray(msDecrypt);\n                // Create a decrytor to perform the stream transform.\n                ICryptoTransform decryptor = aesAlg.CreateDecryptor(aesAlg.Key, aesAlg.IV);\n                using (CryptoStream csDecrypt = new CryptoStream(msDecrypt, decryptor, CryptoStreamMode.Read))\n                {\n                    using (StreamReader srDecrypt = new StreamReader(csDecrypt))\n\n                        // Read the decrypted bytes from the decrypting stream\n                        // and place them in a string.\n                        plaintext = srDecrypt.ReadToEnd();\n                }\n            }\n        }\n        finally\n        {\n            // Clear the RijndaelManaged object.\n            if (aesAlg != null)\n                aesAlg.Clear();\n        }\n\n        return plaintext;\n    }\n\n    private static byte[] ReadByteArray(Stream s)\n    {\n        byte[] rawLength = new byte[sizeof(int)];\n        if (s.Read(rawLength, 0, rawLength.Length) != rawLength.Length)\n        {\n            throw new SystemException(\u0022Stream did not contain properly formatted byte array\u0022);\n        }\n\n        byte[] buffer = new byte[BitConverter.ToInt32(rawLength, 0)];\n        if (s.Read(buffer, 0, buffer.Length) != buffer.Length)\n        {\n            throw new SystemException(\u0022Did not read byte array properly\u0022);\n        }\n\n        return buffer;\n    }\n}\n\n    ","\nModern Examples of Symmetric Authenticated Encryption of a string. \n\nThe general best practice for symmetric encryption is to use Authenticated Encryption with Associated Data (AEAD), however this isn\u0027t a part of the standard .net crypto libraries. So the first example uses AES256 and then HMAC256, a two step Encrypt then MAC, which requires more overhead and more keys.\n\nThe second example uses the simpler practice of AES256-GCM using the open source Bouncy Castle (via nuget).\n\nBoth examples have a main function that takes secret message string, key(s) and an optional non-secret payload and return and authenticated encrypted string optionally prepended with the non-secret data. Ideally you would use these with 256bit key(s) randomly generated see NewKey().\n\nBoth examples also have a helper methods that use a string password to generate the keys. These helper methods are provided as a convenience to match up with other examples, however they are far less secure because the strength of the password is going to be far weaker than a 256 bit key.\n\nUpdate:\nAdded byte[] overloads, and only the Gist has the full formatting with 4 spaces indent and api docs due to StackOverflow answer limits.\n\n\n\n.NET Built-in Encrypt(AES)-Then-MAC(HMAC) [Gist]\n\n/*\n * This work (Modern Encryption of a String C#, by James Tuley), \n * identified by James Tuley, is free of known copyright restrictions.\n * https://gist.github.com/4336842\n * http://creativecommons.org/publicdomain/mark/1.0/ \n */\n\nusing System;\nusing System.IO;\nusing System.Security.Cryptography;\nusing System.Text;\n\nnamespace Encryption\n{\n  public static class AESThenHMAC\n  {\n    private static readonly RandomNumberGenerator Random = RandomNumberGenerator.Create();\n\n    //Preconfigured Encryption Parameters\n    public static readonly int BlockBitSize = 128;\n    public static readonly int KeyBitSize = 256;\n\n    //Preconfigured Password Key Derivation Parameters\n    public static readonly int SaltBitSize = 64;\n    public static readonly int Iterations = 10000;\n    public static readonly int MinPasswordLength = 12;\n\n    /// \u003Csummary\u003E\n    /// Helper that generates a random key on each call.\n    /// \u003C/summary\u003E\n    /// \u003Creturns\u003E\u003C/returns\u003E\n    public static byte[] NewKey()\n    {\n      var key = new byte[KeyBitSize / 8];\n      Random.GetBytes(key);\n      return key;\n    }\n\n    /// \u003Csummary\u003E\n    /// Simple Encryption (AES) then Authentication (HMAC) for a UTF8 Message.\n    /// \u003C/summary\u003E\n    /// \u003Cparam name=\u0022secretMessage\u0022\u003EThe secret message.\u003C/param\u003E\n    /// \u003Cparam name=\u0022cryptKey\u0022\u003EThe crypt key.\u003C/param\u003E\n    /// \u003Cparam name=\u0022authKey\u0022\u003EThe auth key.\u003C/param\u003E\n    /// \u003Cparam name=\u0022nonSecretPayload\u0022\u003E(Optional) Non-Secret Payload.\u003C/param\u003E\n    /// \u003Creturns\u003E\n    /// Encrypted Message\n    /// \u003C/returns\u003E\n    /// \u003Cexception cref=\u0022System.ArgumentException\u0022\u003ESecret Message Required!;secretMessage\u003C/exception\u003E\n    /// \u003Cremarks\u003E\n    /// Adds overhead of (Optional-Payload \u002B BlockSize(16) \u002B Message-Padded-To-Blocksize \u002B  HMac-Tag(32)) * 1.33 Base64\n    /// \u003C/remarks\u003E\n    public static string SimpleEncrypt(string secretMessage, byte[] cryptKey, byte[] authKey,\n                       byte[] nonSecretPayload = null)\n    {\n      if (string.IsNullOrEmpty(secretMessage))\n        throw new ArgumentException(\u0022Secret Message Required!\u0022, \u0022secretMessage\u0022);\n\n      var plainText = Encoding.UTF8.GetBytes(secretMessage);\n      var cipherText = SimpleEncrypt(plainText, cryptKey, authKey, nonSecretPayload);\n      return Convert.ToBase64String(cipherText);\n    }\n\n    /// \u003Csummary\u003E\n    /// Simple Authentication (HMAC) then Decryption (AES) for a secrets UTF8 Message.\n    /// \u003C/summary\u003E\n    /// \u003Cparam name=\u0022encryptedMessage\u0022\u003EThe encrypted message.\u003C/param\u003E\n    /// \u003Cparam name=\u0022cryptKey\u0022\u003EThe crypt key.\u003C/param\u003E\n    /// \u003Cparam name=\u0022authKey\u0022\u003EThe auth key.\u003C/param\u003E\n    /// \u003Cparam name=\u0022nonSecretPayloadLength\u0022\u003ELength of the non secret payload.\u003C/param\u003E\n    /// \u003Creturns\u003E\n    /// Decrypted Message\n    /// \u003C/returns\u003E\n    /// \u003Cexception cref=\u0022System.ArgumentException\u0022\u003EEncrypted Message Required!;encryptedMessage\u003C/exception\u003E\n    public static string SimpleDecrypt(string encryptedMessage, byte[] cryptKey, byte[] authKey,\n                       int nonSecretPayloadLength = 0)\n    {\n      if (string.IsNullOrWhiteSpace(encryptedMessage))\n        throw new ArgumentException(\u0022Encrypted Message Required!\u0022, \u0022encryptedMessage\u0022);\n\n      var cipherText = Convert.FromBase64String(encryptedMessage);\n      var plainText = SimpleDecrypt(cipherText, cryptKey, authKey, nonSecretPayloadLength);\n      return plainText == null ? null : Encoding.UTF8.GetString(plainText);\n    }\n\n    /// \u003Csummary\u003E\n    /// Simple Encryption (AES) then Authentication (HMAC) of a UTF8 message\n    /// using Keys derived from a Password (PBKDF2).\n    /// \u003C/summary\u003E\n    /// \u003Cparam name=\u0022secretMessage\u0022\u003EThe secret message.\u003C/param\u003E\n    /// \u003Cparam name=\u0022password\u0022\u003EThe password.\u003C/param\u003E\n    /// \u003Cparam name=\u0022nonSecretPayload\u0022\u003EThe non secret payload.\u003C/param\u003E\n    /// \u003Creturns\u003E\n    /// Encrypted Message\n    /// \u003C/returns\u003E\n    /// \u003Cexception cref=\u0022System.ArgumentException\u0022\u003Epassword\u003C/exception\u003E\n    /// \u003Cremarks\u003E\n    /// Significantly less secure than using random binary keys.\n    /// Adds additional non secret payload for key generation parameters.\n    /// \u003C/remarks\u003E\n    public static string SimpleEncryptWithPassword(string secretMessage, string password,\n                             byte[] nonSecretPayload = null)\n    {\n      if (string.IsNullOrEmpty(secretMessage))\n        throw new ArgumentException(\u0022Secret Message Required!\u0022, \u0022secretMessage\u0022);\n\n      var plainText = Encoding.UTF8.GetBytes(secretMessage);\n      var cipherText = SimpleEncryptWithPassword(plainText, password, nonSecretPayload);\n      return Convert.ToBase64String(cipherText);\n    }\n\n    /// \u003Csummary\u003E\n    /// Simple Authentication (HMAC) and then Descryption (AES) of a UTF8 Message\n    /// using keys derived from a password (PBKDF2). \n    /// \u003C/summary\u003E\n    /// \u003Cparam name=\u0022encryptedMessage\u0022\u003EThe encrypted message.\u003C/param\u003E\n    /// \u003Cparam name=\u0022password\u0022\u003EThe password.\u003C/param\u003E\n    /// \u003Cparam name=\u0022nonSecretPayloadLength\u0022\u003ELength of the non secret payload.\u003C/param\u003E\n    /// \u003Creturns\u003E\n    /// Decrypted Message\n    /// \u003C/returns\u003E\n    /// \u003Cexception cref=\u0022System.ArgumentException\u0022\u003EEncrypted Message Required!;encryptedMessage\u003C/exception\u003E\n    /// \u003Cremarks\u003E\n    /// Significantly less secure than using random binary keys.\n    /// \u003C/remarks\u003E\n    public static string SimpleDecryptWithPassword(string encryptedMessage, string password,\n                             int nonSecretPayloadLength = 0)\n    {\n      if (string.IsNullOrWhiteSpace(encryptedMessage))\n        throw new ArgumentException(\u0022Encrypted Message Required!\u0022, \u0022encryptedMessage\u0022);\n\n      var cipherText = Convert.FromBase64String(encryptedMessage);\n      var plainText = SimpleDecryptWithPassword(cipherText, password, nonSecretPayloadLength);\n      return plainText == null ? null : Encoding.UTF8.GetString(plainText);\n    }\n\n    public static byte[] SimpleEncrypt(byte[] secretMessage, byte[] cryptKey, byte[] authKey, byte[] nonSecretPayload = null)\n    {\n      //User Error Checks\n      if (cryptKey == null || cryptKey.Length != KeyBitSize / 8)\n        throw new ArgumentException(String.Format(\u0022Key needs to be {0} bit!\u0022, KeyBitSize), \u0022cryptKey\u0022);\n\n      if (authKey == null || authKey.Length != KeyBitSize / 8)\n        throw new ArgumentException(String.Format(\u0022Key needs to be {0} bit!\u0022, KeyBitSize), \u0022authKey\u0022);\n\n      if (secretMessage == null || secretMessage.Length \u003C 1)\n        throw new ArgumentException(\u0022Secret Message Required!\u0022, \u0022secretMessage\u0022);\n\n      //non-secret payload optional\n      nonSecretPayload = nonSecretPayload ?? new byte[] { };\n\n      byte[] cipherText;\n      byte[] iv;\n\n      using (var aes = new AesManaged\n      {\n        KeySize = KeyBitSize,\n        BlockSize = BlockBitSize,\n        Mode = CipherMode.CBC,\n        Padding = PaddingMode.PKCS7\n      })\n      {\n\n        //Use random IV\n        aes.GenerateIV();\n        iv = aes.IV;\n\n        using (var encrypter = aes.CreateEncryptor(cryptKey, iv))\n        using (var cipherStream = new MemoryStream())\n        {\n          using (var cryptoStream = new CryptoStream(cipherStream, encrypter, CryptoStreamMode.Write))\n          using (var binaryWriter = new BinaryWriter(cryptoStream))\n          {\n            //Encrypt Data\n            binaryWriter.Write(secretMessage);\n          }\n\n          cipherText = cipherStream.ToArray();\n        }\n\n      }\n\n      //Assemble encrypted message and add authentication\n      using (var hmac = new HMACSHA256(authKey))\n      using (var encryptedStream = new MemoryStream())\n      {\n        using (var binaryWriter = new BinaryWriter(encryptedStream))\n        {\n          //Prepend non-secret payload if any\n          binaryWriter.Write(nonSecretPayload);\n          //Prepend IV\n          binaryWriter.Write(iv);\n          //Write Ciphertext\n          binaryWriter.Write(cipherText);\n          binaryWriter.Flush();\n\n          //Authenticate all data\n          var tag = hmac.ComputeHash(encryptedStream.ToArray());\n          //Postpend tag\n          binaryWriter.Write(tag);\n        }\n        return encryptedStream.ToArray();\n      }\n\n    }\n\n    public static byte[] SimpleDecrypt(byte[] encryptedMessage, byte[] cryptKey, byte[] authKey, int nonSecretPayloadLength = 0)\n    {\n\n      //Basic Usage Error Checks\n      if (cryptKey == null || cryptKey.Length != KeyBitSize / 8)\n        throw new ArgumentException(String.Format(\u0022CryptKey needs to be {0} bit!\u0022, KeyBitSize), \u0022cryptKey\u0022);\n\n      if (authKey == null || authKey.Length != KeyBitSize / 8)\n        throw new ArgumentException(String.Format(\u0022AuthKey needs to be {0} bit!\u0022, KeyBitSize), \u0022authKey\u0022);\n\n      if (encryptedMessage == null || encryptedMessage.Length == 0)\n        throw new ArgumentException(\u0022Encrypted Message Required!\u0022, \u0022encryptedMessage\u0022);\n\n      using (var hmac = new HMACSHA256(authKey))\n      {\n        var sentTag = new byte[hmac.HashSize / 8];\n        //Calculate Tag\n        var calcTag = hmac.ComputeHash(encryptedMessage, 0, encryptedMessage.Length - sentTag.Length);\n        var ivLength = (BlockBitSize / 8);\n\n        //if message length is to small just return null\n        if (encryptedMessage.Length \u003C sentTag.Length \u002B nonSecretPayloadLength \u002B ivLength)\n          return null;\n\n        //Grab Sent Tag\n        Array.Copy(encryptedMessage, encryptedMessage.Length - sentTag.Length, sentTag, 0, sentTag.Length);\n\n        //Compare Tag with constant time comparison\n        var compare = 0;\n        for (var i = 0; i \u003C sentTag.Length; i\u002B\u002B)\n          compare |= sentTag[i] ^ calcTag[i]; \n\n        //if message doesn\u0027t authenticate return null\n        if (compare != 0)\n          return null;\n\n        using (var aes = new AesManaged\n        {\n          KeySize = KeyBitSize,\n          BlockSize = BlockBitSize,\n          Mode = CipherMode.CBC,\n          Padding = PaddingMode.PKCS7\n        })\n        {\n\n          //Grab IV from message\n          var iv = new byte[ivLength];\n          Array.Copy(encryptedMessage, nonSecretPayloadLength, iv, 0, iv.Length);\n\n          using (var decrypter = aes.CreateDecryptor(cryptKey, iv))\n          using (var plainTextStream = new MemoryStream())\n          {\n            using (var decrypterStream = new CryptoStream(plainTextStream, decrypter, CryptoStreamMode.Write))\n            using (var binaryWriter = new BinaryWriter(decrypterStream))\n            {\n              //Decrypt Cipher Text from Message\n              binaryWriter.Write(\n                encryptedMessage,\n                nonSecretPayloadLength \u002B iv.Length,\n                encryptedMessage.Length - nonSecretPayloadLength - iv.Length - sentTag.Length\n              );\n            }\n            //Return Plain Text\n            return plainTextStream.ToArray();\n          }\n        }\n      }\n    }\n\n    public static byte[] SimpleEncryptWithPassword(byte[] secretMessage, string password, byte[] nonSecretPayload = null)\n    {\n      nonSecretPayload = nonSecretPayload ?? new byte[] {};\n\n      //User Error Checks\n      if (string.IsNullOrWhiteSpace(password) || password.Length \u003C MinPasswordLength)\n        throw new ArgumentException(String.Format(\u0022Must have a password of at least {0} characters!\u0022, MinPasswordLength), \u0022password\u0022);\n\n      if (secretMessage == null || secretMessage.Length ==0)\n        throw new ArgumentException(\u0022Secret Message Required!\u0022, \u0022secretMessage\u0022);\n\n      var payload = new byte[((SaltBitSize / 8) * 2) \u002B nonSecretPayload.Length];\n\n      Array.Copy(nonSecretPayload, payload, nonSecretPayload.Length);\n      int payloadIndex = nonSecretPayload.Length;\n\n      byte[] cryptKey;\n      byte[] authKey;\n      //Use Random Salt to prevent pre-generated weak password attacks.\n      using (var generator = new Rfc2898DeriveBytes(password, SaltBitSize / 8, Iterations))\n      {\n        var salt = generator.Salt;\n\n        //Generate Keys\n        cryptKey = generator.GetBytes(KeyBitSize / 8);\n\n        //Create Non Secret Payload\n        Array.Copy(salt, 0, payload, payloadIndex, salt.Length);\n        payloadIndex \u002B= salt.Length;\n      }\n\n      //Deriving separate key, might be less efficient than using HKDF, \n      //but now compatible with RNEncryptor which had a very similar wireformat and requires less code than HKDF.\n      using (var generator = new Rfc2898DeriveBytes(password, SaltBitSize / 8, Iterations))\n      {\n        var salt = generator.Salt;\n\n        //Generate Keys\n        authKey = generator.GetBytes(KeyBitSize / 8);\n\n        //Create Rest of Non Secret Payload\n        Array.Copy(salt, 0, payload, payloadIndex, salt.Length);\n      }\n\n      return SimpleEncrypt(secretMessage, cryptKey, authKey, payload);\n    }\n\n    public static byte[] SimpleDecryptWithPassword(byte[] encryptedMessage, string password, int nonSecretPayloadLength = 0)\n    {\n      //User Error Checks\n      if (string.IsNullOrWhiteSpace(password) || password.Length \u003C MinPasswordLength)\n        throw new ArgumentException(String.Format(\u0022Must have a password of at least {0} characters!\u0022, MinPasswordLength), \u0022password\u0022);\n\n      if (encryptedMessage == null || encryptedMessage.Length == 0)\n        throw new ArgumentException(\u0022Encrypted Message Required!\u0022, \u0022encryptedMessage\u0022);\n\n      var cryptSalt = new byte[SaltBitSize / 8];\n      var authSalt = new byte[SaltBitSize / 8];\n\n      //Grab Salt from Non-Secret Payload\n      Array.Copy(encryptedMessage, nonSecretPayloadLength, cryptSalt, 0, cryptSalt.Length);\n      Array.Copy(encryptedMessage, nonSecretPayloadLength \u002B cryptSalt.Length, authSalt, 0, authSalt.Length);\n\n      byte[] cryptKey;\n      byte[] authKey;\n\n      //Generate crypt key\n      using (var generator = new Rfc2898DeriveBytes(password, cryptSalt, Iterations))\n      {\n        cryptKey = generator.GetBytes(KeyBitSize / 8);\n      }\n      //Generate auth key\n      using (var generator = new Rfc2898DeriveBytes(password, authSalt, Iterations))\n      {\n        authKey = generator.GetBytes(KeyBitSize / 8);\n      }\n\n      return SimpleDecrypt(encryptedMessage, cryptKey, authKey, cryptSalt.Length \u002B authSalt.Length \u002B nonSecretPayloadLength);\n    }\n  }\n}\n\n\n\n\nBouncy Castle AES-GCM [Gist]\n\n/*\n * This work (Modern Encryption of a String C#, by James Tuley), \n * identified by James Tuley, is free of known copyright restrictions.\n * https://gist.github.com/4336842\n * http://creativecommons.org/publicdomain/mark/1.0/ \n */\n\nusing System;\nusing System.IO;\nusing System.Text;\nusing Org.BouncyCastle.Crypto;\nusing Org.BouncyCastle.Crypto.Engines;\nusing Org.BouncyCastle.Crypto.Generators;\nusing Org.BouncyCastle.Crypto.Modes;\nusing Org.BouncyCastle.Crypto.Parameters;\nusing Org.BouncyCastle.Security;\nnamespace Encryption\n{\n\n  public static class AESGCM\n  {\n    private static readonly SecureRandom Random = new SecureRandom();\n\n    //Preconfigured Encryption Parameters\n    public static readonly int NonceBitSize = 128;\n    public static readonly int MacBitSize = 128;\n    public static readonly int KeyBitSize = 256;\n\n    //Preconfigured Password Key Derivation Parameters\n    public static readonly int SaltBitSize = 128;\n    public static readonly int Iterations = 10000;\n    public static readonly int MinPasswordLength = 12;\n\n\n    /// \u003Csummary\u003E\n    /// Helper that generates a random new key on each call.\n    /// \u003C/summary\u003E\n    /// \u003Creturns\u003E\u003C/returns\u003E\n    public static byte[] NewKey()\n    {\n      var key = new byte[KeyBitSize / 8];\n      Random.NextBytes(key);\n      return key;\n    }\n\n    /// \u003Csummary\u003E\n    /// Simple Encryption And Authentication (AES-GCM) of a UTF8 string.\n    /// \u003C/summary\u003E\n    /// \u003Cparam name=\u0022secretMessage\u0022\u003EThe secret message.\u003C/param\u003E\n    /// \u003Cparam name=\u0022key\u0022\u003EThe key.\u003C/param\u003E\n    /// \u003Cparam name=\u0022nonSecretPayload\u0022\u003EOptional non-secret payload.\u003C/param\u003E\n    /// \u003Creturns\u003E\n    /// Encrypted Message\n    /// \u003C/returns\u003E\n    /// \u003Cexception cref=\u0022System.ArgumentException\u0022\u003ESecret Message Required!;secretMessage\u003C/exception\u003E\n    /// \u003Cremarks\u003E\n    /// Adds overhead of (Optional-Payload \u002B BlockSize(16) \u002B Message \u002B  HMac-Tag(16)) * 1.33 Base64\n    /// \u003C/remarks\u003E\n    public static string SimpleEncrypt(string secretMessage, byte[] key, byte[] nonSecretPayload = null)\n    {\n      if (string.IsNullOrEmpty(secretMessage))\n        throw new ArgumentException(\u0022Secret Message Required!\u0022, \u0022secretMessage\u0022);\n\n      var plainText = Encoding.UTF8.GetBytes(secretMessage);\n      var cipherText = SimpleEncrypt(plainText, key, nonSecretPayload);\n      return Convert.ToBase64String(cipherText);\n    }\n\n\n    /// \u003Csummary\u003E\n    /// Simple Decryption \u0026 Authentication (AES-GCM) of a UTF8 Message\n    /// \u003C/summary\u003E\n    /// \u003Cparam name=\u0022encryptedMessage\u0022\u003EThe encrypted message.\u003C/param\u003E\n    /// \u003Cparam name=\u0022key\u0022\u003EThe key.\u003C/param\u003E\n    /// \u003Cparam name=\u0022nonSecretPayloadLength\u0022\u003ELength of the optional non-secret payload.\u003C/param\u003E\n    /// \u003Creturns\u003EDecrypted Message\u003C/returns\u003E\n    public static string SimpleDecrypt(string encryptedMessage, byte[] key, int nonSecretPayloadLength = 0)\n    {\n      if (string.IsNullOrEmpty(encryptedMessage))\n        throw new ArgumentException(\u0022Encrypted Message Required!\u0022, \u0022encryptedMessage\u0022);\n\n      var cipherText = Convert.FromBase64String(encryptedMessage);\n      var plainText = SimpleDecrypt(cipherText, key, nonSecretPayloadLength);\n      return plainText == null ? null : Encoding.UTF8.GetString(plainText);\n    }\n\n    /// \u003Csummary\u003E\n    /// Simple Encryption And Authentication (AES-GCM) of a UTF8 String\n    /// using key derived from a password (PBKDF2).\n    /// \u003C/summary\u003E\n    /// \u003Cparam name=\u0022secretMessage\u0022\u003EThe secret message.\u003C/param\u003E\n    /// \u003Cparam name=\u0022password\u0022\u003EThe password.\u003C/param\u003E\n    /// \u003Cparam name=\u0022nonSecretPayload\u0022\u003EThe non secret payload.\u003C/param\u003E\n    /// \u003Creturns\u003E\n    /// Encrypted Message\n    /// \u003C/returns\u003E\n    /// \u003Cremarks\u003E\n    /// Significantly less secure than using random binary keys.\n    /// Adds additional non secret payload for key generation parameters.\n    /// \u003C/remarks\u003E\n    public static string SimpleEncryptWithPassword(string secretMessage, string password,\n                             byte[] nonSecretPayload = null)\n    {\n      if (string.IsNullOrEmpty(secretMessage))\n        throw new ArgumentException(\u0022Secret Message Required!\u0022, \u0022secretMessage\u0022);\n\n      var plainText = Encoding.UTF8.GetBytes(secretMessage);\n      var cipherText = SimpleEncryptWithPassword(plainText, password, nonSecretPayload);\n      return Convert.ToBase64String(cipherText);\n    }\n\n\n    /// \u003Csummary\u003E\n    /// Simple Decryption and Authentication (AES-GCM) of a UTF8 message\n    /// using a key derived from a password (PBKDF2)\n    /// \u003C/summary\u003E\n    /// \u003Cparam name=\u0022encryptedMessage\u0022\u003EThe encrypted message.\u003C/param\u003E\n    /// \u003Cparam name=\u0022password\u0022\u003EThe password.\u003C/param\u003E\n    /// \u003Cparam name=\u0022nonSecretPayloadLength\u0022\u003ELength of the non secret payload.\u003C/param\u003E\n    /// \u003Creturns\u003E\n    /// Decrypted Message\n    /// \u003C/returns\u003E\n    /// \u003Cexception cref=\u0022System.ArgumentException\u0022\u003EEncrypted Message Required!;encryptedMessage\u003C/exception\u003E\n    /// \u003Cremarks\u003E\n    /// Significantly less secure than using random binary keys.\n    /// \u003C/remarks\u003E\n    public static string SimpleDecryptWithPassword(string encryptedMessage, string password,\n                             int nonSecretPayloadLength = 0)\n    {\n      if (string.IsNullOrWhiteSpace(encryptedMessage))\n        throw new ArgumentException(\u0022Encrypted Message Required!\u0022, \u0022encryptedMessage\u0022);\n\n      var cipherText = Convert.FromBase64String(encryptedMessage);\n      var plainText = SimpleDecryptWithPassword(cipherText, password, nonSecretPayloadLength);\n      return plainText == null ? null : Encoding.UTF8.GetString(plainText);\n    }\n\n    public static byte[] SimpleEncrypt(byte[] secretMessage, byte[] key, byte[] nonSecretPayload = null)\n    {\n      //User Error Checks\n      if (key == null || key.Length != KeyBitSize / 8)\n        throw new ArgumentException(String.Format(\u0022Key needs to be {0} bit!\u0022, KeyBitSize), \u0022key\u0022);\n\n      if (secretMessage == null || secretMessage.Length == 0)\n        throw new ArgumentException(\u0022Secret Message Required!\u0022, \u0022secretMessage\u0022);\n\n      //Non-secret Payload Optional\n      nonSecretPayload = nonSecretPayload ?? new byte[] { };\n\n      //Using random nonce large enough not to repeat\n      var nonce = new byte[NonceBitSize / 8];\n      Random.NextBytes(nonce, 0, nonce.Length);\n\n      var cipher = new GcmBlockCipher(new AesFastEngine());\n      var parameters = new AeadParameters(new KeyParameter(key), MacBitSize, nonce, nonSecretPayload);\n      cipher.Init(true, parameters);\n\n      //Generate Cipher Text With Auth Tag\n      var cipherText = new byte[cipher.GetOutputSize(secretMessage.Length)];\n      var len = cipher.ProcessBytes(secretMessage, 0, secretMessage.Length, cipherText, 0);\n      cipher.DoFinal(cipherText, len);\n\n      //Assemble Message\n      using (var combinedStream = new MemoryStream())\n      {\n        using (var binaryWriter = new BinaryWriter(combinedStream))\n        {\n          //Prepend Authenticated Payload\n          binaryWriter.Write(nonSecretPayload);\n          //Prepend Nonce\n          binaryWriter.Write(nonce);\n          //Write Cipher Text\n          binaryWriter.Write(cipherText);\n        }\n        return combinedStream.ToArray();\n      }\n    }\n\n    public static byte[] SimpleDecrypt(byte[] encryptedMessage, byte[] key, int nonSecretPayloadLength = 0)\n    {\n      //User Error Checks\n      if (key == null || key.Length != KeyBitSize / 8)\n        throw new ArgumentException(String.Format(\u0022Key needs to be {0} bit!\u0022, KeyBitSize), \u0022key\u0022);\n\n      if (encryptedMessage == null || encryptedMessage.Length == 0)\n        throw new ArgumentException(\u0022Encrypted Message Required!\u0022, \u0022encryptedMessage\u0022);\n\n      using (var cipherStream = new MemoryStream(encryptedMessage))\n      using (var cipherReader = new BinaryReader(cipherStream))\n      {\n        //Grab Payload\n        var nonSecretPayload = cipherReader.ReadBytes(nonSecretPayloadLength);\n\n        //Grab Nonce\n        var nonce = cipherReader.ReadBytes(NonceBitSize / 8);\n\n        var cipher = new GcmBlockCipher(new AesFastEngine());\n        var parameters = new AeadParameters(new KeyParameter(key), MacBitSize, nonce, nonSecretPayload);\n        cipher.Init(false, parameters);\n\n        //Decrypt Cipher Text\n        var cipherText = cipherReader.ReadBytes(encryptedMessage.Length - nonSecretPayloadLength - nonce.Length);\n        var plainText = new byte[cipher.GetOutputSize(cipherText.Length)];  \n\n        try\n        {\n          var len = cipher.ProcessBytes(cipherText, 0, cipherText.Length, plainText, 0);\n          cipher.DoFinal(plainText, len);\n\n        }\n        catch (InvalidCipherTextException)\n        {\n          //Return null if it doesn\u0027t authenticate\n          return null;\n        }\n\n        return plainText;\n      }\n\n    }\n\n    public static byte[] SimpleEncryptWithPassword(byte[] secretMessage, string password, byte[] nonSecretPayload = null)\n    {\n      nonSecretPayload = nonSecretPayload ?? new byte[] {};\n\n      //User Error Checks\n      if (string.IsNullOrWhiteSpace(password) || password.Length \u003C MinPasswordLength)\n        throw new ArgumentException(String.Format(\u0022Must have a password of at least {0} characters!\u0022, MinPasswordLength), \u0022password\u0022);\n\n      if (secretMessage == null || secretMessage.Length == 0)\n        throw new ArgumentException(\u0022Secret Message Required!\u0022, \u0022secretMessage\u0022);\n\n      var generator = new Pkcs5S2ParametersGenerator();\n\n      //Use Random Salt to minimize pre-generated weak password attacks.\n      var salt = new byte[SaltBitSize / 8];\n      Random.NextBytes(salt);\n\n      generator.Init(\n        PbeParametersGenerator.Pkcs5PasswordToBytes(password.ToCharArray()),\n        salt,\n        Iterations);\n\n      //Generate Key\n      var key = (KeyParameter)generator.GenerateDerivedMacParameters(KeyBitSize);\n\n      //Create Full Non Secret Payload\n      var payload = new byte[salt.Length \u002B nonSecretPayload.Length];\n      Array.Copy(nonSecretPayload, payload, nonSecretPayload.Length);\n      Array.Copy(salt,0, payload,nonSecretPayload.Length, salt.Length);\n\n      return SimpleEncrypt(secretMessage, key.GetKey(), payload);\n    }\n\n    public static byte[] SimpleDecryptWithPassword(byte[] encryptedMessage, string password, int nonSecretPayloadLength = 0)\n    {\n      //User Error Checks\n      if (string.IsNullOrWhiteSpace(password) || password.Length \u003C MinPasswordLength)\n        throw new ArgumentException(String.Format(\u0022Must have a password of at least {0} characters!\u0022, MinPasswordLength), \u0022password\u0022);\n\n      if (encryptedMessage == null || encryptedMessage.Length == 0)\n        throw new ArgumentException(\u0022Encrypted Message Required!\u0022, \u0022encryptedMessage\u0022);\n\n      var generator = new Pkcs5S2ParametersGenerator();\n\n      //Grab Salt from Payload\n      var salt = new byte[SaltBitSize / 8];\n      Array.Copy(encryptedMessage, nonSecretPayloadLength, salt, 0, salt.Length);\n\n      generator.Init(\n        PbeParametersGenerator.Pkcs5PasswordToBytes(password.ToCharArray()),\n        salt,\n        Iterations);\n\n      //Generate Key\n      var key = (KeyParameter)generator.GenerateDerivedMacParameters(KeyBitSize);\n\n      return SimpleDecrypt(encryptedMessage, key.GetKey(), salt.Length \u002B nonSecretPayloadLength);\n    }\n  }\n}\n\n    ","\nHere is an example using RSA. \n\nImportant: There is a limit to the size of data you can encrypt with the RSA encryption, KeySize - MinimumPadding. e.g. 256 bytes (assuming 2048 bit key) - 42 bytes (min OEAP padding) = 214 bytes (max plaintext size)\n\nReplace your_rsa_key with your RSA key.\n\nvar provider = new System.Security.Cryptography.RSACryptoServiceProvider();\nprovider.ImportParameters(your_rsa_key);\n\nvar encryptedBytes = provider.Encrypt(\n    System.Text.Encoding.UTF8.GetBytes(\u0022Hello World!\u0022), true);\n\nstring decryptedTest = System.Text.Encoding.UTF8.GetString(\n    provider.Decrypt(encryptedBytes, true));\n\n\nFor more info, visit MSDN - RSACryptoServiceProvider \n    ","\nIf you are using ASP.Net you can now use built in functionality in .Net 4.0 onwards.\n\nSystem.Web.Security.MachineKey\n\n.Net 4.5 has MachineKey.Protect() and MachineKey.Unprotect().\n\n.Net 4.0 has MachineKey.Encode() and MachineKey.Decode(). You should just set the MachineKeyProtection to \u0027All\u0027.\n\nOutside of ASP.Net this class seems to generate a new key with every app restart so doesn\u0027t work. With a quick peek in ILSpy it looks to me like it generates its own defaults if the appropriate app.settings are missing. So you may actually be able to set it up outside ASP.Net.\n\nI haven\u0027t been able to find a non-ASP.Net equivalent outside the System.Web namespace.\n    ","\nBouncyCastle is a great Crypto library for .NET, it\u0027s available as a Nuget package for install into your projects.  I like it a lot more than what\u0027s currently available in the System.Security.Cryptography library.  It gives you a lot more options in terms of available algorithms, and provides more modes for those algorithms.\n\nThis is an example of an implementation of TwoFish, which was written by Bruce Schneier (hero to all us paranoid people out there).   It\u0027s a symmetric algorithm like the Rijndael\n(aka AES).  It was one of the three finalists for the AES standard and sibling to another famous algorithm written by Bruce Schneier called BlowFish.\n\nFirst thing with bouncycastle is to create an encryptor class, this will make it easier to implement other block ciphers within the library.  The following encryptor class takes in a generic argument T where T implements IBlockCipher and has a default constructor.\n\nUPDATE:  Due to popular demand I have decided to implement generating a random IV as well as include an HMAC into this class.  Although from a style perspective this goes against the SOLID principle of single responsibility, because of the nature of what this class does I reniged.  This class will now take two generic parameters, one for the cipher and one for the digest.  It automatically generates the IV using RNGCryptoServiceProvider to provide good RNG entropy, and allows you to use whatever digest algorithm you want from BouncyCastle to generate the MAC.\n\nusing System;\nusing System.Security.Cryptography;\nusing System.Text;\nusing Org.BouncyCastle.Crypto;\nusing Org.BouncyCastle.Crypto.Macs;\nusing Org.BouncyCastle.Crypto.Modes;\nusing Org.BouncyCastle.Crypto.Paddings;\nusing Org.BouncyCastle.Crypto.Parameters;\n\npublic sealed class Encryptor\u003CTBlockCipher, TDigest\u003E\n    where TBlockCipher : IBlockCipher, new()\n    where TDigest : IDigest, new()\n{\n    private Encoding encoding;\n\n    private IBlockCipher blockCipher;\n\n    private BufferedBlockCipher cipher;\n\n    private HMac mac;\n\n    private byte[] key;\n\n    public Encryptor(Encoding encoding, byte[] key, byte[] macKey)\n    {\n        this.encoding = encoding;\n        this.key = key;\n        this.Init(key, macKey, new Pkcs7Padding());\n    }\n\n    public Encryptor(Encoding encoding, byte[] key, byte[] macKey, IBlockCipherPadding padding)\n    {\n        this.encoding = encoding;\n        this.key = key;\n        this.Init(key, macKey, padding);\n    }\n\n    private void Init(byte[] key, byte[] macKey, IBlockCipherPadding padding)\n    {\n        this.blockCipher = new CbcBlockCipher(new TBlockCipher());\n        this.cipher = new PaddedBufferedBlockCipher(this.blockCipher, padding);\n        this.mac = new HMac(new TDigest());\n        this.mac.Init(new KeyParameter(macKey));\n    }\n\n    public string Encrypt(string plain)\n    {\n        return Convert.ToBase64String(EncryptBytes(plain));\n    }\n\n    public byte[] EncryptBytes(string plain)\n    {\n        byte[] input = this.encoding.GetBytes(plain);\n\n        var iv = this.GenerateIV();\n\n        var cipher = this.BouncyCastleCrypto(true, input, new ParametersWithIV(new KeyParameter(key), iv));\n        byte[] message = CombineArrays(iv, cipher);\n\n        this.mac.Reset();\n        this.mac.BlockUpdate(message, 0, message.Length);\n        byte[] digest = new byte[this.mac.GetUnderlyingDigest().GetDigestSize()];\n        this.mac.DoFinal(digest, 0);\n\n        var result = CombineArrays(digest, message);\n        return result;\n    }\n\n    public byte[] DecryptBytes(byte[] bytes)\n    {\n        // split the digest into component parts\n        var digest = new byte[this.mac.GetUnderlyingDigest().GetDigestSize()];\n        var message = new byte[bytes.Length - digest.Length];\n        var iv = new byte[this.blockCipher.GetBlockSize()];\n        var cipher = new byte[message.Length - iv.Length];\n\n        Buffer.BlockCopy(bytes, 0, digest, 0, digest.Length);\n        Buffer.BlockCopy(bytes, digest.Length, message, 0, message.Length);\n        if (!IsValidHMac(digest, message))\n        {\n            throw new CryptoException();\n        }\n\n        Buffer.BlockCopy(message, 0, iv, 0, iv.Length);\n        Buffer.BlockCopy(message, iv.Length, cipher, 0, cipher.Length);\n\n        byte[] result = this.BouncyCastleCrypto(false, cipher, new ParametersWithIV(new KeyParameter(key), iv));\n        return result;\n    }\n\n    public string Decrypt(byte[] bytes)\n    {\n        return this.encoding.GetString(DecryptBytes(bytes));\n    }\n\n    public string Decrypt(string cipher)\n    {\n        return this.Decrypt(Convert.FromBase64String(cipher));\n    }\n\n    private bool IsValidHMac(byte[] digest, byte[] message)\n    {\n        this.mac.Reset();\n        this.mac.BlockUpdate(message, 0, message.Length);\n        byte[] computed = new byte[this.mac.GetUnderlyingDigest().GetDigestSize()];\n        this.mac.DoFinal(computed, 0);\n\n        return AreEqual(digest,computed);\n    }\n\n    private static bool AreEqual(byte [] digest, byte[] computed)\n    {\n        if(digest.Length != computed.Length)\n        {\n            return false;\n        }\n\n        int result = 0;\n        for (int i = 0; i \u003C digest.Length; i\u002B\u002B)\n        {\n            // compute equality of all bytes before returning.\n            //   helps prevent timing attacks: \n            //   https://codahale.com/a-lesson-in-timing-attacks/\n            result |= digest[i] ^ computed[i];\n        }\n\n        return result == 0;\n    }\n\n    private byte[] BouncyCastleCrypto(bool forEncrypt, byte[] input, ICipherParameters parameters)\n    {\n        try\n        {\n            cipher.Init(forEncrypt, parameters);\n\n            return this.cipher.DoFinal(input);\n        }\n        catch (CryptoException)\n        {\n            throw;\n        }\n    }\n\n    private byte[] GenerateIV()\n    {\n        using (var provider = new RNGCryptoServiceProvider())\n        {\n            // 1st block\n            byte[] result = new byte[this.blockCipher.GetBlockSize()];\n            provider.GetBytes(result);\n\n            return result;\n        }\n    }\n\n    private static byte[] CombineArrays(byte[] source1, byte[] source2)\n    {\n        byte[] result = new byte[source1.Length \u002B source2.Length];\n        Buffer.BlockCopy(source1, 0, result, 0, source1.Length);\n        Buffer.BlockCopy(source2, 0, result, source1.Length, source2.Length);\n\n        return result;\n    }\n}\n\n\nNext just call the encrypt and decrypt methods on the new class, here\u0027s the example using twofish:\n\nvar encrypt = new Encryptor\u003CTwofishEngine, Sha1Digest\u003E(Encoding.UTF8, key, hmacKey);\n\nstring cipher = encrypt.Encrypt(\u0022TEST\u0022);   \nstring plainText = encrypt.Decrypt(cipher);\n\n\nIt\u0027s just as easy to substitute another block cipher like TripleDES:\n\nvar des = new Encryptor\u003CDesEdeEngine, Sha1Digest\u003E(Encoding.UTF8, key, hmacKey);\n\nstring cipher = des.Encrypt(\u0022TEST\u0022);\nstring plainText = des.Decrypt(cipher);\n\n\nFinally if you want to use AES with SHA256 HMAC you can do the following:\n\nvar aes = new Encryptor\u003CAesEngine, Sha256Digest\u003E(Encoding.UTF8, key, hmacKey);\n\ncipher = aes.Encrypt(\u0022TEST\u0022);\nplainText = aes.Decrypt(cipher);\n\n\nThe hardest part about encryption actually deals with the keys and not the algorithms.  You\u0027ll have to think about where you store your keys, and if you have to, how you exchange them.  These algorithms have all withstood the test of time, and are extremely hard to break. Someone who wants to steal information from you isn\u0027t going to spend eternity doing cryptanalysis on your messages, they\u0027re going to try to figure out what or where your key is.  So #1 choose your keys wisely, #2 store them in a safe place, if you use a web.config and IIS then you can encrypt parts of the the web.config, and finally if you have to exchange keys make sure that your protocol for exchanging the key is secure.\n\nUpdate 2\nChanged compare method to mitigate against timing attacks.  See more info here http://codahale.com/a-lesson-in-timing-attacks/ .  Also updated to default to PKCS7 padding and added new constructor to allow end user the ability to choose which padding they would like to use.  Thanks @CodesInChaos for the suggestions.\n    ","\nDisclaimer: This solution should only be used for data at rest that is not exposed to the public (for example - a configuration file or DB). Only in this scenario, the quick-and-dirty solution can be considered better than @jbtule\u0027s solution, due to lower maintanance.\n\nOriginal post:\nI found jbtule\u0027s answer a bit complicated for a quick and dirty secured AES string encryption and Brett\u0027s answer had a bug with the Initialization Vector being a fixed value making it vulnerable to padding attacks, so I fixed Brett\u0027s code and added a random IV that is added to the chipered string, creating a different encrypted value each and every encryption of the same value:\n\nEncryption:\n\npublic static string Encrypt(string clearText)\n{            \n    byte[] clearBytes = Encoding.Unicode.GetBytes(clearText);\n    using (Aes encryptor = Aes.Create())\n    {\n        byte[] IV = new byte[15];\n        rand.NextBytes(IV);\n        Rfc2898DeriveBytes pdb = new Rfc2898DeriveBytes(EncryptionKey, IV);\n        encryptor.Key = pdb.GetBytes(32);\n        encryptor.IV = pdb.GetBytes(16);\n        using (MemoryStream ms = new MemoryStream())\n        {\n            using (CryptoStream cs = new CryptoStream(ms, encryptor.CreateEncryptor(), CryptoStreamMode.Write))\n            {\n                cs.Write(clearBytes, 0, clearBytes.Length);\n                cs.Close();\n            }\n            clearText = Convert.ToBase64String(IV) \u002B Convert.ToBase64String(ms.ToArray());\n        }\n    }\n    return clearText;\n}\n\n\nDecryption:\n\npublic static string Decrypt(string cipherText)\n{\n    byte[] IV = Convert.FromBase64String(cipherText.Substring(0, 20));\n    cipherText = cipherText.Substring(20).Replace(\u0022 \u0022, \u0022\u002B\u0022);\n    byte[] cipherBytes = Convert.FromBase64String(cipherText);\n    using (Aes encryptor = Aes.Create())\n    {\n        Rfc2898DeriveBytes pdb = new Rfc2898DeriveBytes(EncryptionKey, IV);\n        encryptor.Key = pdb.GetBytes(32);\n        encryptor.IV = pdb.GetBytes(16);\n        using (MemoryStream ms = new MemoryStream())\n        {\n            using (CryptoStream cs = new CryptoStream(ms, encryptor.CreateDecryptor(), CryptoStreamMode.Write))\n            {\n                cs.Write(cipherBytes, 0, cipherBytes.Length);\n                cs.Close();\n            }\n            cipherText = Encoding.Unicode.GetString(ms.ToArray());\n        }\n    }\n    return cipherText;\n}\n\n\nReplace EncryptionKey with your key.\nIn my implementation, the key is being saved in the configuration file (web.config\\app.config) as you shouldn\u0027t save it hard coded. The configuration file should be also encrypted so the key won\u0027t be saved as clear text in it.\n\nprotected static string _Key = \u0022\u0022;\nprotected static string EncryptionKey\n{\n    get\n    {\n        if (String.IsNullOrEmpty(_Key))\n        {\n            _Key = ConfigurationManager.AppSettings[\u0022AESKey\u0022].ToString();\n        }\n\n        return _Key;\n    }\n}\n\n    ","\nEncryption\n\npublic string EncryptString(string inputString)\n{\n    MemoryStream memStream = null;\n    try\n    {\n        byte[] key = { };\n        byte[] IV = { 12, 21, 43, 17, 57, 35, 67, 27 };\n        string encryptKey = \u0022aXb2uy4z\u0022; // MUST be 8 characters\n        key = Encoding.UTF8.GetBytes(encryptKey);\n        byte[] byteInput = Encoding.UTF8.GetBytes(inputString);\n        DESCryptoServiceProvider provider = new DESCryptoServiceProvider();\n        memStream = new MemoryStream();\n        ICryptoTransform transform = provider.CreateEncryptor(key, IV);\n        CryptoStream cryptoStream = new CryptoStream(memStream, transform, CryptoStreamMode.Write);\n        cryptoStream.Write(byteInput, 0, byteInput.Length);\n        cryptoStream.FlushFinalBlock();\n    }\n    catch (Exception ex)\n    {\n        Response.Write(ex.Message);\n    }\n    return Convert.ToBase64String(memStream.ToArray());\n}\n\n\nDecryption:    \n\npublic string DecryptString(string inputString)\n{\n    MemoryStream memStream = null;\n    try\n    {\n        byte[] key = { };\n        byte[] IV = { 12, 21, 43, 17, 57, 35, 67, 27 };\n        string encryptKey = \u0022aXb2uy4z\u0022; // MUST be 8 characters\n        key = Encoding.UTF8.GetBytes(encryptKey);\n        byte[] byteInput = new byte[inputString.Length];\n        byteInput = Convert.FromBase64String(inputString);\n        DESCryptoServiceProvider provider = new DESCryptoServiceProvider();\n        memStream = new MemoryStream();\n        ICryptoTransform transform = provider.CreateDecryptor(key, IV);\n        CryptoStream cryptoStream = new CryptoStream(memStream, transform, CryptoStreamMode.Write);\n        cryptoStream.Write(byteInput, 0, byteInput.Length);\n        cryptoStream.FlushFinalBlock();\n    }\n    catch (Exception ex)\n    {\n        Response.Write(ex.Message);\n    }\n\n    Encoding encoding1 = Encoding.UTF8;\n    return encoding1.GetString(memStream.ToArray());\n}\n\n    ","\nThe following example demonstrates how to encrypt and decrypt sample data:\n\n    // This constant is used to determine the keysize of the encryption algorithm in bits.\n    // We divide this by 8 within the code below to get the equivalent number of bytes.\n    private const int Keysize = 128;\n\n    // This constant determines the number of iterations for the password bytes generation function.\n    private const int DerivationIterations = 1000;\n\n    public static string Encrypt(string plainText, string passPhrase)\n    {\n        // Salt and IV is randomly generated each time, but is preprended to encrypted cipher text\n        // so that the same Salt and IV values can be used when decrypting.  \n        var saltStringBytes = GenerateBitsOfRandomEntropy(16);\n        var ivStringBytes = GenerateBitsOfRandomEntropy(16);\n        var plainTextBytes = Encoding.UTF8.GetBytes(plainText);\n        using (var password = new Rfc2898DeriveBytes(passPhrase, saltStringBytes, DerivationIterations))\n        {\n            var keyBytes = password.GetBytes(Keysize / 8);\n            using (var symmetricKey = new RijndaelManaged())\n            {\n                symmetricKey.BlockSize = 128;\n                symmetricKey.Mode = CipherMode.CBC;\n                symmetricKey.Padding = PaddingMode.PKCS7;\n                using (var encryptor = symmetricKey.CreateEncryptor(keyBytes, ivStringBytes))\n                {\n                    using (var memoryStream = new MemoryStream())\n                    {\n                        using (var cryptoStream = new CryptoStream(memoryStream, encryptor, CryptoStreamMode.Write))\n                        {\n                            cryptoStream.Write(plainTextBytes, 0, plainTextBytes.Length);\n                            cryptoStream.FlushFinalBlock();\n                            // Create the final bytes as a concatenation of the random salt bytes, the random iv bytes and the cipher bytes.\n                            var cipherTextBytes = saltStringBytes;\n                            cipherTextBytes = cipherTextBytes.Concat(ivStringBytes).ToArray();\n                            cipherTextBytes = cipherTextBytes.Concat(memoryStream.ToArray()).ToArray();\n                            memoryStream.Close();\n                            cryptoStream.Close();\n                            return Convert.ToBase64String(cipherTextBytes);\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    public static string Decrypt(string cipherText, string passPhrase)\n    {\n        // Get the complete stream of bytes that represent:\n        // [32 bytes of Salt] \u002B [32 bytes of IV] \u002B [n bytes of CipherText]\n        var cipherTextBytesWithSaltAndIv = Convert.FromBase64String(cipherText);\n        // Get the saltbytes by extracting the first 32 bytes from the supplied cipherText bytes.\n        var saltStringBytes = cipherTextBytesWithSaltAndIv.Take(Keysize / 8).ToArray();\n        // Get the IV bytes by extracting the next 32 bytes from the supplied cipherText bytes.\n        var ivStringBytes = cipherTextBytesWithSaltAndIv.Skip(Keysize / 8).Take(Keysize / 8).ToArray();\n        // Get the actual cipher text bytes by removing the first 64 bytes from the cipherText string.\n        var cipherTextBytes = cipherTextBytesWithSaltAndIv.Skip((Keysize / 8) * 2).Take(cipherTextBytesWithSaltAndIv.Length - ((Keysize / 8) * 2)).ToArray();\n\n        using (var password = new Rfc2898DeriveBytes(passPhrase, saltStringBytes, DerivationIterations))\n        {\n            var keyBytes = password.GetBytes(Keysize / 8);\n            using (var symmetricKey = new RijndaelManaged())\n            {\n                symmetricKey.BlockSize = 128;\n                symmetricKey.Mode = CipherMode.CBC;\n                symmetricKey.Padding = PaddingMode.PKCS7;\n                using (var decryptor = symmetricKey.CreateDecryptor(keyBytes, ivStringBytes))\n                {\n                    using (var memoryStream = new MemoryStream(cipherTextBytes))\n                    {\n                        using (var cryptoStream = new CryptoStream(memoryStream, decryptor, CryptoStreamMode.Read))\n                        {\n                            var plainTextBytes = new byte[cipherTextBytes.Length];\n                            var decryptedByteCount = cryptoStream.Read(plainTextBytes, 0, plainTextBytes.Length);\n                            memoryStream.Close();\n                            cryptoStream.Close();\n                            return Encoding.UTF8.GetString(plainTextBytes, 0, decryptedByteCount);\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    private static byte[] GenerateBitsOfRandomEntropy(int size)\n    {\n        // 32 Bytes will give us 256 bits.\n        // 16 Bytes will give us 128 bits.\n        var randomBytes = new byte[size]; \n        using (var rngCsp = new RNGCryptoServiceProvider())\n        {\n            // Fill the array with cryptographically secure random bytes.\n            rngCsp.GetBytes(randomBytes);\n        }\n        return randomBytes;\n    }\n\n    ","\nWith the reference of Encrypt and Decrypt a String in c#, I found one of good solution :\n\nstatic readonly string PasswordHash = \u0022P@@Sw0rd\u0022;\nstatic readonly string SaltKey = \u0022S@LT\u0026KEY\u0022;\nstatic readonly string VIKey = \u0022@1B2c3D4e5F6g7H8\u0022;\n\n\nFor Encrypt\n\npublic static string Encrypt(string plainText)\n{\n    byte[] plainTextBytes = Encoding.UTF8.GetBytes(plainText);\n\n    byte[] keyBytes = new Rfc2898DeriveBytes(PasswordHash, Encoding.ASCII.GetBytes(SaltKey)).GetBytes(256 / 8);\n    var symmetricKey = new RijndaelManaged() { Mode = CipherMode.CBC, Padding = PaddingMode.Zeros };\n    var encryptor = symmetricKey.CreateEncryptor(keyBytes, Encoding.ASCII.GetBytes(VIKey));\n\n    byte[] cipherTextBytes;\n\n    using (var memoryStream = new MemoryStream())\n    {\n        using (var cryptoStream = new CryptoStream(memoryStream, encryptor, CryptoStreamMode.Write))\n        {\n            cryptoStream.Write(plainTextBytes, 0, plainTextBytes.Length);\n            cryptoStream.FlushFinalBlock();\n            cipherTextBytes = memoryStream.ToArray();\n            cryptoStream.Close();\n        }\n        memoryStream.Close();\n    }\n    return Convert.ToBase64String(cipherTextBytes);\n}\n\n\nFor Decrypt\n\npublic static string Decrypt(string encryptedText)\n{\n    byte[] cipherTextBytes = Convert.FromBase64String(encryptedText);\n    byte[] keyBytes = new Rfc2898DeriveBytes(PasswordHash, Encoding.ASCII.GetBytes(SaltKey)).GetBytes(256 / 8);\n    var symmetricKey = new RijndaelManaged() { Mode = CipherMode.CBC, Padding = PaddingMode.None };\n\n    var decryptor = symmetricKey.CreateDecryptor(keyBytes, Encoding.ASCII.GetBytes(VIKey));\n    var memoryStream = new MemoryStream(cipherTextBytes);\n    var cryptoStream = new CryptoStream(memoryStream, decryptor, CryptoStreamMode.Read);\n    byte[] plainTextBytes = new byte[cipherTextBytes.Length];\n\n    int decryptedByteCount = cryptoStream.Read(plainTextBytes, 0, plainTextBytes.Length);\n    memoryStream.Close();\n    cryptoStream.Close();\n    return Encoding.UTF8.GetString(plainTextBytes, 0, decryptedByteCount).TrimEnd(\u0022\\0\u0022.ToCharArray());\n}\n\n    ","\nTo support mattmanser answer. Here\u0027s an example using MachineKey class to encrypt/decrypt URL safe values. \n\nSomething to bear in mind, as mentioned before, this will use Machine config settings (https://msdn.microsoft.com/en-us/library/ff649308.aspx). You can set encryption and decryption key/algorithm manually (you might need this specially if your site is running on multiple servers) in web.config file. You can generate keys from IIS (see here: https://blogs.msdn.microsoft.com/vijaysk/2009/05/13/iis-7-tip-10-you-can-generate-machine-keys-from-the-iis-manager/) or can use an online machine key generator like: http://www.developerfusion.com/tools/generatemachinekey/\n\n    private static readonly UTF8Encoding Encoder = new UTF8Encoding();\n\n    public static string Encrypt(string unencrypted)\n    {\n        if (string.IsNullOrEmpty(unencrypted)) \n            return string.Empty;\n\n        try\n        {\n            var encryptedBytes = MachineKey.Protect(Encoder.GetBytes(unencrypted));\n\n            if (encryptedBytes != null \u0026\u0026 encryptedBytes.Length \u003E 0)\n                return HttpServerUtility.UrlTokenEncode(encryptedBytes);    \n        }\n        catch (Exception)\n        {\n            return string.Empty;\n        }\n\n        return string.Empty;\n    }\n\n    public static string Decrypt(string encrypted)\n    {\n        if (string.IsNullOrEmpty(encrypted)) \n            return string.Empty;\n\n        try\n        {\n            var bytes = HttpServerUtility.UrlTokenDecode(encrypted);\n            if (bytes != null \u0026\u0026 bytes.Length \u003E 0)\n            {\n                var decryptedBytes = MachineKey.Unprotect(bytes);\n                if(decryptedBytes != null \u0026\u0026 decryptedBytes.Length \u003E 0)\n                    return Encoder.GetString(decryptedBytes);\n            }\n\n        }\n        catch (Exception)\n        {\n            return string.Empty;\n        }\n\n        return string.Empty;\n    }\n\n    ","\nHere is a simple example of encrypting strings in C# using AES CBC mode with random IV and HMAC and password-derived keys, to show the basic moving parts:\n\nprivate byte[] EncryptBytes(byte[] key, byte[] plaintext)\n{\n    using (var cipher = new RijndaelManaged { Key = key })\n    {\n        using (var encryptor = cipher.CreateEncryptor())\n        {\n            var ciphertext = encryptor.TransformFinalBlock(plaintext, 0, plaintext.Length);\n\n            // IV is prepended to ciphertext\n            return cipher.IV.Concat(ciphertext).ToArray();\n        }\n    }\n}\n\nprivate byte[] DecryptBytes(byte[] key, byte[] packed)\n{\n    using (var cipher = new RijndaelManaged { Key = key })\n    {\n        int ivSize = cipher.BlockSize / 8;\n\n        cipher.IV = packed.Take(ivSize).ToArray();\n\n        using (var encryptor = cipher.CreateDecryptor())\n        {\n            return encryptor.TransformFinalBlock(packed, ivSize, packed.Length - ivSize);\n        }\n    }\n}\n\nprivate byte[] AddMac(byte[] key, byte[] data)\n{\n    using (var hmac = new HMACSHA256(key))\n    {\n        var macBytes = hmac.ComputeHash(data);\n\n        // HMAC is appended to data\n        return data.Concat(macBytes).ToArray();\n    }\n}\n\nprivate bool BadMac(byte[] found, byte[] computed)\n{\n    int mismatch = 0;\n\n    // Aim for consistent timing regardless of inputs\n    for (int i = 0; i \u003C found.Length; i\u002B\u002B)\n    {\n        mismatch \u002B= found[i] == computed[i] ? 0 : 1;\n    }\n\n    return mismatch != 0;\n}\n\nprivate byte[] RemoveMac(byte[] key, byte[] data)\n{\n    using (var hmac = new HMACSHA256(key))\n    {\n        int macSize = hmac.HashSize / 8;\n\n        var packed = data.Take(data.Length - macSize).ToArray();\n\n        var foundMac = data.Skip(packed.Length).ToArray();\n\n        var computedMac = hmac.ComputeHash(packed);\n\n        if (this.BadMac(foundMac, computedMac))\n        {\n            throw new Exception(\u0022Bad MAC\u0022);\n        }\n\n        return packed;\n    }            \n}\n\nprivate List\u003Cbyte[]\u003E DeriveTwoKeys(string password)\n{\n    var salt = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8 };\n\n    var kdf = new Rfc2898DeriveBytes(password, salt, 10000);\n\n    var bytes = kdf.GetBytes(32); // Two keys 128 bits each\n\n    return new List\u003Cbyte[]\u003E { bytes.Take(16).ToArray(), bytes.Skip(16).ToArray() };\n}\n\npublic byte[] EncryptString(string password, String message)\n{\n    var keys = this.DeriveTwoKeys(password);\n\n    var plaintext = Encoding.UTF8.GetBytes(message);\n\n    var packed = this.EncryptBytes(keys[0], plaintext);\n\n    return this.AddMac(keys[1], packed);\n}\n\npublic String DecryptString(string password, byte[] secret)\n{\n    var keys = this.DeriveTwoKeys(password);\n\n    var packed = this.RemoveMac(keys[1], secret);\n\n    var plaintext = this.DecryptBytes(keys[0], packed);\n\n    return Encoding.UTF8.GetString(plaintext);\n}\n\npublic void Example()\n{\n    var password = \u0022correcthorsebatterystaple\u0022;\n\n    var secret = this.EncryptString(password, \u0022Hello World\u0022);\n\n    Console.WriteLine(\u0022secret: \u0022 \u002B BitConverter.ToString(secret));\n\n    var recovered = this.DecryptString(password, secret);\n\n    Console.WriteLine(recovered);\n}\n\n    ","\nAn alternative to BouncyCastle for AES-GCM encryption is libsodium-net. It wraps the libsodium C library. One nice advantage is that it uses the AES-NI extension in CPUs for very fast encryption. The down side is that it won\u0027t work at all if the CPU doesn\u0027t have the extension. There\u0027s no software fall back.\n    ","\nThe following code is an improved version of Ghazal\u0027s answer to a similar question.\n\npublic class EncryptionHelper\n{\n    private Aes aesEncryptor;\n\n    public EncryptionHelper()\n    {\n    }\n\n    private void BuildAesEncryptor(string key)\n    {\n        aesEncryptor = Aes.Create();\n        var pdb = new Rfc2898DeriveBytes(key, new byte[] { 0x49, 0x76, 0x61, 0x6e, 0x20, 0x4d, 0x65, 0x64, 0x76, 0x65, 0x64, 0x65, 0x76 });\n        aesEncryptor.Key = pdb.GetBytes(32);\n        aesEncryptor.IV = pdb.GetBytes(16);\n    }\n\n    public string EncryptString(string clearText, string key)\n    {\n        BuildAesEncryptor(key);\n        var clearBytes = Encoding.Unicode.GetBytes(clearText);\n        using (var ms = new MemoryStream())\n        {\n            using (var cs = new CryptoStream(ms, aesEncryptor.CreateEncryptor(), CryptoStreamMode.Write))\n            {\n                cs.Write(clearBytes, 0, clearBytes.Length);\n            }\n            var encryptedText = Convert.ToBase64String(ms.ToArray());\n            return encryptedText;\n        }\n    }\n\n    public string DecryptString(string cipherText, string key)\n    {\n        BuildAesEncryptor(key);\n        cipherText = cipherText.Replace(\u0022 \u0022, \u0022\u002B\u0022);\n        var cipherBytes = Convert.FromBase64String(cipherText);\n        using (var ms = new MemoryStream())\n        {\n            using (var cs = new CryptoStream(ms, aesEncryptor.CreateDecryptor(), CryptoStreamMode.Write))\n            {\n                cs.Write(cipherBytes, 0, cipherBytes.Length);\n            }\n            var clearText = Encoding.Unicode.GetString(ms.ToArray());\n            return clearText;\n        }\n    }\n}\n\n    ","\nThis is the class that was placed here by Brett. However I made a slight edit since I was receiving the error \u0027Invalid length for a Base-64 char array\u0027 when using it for URL strings to encrypt and decrypt.\n\npublic class CryptoURL\n{\n    private static byte[] _salt = Encoding.ASCII.GetBytes(\u0022Catto_Salt_Enter_Any_Value99\u0022);\n\n    /// \u003Csummary\u003E\n    /// Encrypt the given string using AES.  The string can be decrypted using \n    /// DecryptStringAES().  The sharedSecret parameters must match. \n    /// The SharedSecret for the Password Reset that is used is in the next line\n    ///  string sharedSecret = \u0022OneUpSharedSecret9\u0022;\n    /// \u003C/summary\u003E\n    /// \u003Cparam name=\u0022plainText\u0022\u003EThe text to encrypt.\u003C/param\u003E\n    /// \u003Cparam name=\u0022sharedSecret\u0022\u003EA password used to generate a key for encryption.\u003C/param\u003E\n    public static string EncryptString(string plainText, string sharedSecret)\n    {\n        if (string.IsNullOrEmpty(plainText))\n            throw new ArgumentNullException(\u0022plainText\u0022);\n        if (string.IsNullOrEmpty(sharedSecret))\n            throw new ArgumentNullException(\u0022sharedSecret\u0022);\n\n        string outStr = null;                       // Encrypted string to return\n        RijndaelManaged aesAlg = null;              // RijndaelManaged object used to encrypt the data.\n\n        try\n        {\n            // generate the key from the shared secret and the salt\n            Rfc2898DeriveBytes key = new Rfc2898DeriveBytes(sharedSecret, _salt);\n\n            // Create a RijndaelManaged object\n            aesAlg = new RijndaelManaged();\n            aesAlg.Key = key.GetBytes(aesAlg.KeySize / 8);\n\n            // Create a decryptor to perform the stream transform.\n            ICryptoTransform encryptor = aesAlg.CreateEncryptor(aesAlg.Key, aesAlg.IV);\n\n            // Create the streams used for encryption.\n            using (MemoryStream msEncrypt = new MemoryStream())\n            {\n                // prepend the IV\n                msEncrypt.Write(BitConverter.GetBytes(aesAlg.IV.Length), 0, sizeof(int));\n                msEncrypt.Write(aesAlg.IV, 0, aesAlg.IV.Length);\n                using (CryptoStream csEncrypt = new CryptoStream(msEncrypt, encryptor, CryptoStreamMode.Write))\n                {\n                    using (StreamWriter swEncrypt = new StreamWriter(csEncrypt))\n                    {\n                        //Write all data to the stream.\n                        swEncrypt.Write(plainText);\n                    }\n                }\n\n                outStr = HttpServerUtility.UrlTokenEncode(msEncrypt.ToArray());\n                //outStr = Convert.ToBase64String(msEncrypt.ToArray());\n                // you may need to add a reference. right click reference in solution explorer =\u003E \u0022add Reference\u0022 =\u003E .NET tab =\u003E select \u0022System.Web\u0022\n            }\n        }\n        finally\n        {\n            // Clear the RijndaelManaged object.\n            if (aesAlg != null)\n                aesAlg.Clear();\n        }\n\n        // Return the encrypted bytes from the memory stream.\n        return outStr;\n    }\n\n    /// \u003Csummary\u003E\n    /// Decrypt the given string.  Assumes the string was encrypted using \n    /// EncryptStringAES(), using an identical sharedSecret.\n    /// \u003C/summary\u003E\n    /// \u003Cparam name=\u0022cipherText\u0022\u003EThe text to decrypt.\u003C/param\u003E\n    /// \u003Cparam name=\u0022sharedSecret\u0022\u003EA password used to generate a key for decryption.\u003C/param\u003E\n    public static string DecryptString(string cipherText, string sharedSecret)\n    {\n        if (string.IsNullOrEmpty(cipherText))\n            throw new ArgumentNullException(\u0022cipherText\u0022);\n        if (string.IsNullOrEmpty(sharedSecret))\n            throw new ArgumentNullException(\u0022sharedSecret\u0022);\n\n        // Declare the RijndaelManaged object\n        // used to decrypt the data.\n        RijndaelManaged aesAlg = null;\n\n        // Declare the string used to hold\n        // the decrypted text.\n        string plaintext = null;\n\n        byte[] inputByteArray;\n\n        try\n        {\n            // generate the key from the shared secret and the salt\n            Rfc2898DeriveBytes key = new Rfc2898DeriveBytes(sharedSecret, _salt);\n\n            // Create the streams used for decryption.                \n            //byte[] bytes = Convert.FromBase64String(cipherText);\n            inputByteArray = HttpServerUtility.UrlTokenDecode(cipherText);\n\n            using (MemoryStream msDecrypt = new MemoryStream(inputByteArray))\n            {\n                // Create a RijndaelManaged object\n                // with the specified key and IV.\n                aesAlg = new RijndaelManaged();\n                aesAlg.Key = key.GetBytes(aesAlg.KeySize / 8);\n                // Get the initialization vector from the encrypted stream\n                aesAlg.IV = ReadByteArray(msDecrypt);\n                // Create a decrytor to perform the stream transform.\n                ICryptoTransform decryptor = aesAlg.CreateDecryptor(aesAlg.Key, aesAlg.IV);\n                using (CryptoStream csDecrypt = new CryptoStream(msDecrypt, decryptor, CryptoStreamMode.Read))\n                {\n                    using (StreamReader srDecrypt = new StreamReader(csDecrypt))\n\n                        // Read the decrypted bytes from the decrypting stream\n                        // and place them in a string.\n                        plaintext = srDecrypt.ReadToEnd();\n                }\n            }\n        }\n        catch (System.Exception ex)\n        {\n            return \u0022ERROR\u0022;\n            //throw ex;\n\n        }\n        finally\n        {\n            // Clear the RijndaelManaged object.\n            if (aesAlg != null)\n                aesAlg.Clear();\n        }\n\n        return plaintext;\n    }\n\n    static string ConvertStringArrayToString(string[] array)\n    {\n        //\n        // Concatenate all the elements into a StringBuilder.\n        //\n        StringBuilder builder = new StringBuilder();\n        foreach (string value in array)\n        {\n            builder.Append(value);\n            builder.Append(\u0027.\u0027);\n        }\n        return builder.ToString();\n    }\n\n    private static byte[] ReadByteArray(Stream s)\n    {\n        byte[] rawLength = new byte[sizeof(int)];\n        if (s.Read(rawLength, 0, rawLength.Length) != rawLength.Length)\n        {\n            throw new SystemException(\u0022Stream did not contain properly formatted byte array\u0022);\n        }\n\n        byte[] buffer = new byte[BitConverter.ToInt32(rawLength, 0)];\n        if (s.Read(buffer, 0, buffer.Length) != buffer.Length)\n        {\n            throw new SystemException(\u0022Did not read byte array properly\u0022);\n        }\n\n        return buffer;\n    }\n\n}\n\n    ","\nusing System;\nusing System.IO;\nusing System.Security.Cryptography;\nusing System.Text;\n\npublic class Program\n{\n    public static void Main()\n    {\n        var key = Encoding.UTF8.GetBytes(\u0022SUkbqO2ycDo7QwpR25kfgmC7f8CoyrZy\u0022);\n        var data = Encoding.UTF8.GetBytes(\u0022testData\u0022);\n\n        //Encrypt data\n        var encrypted = CryptoHelper.EncryptData(data,key);\n\n        //Decrypt data\n        var decrypted = CryptoHelper.DecryptData(encrypted,key);\n\n        //Display result\n        Console.WriteLine(Encoding.UTF8.GetString(decrypted));\n    }\n}\n\npublic static class CryptoHelper\n{\n    public static byte[] EncryptData(byte[] data, byte[] key)\n    {\n        using (var aesAlg = Aes.Create())\n        {\n            aesAlg.Mode = CipherMode.CBC;\n            using (var encryptor = aesAlg.CreateEncryptor(key, aesAlg.IV))\n            {\n                using (var msEncrypt = new MemoryStream())\n                {\n                    msEncrypt.Write(aesAlg.IV, 0, aesAlg.IV.Length);\n\n                    using (var csEncrypt = new CryptoStream(msEncrypt, encryptor, CryptoStreamMode.Write))\n                        csEncrypt.Write(data, 0, data.Length);\n\n                    return msEncrypt.ToArray();\n                }\n            }\n        }\n\n    }\n\n    public static byte[] DecryptData(byte[] encrypted, byte[] key)\n    {\n        var iv = new byte[16];\n        Buffer.BlockCopy(encrypted, 0, iv, 0, iv.Length);\n        using (var aesAlg = Aes.Create())\n        {\n            aesAlg.Mode = CipherMode.CBC;\n            using (var decryptor = aesAlg.CreateDecryptor(key, iv))\n            {\n                using (var msDecrypt = new MemoryStream(encrypted, iv.Length, encrypted.Length - iv.Length))\n                {\n                    using (var csDecrypt = new CryptoStream(msDecrypt, decryptor, CryptoStreamMode.Read))\n                    {\n                        using (var resultStream = new MemoryStream())\n                        {\n                            csDecrypt.CopyTo(resultStream);\n                            return resultStream.ToArray();\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n    ","\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Web;\nusing System.Security.Cryptography;\nusing System.IO;\nusing System.Text;  \n\n/// \u003Csummary\u003E\n/// Summary description for Encryption\n/// \u003C/summary\u003E\npublic class Encryption\n{\n    public TripleDES CreateDES(string key)\n    {\n        MD5 md5 = new MD5CryptoServiceProvider();\n        TripleDES des = new TripleDESCryptoServiceProvider();\n        des.Key = md5.ComputeHash(Encoding.Unicode.GetBytes(key));\n        des.IV = new byte[des.BlockSize / 8];\n        return des;\n    }\n    public  byte[] Encryptiondata(string PlainText)\n    {\n        TripleDES des = CreateDES(\u0022DreamMLMKey\u0022);\n        ICryptoTransform ct = des.CreateEncryptor();\n        byte[] input = Encoding.Unicode.GetBytes(PlainText);\n        return ct.TransformFinalBlock(input, 0, input.Length);\n    }\n\n    public string Decryptiondata(string CypherText)\n    {\n        string stringToDecrypt = CypherText.Replace(\u0022 \u0022, \u0022\u002B\u0022);\n        int len = stringToDecrypt.Length;\n        byte[] inputByteArray = Convert.FromBase64String(stringToDecrypt); \n\n        byte[] b = Convert.FromBase64String(CypherText);\n        TripleDES des = CreateDES(\u0022DreamMLMKey\u0022);\n        ICryptoTransform ct = des.CreateDecryptor();\n        byte[] output = ct.TransformFinalBlock(b, 0, b.Length);\n        return Encoding.Unicode.GetString(output);\n    }\n    public string Decryptiondataurl(string CypherText)\n    {\n        string newcyperttext=CypherText.Replace(\u0027 \u0027, \u0027\u002B\u0027);\n        byte[] b = Convert.FromBase64String(newcyperttext);\n        TripleDES des = CreateDES(\u0022DreamMLMKey\u0022);\n        ICryptoTransform ct = des.CreateDecryptor();\n        byte[] output = ct.TransformFinalBlock(b, 0, b.Length);\n        return Encoding.Unicode.GetString(output);\n    }\n\n\n    #region  encryption \u0026 Decription\n    public  string Encrypt(string input, string key)\n    {\n        byte[] inputArray = UTF8Encoding.UTF8.GetBytes(input);\n        TripleDESCryptoServiceProvider tripleDES = new TripleDESCryptoServiceProvider();\n        tripleDES.Key = UTF8Encoding.UTF8.GetBytes(key);\n        tripleDES.Mode = CipherMode.ECB;\n        tripleDES.Padding = PaddingMode.PKCS7;\n        ICryptoTransform cTransform = tripleDES.CreateEncryptor();\n        byte[] resultArray = cTransform.TransformFinalBlock(inputArray, 0, inputArray.Length);\n        tripleDES.Clear();\n        return Convert.ToBase64String(resultArray, 0, resultArray.Length);\n    }\n    public  string Decrypt(string input, string key)\n    {\n        byte[] inputArray = Convert.FromBase64String(input);\n        TripleDESCryptoServiceProvider tripleDES = new TripleDESCryptoServiceProvider();\n        tripleDES.Key = UTF8Encoding.UTF8.GetBytes(key);\n        tripleDES.Mode = CipherMode.ECB;\n        tripleDES.Padding = PaddingMode.PKCS7;\n        ICryptoTransform cTransform = tripleDES.CreateDecryptor();\n        byte[] resultArray = cTransform.TransformFinalBlock(inputArray, 0, inputArray.Length);\n        tripleDES.Clear();\n        return UTF8Encoding.UTF8.GetString(resultArray);\n    }\n\n    public string encrypt(string encryptString)\n    {\n        string EncryptionKey = \u00220123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\u0022;\n        byte[] clearBytes = Encoding.Unicode.GetBytes(encryptString);\n        using (Aes encryptor = Aes.Create())\n        {\n            Rfc2898DeriveBytes pdb = new Rfc2898DeriveBytes(EncryptionKey, new byte[] {\n                0x49, 0x76, 0x61, 0x6e, 0x20, 0x4d, 0x65, 0x64, 0x76, 0x65, 0x64, 0x65, 0x76\n            });\n            encryptor.Key = pdb.GetBytes(32);\n            encryptor.IV = pdb.GetBytes(16);\n            using (MemoryStream ms = new MemoryStream())\n            {\n                using (CryptoStream cs = new CryptoStream(ms, encryptor.CreateEncryptor(), CryptoStreamMode.Write))\n                {\n                    cs.Write(clearBytes, 0, clearBytes.Length);\n                    cs.Close();\n                }\n                encryptString = Convert.ToBase64String(ms.ToArray());\n            }\n        }\n        return encryptString;\n    }\n\n    public string Decrypt(string cipherText)\n    {\n        string EncryptionKey = \u00220123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\u0022;\n        cipherText = cipherText.Replace(\u0022 \u0022, \u0022\u002B\u0022);\n        byte[] cipherBytes = Convert.FromBase64String(cipherText);\n        using (Aes encryptor = Aes.Create())\n        {\n            Rfc2898DeriveBytes pdb = new Rfc2898DeriveBytes(EncryptionKey, new byte[] {\n                0x49, 0x76, 0x61, 0x6e, 0x20, 0x4d, 0x65, 0x64, 0x76, 0x65, 0x64, 0x65, 0x76\n            });\n            encryptor.Key = pdb.GetBytes(32);\n            encryptor.IV = pdb.GetBytes(16);\n            using (MemoryStream ms = new MemoryStream())\n            {\n                using (CryptoStream cs = new CryptoStream(ms, encryptor.CreateDecryptor(), CryptoStreamMode.Write))\n                {\n                    cs.Write(cipherBytes, 0, cipherBytes.Length);\n                    cs.Close();\n                }\n                cipherText = Encoding.Unicode.GetString(ms.ToArray());\n            }\n        }\n        return cipherText;\n    }\n\n    #endregion\n}\n\n    ","\nEncryption is a very common matter in programming. I think it is better to install a package to do the task for you. Maybe a simple open source Nuget project like \nSimple Aes Encryption\n\nThe key is in the config file and therefore it is easy to change in the production environment, and I don\u0027t see any drawbacks\n\n\u003CMessageEncryption\u003E\n  \u003CEncryptionKey KeySize=\u0022256\u0022 Key=\u00223q2\u002B796tvu/erb7v3q2\u002B796tvu/erb7v3q2\u002B796tvu8=\u0022/\u003E\n\u003C/MessageEncryption\u003E\n\n    ","\nCopied in my answer here from a similar question: Simple two-way encryption for C#.\n\nBased on multiple answers and comments.\n\n\nRandom initialization vector prepended to crypto text (@jbtule)\nUse TransformFinalBlock() instead of MemoryStream (@RenniePet)\nNo pre-filled keys to avoid anyone copy \u0026 pasting a disaster\nProper dispose and using patterns\n\n\nCode:\n\n/// \u003Csummary\u003E\n/// Simple encryption/decryption using a random initialization vector\n/// and prepending it to the crypto text.\n/// \u003C/summary\u003E\n/// \u003Cremarks\u003EBased on multiple answers in https://stackoverflow.com/questions/165808/simple-two-way-encryption-for-c-sharp \u003C/remarks\u003E\npublic class SimpleAes : IDisposable\n{\n    /// \u003Csummary\u003E\n    ///     Initialization vector length in bytes.\n    /// \u003C/summary\u003E\n    private const int IvBytes = 16;\n\n    /// \u003Csummary\u003E\n    ///     Must be exactly 16, 24 or 32 characters long.\n    /// \u003C/summary\u003E\n    private static readonly byte[] Key = Convert.FromBase64String(\u0022FILL ME WITH 16, 24 OR 32 CHARS\u0022);\n\n    private readonly UTF8Encoding _encoder;\n    private readonly ICryptoTransform _encryptor;\n    private readonly RijndaelManaged _rijndael;\n\n    public SimpleAes()\n    {\n        _rijndael = new RijndaelManaged {Key = Key};\n        _rijndael.GenerateIV();\n        _encryptor = _rijndael.CreateEncryptor();\n        _encoder = new UTF8Encoding();\n    }\n\n    public string Decrypt(string encrypted)\n    {\n        return _encoder.GetString(Decrypt(Convert.FromBase64String(encrypted)));\n    }\n\n    public void Dispose()\n    {\n        _rijndael.Dispose();\n        _encryptor.Dispose();\n    }\n\n    public string Encrypt(string unencrypted)\n    {\n        return Convert.ToBase64String(Encrypt(_encoder.GetBytes(unencrypted)));\n    }\n\n    private byte[] Decrypt(byte[] buffer)\n    {\n        // IV is prepended to cryptotext\n        byte[] iv = buffer.Take(IvBytes).ToArray();\n        using (ICryptoTransform decryptor = _rijndael.CreateDecryptor(_rijndael.Key, iv))\n        {\n            return decryptor.TransformFinalBlock(buffer, IvBytes, buffer.Length - IvBytes);\n        }\n    }\n\n    private byte[] Encrypt(byte[] buffer)\n    {\n        // Prepend cryptotext with IV\n        byte[] inputBuffer = _rijndael.IV.Concat(buffer).ToArray();\n        return _encryptor.TransformFinalBlock(inputBuffer, IvBytes, buffer.Length);\n    }\n}\n\n    ","\nHere is simple Snippet originally by ASP Snippets   \n\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.IO;\n\n\n private string Encrypt(string clearText)\n    {\n        string EncryptionKey = \u0022yourkey\u0022;\n        byte[] clearBytes = Encoding.Unicode.GetBytes(clearText);\n        using (Aes encryptor = Aes.Create())\n        {\n            Rfc2898DeriveBytes pdb = new Rfc2898DeriveBytes(EncryptionKey, new byte[] { 0x49, 0x76, 0x61, 0x6e, 0x20, 0x4d, 0x65, 0x64, 0x76, 0x65, 0x64, 0x65, 0x76 });\n            encryptor.Key = pdb.GetBytes(32);\n            encryptor.IV = pdb.GetBytes(16);\n            using (MemoryStream ms = new MemoryStream())\n            {\n                using (CryptoStream cs = new CryptoStream(ms, encryptor.CreateEncryptor(), CryptoStreamMode.Write))\n                {\n                    cs.Write(clearBytes, 0, clearBytes.Length);\n                    cs.Close();\n                }\n                clearText = Convert.ToBase64String(ms.ToArray());\n            }\n        }\n        return clearText;\n    }\n\n private string Decrypt(string cipherText)\n    {\n        string EncryptionKey = \u0022yourkey\u0022;\n        cipherText = cipherText.Replace(\u0022 \u0022, \u0022\u002B\u0022);\n        byte[] cipherBytes = Convert.FromBase64String(cipherText);\n        using (Aes encryptor = Aes.Create())\n        {\n            Rfc2898DeriveBytes pdb = new Rfc2898DeriveBytes(EncryptionKey, new byte[] { 0x49, 0x76, 0x61, 0x6e, 0x20, 0x4d, 0x65, 0x64, 0x76, 0x65, 0x64, 0x65, 0x76 });\n            encryptor.Key = pdb.GetBytes(32);\n            encryptor.IV = pdb.GetBytes(16);\n            using (MemoryStream ms = new MemoryStream())\n            {\n                using (CryptoStream cs = new CryptoStream(ms, encryptor.CreateDecryptor(), CryptoStreamMode.Write))\n                {\n                    cs.Write(cipherBytes, 0, cipherBytes.Length);\n                    cs.Close();\n                }\n                cipherText = Encoding.Unicode.GetString(ms.ToArray());\n            }\n        }\n        return cipherText;\n    }\n\n    ","\nAES Algorithm:\n\npublic static class CryptographyProvider\n    {\n        public static string EncryptString(string plainText, out string Key)\n        {\n            if (plainText == null || plainText.Length \u003C= 0)\n                throw new ArgumentNullException(\u0022plainText\u0022);\n\n            using (Aes _aesAlg = Aes.Create())\n            {\n                Key = Convert.ToBase64String(_aesAlg.Key);\n                ICryptoTransform _encryptor = _aesAlg.CreateEncryptor(_aesAlg.Key, _aesAlg.IV);\n\n                using (MemoryStream _memoryStream = new MemoryStream())\n                {\n                    _memoryStream.Write(_aesAlg.IV, 0, 16);\n                    using (CryptoStream _cryptoStream = new CryptoStream(_memoryStream, _encryptor, CryptoStreamMode.Write))\n                    {\n                        using (StreamWriter _streamWriter = new StreamWriter(_cryptoStream))\n                        {\n                            _streamWriter.Write(plainText);\n                        }\n                        return Convert.ToBase64String(_memoryStream.ToArray());\n                    }\n                }\n            }\n        }\n        public static string DecryptString(string cipherText, string Key)\n        {\n\n            if (string.IsNullOrEmpty(cipherText))\n                throw new ArgumentNullException(\u0022cipherText\u0022);\n            if (string.IsNullOrEmpty(Key))\n                throw new ArgumentNullException(\u0022Key\u0022);\n\n            string plaintext = null;\n\n            byte[] _initialVector = new byte[16];\n            byte[] _Key = Convert.FromBase64String(Key);\n            byte[] _cipherTextBytesArray = Convert.FromBase64String(cipherText);\n            byte[] _originalString = new byte[_cipherTextBytesArray.Length - 16];\n\n            Array.Copy(_cipherTextBytesArray, 0, _initialVector, 0, _initialVector.Length);\n            Array.Copy(_cipherTextBytesArray, 16, _originalString, 0, _cipherTextBytesArray.Length - 16);\n\n            using (Aes _aesAlg = Aes.Create())\n            {\n                _aesAlg.Key = _Key;\n                _aesAlg.IV = _initialVector;\n                ICryptoTransform decryptor = _aesAlg.CreateDecryptor(_aesAlg.Key, _aesAlg.IV);\n\n                using (MemoryStream _memoryStream = new MemoryStream(_originalString))\n                {\n                    using (CryptoStream _cryptoStream = new CryptoStream(_memoryStream, decryptor, CryptoStreamMode.Read))\n                    {\n                        using (StreamReader _streamReader = new StreamReader(_cryptoStream))\n                        {\n                            plaintext = _streamReader.ReadToEnd();\n                        }\n                    }\n                }\n            }\n            return plaintext;\n        }\n    }\n\n    ","\nHere is the sample how AES-GCM encryption/decryption can be done using Bouncy castle package.\n\nI\u0027ve found that sample when googled for possibility to decrypt data from GOlang crypto/aes api:\n\nconst (\n    gcmBlockSize         = 16 // this is key size\n    gcmTagSize           = 16 // this is mac\n    gcmStandardNonceSize = 12 // this is nonce\n)\n\nfunc encrypt(data []byte, passphrase string) []byte {\n    block, _ := aes.NewCipher([]byte(createHash(passphrase)))\n    gcm, err := cipher.NewGCM(block)\n    if err != nil {\n        panic(err.Error())\n    }\n    nonce := make([]byte, gcm.NonceSize())\n    if _, err = io.ReadFull(rand.Reader, nonce); err != nil {\n        panic(err.Error())\n    }\n    ciphertext := gcm.Seal(nonce, nonce, data, nil)\n    return ciphertext\n}\n\n\n.Net sample works like a charm with key (256 bit), mac (128bit) and nonce (96 bit). \n    ","\nGood example how to do this using PGPCore with BouncyCastle, very simple solution:  https://blog.bitscry.com/2018/07/05/pgp-encryption-and-decryption-in-c/\n\nI tried different solutions but this works best for me, some have bugs but this is perfect for me.\n\nusing (PGP pgp = new PGP())\n{\n// Generate keys\npgp.GenerateKey(@\u0022C:\\TEMP\\keys\\public.asc\u0022, @\u0022C:\\TEMP\\keys\\private.asc\u0022, \u0022email@email.com\u0022, \u0022password\u0022);\n// Encrypt file\npgp.EncryptFile(@\u0022C:\\TEMP\\keys\\content.txt\u0022, @\u0022C:\\TEMP\\keys\\content__encrypted.pgp\u0022, @\u0022C:\\TEMP\\keys\\public.asc\u0022, true, true);\n// Encrypt and sign file\npgp.EncryptFileAndSign(@\u0022C:\\TEMP\\keys\\content.txt\u0022, @\u0022C:\\TEMP\\keys\\content__encrypted_signed.pgp\u0022, @\u0022C:\\TEMP\\keys\\public.asc\u0022, @\u0022C:\\TEMP\\keys\\private.asc\u0022, \u0022password\u0022, true, true);\n// Decrypt file\npgp.DecryptFile(@\u0022C:\\TEMP\\keys\\content__encrypted.pgp\u0022, @\u0022C:\\TEMP\\keys\\content__decrypted.txt\u0022, @\u0022C:\\TEMP\\keys\\private.asc\u0022, \u0022password\u0022);\n// Decrypt signed file\npgp.DecryptFile(@\u0022C:\\TEMP\\keys\\content__encrypted_signed.pgp\u0022, @\u0022C:\\TEMP\\keys\\content__decrypted_signed.txt\u0022, @\u0022C:\\TEMP\\keys\\private.asc\u0022, \u0022password\u0022);\n\n// Encrypt stream\nusing (FileStream inputFileStream = new FileStream(@\u0022C:\\TEMP\\keys\\content.txt\u0022, FileMode.Open))\nusing (Stream outputFileStream = File.Create(@\u0022C:\\TEMP\\keys\\content__encrypted2.pgp\u0022))\nusing (Stream publicKeyStream = new FileStream(@\u0022C:\\TEMP\\keys\\public.asc\u0022, FileMode.Open))\n    pgp.EncryptStream(inputFileStream, outputFileStream, publicKeyStream, true, true);\n\n// Decrypt stream\nusing (FileStream inputFileStream = new FileStream(@\u0022C:\\TEMP\\keys\\content__encrypted2.pgp\u0022, FileMode.Open))\nusing (Stream outputFileStream = File.Create(@\u0022C:\\TEMP\\keys\\content__decrypted2.txt\u0022))\nusing (Stream privateKeyStream = new FileStream(@\u0022C:\\TEMP\\keys\\private.asc\u0022, FileMode.Open))\n    pgp.DecryptStream(inputFileStream, outputFileStream, privateKeyStream, \u0022password\u0022);\n}\n\n    ","\nI have an open source project called X509Crypto that leverages certificates to encrypt and decrypt strings. It\u0027s very easy to use. Here is an example for how to use it:\n1. Use the X509Crypto Commandline Interface (CLI) to generate a new encryption certificate and key pair\n\u003Ex509crypto.exe\nX509Crypto\u003E makecert -context user -keysize medium -alias myvault\n\nCertificate with thumbprint B31FE7E7AE5229F8186782742CF579197FA859FD was added to X509Alias \u0022myvault\u0022 in the user X509Context\n\nX509Crypto\u003E\n\n2. Use the Encrypt CLI command to add a secret to your new X509Alias\nX509Crypto\u003E encrypt -text -alias myvault -context user -secret apikey -in \u002280EAF03248965AC2B78090\u0022\n\nSecret apikey has been added to X509Alias myvault in the user X509Context\n\nX509Crypto\u003E\n\n3. Reference the secret in your program\nOnce you have an X509Alias established with your secret(s) added, it is trivial to retreive them in your program with the Org.X509Crypto nuget package installed:\nusing Org.X509Crypto;\n\nnamespace SampleApp\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            var Alias = new X509Alias(@\u0022myvault\u0022, X509Context.UserReadOnly);\n            var apiKey = Alias.RecoverSecret(@\u0022apikey\u0022);\n        }\n    }\n}\n\n    ","\n            using System;\n            using System.Collections.Generic;\n            using System.Text;\n            using System.Text.RegularExpressions;  // This is for password validation\n            using System.Security.Cryptography;\n            using System.Configuration;  // This is where the hash functions reside\n\n            namespace BullyTracker.Common\n            {\n                public class HashEncryption\n                {\n                    //public string GenerateHashvalue(string thisPassword)\n                    //{\n                    //    MD5CryptoServiceProvider md5 = new MD5CryptoServiceProvider();\n                    //    byte[] tmpSource;\n                    //    byte[] tmpHash;\n\n                    //    tmpSource = ASCIIEncoding.ASCII.GetBytes(thisPassword); // Turn password into byte array\n                    //    tmpHash = md5.ComputeHash(tmpSource);\n\n                    //    StringBuilder sOutput = new StringBuilder(tmpHash.Length);\n                    //    for (int i = 0; i \u003C tmpHash.Length; i\u002B\u002B)\n                    //    {\n                    //        sOutput.Append(tmpHash[i].ToString(\u0022X2\u0022));  // X2 formats to hexadecimal\n                    //    }\n                    //    return sOutput.ToString();\n                    //}\n                    //public Boolean VerifyHashPassword(string thisPassword, string thisHash)\n                    //{\n                    //    Boolean IsValid = false;\n                    //    string tmpHash = GenerateHashvalue(thisPassword); // Call the routine on user input\n                    //    if (tmpHash == thisHash) IsValid = true;  // Compare to previously generated hash\n                    //    return IsValid;\n                    //}\n                    public string GenerateHashvalue(string toEncrypt, bool useHashing)\n                    {\n                        byte[] keyArray;\n                        byte[] toEncryptArray = UTF8Encoding.UTF8.GetBytes(toEncrypt);\n\n                        System.Configuration.AppSettingsReader settingsReader = new AppSettingsReader();\n                        // Get the key from config file\n                        string key = (string)settingsReader.GetValue(\u0022SecurityKey\u0022, typeof(String));\n                        //System.Windows.Forms.MessageBox.Show(key);\n                        if (useHashing)\n                        {\n                            MD5CryptoServiceProvider hashmd5 = new MD5CryptoServiceProvider();\n                            keyArray = hashmd5.ComputeHash(UTF8Encoding.UTF8.GetBytes(key));\n                            hashmd5.Clear();\n                        }\n                        else\n                            keyArray = UTF8Encoding.UTF8.GetBytes(key);\n\n                        TripleDESCryptoServiceProvider tdes = new TripleDESCryptoServiceProvider();\n                        tdes.Key = keyArray;\n                        tdes.Mode = CipherMode.ECB;\n                        tdes.Padding = PaddingMode.PKCS7;\n\n                        ICryptoTransform cTransform = tdes.CreateEncryptor();\n                        byte[] resultArray = cTransform.TransformFinalBlock(toEncryptArray, 0, toEncryptArray.Length);\n                        tdes.Clear();\n                        return Convert.ToBase64String(resultArray, 0, resultArray.Length);\n                    }\n                    /// \u003Csummary\u003E\n                    /// DeCrypt a string using dual encryption method. Return a DeCrypted clear string\n                    /// \u003C/summary\u003E\n                    /// \u003Cparam name=\u0022cipherString\u0022\u003Eencrypted string\u003C/param\u003E\n                    /// \u003Cparam name=\u0022useHashing\u0022\u003EDid you use hashing to encrypt this data? pass true is yes\u003C/param\u003E\n                    /// \u003Creturns\u003E\u003C/returns\u003E\n                    public string Decrypt(string cipherString, bool useHashing)\n                    {\n                        byte[] keyArray;\n                        byte[] toEncryptArray = Convert.FromBase64String(cipherString);\n\n                        System.Configuration.AppSettingsReader settingsReader = new AppSettingsReader();\n                        //Get your key from config file to open the lock!\n                        string key = (string)settingsReader.GetValue(\u0022SecurityKey\u0022, typeof(String));\n\n                        if (useHashing)\n                        {\n                            MD5CryptoServiceProvider hashmd5 = new MD5CryptoServiceProvider();\n                            keyArray = hashmd5.ComputeHash(UTF8Encoding.UTF8.GetBytes(key));\n                            hashmd5.Clear();\n                        }\n                        else\n                            keyArray = UTF8Encoding.UTF8.GetBytes(key);\n\n                        TripleDESCryptoServiceProvider tdes = new TripleDESCryptoServiceProvider();\n                        tdes.Key = keyArray;\n                        tdes.Mode = CipherMode.ECB;\n                        tdes.Padding = PaddingMode.PKCS7;\n\n                        ICryptoTransform cTransform = tdes.CreateDecryptor();\n                        byte[] resultArray = cTransform.TransformFinalBlock(toEncryptArray, 0, toEncryptArray.Length);\n\n                        tdes.Clear();\n                        return UTF8Encoding.UTF8.GetString(resultArray);\n                    }\n\n\n                }\n\n            }\n\n    ","\nfor simplicity i made for myself this function that i use for non crypto purposes : replace \u0022yourpassphrase\u0022 with your password ...\n\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.IO;\n\n namespace My\n{\n    public class strCrypto\n    {\n        // This constant string is used as a \u0022salt\u0022 value for the PasswordDeriveBytes function calls.\n    // This size of the IV (in bytes) must = (keysize / 8).  Default keysize is 256, so the IV must be\n    // 32 bytes long.  Using a 16 character string here gives us 32 bytes when converted to a byte array.\n    private const string initVector = \u0022r5dm5fgm24mfhfku\u0022;\n    private const string passPhrase = \u0022yourpassphrase\u0022; // email password encryption password\n\n    // This constant is used to determine the keysize of the encryption algorithm.\n    private const int keysize = 256;\n\n    public static string encryptString(string plainText)\n    {\n        //if the plaintext  is empty or null string just return an empty string\n        if (plainText == \u0022\u0022 || plainText == null )\n        {\n            return \u0022\u0022;\n        }\n\n        byte[] initVectorBytes = Encoding.UTF8.GetBytes(initVector);\n        byte[] plainTextBytes = Encoding.UTF8.GetBytes(plainText);\n        PasswordDeriveBytes password = new PasswordDeriveBytes(passPhrase, null);\n        byte[] keyBytes = password.GetBytes(keysize / 8);\n        RijndaelManaged symmetricKey = new RijndaelManaged();\n        symmetricKey.Mode = CipherMode.CBC;\n        ICryptoTransform encryptor = symmetricKey.CreateEncryptor(keyBytes, initVectorBytes);\n        MemoryStream memoryStream = new MemoryStream();\n        CryptoStream cryptoStream = new CryptoStream(memoryStream, encryptor, CryptoStreamMode.Write);\n        cryptoStream.Write(plainTextBytes, 0, plainTextBytes.Length);\n        cryptoStream.FlushFinalBlock();\n        byte[] cipherTextBytes = memoryStream.ToArray();\n        memoryStream.Close();\n        cryptoStream.Close();\n        return Convert.ToBase64String(cipherTextBytes);\n    }\n\n    public static string decryptString(string cipherText)\n    {\n        //if the ciphertext is empty or null string just return an empty string\n        if (cipherText == \u0022\u0022 || cipherText == null )\n        {\n            return \u0022\u0022;\n        }\n\n        byte[] initVectorBytes = Encoding.ASCII.GetBytes(initVector);\n        byte[] cipherTextBytes = Convert.FromBase64String(cipherText);\n        PasswordDeriveBytes password = new PasswordDeriveBytes(passPhrase, null);\n        byte[] keyBytes = password.GetBytes(keysize / 8);\n        RijndaelManaged symmetricKey = new RijndaelManaged();\n        symmetricKey.Mode = CipherMode.CBC;\n        ICryptoTransform decryptor = symmetricKey.CreateDecryptor(keyBytes, initVectorBytes);\n        MemoryStream memoryStream = new MemoryStream(cipherTextBytes);\n        CryptoStream cryptoStream = new CryptoStream(memoryStream, decryptor, CryptoStreamMode.Read);\n        byte[] plainTextBytes = new byte[cipherTextBytes.Length];\n        int decryptedByteCount = cryptoStream.Read(plainTextBytes, 0, plainTextBytes.Length);\n        memoryStream.Close();\n        cryptoStream.Close();\n        return Encoding.UTF8.GetString(plainTextBytes, 0, decryptedByteCount);\n    }\n\n\n}\n\n\n}\n    ","\nusing System;\nusing System.Data;\nusing System.Configuration;\nusing System.Text;\nusing System.Security.Cryptography;\n\nnamespace Encription\n{\n    class CryptorEngine\n    {\n        public static string Encrypt(string ToEncrypt, bool useHasing)\n        {\n            byte[] keyArray;\n            byte[] toEncryptArray = UTF8Encoding.UTF8.GetBytes(ToEncrypt);\n            //System.Configuration.AppSettingsReader settingsReader = new     AppSettingsReader();\n           string Key = \u0022Bhagwati\u0022;\n            if (useHasing)\n            {\n                MD5CryptoServiceProvider hashmd5 = new MD5CryptoServiceProvider();\n                keyArray = hashmd5.ComputeHash(UTF8Encoding.UTF8.GetBytes(Key));\n                hashmd5.Clear();  \n            }\n            else\n            {\n                keyArray = UTF8Encoding.UTF8.GetBytes(Key);\n            }\n            TripleDESCryptoServiceProvider tDes = new TripleDESCryptoServiceProvider();\n            tDes.Key = keyArray;\n            tDes.Mode = CipherMode.ECB;\n            tDes.Padding = PaddingMode.PKCS7;\n            ICryptoTransform cTransform = tDes.CreateEncryptor();\n            byte[] resultArray = cTransform.TransformFinalBlock(toEncryptArray, 0,     toEncryptArray.Length);\n            tDes.Clear();\n            return Convert.ToBase64String(resultArray, 0, resultArray.Length);\n        }\n        public static string Decrypt(string cypherString, bool useHasing)\n        {\n            byte[] keyArray;\n            byte[] toDecryptArray = Convert.FromBase64String(cypherString);\n            //byte[] toEncryptArray = Convert.FromBase64String(cypherString);\n            //System.Configuration.AppSettingsReader settingReader = new     AppSettingsReader();\n            string key = \u0022Bhagwati\u0022;\n            if (useHasing)\n            {\n                MD5CryptoServiceProvider hashmd = new MD5CryptoServiceProvider();\n                keyArray = hashmd.ComputeHash(UTF8Encoding.UTF8.GetBytes(key));\n                hashmd.Clear();\n            }\n            else\n            {\n                keyArray = UTF8Encoding.UTF8.GetBytes(key);\n            }\n            TripleDESCryptoServiceProvider tDes = new TripleDESCryptoServiceProvider();\n            tDes.Key = keyArray;\n            tDes.Mode = CipherMode.ECB;\n            tDes.Padding = PaddingMode.PKCS7;\n            ICryptoTransform cTransform = tDes.CreateDecryptor();\n            try\n            {\n                byte[] resultArray = cTransform.TransformFinalBlock(toDecryptArray, 0,         toDecryptArray.Length);\n\n                tDes.Clear();\n                return UTF8Encoding.UTF8.GetString(resultArray,0,resultArray.Length);\n            }\n            catch (Exception ex)\n            {\n                throw ex;\n             }\n        }\n    }\n}\n\n    ","\nI want to give you my contribute, with my code for AES Rfc2898DeriveBytes (here the documentation) algorhytm, written in C# (.NET framework 4) and fully working also for limited platforms, as .NET Compact Framework for Windows Phone 7.0\u002B (not all platforms support every criptographic method of the .NET framework!).\n\nI hope this can help anyone!\n\nusing System;\nusing System.IO;\nusing System.Security.Cryptography;\nusing System.Text;\n\npublic static class Crypto\n{\n    private static readonly byte[] IVa = new byte[] { 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x11, 0x11, 0x12, 0x13, 0x14, 0x0e, 0x16, 0x17 };\n\n\n    public static string Encrypt(this string text, string salt)\n    {\n        try\n        {\n            using (Aes aes = new AesManaged())\n            {\n                Rfc2898DeriveBytes deriveBytes = new Rfc2898DeriveBytes(Encoding.UTF8.GetString(IVa, 0, IVa.Length), Encoding.UTF8.GetBytes(salt));\n                aes.Key = deriveBytes.GetBytes(128 / 8);\n                aes.IV = aes.Key;\n                using (MemoryStream encryptionStream = new MemoryStream())\n                {\n                    using (CryptoStream encrypt = new CryptoStream(encryptionStream, aes.CreateEncryptor(), CryptoStreamMode.Write))\n                    {\n                        byte[] cleanText = Encoding.UTF8.GetBytes(text);\n                        encrypt.Write(cleanText, 0, cleanText.Length);\n                        encrypt.FlushFinalBlock();\n                    }\n\n                    byte[] encryptedData = encryptionStream.ToArray();\n                    string encryptedText = Convert.ToBase64String(encryptedData);\n\n\n                    return encryptedText;\n                }\n            }\n        }\n        catch\n        {\n            return String.Empty;\n        }\n    }\n\n    public static string Decrypt(this string text, string salt)\n    {\n        try\n        {\n            using (Aes aes = new AesManaged())\n            {\n                Rfc2898DeriveBytes deriveBytes = new Rfc2898DeriveBytes(Encoding.UTF8.GetString(IVa, 0, IVa.Length), Encoding.UTF8.GetBytes(salt));\n                aes.Key = deriveBytes.GetBytes(128 / 8);\n                aes.IV = aes.Key;\n\n                using (MemoryStream decryptionStream = new MemoryStream())\n                {\n                    using (CryptoStream decrypt = new CryptoStream(decryptionStream, aes.CreateDecryptor(), CryptoStreamMode.Write))\n                    {\n                        byte[] encryptedData = Convert.FromBase64String(text);\n\n\n                        decrypt.Write(encryptedData, 0, encryptedData.Length);\n                        decrypt.Flush();\n                    }\n\n                    byte[] decryptedData = decryptionStream.ToArray();\n                    string decryptedText = Encoding.UTF8.GetString(decryptedData, 0, decryptedData.Length);\n\n\n                    return decryptedText;\n                }\n            }\n        }\n        catch\n        {\n            return String.Empty;\n        }\n        }\n    }\n}\n\n    ","\nYou have to use the namespace using System.Security.Cryptography; and useHashing is a bool type either true or false. String variable \u0022key\u0022 should be same for Encryption and for Decryption\n\n//Encryption\npublic string EncryptText(string toEncrypt, bool useHashing)\n    {\n        try\n        {\n            byte[] keyArray;\n            byte[] toEncryptArray = UTF8Encoding.UTF8.GetBytes(toEncrypt);\n\n            string key = \u0022String Key Value\u0022; //Based on this key stirng is encrypting\n            //System.Windows.Forms.MessageBox.Show(key);\n            //If hashing use get hashcode regards to your key\n            if (useHashing)\n            {\n                MD5CryptoServiceProvider hashmd5 = new MD5CryptoServiceProvider();\n                keyArray = hashmd5.ComputeHash(UTF8Encoding.UTF8.GetBytes(key));\n                //Always release the resources and flush data\n                //of the Cryptographic service provide. Best Practice\n\n                hashmd5.Clear();\n            }\n            else\n                keyArray = UTF8Encoding.UTF8.GetBytes(key);\n\n            TripleDESCryptoServiceProvider tdes = new TripleDESCryptoServiceProvider();\n            //set the secret key for the tripleDES algorithm\n            tdes.Key = keyArray;\n            //mode of operation. there are other 4 modes. We choose ECB(Electronic code Book)\n            tdes.Mode = CipherMode.ECB;\n            //padding mode(if any extra byte added)\n            tdes.Padding = PaddingMode.PKCS7;\n\n            ICryptoTransform cTransform = tdes.CreateEncryptor();\n            //transform the specified region of bytes array to resultArray\n            byte[] resultArray = cTransform.TransformFinalBlock(toEncryptArray, 0,          toEncryptArray.Length);\n            //Release resources held by TripleDes Encryptor\n            tdes.Clear();\n            //Return the encrypted data into unreadable string format\n            return Convert.ToBase64String(resultArray, 0, resultArray.Length);\n        }\n        catch (Exception e)\n        {\n            throw e;\n        }\n    }\n\n    //Decryption\n    public string DecryptText(string cipherString, bool useHashing)\n    {\n\n        try\n        {\n            byte[] keyArray;\n            //get the byte code of the string\n\n            byte[] toEncryptArray = Convert.FromBase64String(cipherString);\n\n            string key = \u0022String Key Value\u0022; //Based on this key string is decrypted\n\n            if (useHashing)\n            {\n                //if hashing was used get the hash code with regards to your key\n                MD5CryptoServiceProvider hashmd5 = new MD5CryptoServiceProvider();\n                keyArray = hashmd5.ComputeHash(UTF8Encoding.UTF8.GetBytes(key));\n                //release any resource held by the MD5CryptoServiceProvider\n\n                hashmd5.Clear();\n            }\n            else\n            {\n                //if hashing was not implemented get the byte code of the key\n                keyArray = UTF8Encoding.UTF8.GetBytes(key);\n            }\n\n            TripleDESCryptoServiceProvider tdes = new TripleDESCryptoServiceProvider();\n            //set the secret key for the tripleDES algorithm\n            tdes.Key = keyArray;\n            //mode of operation. there are other 4 modes.\n            //We choose ECB(Electronic code Book)\n\n            tdes.Mode = CipherMode.ECB;\n            //padding mode(if any extra byte added)\n            tdes.Padding = PaddingMode.PKCS7;\n\n            ICryptoTransform cTransform = tdes.CreateDecryptor();\n            byte[] resultArray = cTransform.TransformFinalBlock\n                    (toEncryptArray, 0, toEncryptArray.Length);\n            //Release resources held by TripleDes Encryptor\n            tdes.Clear();\n            //return the Clear decrypted TEXT\n            return UTF8Encoding.UTF8.GetString(resultArray);\n        }\n        catch (Exception ex)\n        {\n            throw ex;\n        }\n    }\n\n    ","\nA good algorithm to securely hash data is BCrypt:\n\n\n  Besides incorporating a salt to protect against rainbow table attacks,\n  bcrypt is an adaptive function: over time, the iteration count can be\n  increased to make it slower, so it remains resistant to brute-force\n  search attacks even with increasing computation power.\n\n\nThere\u0027s a nice .NET implementation of BCrypt that is available also as a NuGet package.\n    ","\n                \n                To Bret - hi thx for your example. Maybye one think - I had issue with key leng - I did modification with MD5, so if somebody will use your example in the feature pls use this for key normalization(or you can use other hash algoritm:        HashAlgorithm hash = new MD5CryptoServiceProvider();                UnicodeEncoding UE = new UnicodeEncoding();                byte[] key = hash.ComputeHash(UE.GetBytes(encrypt_password));        ps:sorry for my english :)  slinti\n                \n\u2013\u00A0user593912\n                Jan 29 \u002711 at 16:19\n            ","\n                \n                The above code is not secure, it breaks the most basic rule of semantic security with aes, you should NEVER use the same IV more than once with the same key. This always gives an identical IV every time you use the same key.\n                \n\u2013\u00A0jbtule\n                Apr 24 \u002712 at 22:54\n            ","\n                \n                Using a salt in the key-derivation process wouldn\u0027t hurt. A constant isn\u0027t a good salt, just like a constant isn\u0027t a good IV.\n                \n\u2013\u00A0CodesInChaos\n                Aug 14 \u002713 at 15:48\n            ","\n                \n                Concerning the AES vs. Rijndael confusion: AES is a subset of Rijndael. If you use Rijndael with 128 bit blocks and either 128, 192 or 256 bit keys you\u0027re using AES.\n                \n\u2013\u00A0CodesInChaos\n                Aug 14 \u002713 at 15:50\n            ","\n                \n                The salt adds a degree of obfuscation to prevent cracking.  Recommend that you read jbtules examples below where the salt is generated.\n                \n\u2013\u00A0Brett\n                Oct 6 \u002714 at 20:16\n            ","\n                \n                Have these samples posted on code review too.\n                \n\u2013\u00A0jbtule\n                Dec 3 \u002712 at 14:27\n            ","\n                \n                That\u0027s a good question, these are using Authenticated Encryption examples, in addition to encrypting they have a MAC  to validate that the ciphertext hasn\u0027t been modifed by someone else, this is primarily to thwart chosen-ciphertext attacks. So when decrypting it calculates the MAC to check against the appended one to authenticate it, if it authenticates it decrypts and if it doesn\u0027t it returns null.\n                \n\u2013\u00A0jbtule\n                Dec 19 \u002712 at 13:41\n            ","\n                \n                The array check on the MAC does every index, because a timing attack can be used to calculate a new MAC on a fake ciphertext if it returns the first byte that doesn\u0027t match.\n                \n\u2013\u00A0jbtule\n                Dec 19 \u002712 at 13:42\n                        \n                            \n                        \n            ","\n                \n                That is a good book and relatively recent. What I would recommend even more is the free online course Cryptography I by Dan Boneh. Really good videos, really good quizes, and really good machine problems too that provide a good practical base for the usage of cryptography. You should use what you are most comfortable with in regards to the AesCryptoServiceProvider.\n                \n\u2013\u00A0jbtule\n                Dec 19 \u002712 at 20:08\n                        \n                            \n                        \n            ","\n                \n                A nicely explained usage section would be extremely helpful.\n                \n\u2013\u00A0Rocklan\n                Sep 28 \u002715 at 6:42\n            ","\n                \n                Sorry to ask such a simple question but can anyone tell me where do I get RSA Key or how do i generate one?\n                \n\u2013\u00A0Akash Kava\n                Nov 5 \u002709 at 17:36\n            ","\n                \n                Why RSA? RSA has its uses, but nothing indicated that this is one of them.\n                \n\u2013\u00A0CodesInChaos\n                Jul 17 \u002711 at 13:35\n            ","\n                \n                Even in the original question there is no indication that RSA might be a good fit. Asymmetric encryption has its uses, but it\u0027s not the right choice as a default encryption. Your example code will fail for longer strings because the RSA class isn\u0027t designed for general purpose encryption. If you need the asymmetric features you should encrypt a symmetric key with RSA and encrypt the actual data with that symmetric key. So I still believe your answer is bad advice.\n                \n\u2013\u00A0CodesInChaos\n                Jul 27 \u002711 at 9:08\n                        \n                            \n                        \n            ","\n                \n                I\u0027m impressed, 70 votes for a wrong answer!!!, as CodesInChaos said for this type of encryption you need a Symmetric key, not an Assymetric.\n                \n\u2013\u00A0Otto Kanellis\n                Feb 16 \u002714 at 8:46\n                        \n                            \n                        \n            ","\n                \n                It\u0027s not a wrong answer, just over-complicating with a huge overhead... use AES / any other Symmetric methods for better results.\n                \n\u2013\u00A0Tomer W\n                Feb 22 \u002715 at 12:32\n            ","\n                \n                hmm can anyone tell me why does this answer has so few votes? It looks like a very convenient way for ASP.NET applications\n                \n\u2013\u00A0Dirk Boer\n                Mar 27 \u002714 at 12:04\n            ","\n                \n                @DirkBoer The functionality was added a couple of years after the question was asked, I added my answer to this question to let people know there are easier ways today. This also only works with ASP.Net without some app.config-fu which is fairly dangerous if you don\u0027t know what you are doing.\n                \n\u2013\u00A0mattmanser\n                Mar 27 \u002714 at 12:38\n                        \n                            \n                        \n            ","\n                \n                Pardon my ignorance but from the web page I can\u0027t figure out my answer. If I encrypt a string on one machine, write it to a database, and read it with another machine will I be able to decrypt it as long as the purposes parameters are the same value? Maybe I\u0027m just confused by the class name \u0022MachineKey\u0022\n                \n\u2013\u00A0Adriaan Davel\n                Feb 24 \u002716 at 15:33\n            ","\n                \n                Another question, can I use this in a WPF app? It has no web references, is it ok to add the references to System.Web?\n                \n\u2013\u00A0Adriaan Davel\n                Feb 24 \u002716 at 15:57\n            ","\n                \n                @AdriaanDavel Per the linked docs, \u0022The MachineKey APIs should only be used in an ASP.NET app. Behavior of the MachineKey APIs outside the context of an ASP.NET application is undefined\u0022 -- use it only if you enjoy the game of Russian Roulette\n                \n\u2013\u00A0Mark Sowul\n                Dec 19 \u002716 at 19:16\n            ","\n                \n                1) That class is pretty annoying to use since you put the burden of IV management on the user who will almost certainly get it wrong. 2) Lack of MAC makes this vulnerable to padding oracles.\n                \n\u2013\u00A0CodesInChaos\n                Aug 14 \u002713 at 16:47\n            ","\n                \n                1) Your padding looks broken to me. You add a zero padding and don\u0027t remove it. Zero padding is a bad idea since it can\u0027t be removed reliably. Use PKCS#7 padding instead. I\u0027d expect the bouncycastle encryption/decryption function to already support this. 2) You should use a constant time comparison to validate the MAC, not SequenceEqual. This avoids a timing side-channel that leaks how long a prefix of the presented MAC and the actual MAC match.\n                \n\u2013\u00A0CodesInChaos\n                Mar 10 \u002714 at 17:08\n            ","\n                \n                @CodesInChaos I agree, thanks for checking this I\u0027ve made an edit to resolve these couple issues. \u2013  nerdybeardo\n                \n\u2013\u00A0nerdybeardo\n                Mar 11 \u002714 at 10:10\n            ","\n                \n                great answer, just one question....what would be the key and hmacKey, i\u0027m new to crypto..thanks !\n                \n\u2013\u00A0Terkhos\n                Jul 24 \u002715 at 15:35\n            ","\n                \n                @Terkhos You should use a secure random number generator for generating keys like RNGCryptoServiceProvider, you should never use a passphrase or something predictable.  You should also use the maximum length that the algorithm will provide for example AES 256 uses a key size that\u0027s 256 bits in length so 32 random bytes would be best, HMAC key sizes are typically are based on the size of the algorithm for example SHA2 (256) a 256 bit key generated by a secure random number generator would suffice.  Change keys often! The more often the better!\n                \n\u2013\u00A0nerdybeardo\n                Jul 27 \u002715 at 1:07\n            ","\n                \n                While your Encrypt method generates a different value for every call even with the same plain text, the Substring(20) will be the same every time, right?\n                \n\u2013\u00A0dub stylee\n                Mar 18 \u002716 at 16:57\n            ","\n                \n                I didn\u0027t notice that the Encrypt generated a different IV each time. For some reason I was thinking the IV was the same every time, which would basically make it pointless.\n                \n\u2013\u00A0dub stylee\n                Mar 24 \u002716 at 19:10\n            ","\n                \n                I understand what you say @jbtule, but it\u0027s really all about risk management. If all you need to do is to store some confidential info locally and you want extra defense with AES, this solution might satisfy your needs.\n                \n\u2013\u00A0Gil Cohen\n                Mar 30 \u002717 at 12:15\n            ","\n                \n                @GilCohen Well put a big disclaimer on this and say only use for data at rest, don\u0027t expose with a service and then you can claim risk management. however, your quick and dirty is just sloppy. For example why do you replace spaces with plus signs on just decrypt and not vice versa, is it because something else is modifying the ciphertext before you get? Like passing via a url query string, cookie or form variable, hmm, that sounds like a service, which is absolutely when you need to authenticate a cipher text.\n                \n\u2013\u00A0jbtule\n                Mar 30 \u002717 at 14:52\n            ","\n                \n                @jbtule actually no, this is the encoding of Base64 function for some reason. This was indeed used for data at rest and I agree with your comment. I\u0027ll add it.\n                \n\u2013\u00A0Gil Cohen\n                Aug 6 \u002717 at 12:28\n            ","\n                \n                -1 This is very weak. 1) DES is easy to brute force having a 56 bit key. 2) A key is binary, not UTF8. If the key consists of ASCII characters (likely in practice), this reduces the effective key size to 48 bits. 3) An IV should be different for each message 4) Lack of MAC leaves you open to active attacks, including padding oracles.\n                \n\u2013\u00A0CodesInChaos\n                Feb 19 \u002715 at 21:29\n            ","\n                \n                \u002B1 OP had a very simple question, without requirement for maximum strenght, and this answer corresponds with that perfectly. At least I can use this because I also have a simple usage for encryption.\n                \n\u2013\u00A0Roland\n                Oct 28 \u002715 at 15:47\n                        \n                            \n                        \n            ","\n                \n                -1 @Roland as mentioned by CodesInChaos an IV needs to be different for each message, very simply, if it isn\u0027t, you are using the API incorrectly, hence this code should never be used. Period. Not to overshadow the 48bit key makes this decryptable to anyone without the key in merely a day, so this this is no longer encryption and thus does not answer the question.\n                \n\u2013\u00A0jbtule\n                Mar 29 \u002717 at 17:29\n            ","\n                \n                Security Warning: Do Not Use This Code See above Comment by @CodesInChaos\n                \n\u2013\u00A0jbtule\n                May 8 \u002717 at 21:59\n            ","\n                \n                Use this for simple applications If you are guarding nuclear secrets, use something else. This works as is.\n                \n\u2013\u00A0John Pittaway\n                Sep 27 \u002719 at 23:30\n                        \n                            \n                        \n            ","\n                \n                Thanks @reza .. gonna use it for some home projects if i may?\n                \n\u2013\u00A0Arrie\n                Mar 2 at 19:42\n            ","\n                \n                Hardcoded Salt and IV, and using an ASCII representation for them, this is all kinds of wrong.\n                \n\u2013\u00A0jbtule\n                Mar 29 \u002717 at 17:43\n            ","\n                \n                Security Warning: Do Not Use This Code See my comment above.\n                \n\u2013\u00A0jbtule\n                May 8 \u002717 at 22:00\n            ","\n                \n                I apologize that I didn\u0027t spell this out. IV is not a key, and keeping it secret offers zero added security, and making it predictable loses a quite a bit of security. Hardcoding the IV is completely unreasonable/illogical/wrong to anyone that actually knows how to use AES-CBC encryption.  Encoding.ASCII.GetBytes for data that is intended to add entropy to something that human chosen, is going to be way less then entropy than expected and is a very novice mistake.  These are all things that are easily correctable, but you aren\u0027t, so my bold warning stays, due to security implications.\n                \n\u2013\u00A0jbtule\n                May 9 \u002717 at 4:59\n            ","\n                \n                Rahul, chill down! Sit back, relax and think why all 3 comments from @jbtule got up-votes. He is talking something sensible in order to put you on right path. Nothing to feel offended. You are new to SO. You\u0027ll realize how it works eventually.\n                \n\u2013\u00A0Nikhil Vartak\n                May 25 \u002717 at 7:26\n            ","\n                \n                A couple of issues: 1) You\u0027re not using a salt in the key derivation, enabling multi target attacks. 2) Your MAC comparison function is potentially vulnerable to side-channel/timing attacks since you branch on secret data. Use something like mismatch \u002B= found[i]^computed[i] instead. 3) You\u0027re using more than 20 bytes of PBKDF2-HMAC-SHA-1 which slows your KDF down by a factor of 2 without slowing down an attacker\n                \n\u2013\u00A0CodesInChaos\n                Aug 11 \u002714 at 10:59\n            ","\n                \n                @CodesInChaos: 1) This was meant as a simple example to get people started -- I omit random salt only for clarity. But, good point. 2) Good, subtle point. 3) What do you suggest to derive two 16 byte keys in twenty bytes?\n                \n\u2013\u00A0Jim Flood\n                Aug 11 \u002714 at 20:47\n            ","\n                \n                The simplest way is hashing the output of the slow hash with SHA-2. Fancier ways are HKDF or simply applying PBKDF2 again, but this time with iterations set to 1.\n                \n\u2013\u00A0CodesInChaos\n                Aug 12 \u002714 at 8:00\n            ","\n                \n                @CodesInChaos I would not use SHA-2. The job of a hash function is not the same as the job of a key derivation function. A hash only needs to be unpredictable, and to change when the input changes. A key needs to be indistinguishable from random. I would still draw 32 bytes from the KDF. In this case, you are optimizing too early and adding risk.\n                \n\u2013\u00A0Jim Flood\n                Aug 14 \u002714 at 16:27\n            ","\n                \n                What is the ConvertStringArrayToString() method used for?\n                \n\u2013\u00A0abenci\n                Sep 14 \u002716 at 12:49\n            ","\n                \n                MD5 is the least secure. It is not recommended.\n                \n\u2013\u00A0vapcguy\n                Feb 14 at 21:13\n            ","\n                \n                Big drawback is that it\u0027s not authenticated encryption.\n                \n\u2013\u00A0jbtule\n                Mar 29 \u002717 at 17:13\n            ","\n                \n                You should add a MAC to prevent active attacks, such as padding oracles.\n                \n\u2013\u00A0CodesInChaos\n                Feb 19 \u002715 at 21:31\n            ","\n                \n                You are probably right, I\u0027m in no way proficient on this area. When I originally visited this topic I just wanted something simple that works and fairly secure. I\u0027d definitely use a tried and true library for very sensitive data.\n                \n\u2013\u00A0angularsen\n                Feb 20 \u002715 at 7:36\n            ","\n                \n                You don\u0027t check integrity/authentication. You should add a MAC.\n                \n\u2013\u00A0Artjom B.\n                Dec 17 \u002714 at 9:18\n            ","\n                \n                What you exactly mean actually the above example is to Encrypt/Decrypt the string variable.\n                \n\u2013\u00A0AirCodeOne\n                Jan 6 \u002715 at 5:01\n            ","\n                \n                The ciphertext should be authenticated (e.g. with HMAC) to protect against padding oracle attacks. When I look through this code again, it seems that you\u0027re using ECB mode which should never be used because it is not semantically secure. Also, when you derive the key and IV from a master key and salt, the salt is static. This leads to a static IV which breaks the whole concept of the IV and makes your scheme semantically insecure again.\n                \n\u2013\u00A0Artjom B.\n                Jan 6 \u002715 at 9:33\n                        \n                            \n                        \n            ","\n                \n                Thanks Brother, it would be great help if you can pass the corrected code here.\n                \n\u2013\u00A0AirCodeOne\n                Jan 9 \u002715 at 2:35\n            ","\n                \n                1) The IV is passed in as a parameter which means that the developer has to do the IV management and they will get it wrong. Instead, the IV should be randomly generated and stored alongside of the ciphertext. 2) Since the IV and key will change between multiple executions of the Encryption method and does not persist, there is no need to have this method at all other than for demonstration purposes. 3) There is no authentication of the ciphertext, so attackers may manipulate it without you detecting it (see: padding oracle attack).\n                \n\u2013\u00A0Artjom B.\n                Jun 10 \u002716 at 8:23\n                        \n                            \n                        \n            ","\n                \n                hai @ArtjomB.   developer need not to worry about iv management because it ll be get generated and added along with the encrypted string.\n                \n\u2013\u00A0Skull\n                Jun 10 \u002716 at 9:56\n                        \n                            \n                        \n            ","\n                \n                I have to disagree. The IV is stored in the _iv class variable and not written into the ciphertext. So, how do you think the receiver will know the key and IV? They would have to be distributed in some other way. Since the IV is not supposed to be secret, it should be randomly generated for each encryption and distributed along with the ciphertext.\n                \n\u2013\u00A0Artjom B.\n                Jun 10 \u002716 at 10:03\n            ","\n                \n                skullpsgblog.blogspot.in/2016/05/\u2026\n                \n\u2013\u00A0Skull\n                Jun 10 \u002716 at 10:11\n            ","\n                \n                1)In the above link, you can get the way of implementing aes without ,need not to worry about iv management,because iv is also get encrypted along with string.   2)since   function you refers contains private access modifier you are not be able to call it outside. Inorder to encrypt we can be able to use only Cryptographyclass.Encrytion(\u0022SAMPLEstring\u0022) function\n                \n\u2013\u00A0Skull\n                Jun 15 \u002716 at 12:37\n                        \n                            \n                        \n            ","\n                \n                Really low quality. 1) ECB mode (which also implies no IV) 2) 3DES 3) Confuses keys and passwords. 4) Bad naming 5) No MAC\n                \n\u2013\u00A0CodesInChaos\n                Apr 10 \u002714 at 10:28\n            ","\n                \n                1) No salt in key derivation 2) Constant IV, which misses the whole point of an IV. It should be different for each encryption. 3) No authentication =\u003E padding oracles are a threat 4) encryptor.TransformFinalBlock is simpler than using those memory and crypto streams.\n                \n\u2013\u00A0CodesInChaos\n                Apr 23 \u002714 at 16:09\n            ","\n                \n                Isn\u0027t the ECB cipher mode a big no-no?\n                \n\u2013\u00A0John Bubriski\u2666\n                Jan 27 \u002712 at 20:14\n            ","\n                \n                Yes, ECB is the least secure option. See MS\u0027s comments: \u0022Important:  This mode is not recommended because it opens the door for multiple security exploits.\u0022 msdn.microsoft.com/en-us/library/\u2026\n                \n\u2013\u00A0Rich\n                Dec 5 \u002712 at 10:34\n            ","\n                \n                1) Why are you using a variable called IVa which is no IV, but a password? 2) Why are you setting IV=Key? You need a new random IV for each encryption. 3) Lack of MAC enables padding oracle attacks\n                \n\u2013\u00A0CodesInChaos\n                Aug 14 \u002713 at 16:44\n            ","\n                \n                -1 1) ECB mode is very weak 2) Lack of MAC leaves you open to active attacks, such as padding oracles. 3) Why would you still use 3DES nowadays? It\u0027s not broken, but AES is clearly a better choice.\n                \n\u2013\u00A0CodesInChaos\n                Feb 19 \u002715 at 21:34\n            ","\n                \n                The question asks how to encrypt and decrypt a string. Unless I\u0027m missing something huge -- how can you decrypt a string in BCrypt? BCrypt, despite its name, is a hashing function.\n                \n\u2013\u00A0The1nk\n                Jul 1 \u002716 at 15:50\n            "]},{"Id":"dd39900a-33dc-41f2-a81e-c458663bc3d2","QuestionId":618535,"Description":"Difference between decimal, float and double in .NET?","Votes":2139,"Views":970531,"Tags":[".net","floating-point","double","decimal"],"Discussions":["\nfloat and double are floating binary point types. In other words, they represent a number like this:\n\n10001.10010110011\n\n\nThe binary number and the location of the binary point are both encoded within the value.\n\ndecimal is a floating decimal point type. In other words, they represent a number like this:\n\n12345.65789\n\n\nAgain, the number and the location of the decimal point are both encoded within the value \u2013 that\u0027s what makes decimal still a floating point type instead of a fixed point type.\n\nThe important thing to note is that humans are used to representing non-integers in a decimal form, and expect exact results in decimal representations; not all decimal numbers are exactly representable in binary floating point \u2013 0.1, for example \u2013 so if you use a binary floating point value you\u0027ll actually get an approximation to 0.1. You\u0027ll still get approximations when using a floating decimal point as well \u2013 the result of dividing 1 by 3 can\u0027t be exactly represented, for example.\n\nAs for what to use when:\n\n\nFor values which are \u0022naturally exact decimals\u0022 it\u0027s good to use decimal. This is usually suitable for any concepts invented by humans: financial values are the most obvious example, but there are others too. Consider the score given to divers or ice skaters, for example.\nFor values which are more artefacts of nature which can\u0027t really be measured exactly anyway, float/double are more appropriate. For example, scientific data would usually be represented in this form. Here, the original values won\u0027t be \u0022decimally accurate\u0022 to start with, so it\u0027s not important for the expected results to maintain the \u0022decimal accuracy\u0022. Floating binary point types are much faster to work with than decimals.\n\n    ","\nPrecision is the main difference. \n\nFloat - 7 digits (32 bit)\n\nDouble-15-16 digits (64 bit)\n\nDecimal -28-29 significant digits (128 bit)\n\nDecimals have much higher precision and are usually used within financial applications that require a high degree of accuracy. Decimals are much slower (up to 20X times in some tests) than a double/float. \n\nDecimals and Floats/Doubles cannot be compared without a cast whereas Floats and Doubles can. Decimals also allow the encoding or trailing zeros.\n\nfloat flt = 1F/3;\ndouble dbl = 1D/3;\ndecimal dcm = 1M/3;\nConsole.WriteLine(\u0022float: {0} double: {1} decimal: {2}\u0022, flt, dbl, dcm);\n\n\nResult : \n\nfloat: 0.3333333  \ndouble: 0.333333333333333  \ndecimal: 0.3333333333333333333333333333\n\n    ","\nThe Decimal structure is strictly geared to financial calculations requiring accuracy, which are relatively intolerant of rounding.  Decimals are not adequate for scientific applications, however, for several reasons:\n\n\nA certain loss of precision is acceptable in many scientific calculations because of the practical limits of the physical problem or artifact being measured.  Loss of precision is not acceptable in finance.\nDecimal is much (much) slower than float and double for most operations, primarily because floating point operations are done in binary, whereas Decimal stuff is done in base 10 (i.e. floats and doubles are handled by the FPU hardware, such as MMX/SSE, whereas decimals are calculated in software).\nDecimal has an unacceptably smaller value range than double, despite the fact that it supports more digits of precision. Therefore, Decimal can\u0027t be used to represent many scientific values.\n\n    ","\n\u002B---------\u002B----------------\u002B---------\u002B----------\u002B---------------------------------------------\u002B\n| C#      | .Net Framework | Signed? | Bytes    | Possible Values                             |\n| Type    | (System) type  |         | Occupied |                                             |\n\u002B---------\u002B----------------\u002B---------\u002B----------\u002B---------------------------------------------\u002B\n| sbyte   | System.Sbyte   | Yes     | 1        | -128 to 127                                 |\n| short   | System.Int16   | Yes     | 2        | -32768 to 32767                             |\n| int     | System.Int32   | Yes     | 4        | -2147483648 to 2147483647                   |\n| long    | System.Int64   | Yes     | 8        | -9223372036854775808 to 9223372036854775807 |\n| byte    | System.Byte    | No      | 1        | 0 to 255                                    |\n| ushort  | System.Uint16  | No      | 2        | 0 to 65535                                  |\n| uint    | System.UInt32  | No      | 4        | 0 to 4294967295                             |\n| ulong   | System.Uint64  | No      | 8        | 0 to 18446744073709551615                   |\n| float   | System.Single  | Yes     | 4        | Approximately \u00B11.5 x 10-45 to \u00B13.4 x 1038   |\n|         |                |         |          |  with 7 significant figures                 |\n| double  | System.Double  | Yes     | 8        | Approximately \u00B15.0 x 10-324 to \u00B11.7 x 10308 |\n|         |                |         |          |  with 15 or 16 significant figures          |\n| decimal | System.Decimal | Yes     | 12       | Approximately \u00B11.0 x 10-28 to \u00B17.9 x 1028   |\n|         |                |         |          |  with 28 or 29 significant figures          |\n| char    | System.Char    | N/A     | 2        | Any Unicode character (16 bit)              |\n| bool    | System.Boolean | N/A     | 1 / 2    | true or false                               |\n\u002B---------\u002B----------------\u002B---------\u002B----------\u002B---------------------------------------------\u002B\n\n\nSee here for more information.\n    ","\nI won\u0027t reiterate tons of good (and some bad) information already answered in other answers and comments, but I will answer your followup question with a tip:\n\n\n  When would someone use one of these?\n\n\nUse decimal for counted values\n\nUse float/double for measured values\n\nSome examples:\n\n\nmoney (do we count money or measure money?)\ndistance (do we count distance or measure distance? *)\nscores (do we count scores or measure scores?)\n\n\nWe always count money and should never measure it. We usually measure distance. We often count scores.\n\n* In some cases, what I would call nominal distance, we may indeed want to \u0027count\u0027 distance. For example, maybe we are dealing with country signs that show distances to cities, and we know that those distances never have more than one decimal digit (xxx.x km).\n    ","\nfloat 7 digits of precision \n\ndouble has about 15 digits of precision\n\ndecimal has about 28 digits of precision\n\nIf you need better accuracy, use double instead of float.\nIn modern CPUs both data types have almost the same performance. The only benifit of using float is they take up less space. Practically matters only if you have got many of them.\n\nI found this is interesting. What Every Computer Scientist Should Know About Floating-Point Arithmetic\n    ","\nNo one has mentioned that\n\n\n  In default settings, Floats (System.Single) and doubles (System.Double) will never use\n  overflow checking while Decimal (System.Decimal) will always use\n  overflow checking.\n\n\nI mean \n\ndecimal myNumber = decimal.MaxValue;\nmyNumber \u002B= 1;\n\n\nthrows OverflowException.\n\nBut these do not:\n\nfloat myNumber = float.MaxValue;\nmyNumber \u002B= 1;\n\n\n\u0026\n\ndouble myNumber = double.MaxValue;\nmyNumber \u002B= 1;\n\n    ","\nIntegers, as was mentioned, are whole numbers. They can\u0027t store the point something, like .7, .42, and .007. If you need to store numbers that are not whole numbers, you need a different type of variable. You can use the double type or the float type. You set these types of variables up in exactly the same way: instead of using the word int, you type double or float. Like this:\n\nfloat myFloat;\ndouble myDouble;\n\n\n(float is short for \u0022floating point\u0022, and just means a number with a point something on the end.)\n\nThe difference between the two is in the size of the numbers that they can hold. For float, you can have up to 7 digits in your number. For doubles, you can have up to 16 digits. To be more precise, here\u0027s the official size:\n\nfloat:  1.5 \u00D7 10^-45  to 3.4 \u00D7 10^38  \ndouble: 5.0 \u00D7 10^-324 to 1.7 \u00D7 10^308\n\n\nfloat is a 32-bit number, and double is a 64-bit number.\n\nDouble click your new button to get at the code. Add the following three lines to your button code:\n\ndouble myDouble;\nmyDouble = 0.007;\nMessageBox.Show(myDouble.ToString());\n\n\nHalt your program and return to the coding window. Change this line:\n\nmyDouble = 0.007;\nmyDouble = 12345678.1234567;\n\n\nRun your programme and click your double button. The message box correctly displays the number. Add another number on the end, though, and C# will again round up or down. The moral is if you want accuracy, be careful of rounding!\n    ","\n\nDouble and float can be divided by integer zero without an exception at both compilation and run time.\nDecimal cannot be divided by integer zero. Compilation will always fail if you do that.\n\n    ","\n\nfloat: \u00B11.5 x 10^-45 to \u00B13.4 x 10^38 (~7 significant figures\ndouble: \u00B15.0 x 10^-324 to \u00B11.7 x 10^308 (15-16 significant figures)\ndecimal: \u00B11.0 x 10^-28 to \u00B17.9 x 10^28 (28-29 significant figures)\n\n    ","\nThe Decimal, Double, and Float variable types are different in the way that they store the values. Precision is the main difference where float is a single precision (32 bit) floating point data type, double is a double precision (64 bit) floating point data type and decimal is a 128-bit floating point data type.\n\nFloat - 32 bit (7 digits)\n\nDouble - 64 bit (15-16 digits)\n\nDecimal - 128 bit (28-29 significant digits)\n\nMore about...the difference between Decimal, Float and Double\n    ","\nThis has been an interesting thread for me, as today, we\u0027ve just had a nasty little bug, concerning decimal having less precision than a float.\n\nIn our C# code, we are reading numeric values from an Excel spreadsheet, converting them into a decimal, then sending this decimal back to a Service to save into a SQL Server database.\n\nMicrosoft.Office.Interop.Excel.Range cell = \u2026\nobject cellValue = cell.Value2;\nif (cellValue != null)\n{\n    decimal value = 0;\n    Decimal.TryParse(cellValue.ToString(), out value);\n}\n\n\nNow, for almost all of our Excel values, this worked beautifully. But for some, very small Excel values, using decimal.TryParse lost the value completely. One such example is\n\n\ncellValue = 0.00006317592\nDecimal.TryParse(cellValue.ToString(), out value); // would return 0\n\n\nThe solution, bizarrely, was to convert the Excel values into a double first, and then into a decimal:\n\nMicrosoft.Office.Interop.Excel.Range cell = \u2026\nobject cellValue = cell.Value2;\nif (cellValue != null)\n{\n    double valueDouble = 0;\n    double.TryParse(cellValue.ToString(), out valueDouble);\n    decimal value = (decimal) valueDouble;\n    \u2026\n}\n\n\nEven though double has less precision than a decimal, this actually ensured small numbers would still be recognised. For some reason, double.TryParse was actually able to retrieve such small numbers, whereas decimal.TryParse would set them to zero.\n\nOdd. Very odd.\n    ","\nFor applications such as games and embedded systems where memory and performance are both critical, float is usually the numeric type of choice as it is faster and half the size of a double. Integers used to be the weapon of choice, but floating point performance has overtaken integer in modern processors. Decimal is right out!\n    ","\nThe problem with all these types is that a certain imprecision subsists \nAND that this problem can occur with small decimal numbers like in the following example\n\nDim fMean as Double = 1.18\nDim fDelta as Double = 0.08\nDim fLimit as Double = 1.1\n\nIf fMean - fDelta \u003C fLimit Then\n    bLower = True\nElse\n    bLower = False\nEnd If\n\n\nQuestion: Which value does bLower variable contain ?\n\nAnswer: On a 32 bit machine bLower contains TRUE !!!\n\nIf I replace Double by Decimal, bLower contains FALSE which is the good answer.\n\nIn double, the problem is that fMean-fDelta = 1.09999999999 that is lower that 1.1.\n\nCaution: I think that same problem can certainly exists for other number because Decimal is only a double with higher precision and the precision has always a limit.\n\nIn fact, Double, Float and Decimal correspond to BINARY decimal in COBOL !\n\nIt is regrettable that other numeric types implemented in COBOL don\u0027t exist in .Net. For those that don\u0027t know COBOL, there exist in COBOL following numeric type\n\nBINARY or COMP like float or double or decimal\nPACKED-DECIMAL or COMP-3 (2 digit in 1 byte)\nZONED-DECIMAL (1 digit in 1 byte) \n\n    ","\nIn simple words:  \n\n\nThe Decimal, Double, and Float variable types are different in the way that they store the values. \nPrecision is the main difference (Notice that this is not the single difference) where float is a single precision (32 bit) floating point data type, double is a double precision (64 bit) floating point data type and decimal is a 128-bit floating point data type.\nThe summary table:\n\n\n/==========================================================================================\n    Type       Bits    Have up to                   Approximate Range \n/==========================================================================================\n    float      32      7 digits                     -3.4 \u00D7 10 ^ (38)   to \u002B3.4 \u00D7 10 ^ (38)\n    double     64      15-16 digits                 \u00B15.0 \u00D7 10 ^ (-324) to \u00B11.7 \u00D7 10 ^ (308)\n    decimal    128     28-29 significant digits     \u00B17.9 x 10 ^ (28) or (1 to 10 ^ (28)\n/==========================================================================================\n\nYou can read more here, Float, Double, and Decimal.\n    ","\nThe main difference between each of these is the precision.\n\nfloat is a 32-bit number, double is a 64-bit number and decimal is a 128-bit number.\n    ","\n\nDecimal 128 bit (28-29 significant digits)\nIn case of financial applications it is better to use \nDecimal types because it gives you a high level of accuracy and easy to avoid rounding errors\nUse decimal for non-integer math where precision is needed (e.g. money and currency)\nDouble  64 bit (15-16 digits)\nDouble Types are probably the most normally used data type for real values, except handling money.\nUse double for non-integer math where the most precise answer isn\u0027t necessary.\nFloat  32 bit (7 digits)\nIt is used mostly in graphic libraries because very high demands for processing powers,\nalso used situations that can endure rounding errors.\n\n\nDecimals are much slower than a double/float. \n\nDecimals and Floats/Doubles cannot be compared without a cast whereas Floats and Doubles can. \n\nDecimals also allow the encoding or trailing zeros.\n    ","\nTo define Decimal, Float and Double in .Net (c#)\nyou must mention values as:\nDecimal dec = 12M/6;\nDouble dbl = 11D/6;\nfloat fl = 15F/6;\n\nand check the results.\nAnd Bytes Occupied by each are\nFloat - 4\nDouble - 8\nDecimal - 12\n\n    ","\n                \n                float/double usually do not represent numbers as 101.101110, normally it is represented as something like 1101010 * 2^(01010010) - an exponent\n                \n\u2013\u00A0Mingwei Samuel\n                Aug 13 \u002714 at 21:50\n            ","\n                \n                @Hazzard: That\u0027s what the \u0022and the location of the binary point\u0022 part of the answer means.\n                \n\u2013\u00A0Jon Skeet\n                Aug 13 \u002714 at 21:57\n            ","\n                \n                I\u0027m surprised it hasn\u0027t been said already, float is a C# alias keyword and isn\u0027t a .Net type. it\u0027s System.Single.. single and double are floating binary point types.\n                \n\u2013\u00A0Brett Caswell\n                Feb 3 \u002715 at 15:48\n            ","\n                \n                @BKSpurgeon: Well, only in the same way that you can say that everything is a binary type, at which point it becomes a fairly useless definition. Decimal is a decimal type in that it\u0027s a number represented as an integer significand and a scale, such that the result is significand * 10^scale, whereas float and double are significand * 2^scale. You take a number written in decimal, and move the decimal point far enough to the right that you\u0027ve got an integer to work out the significand and the scale. For float/double you\u0027d start with a number written in binary.\n                \n\u2013\u00A0Jon Skeet\n                Nov 26 \u002715 at 7:20\n            ","\n                \n                Another difference: float 32-bit; double 64-bit; and decimal 128-bit.\n                \n\u2013\u00A0David\n                Aug 29 \u002716 at 15:08\n            ","\n                \n                @Thecrocodilehunter: sorry, but no. Decimal can represent all numbers that can be represented in decimal notation, but not 1/3 for example. 1.0m / 3.0m will evaluate to 0.33333333... with a large but finite number of 3s at the end. Multiplying it by 3 will not return an exact 1.0.\n                \n\u2013\u00A0Erik P.\n                Nov 29 \u002711 at 21:14\n            ","\n                \n                @Thecrocodilehunter: I think you\u0027re confusing accuracy and precision. They are different things in this context. Precision is the number of digits available to represent a number. The more precision, the less you need to round. No data type has infinite precision.\n                \n\u2013\u00A0Igby Largeman\n                Jan 6 \u002712 at 17:42\n                        \n                            \n                        \n            ","\n                \n                @Thecrocodilehunter: You\u0027re assuming that the value that is being measured is exactly 0.1 -- that is rarely the case in the real world!  Any finite storage format will conflate an infinite number of possible values to a finite number of bit patterns.  For example, float will conflate 0.1 and 0.1 \u002B 1e-8, while decimal will conflate 0.1 and 0.1 \u002B 1e-29.  Sure, within a given range, certain values can be represented in any format with zero loss of accuracy (e.g. float can store any integer up to 1.6e7 with zero loss of accuracy) -- but that\u0027s still not infinite accuracy.\n                \n\u2013\u00A0Daniel Pryden\n                Jan 10 \u002712 at 1:49\n            ","\n                \n                @Thecrocodilehunter: You missed my point.  0.1 is not a special value!  The only thing that makes 0.1 \u0022better\u0022 than 0.10000001 is because human beings like base 10.  And even with a float value, if you initialize two values with 0.1 the same way, they will both be the same value.  It\u0027s just that that value won\u0027t be exactly 0.1 -- it will be the closest value to 0.1 that can be exactly represented as a float.  Sure, with binary floats, (1.0 / 10) * 10 != 1.0, but with decimal floats, (1.0 / 3) * 3 != 1.0 either.  Neither is perfectly precise.\n                \n\u2013\u00A0Daniel Pryden\n                Jan 10 \u002712 at 18:27\n            ","\n                \n                @Thecrocodilehunter: You still don\u0027t understand. I don\u0027t know how to say this any more plainly: In C, if you do double a = 0.1; double b = 0.1; then a == b will be true. It\u0027s just that a and b will both not exactly equal 0.1. In C#, if you do decimal a = 1.0m / 3.0m; decimal b = 1.0m / 3.0m; then a == b will also be true.  But in that case, neither of a nor b will exactly equal 1/3 -- they will both equal 0.3333.... In both cases, some accuracy is lost due to representation. You stubbornly say that decimal has \u0022infinite\u0022 precision, which is false.\n                \n\u2013\u00A0Daniel Pryden\n                Jan 10 \u002712 at 19:29\n                        \n                            \n                        \n            ","\n                \n                If you\u0027re doing financial calculations, you absolutely have to roll your own datatypes or find a good library that matches your exact needs.  Accuracy in a financial setting is defined by (human) standards bodies and they have very specific localized (both in time and geography) rules about how to do calculations.  Things like correct rounding aren\u0027t captured in the simple numeric datatypes in .Net.  The ability to do calculations is only a very small part of the puzzle.\n                \n\u2013\u00A0James Moore\n                Apr 6 \u002716 at 16:59\n            ","\n                \n                You left out the biggest difference, which is the base used for the decimal type (decimal is stored as base 10, all other numeric types listed are base 2).\n                \n\u2013\u00A0BrainSlugs83\n                Mar 14 \u002715 at 22:55\n            ","\n                \n                The value ranges for the Single and Double are not depicted correctly in the above image or the source forum post. Since we can\u0027t easily superscript the text here, use the caret character: Single should be 10^-45 and 10^38, and Double should be 10^-324 and 10^308. Also, MSDN has the float with a range of -3.4x10^38 to \u002B3.4x10^38. Search MSDN for System.Single and System.Double in case of link changes. Single: msdn.microsoft.com/en-us/library/b1e65aza.aspx Double: msdn.microsoft.com/en-us/library/678hzkk9.aspx\n                \n\u2013\u00A0deegee\n                Jun 22 \u002715 at 19:18\n            ","\n                \n                Decimal is 128 bits ... means it occupies 16 bytes not 12\n                \n\u2013\u00A0user1477332\n                Oct 23 \u002718 at 3:29\n            ","\n                \n                I really like this answer, especially the question \u0022do we count or measure money?\u0022 However, other than money, I can\u0027t think of anything that is \u0022counted\u0022 that is not simply integer.  I have seen some applications that use decimal simply because double has too few significant digits.  In other words, decimal might be used because C# does not have a quadruple type en.wikipedia.org/wiki/Quadruple-precision_floating-point_format\n                \n\u2013\u00A0John Henckel\n                Apr 4 \u002719 at 18:55\n            ","\n                \n                @RogerLipscombe: I would consider double proper in accounting applications in those cases (and basically only those cases) where no integer type larger than 32 bits was available, and the double was being used as though it were a 53-bit integer type (e.g. to hold a whole number of pennies, or a whole number of hundredths of a cent).  Not much use for such things nowadays, but many languages gained the ability to use double-precision floating-point values long before they gained 64-bit (or in some cases even 32-bit!) integer math.\n                \n\u2013\u00A0supercat\n                May 29 \u002714 at 17:57\n            ","\n                \n                Your answer implies precision is the only difference between these data types. Given binary floating point arithmetic is typically implemented in hardware FPU, performance is a significant difference. This may be inconsequential for some applications, but is critical for others.\n                \n\u2013\u00A0saille\n                Jan 15 \u002715 at 3:16\n                        \n                            \n                        \n            ","\n                \n                @supercat double is never proper in accounting applications.  Because Double can only approximate decimal values (even within the range of its own precision).  This is because double stores the values in a base-2 (binary)-centric format.\n                \n\u2013\u00A0BrainSlugs83\n                Mar 14 \u002715 at 22:50\n            ","\n                \n                @BrainSlugs83: Use of floating-point types to hold non-whole-number quantities would be improper, but it was historically very common for languages to have floating-point types that could precisely represent larger whole-number values than their integer types could represent.  Perhaps the most extreme example was Turbo-87 whose only integer types were limited to -32768 to \u002B32767, but whose Real could IIRC represent values up to 1.8E\u002B19 with unit precision.  I would think it would be much saner for an accounting application to use Real to represent a whole number of pennies than...\n                \n\u2013\u00A0supercat\n                Mar 15 \u002715 at 19:45\n                        \n                            \n                        \n            ","\n                \n                ...for it to try to perform multi-precision math using a bunch of 16-bit values.  For most other languages the difference wasn\u0027t that extreme, but for a long time it has been very common for languages not to have any integer type that went beyond 4E9 but have a double type which had unit accuracy up to 9E15.  If one needs to store whole numbers which are bigger than the largest available integer type, using double is apt to be simpler and more efficient than trying to fudge multi-precision math, especially given that while processors have instructions to perform 16x16-\u003E32 or...\n                \n\u2013\u00A0supercat\n                Mar 15 \u002715 at 19:47\n                        \n                            \n                        \n            ","\n                \n                float.MaxValue\u002B1 == float.MaxValue, just as decimal.MaxValue\u002B0.1D == decimal.MaxValue.  Perhaps you meant something like float.MaxValue*2?\n                \n\u2013\u00A0supercat\n                Jan 14 \u002715 at 0:21\n                        \n                            \n                        \n            ","\n                \n                @supercar But it is not true that  decimal.MaxValue \u002B 1 == decimal.MaxValue\n                \n\u2013\u00A0GorkemHalulu\n                Jan 14 \u002715 at 6:12\n                        \n                            \n                        \n            ","\n                \n                @supercar decimal.MaxValue \u002B 0.1m == decimal.MaxValue ok\n                \n\u2013\u00A0GorkemHalulu\n                Jan 14 \u002715 at 6:19\n            ","\n                \n                The System.Decimal throws an exception just before it becomes unable to distinguish whole units, but if an application is supposed to be dealing with e.g. dollars and cents, that could be too late.\n                \n\u2013\u00A0supercat\n                Jan 14 \u002715 at 16:15\n            ","\n                \n                The \u0022point something\u0022 you mentioned is generally referred to as \u0022the fractional part\u0022 of a number.  \u0022Floating point\u0022 does not mean \u0022a number with a point something on the end\u0022; but instead \u0022Floating Point\u0022 distinguishes the type of number, as opposed to a \u0022Fixed Point\u0022 number (which can also store a fractional value); the difference is whether the precision is fixed, or floating. -- Floating point numbers give you a much bigger dynamic range of values (Min and Max), at the cost of precision, whereas a fixed point numbers give you a constant amount of precision at the cost of range.\n                \n\u2013\u00A0BrainSlugs83\n                Sep 16 \u002717 at 1:09\n                        \n                            \n                        \n            ","\n                \n                They sure can!  They also also have a couple of \u0022magic\u0022 values such as Infinity, Negative Infinity, and NaN (not a number) which make it very useful for detecting vertical lines while computing slopes...  Further, if you need to decide between calling float.TryParse, double.TryParse, and decimal.TryParse (to detect if a string is a number, for example), I recommend using double or float, as they will parse \u0022Infinity\u0022, \u0022-Infinity\u0022, and \u0022NaN\u0022 properly, whereas decimal will not.\n                \n\u2013\u00A0BrainSlugs83\n                Jun 23 \u002711 at 19:29\n                        \n                            \n                        \n            ","\n                \n                Compilation only fails if you attempt to divide a literal decimal by zero (CS0020), and the same is true of integral literals. However if a runtime decimal value is divided by zero, you\u0027ll get an exception not a compile error.\n                \n\u2013\u00A0Drew Noakes\n                Nov 18 \u002716 at 0:24\n            ","\n                \n                @BrainSlugs83 However, you might not want to parse \u0022Infinity\u0022 or \u0022NaN\u0022 depending on the context. Seems like a good exploit for user input if the developper isn\u0027t rigourous enough.\n                \n\u2013\u00A0Winter\n                May 17 \u002717 at 1:00\n            ","\n                \n                The difference is more than just precision. -- decimal is actually stored in decimal format (as opposed to base 2; so it won\u0027t lose or round digits due to conversion between the two numeric systems); additionally, decimal has no concept of special values such as NaN, -0, \u221E, or -\u221E.\n                \n\u2013\u00A0BrainSlugs83\n                Sep 16 \u002717 at 1:19\n                        \n                            \n                        \n            ","\n                \n                Out of curiosity, what was the raw value of cellValue.ToString()?  Decimal.TryParse(\u00220.00006317592\u0022, out val) seems to work...\n                \n\u2013\u00A0micahtan\n                Aug 27 \u002712 at 23:57\n            ","\n                \n                -1 Don\u0027t get me wrong, if true, it\u0027s very interesting but this is a separate question, it\u0027s certainly not an answer to this question.\n                \n\u2013\u00A0weston\n                May 22 \u002713 at 14:19\n            ","\n                \n                Maybe because the Excel cell was returning a double and ToString() value was \u00226.31759E-05\u0022 therefore the decimal.Parse() didn\u0027t like the notation. I bet if you checked the return value of Decimal.TryParse() it would have been false.\n                \n\u2013\u00A0SergioL\n                Oct 15 \u002714 at 20:44\n            ","\n                \n                @weston Answers often complement other answers by filling in nuances they have missed. This answer highlights a difference in terms of parsing. It is very much an answer to the question!\n                \n\u2013\u00A0Robino\n                May 20 \u002715 at 15:52\n            ","\n                \n                Er... decimal.Parse(\u00220.00006317592\u0022) works -- you\u0027ve got something else going on. -- Possibly scientific notation?\n                \n\u2013\u00A0BrainSlugs83\n                Sep 16 \u002717 at 1:15\n                        \n                            \n                        \n            ","\n                \n                Pretty much all modern systems, even cell phones, have hardware support for double; and if you game has even simple physics, you will notice a big difference between double and float.  (For example, calculating the velocity / friction in a simple Asteroids clone, doubles allow acceleration to flow much more fluidly than float. -- Seems like it shouldn\u0027t matter, but it totally does.)\n                \n\u2013\u00A0BrainSlugs83\n                Sep 16 \u002717 at 1:22\n                        \n                            \n                        \n            ","\n                \n                Doubles are also double the size of floats, meaning you need to chew through twice as much data, which hurts your cache performance. As always, measure and proceed accordingly.\n                \n\u2013\u00A0yoyo\n                Sep 22 \u002717 at 17:53\n            ","\n                \n                What does this answer add that isn\u0027t already covered in the existing answers?  BTW, your \u0022or\u0022 in the \u0022decimal\u0022 line is incorrect: the slash in the web page that you\u0027re copying from indicates division rather than an alternative.\n                \n\u2013\u00A0Mark Dickinson\n                Feb 10 \u002718 at 12:15\n            ","\n                \n                And I\u0027d dispute strongly that precision is the main difference. The main difference is the base: decimal floating-point versus binary floating-point. That difference is what makes Decimal suitable for financial applications, and it\u0027s the main criterion to use when deciding between Decimal and Double. It\u0027s rare that Double precision isn\u0027t enough for scientific applications, for example (and Decimal is often unsuitable for scientific applications because of its limited range).\n                \n\u2013\u00A0Mark Dickinson\n                Feb 10 \u002718 at 12:28\n            "]},{"Id":"a40f1b25-861b-4e65-a6f0-3789d696a492","QuestionId":538060,"Description":"Proper use of the IDisposable interface","Votes":1701,"Views":343386,"Tags":["c#",".net","garbage-collection","idisposable"],"Discussions":["\nThe point of Dispose is to free unmanaged resources. It needs to be done at some point, otherwise they will never be cleaned up. The garbage collector doesn\u0027t know how to call DeleteHandle() on a variable of type IntPtr, it doesn\u0027t know whether or not it needs to call DeleteHandle().\n\n\n  Note: What is an unmanaged resource? If you found it in the Microsoft .NET Framework: it\u0027s managed. If you went poking around MSDN yourself, it\u0027s unmanaged. Anything you\u0027ve used P/Invoke calls to get outside of the nice comfy world of everything available to you in the .NET Framework is unmanaged \u2013 and you\u0027re now responsible for cleaning it up.\n\n\nThe object that you\u0027ve created needs to expose some method, that the outside world can call, in order to clean up unmanaged resources. The method can be named whatever you like:\n\npublic void Cleanup()\n\n\nor\n\npublic void Shutdown()\n\n\nBut instead there is a standardized name for this method:\n\npublic void Dispose()\n\n\nThere was even an interface created, IDisposable, that has just that one method:\n\npublic interface IDisposable\n{\n   void Dispose()\n}\n\n\nSo you make your object expose the IDisposable interface, and that way you promise that you\u0027ve written that single method to clean up your unmanaged resources:\n\npublic void Dispose()\n{\n   Win32.DestroyHandle(this.CursorFileBitmapIconServiceHandle);\n}\n\n\nAnd you\u0027re done. Except you can do better.\n\n\n\nWhat if your object has allocated a 250MB System.Drawing.Bitmap (i.e. the .NET managed Bitmap class) as some sort of frame buffer? Sure, this is a managed .NET object, and the garbage collector will free it. But do you really want to leave 250MB of memory just sitting there \u2013 waiting for the garbage collector to eventually come along and free it? What if there\u0027s an open database connection? Surely we don\u0027t want that connection sitting open, waiting for the GC to finalize the object.\n\nIf the user has called Dispose() (meaning they no longer plan to use the object) why not get rid of those wasteful bitmaps and database connections?\n\nSo now we will:\n\n\nget rid of unmanaged resources (because we have to), and \nget rid of managed resources (because we want to be helpful)\n\n\nSo let\u0027s update our Dispose() method to get rid of those managed objects:\n\npublic void Dispose()\n{\n   //Free unmanaged resources\n   Win32.DestroyHandle(this.CursorFileBitmapIconServiceHandle);\n\n   //Free managed resources too\n   if (this.databaseConnection != null)\n   {\n      this.databaseConnection.Dispose();\n      this.databaseConnection = null;\n   }\n   if (this.frameBufferImage != null)\n   {\n      this.frameBufferImage.Dispose();\n      this.frameBufferImage = null;\n   }\n}\n\n\nAnd all is good, except you can do better!\n\n\n\nWhat if the person forgot to call Dispose() on your object? Then they would leak some unmanaged resources! \n\n\n  Note: They won\u0027t leak managed resources, because eventually the garbage collector is going to run, on a background thread, and free the memory associated with any unused objects. This will include your object, and any managed objects you use (e.g. the Bitmap and the DbConnection).\n\n\nIf the person forgot to call Dispose(), we can still save their bacon! We still have a way to call it for them: when the garbage collector finally gets around to freeing (i.e. finalizing) our object.\n\n\n  Note: The garbage collector will eventually free all managed objects.\n  When it does, it calls the Finalize\n  method on the object. The GC doesn\u0027t know, or\n  care, about your Dispose method.\n  That was just a name we chose for \n  a method we call when we want to get\n  rid of unmanaged stuff.\n\n\nThe destruction of our object by the Garbage collector is the perfect time to free those pesky unmanaged resources. We do this by overriding the Finalize() method. \n\n\n  Note: In C#, you don\u0027t explicitly override the Finalize() method. \n  You write a method that looks like a C\u002B\u002B destructor, and the \n  compiler takes that to be your implementation of the Finalize() method:\n\n\n~MyObject()\n{\n    //we\u0027re being finalized (i.e. destroyed), call Dispose in case the user forgot to\n    Dispose(); //\u003C--Warning: subtle bug! Keep reading!\n}\n\n\nBut there\u0027s a bug in that code. You see, the garbage collector runs on a background thread; you don\u0027t know the order in which two objects are destroyed. It is entirely possible that in your Dispose() code, the managed object you\u0027re trying to get rid of (because you wanted to be helpful) is no longer there:\n\npublic void Dispose()\n{\n   //Free unmanaged resources\n   Win32.DestroyHandle(this.gdiCursorBitmapStreamFileHandle);\n\n   //Free managed resources too\n   if (this.databaseConnection != null)\n   {\n      this.databaseConnection.Dispose(); //\u003C-- crash, GC already destroyed it\n      this.databaseConnection = null;\n   }\n   if (this.frameBufferImage != null)\n   {\n      this.frameBufferImage.Dispose(); //\u003C-- crash, GC already destroyed it\n      this.frameBufferImage = null;\n   }\n}\n\n\nSo what you need is a way for Finalize() to tell Dispose() that it should not touch any managed resources (because they might not be there anymore), while still freeing unmanaged resources.\n\nThe standard pattern to do this is to have Finalize() and Dispose() both call a third(!) method; where you pass a Boolean saying if you\u0027re calling it from Dispose() (as opposed to Finalize()), meaning it\u0027s safe to free managed resources.\n\nThis internal method could be given some arbitrary name like \u0022CoreDispose\u0022, or \u0022MyInternalDispose\u0022, but is tradition to call it Dispose(Boolean):\n\nprotected void Dispose(Boolean disposing)\n\n\nBut a more helpful parameter name might be:\n\nprotected void Dispose(Boolean itIsSafeToAlsoFreeManagedObjects)\n{\n   //Free unmanaged resources\n   Win32.DestroyHandle(this.CursorFileBitmapIconServiceHandle);\n\n   //Free managed resources too, but only if I\u0027m being called from Dispose\n   //(If I\u0027m being called from Finalize then the objects might not exist\n   //anymore\n   if (itIsSafeToAlsoFreeManagedObjects)  \n   {    \n      if (this.databaseConnection != null)\n      {\n         this.databaseConnection.Dispose();\n         this.databaseConnection = null;\n      }\n      if (this.frameBufferImage != null)\n      {\n         this.frameBufferImage.Dispose();\n         this.frameBufferImage = null;\n      }\n   }\n}\n\n\nAnd you change your implementation of the IDisposable.Dispose() method to:\n\npublic void Dispose()\n{\n   Dispose(true); //I am calling you from Dispose, it\u0027s safe\n}\n\n\nand your finalizer to:\n\n~MyObject()\n{\n   Dispose(false); //I am *not* calling you from Dispose, it\u0027s *not* safe\n}\n\n\n\n  Note: If your object descends from an object that implements Dispose, then don\u0027t forget to call their base Dispose method when you override Dispose:\n\n\npublic override void Dispose()\n{\n    try\n    {\n        Dispose(true); //true: safe to free managed resources\n    }\n    finally\n    {\n        base.Dispose();\n    }\n}\n\n\nAnd all is good, except you can do better!\n\n\n\nIf the user calls Dispose() on your object, then everything has been cleaned up. Later on, when the garbage collector comes along and calls Finalize, it will then call Dispose again. \n\nNot only is this wasteful, but if your object has junk references to objects you already disposed of from the last call to Dispose(), you\u0027ll try to dispose them again! \n\nYou\u0027ll notice in my code I was careful to remove references to objects that I\u0027ve disposed, so I don\u0027t try to call Dispose on a junk object reference. But that didn\u0027t stop a subtle bug from creeping in.\n\nWhen the user calls Dispose(): the handle CursorFileBitmapIconServiceHandle is destroyed. Later when the garbage collector runs, it will try to destroy the same handle again.\n\nprotected void Dispose(Boolean iAmBeingCalledFromDisposeAndNotFinalize)\n{\n   //Free unmanaged resources\n   Win32.DestroyHandle(this.CursorFileBitmapIconServiceHandle); //\u003C--double destroy \n   ...\n}\n\n\nThe way you fix this is tell the garbage collector that it doesn\u0027t need to bother finalizing the object \u2013 its resources have already been cleaned up, and no more work is needed. You do this by calling GC.SuppressFinalize() in the Dispose() method:\n\npublic void Dispose()\n{\n   Dispose(true); //I am calling you from Dispose, it\u0027s safe\n   GC.SuppressFinalize(this); //Hey, GC: don\u0027t bother calling finalize later\n}\n\n\nNow that the user has called Dispose(), we have:\n\n\nfreed unmanaged resources\nfreed managed resources\n\n\nThere\u0027s no point in the GC running the finalizer \u2013 everything\u0027s taken care of.\n\nCouldn\u0027t I use Finalize to cleanup unmanaged resources?\n\nThe documentation for Object.Finalize says:\n\n\n  The Finalize method is used to perform cleanup operations on unmanaged resources held by the current object before the object is destroyed.\n\n\nBut the MSDN documentation also says, for IDisposable.Dispose:\n\n\n  Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.\n\n\nSo which is it? Which one is the place for me to cleanup unmanaged resources? The answer is: \n\n\n  It\u0027s your choice! But choose Dispose.\n\n\nYou certainly could place your unmanaged cleanup in the finalizer:\n\n~MyObject()\n{\n   //Free unmanaged resources\n   Win32.DestroyHandle(this.CursorFileBitmapIconServiceHandle);\n\n   //A C# destructor automatically calls the destructor of its base class.\n}\n\n\nThe problem with that is you have no idea when the garbage collector will get around to finalizing your object. Your un-managed, un-needed, un-used native resources will stick around until the garbage collector eventually runs. Then it will call your finalizer method; cleaning up unmanaged resources. The documentation of Object.Finalize points this out:\n\n\n  The exact time when the finalizer executes is undefined. To ensure deterministic release of resources for instances of your class, implement a Close method or provide a IDisposable.Dispose implementation.\n\n\nThis is the virtue of using Dispose to cleanup unmanaged resources; you get to know, and control, when unmanaged resource are cleaned up. Their destruction is \u0022deterministic\u0022.\n\n\n\nTo answer your original question: Why not release memory now, rather than for when the GC decides to do it? I have a facial recognition software that needs to get rid of 530 MB of internal images now, since they\u0027re no longer needed. When we don\u0027t: the machine grinds to a swapping halt.\n\nBonus Reading\n\nFor anyone who likes the style of this answer (explaining the why, so the how becomes obvious), I suggest you read Chapter One of Don Box\u0027s Essential COM: \n\n\nDirect link: Chapter 1 sample by Pearson Publishing\nmagnet: 84bf0b960936d677190a2be355858e80ef7542c0\n\n\nIn 35 pages he explains the problems of using binary objects, and invents COM before your eyes. Once you realize the why of COM, the remaining 300 pages are obvious, and just detail Microsoft\u0027s implementation.\n\nI think every programmer who has ever dealt with objects or COM should, at the very least, read the first chapter. It is the best explanation of anything ever.\n\nExtra Bonus Reading\n\nWhen everything you know is wrong by Eric Lippert\n\n\n  It is therefore very difficult indeed to write a correct finalizer,\n  and the best advice I can give you is to not try.\n\n    ","\nIDisposable is often used to exploit the using statement and take advantage of an easy way to do deterministic cleanup of managed objects.\n\npublic class LoggingContext : IDisposable {\n    public Finicky(string name) {\n        Log.Write(\u0022Entering Log Context {0}\u0022, name);\n        Log.Indent();\n    }\n    public void Dispose() {\n        Log.Outdent();\n    }\n\n    public static void Main() {\n        Log.Write(\u0022Some initial stuff.\u0022);\n        try {\n            using(new LoggingContext()) {\n                Log.Write(\u0022Some stuff inside the context.\u0022);\n                throw new Exception();\n            }\n        } catch {\n            Log.Write(\u0022Man, that was a heavy exception caught from inside a child logging context!\u0022);\n        } finally {\n            Log.Write(\u0022Some final stuff.\u0022);\n        }\n    }\n}\n\n    ","\nThe purpose of the Dispose pattern is to provide a mechanism to clean up both managed and unmanaged resources and when that occurs depends on how the Dispose method is being called. In your example, the use of Dispose is not actually doing anything related to dispose, since clearing a list has no impact on that collection being disposed. Likewise, the calls to set the variables to null also have no impact on the GC.\n\nYou can take a look at this article for more details on how to implement the Dispose pattern, but it basically looks like this:\n\npublic class SimpleCleanup : IDisposable\n{\n    // some fields that require cleanup\n    private SafeHandle handle;\n    private bool disposed = false; // to detect redundant calls\n\n    public SimpleCleanup()\n    {\n        this.handle = /*...*/;\n    }\n\n    protected virtual void Dispose(bool disposing)\n    {\n        if (!disposed)\n        {\n            if (disposing)\n            {\n                // Dispose managed resources.\n                if (handle != null)\n                {\n                    handle.Dispose();\n                }\n            }\n\n            // Dispose unmanaged managed resources.\n\n            disposed = true;\n        }\n    }\n\n    public void Dispose()\n    {\n        Dispose(true);\n        GC.SuppressFinalize(this);\n    }\n}\n\n\nThe method that is the most important here is the Dispose(bool), which actually runs under two different circumstances: \n\n\ndisposing == true: the method has been called directly or indirectly by a user\u0027s code. Managed and unmanaged resources can be disposed.\ndisposing == false: the method has been called by the runtime from inside the finalizer, and you should not reference other objects. Only unmanaged resources can be disposed. \n\n\nThe problem with simply letting the GC take care of doing the cleanup is that you have no real control over when the GC will run a collection cycle (you can call GC.Collect(), but you really shouldn\u0027t) so resources may stay around longer than needed. Remember, calling Dispose() doesn\u0027t actually cause a collection cycle or in any way cause the GC to collect/free the object; it simply provides the means to more deterministicly cleanup the resources used and tell the GC that this cleanup has already been performed.\n\nThe whole point of IDisposable and the dispose pattern isn\u0027t about immediately freeing memory. The only time a call to Dispose will actually even have a chance of immediately freeing memory is when it is handling the disposing == false scenario and manipulating unmanaged resources. For managed code, the memory won\u0027t actually be reclaimed until the GC runs a collection cycle, which you really have no control over (other than calling GC.Collect(), which I\u0027ve already mentioned is not a good idea).\n\nYour scenario isn\u0027t really valid since strings in .NET don\u0027t use any unamanged resources and don\u0027t implement IDisposable, there is no way to force them to be \u0022cleaned up.\u0022\n    ","\nThere should be no further calls to an object\u0027s methods after Dispose has been called on it (although an object should tolerate further calls to Dispose). Therefore the example in the question is silly. If Dispose is called, then the object itself can be discarded. So the user should just discard all references to that whole object (set them to null) and all the related objects internal to it will automatically get cleaned up.\n\nAs for the general question about managed/unmanaged and the discussion in other answers, I think any answer to this question has to start with a definition of an unmanaged resource.\n\nWhat it boils down to is that there is a function you can call to put the system into a state, and there\u0027s another function you can call to bring it back out of that state. Now, in the typical example, the first one might be a function that returns a file handle, and the second one might be a call to CloseHandle.\n\nBut - and this is the key - they could be any matching pair of functions. One builds up a state, the other tears it down. If the state has been built but not torn down yet, then an instance of the resource exists. You have to arrange for the teardown to happen at the right time - the resource is not managed by the CLR. The only automatically managed resource type is memory. There are two kinds: the GC, and the stack. Value types are managed by the stack (or by hitching a ride inside reference types), and reference types are managed by the GC.\n\nThese functions may cause state changes that can be freely interleaved, or may need to be perfectly nested. The state changes may be threadsafe, or they might not.\n\nLook at the example in Justice\u0027s question. Changes to the Log file\u0027s indentation must be perfectly nested, or it all goes wrong. Also they are unlikely to be threadsafe.\n\nIt is possible to hitch a ride with the garbage collector to get your unmanaged resources cleaned up. But only if the state change functions are threadsafe and two states can have lifetimes that overlap in any way. So Justice\u0027s example of a resource must NOT have a finalizer! It just wouldn\u0027t help anyone.\n\nFor those kinds of resources, you can just implement IDisposable, without a finalizer. The finalizer is absolutely optional - it has to be. This is glossed over or not even mentioned in many books.\n\nYou then have to use the using statement to have any chance of ensuring that Dispose is called. This is essentially like hitching a ride with the stack (so as finalizer is to the GC, using is to the stack).\n\nThe missing part is that you have to manually write Dispose and make it call onto your fields and your base class. C\u002B\u002B/CLI programmers don\u0027t have to do that. The compiler writes it for them in most cases.\n\nThere is an alternative, which I prefer for states that nest perfectly and are not threadsafe (apart from anything else, avoiding IDisposable spares you the problem of having an argument with someone who can\u0027t resist adding a finalizer to every class that implements IDisposable).\n\nInstead of writing a class, you write a function. The function accepts a delegate to call back to:\n\npublic static void Indented(this Log log, Action action)\n{\n    log.Indent();\n    try\n    {\n        action();\n    }\n    finally\n    {\n        log.Outdent();\n    }\n}\n\n\nAnd then a simple example would be:\n\nLog.Write(\u0022Message at the top\u0022);\nLog.Indented(() =\u003E\n{\n    Log.Write(\u0022And this is indented\u0022);\n\n    Log.Indented(() =\u003E\n    {\n        Log.Write(\u0022This is even more indented\u0022);\n    });\n});\nLog.Write(\u0022Back at the outermost level again\u0022);\n\n\nThe lambda being passed in serves as a code block, so it\u0027s like you make your own control structure to serve the same purpose as using, except that you no longer have any danger of the caller abusing it. There\u0027s no way they can fail to clean up the resource.\n\nThis technique is less useful if the resource is the kind that may have overlapping lifetimes, because then you want to be able to build resource A, then resource B, then kill resource A and then later kill resource B. You can\u0027t do that if you\u0027ve forced the user to perfectly nest like this. But then you need to use IDisposable (but still without a finalizer, unless you have implemented threadsafety, which isn\u0027t free).\n    ","\nScenarios I make use of IDisposable: clean up unmanaged resources, unsubscribe for events, close connections\n\nThe idiom I use for implementing IDisposable (not threadsafe):\n\nclass MyClass : IDisposable {\n    // ...\n\n    #region IDisposable Members and Helpers\n    private bool disposed = false;\n\n    public void Dispose() {\n        Dispose(true);\n        GC.SuppressFinalize(this);\n    }\n\n    private void Dispose(bool disposing) {\n        if (!this.disposed) {\n            if (disposing) {\n                // cleanup code goes here\n            }\n            disposed = true;\n        }\n    }\n\n    ~MyClass() {\n        Dispose(false);\n    }\n    #endregion\n}\n\n    ","\nIf MyCollection is going to be garbage collected anyway, then you shouldn\u0027t need to dispose it.  Doing so will just churn the CPU more than necessary, and may even invalidate some pre-calculated analysis that the garbage collector has already performed.\n\nI use IDisposable to do things like ensure threads are disposed correctly, along with unmanaged resources.\n\nEDIT In response to Scott\u0027s comment:\n\n\n  The only time the GC performance metrics are affected is when a call the [sic] GC.Collect() is made\u0022\n\n\nConceptually, the GC maintains a view of the object reference graph, and all references to it from the stack frames of threads.  This heap can be quite large and span many pages of memory.  As an optimisation, the GC caches its analysis of pages that are unlikely to change very often to avoid rescanning the page unnecessarily.  The GC receives notification from the kernel when data in a page changes, so it knows that the page is dirty and requires a rescan.  If the collection is in Gen0 then it\u0027s likely that other things in the page are changing too, but this is less likely in Gen1 and Gen2.  Anecdotally, these hooks were not available in Mac OS X for the team who ported the GC to Mac in order to get the Silverlight plug-in working on that platform.\n\nAnother point against unnecessary disposal of resources: imagine a situation where a process is unloading.  Imagine also that the process has been running for some time. Chances are that many of that process\u0027s memory pages have been swapped to disk.  At the very least they\u0027re no longer in L1 or L2 cache.  In such a situation there is no point for an application that\u0027s unloading to swap all those data and code pages back into memory to \u0027release\u0027 resources that are going to be released by the operating system anyway when the process terminates.  This applies to managed and even certain unmanaged resources.  Only resources that keep non-background threads alive must be disposed, otherwise the process will remain alive.\n\nNow, during normal execution there are ephemeral resources that must be cleaned up correctly (as @fezmonkey points out database connections, sockets, window handles) to avoid unmanaged memory leaks.  These are the kinds of things that have to be disposed.  If you create some class that owns a thread (and by owns I mean that it created it and therefore is responsible for ensuring it stops, at least by my coding style), then that class most likely must implement IDisposable and tear down the thread during Dispose.\n\nThe .NET framework uses the IDisposable interface as a signal, even warning, to developers that the this class must be disposed.  I can\u0027t think of any types in the framework that implement IDisposable (excluding explicit interface implementations) where disposal is optional.\n    ","\nYep, that code is completely redundant and unnecessary and it doesn\u0027t make the garbage collector do anything it wouldn\u0027t otherwise do (once an instance of MyCollection goes out of scope, that is.)  Especially the .Clear() calls.\n\nAnswer to your edit:  Sort of.  If I do this:\n\npublic void WasteMemory()\n{\n    var instance = new MyCollection(); // this one has no Dispose() method\n    instance.FillItWithAMillionStrings();\n}\n\n// 1 million strings are in memory, but marked for reclamation by the GC\n\n\nIt\u0027s functionally identical to this for purposes of memory management:\n\npublic void WasteMemory()\n{\n    var instance = new MyCollection(); // this one has your Dispose()\n    instance.FillItWithAMillionStrings();\n    instance.Dispose();\n}\n\n// 1 million strings are in memory, but marked for reclamation by the GC\n\n\nIf you really really really need to free the memory this very instant, call GC.Collect().  There\u0027s no reason to do this here, though.  The memory will be freed when it\u0027s needed.\n    ","\nIn the example you posted, it still doesn\u0027t \u0022free the memory now\u0022. All memory is garbage collected, but it may allow the memory to be collected in an earlier generation. You\u0027d have to run some tests to be sure.\n\n\n\nThe Framework Design Guidelines are guidelines, and not rules. They tell you what the interface is primarily for, when to use it, how to use it, and when not to use it.\n\nI once read code that was a simple RollBack() on failure utilizing IDisposable. The MiniTx class below would check a flag on Dispose() and if the Commit call never happened it would then call Rollback on itself. It added a layer of indirection making the calling code a lot easier to understand and maintain. The result looked something like: \n\nusing( MiniTx tx = new MiniTx() )\n{\n    // code that might not work.\n\n    tx.Commit();\n} \n\n\nI\u0027ve also seen timing / logging code do the same thing. In this case the Dispose() method stopped the timer and logged that the block had exited. \n\nusing( LogTimer log = new LogTimer(\u0022MyCategory\u0022, \u0022Some message\u0022) )\n{\n    // code to time...\n}\n\n\nSo here are a couple of concrete examples that don\u0027t do any unmanaged resource cleanup, but do successfully used IDisposable to create cleaner code.\n    ","\nIf you want to delete right now, use unmanaged memory.\n\nSee:\n\n\nMarshal.AllocHGlobal\nMarshal.FreeHGlobal\nMarshal.DestroyStructure\n\n    ","\nI won\u0027t repeat the usual stuff about Using or freeing un-managed resources, that has all been covered. But I would like to point out what seems a common misconception.\nGiven the following code\n\nPublic Class LargeStuff\n  Implements IDisposable\n  Private _Large as string()\n\n  \u0027Some strange code that means _Large now contains several million long strings.\n\n  Public Sub Dispose() Implements IDisposable.Dispose\n    _Large=Nothing\n  End Sub\n\n\nI realise that the Disposable implementation does not follow current guidelines, but hopefully you all get the idea.\nNow, when Dispose is called, how much memory gets freed?\n\nAnswer: None.\nCalling Dispose can release unmanaged resources, it CANNOT reclaim managed memory, only the GC can do that.  Thats not to say that the above isn\u0027t a good idea, following the above pattern is still a good idea in fact.  Once Dispose has been run, there is nothing stopping the GC re-claiming the memory that was being used by _Large, even though the instance of LargeStuff may still be in scope.  The strings in _Large may also be in gen 0 but the instance of LargeStuff might be gen 2, so again, memory would be re-claimed sooner.\nThere is no point in adding a finaliser to call the Dispose method shown above though.  That will just DELAY the re-claiming of memory to allow the finaliser to run.\n    ","\nApart from its primary use as a way to control the lifetime of system resources (completely covered by the awesome answer of Ian, kudos!), the IDisposable/using combo can also be used to scope the state change of (critical) global resources: the console, the threads, the process, any global object like an application instance.\n\nI\u0027ve written an article about this pattern: http://pragmateek.com/c-scope-your-global-state-changes-with-idisposable-and-the-using-statement/\n\nIt illustrates how you can protect some often used global state in a reusable and readable manner: console colors, current thread culture, Excel application object properties...\n    ","\nIf anything, I\u0027d expect the code to be less efficient than when leaving it out.\n\nCalling the Clear() methods are unnecessary, and the GC probably wouldn\u0027t do that if the Dispose didn\u0027t do it...\n    ","\nThere are things that the Dispose() operation does in the example code that might have an effect that would not occur due to a normal GC of the MyCollection object.  \n\nIf the objects referenced by _theList or _theDict are referred to by other objects, then that List\u003C\u003E or Dictionary\u003C\u003E object will not be subject to collection but will suddenly have no contents.  If there were no Dispose() operation as in the example, those collections would still contain their contents.\n\nOf course, if this were the situation I would call it a broken design - I\u0027m just pointing out  (pedantically, I suppose) that the Dispose() operation might not be completely redundant, depending on whether there are other uses of the List\u003C\u003E or Dictionary\u003C\u003E that are not shown in the fragment.\n    ","\nOne problem with most discussions of \u0022unmanaged resources\u0022 is that they don\u0027t really define the term, but seem to imply that it has something to do with unmanaged code.  While it is true that many types of unmanaged resources do interface with unmanaged code, thinking of unmanaged resources in such terms isn\u0027t helpful.\n\nInstead, one should recognize what all managed resources have in common: they all entail an object asking some outside \u0027thing\u0027 to do something on its behalf, to the detriment of some other \u0027things\u0027, and the other entity agreeing to do so until further notice.  If the object were to be abandoned and vanish without a trace, nothing would ever tell that outside \u0027thing\u0027 that it no longer needed to alter its behavior on behalf of the object that no longer existed; consequently, the \u0027thing\u0027s usefulness would be permanently diminished.\n\nAn unmanaged resource, then, represents an agreement by some outside \u0027thing\u0027 to alter its behavior on behalf of an object, which would useless impair the usefulness of that outside \u0027thing\u0027 if the object were abandoned and ceased to exist.  A managed resource is an object which is the beneficiary of such an agreement, but which has signed up to receive notification if it is abandoned, and which will use such notification to put its affairs in order before it is destroyed.\n    ","\nIDisposable is good for unsubscribing from events.\n    ","\nFirst of definition. For me unmanaged resource means some class, which implements IDisposable interface or something created with usage of calls to dll. GC doesn\u0027t know how to deal with such objects. If class has for example only value types, then I don\u0027t consider this class as class with unmanaged resources.\nFor my code I follow next practices:\n\n\nIf created by me class uses some unmanaged resources then it means that I should also implement IDisposable interface in order to clean memory. \nClean objects as soon as I finished usage of it. \nIn my dispose method I iterate over all IDisposable members of class and call Dispose.\nIn my Dispose method call GC.SuppressFinalize(this) in order to notify garbage collector that my object was already cleaned up. I do it because calling of GC is expensive operation.\nAs additional precaution I try to make possible calling of Dispose() multiple times.\nSometime I add private member _disposed and check in method calls did object was cleaned up. And if it was cleaned up then generate ObjectDisposedException\n\nFollowing template demonstrates what I described in words as sample of code:\n\n\n\n\npublic class SomeClass : IDisposable\n    {\n        /// \u003Csummary\u003E\n        /// As usually I don\u0027t care was object disposed or not\n        /// \u003C/summary\u003E\n        public void SomeMethod()\n        {\n            if (_disposed)\n                throw new ObjectDisposedException(\u0022SomeClass instance been disposed\u0022);\n        }\n\n        public void Dispose()\n        {\n            Dispose(true);\n        }\n\n        private bool _disposed;\n\n        protected virtual void Dispose(bool disposing)\n        {\n            if (_disposed)\n                return;\n            if (disposing)//we are in the first call\n            {\n            }\n            _disposed = true;\n        }\n    }\n\n    ","\nYour given code sample is not a good example for IDisposable usage. Dictionary clearing normally shouldn\u0027t go to the Dispose method. Dictionary items will be cleared and disposed when it goes out of scope. IDisposable implementation is required to free some memory/handlers that will not release/free even after they out of scope.\n\nThe following example shows a good example for IDisposable pattern with some code and comments.\n\npublic class DisposeExample\n{\n    // A base class that implements IDisposable. \n    // By implementing IDisposable, you are announcing that \n    // instances of this type allocate scarce resources. \n    public class MyResource: IDisposable\n    {\n        // Pointer to an external unmanaged resource. \n        private IntPtr handle;\n        // Other managed resource this class uses. \n        private Component component = new Component();\n        // Track whether Dispose has been called. \n        private bool disposed = false;\n\n        // The class constructor. \n        public MyResource(IntPtr handle)\n        {\n            this.handle = handle;\n        }\n\n        // Implement IDisposable. \n        // Do not make this method virtual. \n        // A derived class should not be able to override this method. \n        public void Dispose()\n        {\n            Dispose(true);\n            // This object will be cleaned up by the Dispose method. \n            // Therefore, you should call GC.SupressFinalize to \n            // take this object off the finalization queue \n            // and prevent finalization code for this object \n            // from executing a second time.\n            GC.SuppressFinalize(this);\n        }\n\n        // Dispose(bool disposing) executes in two distinct scenarios. \n        // If disposing equals true, the method has been called directly \n        // or indirectly by a user\u0027s code. Managed and unmanaged resources \n        // can be disposed. \n        // If disposing equals false, the method has been called by the \n        // runtime from inside the finalizer and you should not reference \n        // other objects. Only unmanaged resources can be disposed. \n        protected virtual void Dispose(bool disposing)\n        {\n            // Check to see if Dispose has already been called. \n            if(!this.disposed)\n            {\n                // If disposing equals true, dispose all managed \n                // and unmanaged resources. \n                if(disposing)\n                {\n                    // Dispose managed resources.\n                    component.Dispose();\n                }\n\n                // Call the appropriate methods to clean up \n                // unmanaged resources here. \n                // If disposing is false, \n                // only the following code is executed.\n                CloseHandle(handle);\n                handle = IntPtr.Zero;\n\n                // Note disposing has been done.\n                disposed = true;\n\n            }\n        }\n\n        // Use interop to call the method necessary \n        // to clean up the unmanaged resource.\n        [System.Runtime.InteropServices.DllImport(\u0022Kernel32\u0022)]\n        private extern static Boolean CloseHandle(IntPtr handle);\n\n        // Use C# destructor syntax for finalization code. \n        // This destructor will run only if the Dispose method \n        // does not get called. \n        // It gives your base class the opportunity to finalize. \n        // Do not provide destructors in types derived from this class.\n        ~MyResource()\n        {\n            // Do not re-create Dispose clean-up code here. \n            // Calling Dispose(false) is optimal in terms of \n            // readability and maintainability.\n            Dispose(false);\n        }\n    }\n    public static void Main()\n    {\n        // Insert code here to create \n        // and use the MyResource object.\n    }\n}\n\n    ","\nThe most justifiable use case for disposal of managed resources, is preparation for the GC to reclaim resources that would otherwise never be collected.\n\nA prime example is circular references. \n\nWhilst it\u0027s best practice to use patterns that avoid circular references, if you do end up with (for example) a \u0027child\u0027 object that has a reference back to its \u0027parent\u0027, this can stop GC collection of the parent if you just abandon the reference and rely on GC - plus if you have implemented a finalizer, it\u0027ll never be called. \n\nThe only way round this is to manually break the circular references by setting the Parent references to null on the children. \n\nImplementing IDisposable on parent and children is the best way to do this. When Dispose is called on the Parent, call Dispose on all Children, and in the child Dispose method, set the Parent references to null.\n    ","\nI see a lot of answers have shifted to talk about using IDisposable for both managed and unmanaged resources.  I\u0027d suggest this article as one of the best explanations that I\u0027ve found for how IDisposable should actually be used.  \n\nhttps://www.codeproject.com/Articles/29534/IDisposable-What-Your-Mother-Never-Told-You-About\n\nFor the actual question; should you use IDisposable to clean up managed objects that are taking up a lot of memory the short answer would be no.  The reason is that once you Dispose of an IDisposable you should be letting it go out of scope.  At that point any referenced child objects are also out of scope and will get collected.  \n\nThe only real exception to this would be if you have a lot of memory tied up in managed objects and you\u0027ve blocked that thread waiting for some operation to complete.  If those objects where not going to be needed after that call completed then setting those references to null might allow the garbage collector to collect them sooner.  But that scenario would represent bad code that needed to be refactored - not a use case of IDisposable.\n    ","\n                \n                You can do better - you need to add a call to GC.SuppressFinalize() in Dispose.\n                \n\u2013\u00A0plinth\n                Feb 12 \u002709 at 21:29\n            ","\n                \n                @Daniel Earwicker: It\u0027s true. Microsoft would love for you to stop using Win32 altogether, and stick to nicely abstractable, portable, device independent .NET Framework calls. If you want to go poking around the operating system underneath; because you think you know what OS is running: you\u0027re taking your life in your own hands. Not every .NET app is running on Windows, or on a desktop.\n                \n\u2013\u00A0Ian Boyd\n                Apr 2 \u002710 at 12:53\n            ","\n                \n                This is a great answer but I think it would however benefit from a final code listing for a standard case and for a case where the the class derives from a baseclass that already implements Dispose. e.g having read here (msdn.microsoft.com/en-us/library/aa720161%28v=vs.71%29.aspx) as well I have got confused about what I should do when deriving from the class that already implements Dispose (hey I\u0027m new to this).\n                \n\u2013\u00A0integra753\n                Feb 9 \u002712 at 12:42\n                        \n                            \n                        \n            ","\n                \n                @GregS, and others: Generally I wouldn\u0027t bother setting references to null. First of all, it means you can\u0027t make them readonly, and secondly, you have to do very ugly !=null checks (like in the example code). You could have a flag disposed, but it\u0027s easier to not bother about it. The .NET GC is aggressive enough that a reference to a field x will no longer be counted \u0027used\u0027 by the time it passes the x.Dispose() line.\n                \n\u2013\u00A0porges\n                Feb 22 \u002712 at 6:52\n            ","\n                \n                In the second page of Don Box\u0027s book you mentioned, he uses the example of an O(1) implementation of the search algorithm, whose \u0022details are left as an exercise for the reader\u0022. I laughed.\n                \n\u2013\u00A0wip\n                Oct 29 \u002713 at 7:52\n            ","\n                \n                I like that, personally, but it doesn\u0027t really jive with the framework design guidelines.\n                \n\u2013\u00A0mqp\n                Feb 11 \u002709 at 18:22\n            ","\n                \n                I would consider it proper design because it enables easy deterministic scopes and scope constructions/cleanups, especially when intermixed with exception-handling, locking, and unmanaged-resource using-blocks in complex ways. The language offers this as a first-class feature.\n                \n\u2013\u00A0yfeldblum\n                Feb 11 \u002709 at 18:30\n            ","\n                \n                It doesn\u0027t exactly follow the rules specified in the FDG but it is certainly a valid use of the pattern as it is required in order to be used by the \u0022using statement\u0022.\n                \n\u2013\u00A0Scott Dorman\n                Feb 11 \u002709 at 18:44\n            ","\n                \n                As long as Log.Outdent doesn\u0027t throw, there\u0027s definitely nothing wrong with this.\n                \n\u2013\u00A0Daniel Earwicker\n                Feb 11 \u002709 at 19:51\n            ","\n                \n                The various answers to Is it abusive to use IDisposable and \u201Cusing\u201D as a means for getting \u201Cscoped behavior\u201D for exception safety? go into a bit more detail on why different people like/dislike this technique.  It\u0027s somewhat controversial.\n                \n\u2013\u00A0Brian\n                Oct 13 \u002717 at 14:46\n                        \n                            \n                        \n            ","\n                \n                Didn\u0027t you forget to implement finalizer?\n                \n\u2013\u00A0Budda\n                Jul 2 \u002711 at 5:19\n            ","\n                \n                @Budda: No, he is using a SafeHandle. No need for a destructor.\n                \n\u2013\u00A0Henk Holterman\n                Nov 2 \u002711 at 11:16\n            ","\n                \n                \u002B1 for adding the safety net for multiple calls to Dispose().  The spec says multiple calls should be safe.  Too many Microsoft classes fail to implement that, and you get the annoying the ObjectDisposedException.\n                \n\u2013\u00A0Jesse Chisholm\n                Aug 30 \u002712 at 23:34\n            ","\n                \n                But Dispose(bool disposing) is your own method on your SimpleCleanup class and will never be called by the framework. Since you only call it with \u0022true\u0022 as a parameter, \u0027disposing\u0027 will never be false. Your code is very similar to the MSDN example for IDisposable, but is lacking the finalizer, as @Budda pointed out, which is where the call with disposing = false would come from.\n                \n\u2013\u00A0yoyo\n                May 13 \u002715 at 22:11\n            ","\n                \n                re: \u0022There should be no further calls to an object\u0027s methods after Dispose has been called on it\u0022.  \u0022Should\u0022 being the operative word.  If you have asynchronous actions pending, they may come in after your object has been disposed. Causing an ObjectDisposedException.\n                \n\u2013\u00A0Jesse Chisholm\n                Aug 30 \u002712 at 23:37\n            ","\n                \n                Yours seems to be the only answer other than mine which touches on the idea that unmanaged resources encapsulate state that the GC doesn\u0027t understand.  A key aspect of an unmanaged resource, however, is that one or more entities whose state might need clean-up up its state can continue to exist even if the object that \u0022owns\u0022 the resource does not.  How do you like my definition?  Pretty similar, but I think it makes the \u0022resource\u0022 a little more noun-ish (it\u0027s the \u0022agreement\u0022 by the outside object to alter its behavior, in exchange for notification of when its services are no longer needed)\n                \n\u2013\u00A0supercat\n                Apr 26 \u002713 at 15:43\n            ","\n                \n                @supercat - if you\u0027re interested I wrote the following post a couple of days after I wrote the above answer: smellegantcode.wordpress.com/2009/02/13/\u2026\n                \n\u2013\u00A0Daniel Earwicker\n                Apr 26 \u002713 at 20:00\n            ","\n                \n                @DanielEarwicker: Interesting article, though I can think of at least one type of unmanaged resource you don\u0027t really cover: subscriptions to events from long-lived objects.  Event subscriptions are fungible, but even if memory were unlimited failure to dispose of them could be costly.  For example, an enumerator for a collection that allows modification during enumeration might need to subscribe to update notifications from the collection, and a collection may be updated many times in its lifetime.  If the enumerators are abandoned without unsubscribing...\n                \n\u2013\u00A0supercat\n                Apr 26 \u002713 at 21:12\n            ","\n                \n                The pair of operations enter and exit is the core of how I think of a resource. Subscribing/unsubscribing on events should fit into that without difficulty. In terms of the orthogonal/fungible characteristics it is practically indistinguishable from a memory leak. (This is unsurprising as subscription is just adding objects to a list.)\n                \n\u2013\u00A0Daniel Earwicker\n                Apr 26 \u002713 at 21:39\n            ","\n                \n                Full pattern explanation can be found at msdn.microsoft.com/en-us/library/b1yfkh5e.aspx\n                \n\u2013\u00A0LicenseQ\n                Feb 11 \u002709 at 20:41\n            ","\n                \n                shouldn\u0027t ever have a finalizer included unless you have unmanaged resources.  Even then, the preferred implementation is to wrap the unmanaged resource in SafeHandle.\n                \n\u2013\u00A0Dave Black\n                Feb 17 \u002717 at 19:20\n            ","\n                \n                Calling Dispose is perfectly valid, legal, and encouraged. Objects that implement IDisposable usually do so for a reason. The only time the GC performance metrics are affected is when a call the GC.Collect() is made.\n                \n\u2013\u00A0Scott Dorman\n                Feb 11 \u002709 at 21:17\n            ","\n                \n                For many .net classes, disposal is \u0022somewhat\u0022 optional, meaning that abandoning instances \u0022usually\u0022 won\u0027t cause any trouble so long as one doesn\u0027t go crazy creating new instances and abandoning them.  For example, the compiler-generated code for controls seems to create fonts when the controls are instantiated and abandon them when the forms are disposed; if one creates and disposes thousands of controls , this could tie up thousands of GDI handles, but in most cases controls aren\u0027t created and destroyed that much.  Nonetheless, one should still try to avoid such abandonment.\n                \n\u2013\u00A0supercat\n                Aug 2 \u002711 at 15:14\n                        \n                            \n                        \n            ","\n                \n                In the case of fonts, I suspect the problem is that Microsoft never really defined what entity is responsible for disposing the \u0022font\u0022 object assigned to a control; in some cases, a controls may share a font with a longer-lived object, so having the control Dispose the font would be bad.  In other cases, a font will be assigned to a control and nowhere else, so if the control doesn\u0027t dispose it nobody will.  Incidentally, this difficulty with fonts could have been avoided had there been a separate non-disposable FontTemplate class, since controls don\u0027t seem to use the GDI handle of their Font.\n                \n\u2013\u00A0supercat\n                Aug 2 \u002711 at 15:23\n            ","\n                \n                re: \u0022The memory will be freed when it\u0027s needed.\u0022  Rather say, \u0022when GC decides it\u0027s needed.\u0022  You may see system performance issues before GC decides that memory is really needed.  Freeing it up now may not be essential, but may be useful.\n                \n\u2013\u00A0Jesse Chisholm\n                Aug 30 \u002712 at 23:40\n            ","\n                \n                There are some corner cases in which nulling out references within a collection may expedite garbage collection of the items referred to thereby.  For example, if a large array is created and filled with references to smaller newly-created items, but it isn\u0027t needed for very long after that, abandoning the array may cause those items to be kept around until the next Level 2 GC, while zeroing it out first may make the items eligible for the next level 0 or level 1 GC.  To be sure, having big short-lived objects on the Large Object Heap is icky anyway (I dislike the design) but...\n                \n\u2013\u00A0supercat\n                Apr 26 \u002713 at 15:48\n            ","\n                \n                ...zeroing out such arrays before abandoning them my sometimes lessen the GC impact.\n                \n\u2013\u00A0supercat\n                Apr 26 \u002713 at 15:49\n            ","\n                \n                Take a look at @Daniel Earwicker\u0027s example using higher order functions. For benchmarking, timing, logging etc. It seems much more straightforward.\n                \n\u2013\u00A0Aluan Haddad\n                Sep 22 \u002716 at 3:15\n            ","\n                \n                If an instance of LargeStuff has been around long enough to make it to Generation 2, and if _Large holds a reference to a newly-created string which is in Generation 0, then if the the instance of LargeStuff is abandoned without nulling out _Large, then string referred to by _Large will be kept around until the next Gen2 collection.  Zeroing out _Large may let the string get eliminated at the next Gen0 collection.  In most cases, nulling out references is not helpful, but there are cases where it can offer some benefit.\n                \n\u2013\u00A0supercat\n                May 9 \u002713 at 23:10\n            ","\n                \n                They\u0027re private fields, so I think it\u0027s fair to assume the OP isn\u0027t giving out references to them.\n                \n\u2013\u00A0mqp\n                Feb 11 \u002709 at 21:20\n            ","\n                \n                1) the code fragment is just example code, so I\u0027m just pointing out that there may be a side-effect that is easy to overlook; 2) private fields are often the target of a getter property/method - maybe too much (getter/setters are considered by some people to be a bit of an anti-pattern).\n                \n\u2013\u00A0Michael Burr\n                Feb 11 \u002709 at 22:27\n            ","\n                \n                Well, IMO, definition of unmanaged object is clear; any non-GC object.\n                \n\u2013\u00A0eonil\n                May 26 \u002714 at 21:30\n            ","\n                \n                @Eonil: Unmanaged Object != Unmanaged Resource.  Things like events can be implemented entirely using managed objects, but still constitute unmanaged resources because--at least in the case of short-lived objects subscribing to long-lived-objects\u0027 events--the GC knows nothing about how to clean them up.\n                \n\u2013\u00A0supercat\n                May 27 \u002714 at 13:35\n            ","\n                \n                \u0022For me unmanaged resource means some class, which implements IDisposable interface or something created with usage of calls to dll.\u0022 So you are saying that any type which is IDisposable should itself be considered an unmanaged resource? That doesn\u0027t seem correct. Also if the implmenting type is a pure value type you seem to suggest that it does not need to be disposed. That also seems wrong.\n                \n\u2013\u00A0Aluan Haddad\n                Sep 22 \u002716 at 3:08\n            ","\n                \n                Everybody judges by himself. I don\u0027t like to add to mine code something just for the sake of addition. It means if I add IDisposable, it means I\u0027ve created some kind of functionality that GC can\u0027t manage or I suppose it will not be able to manage it\u0027s lifetime properly.\n                \n\u2013\u00A0Yuriy Zaletskyy\n                Apr 20 \u002718 at 22:22\n            ","\n                \n                For the most part, the GC doesn\u0027t work by identifying dead objects, but rather by identifying live ones.  After each gc cycle, for each object that has registered for finallization, is stored on the large object heap, or is the target of a live WeakReference, the system will check a flag which indicates that a live rooted reference was found in the last GC cycle, and will either add the object to a queue of objects needing immediate finalization, release the object from the large object heap, or invalidate the weak reference. Circular refs will not keep objects alive if no other refs exist.\n                \n\u2013\u00A0supercat\n                Sep 15 \u002716 at 2:39\n                        \n                            \n                        \n            ","\n                \n                I did\u0027t understood why somehone put -1 at your answer\n                \n\u2013\u00A0Sebastian Oscar Lopez\n                Aug 23 \u002719 at 13:12\n            "]},{"Id":"d9cb4ab6-2ffd-4f51-8cf9-916d9ca1eb01","QuestionId":4015324,"Description":"How to make an HTTP POST web request","Votes":1219,"Views":1753571,"Tags":["c#",".net","post","httpwebrequest","httprequest"],"Discussions":["\nThere are several ways to perform HTTP GET and POST requests:\n\n\n\nMethod A: HttpClient (Preferred)\n\nAvailable in: .NET Framework 4.5\u002B, .NET Standard 1.1\u002B, .NET Core 1.0\u002B .\n\nIt is currently the preferred approach, and is asynchronous and high performance. Use the built-in version in most cases, but for very old platforms there is a NuGet package.\n\nusing System.Net.Http;\n\n\nSetup\n\nIt is recommended to instantiate one HttpClient for your application\u0027s lifetime and share it unless you have a specific reason not to.\n\nprivate static readonly HttpClient client = new HttpClient();\n\n\nSee HttpClientFactory for a dependency injection solution.\n\n\n\n\nPOST\n\nvar values = new Dictionary\u003Cstring, string\u003E\n{\n    { \u0022thing1\u0022, \u0022hello\u0022 },\n    { \u0022thing2\u0022, \u0022world\u0022 }\n};\n\nvar content = new FormUrlEncodedContent(values);\n\nvar response = await client.PostAsync(\u0022http://www.example.com/recepticle.aspx\u0022, content);\n\nvar responseString = await response.Content.ReadAsStringAsync();\n\nGET\n\nvar responseString = await client.GetStringAsync(\u0022http://www.example.com/recepticle.aspx\u0022);\n\n\n\n\n\nMethod B: Third-Party Libraries\n\nRestSharp\n\n\nPOST\n\n var client = new RestClient(\u0022http://example.com\u0022);\n // client.Authenticator = new HttpBasicAuthenticator(username, password);\n var request = new RestRequest(\u0022resource/{id}\u0022);\n request.AddParameter(\u0022thing1\u0022, \u0022Hello\u0022);\n request.AddParameter(\u0022thing2\u0022, \u0022world\u0022);\n request.AddHeader(\u0022header\u0022, \u0022value\u0022);\n request.AddFile(\u0022file\u0022, path);\n var response = client.Post(request);\n var content = response.Content; // Raw content as string\n var response2 = client.Post\u003CPerson\u003E(request);\n var name = response2.Data.Name;\n\n\n\nFlurl.Http\n\nIt is a newer library sporting a fluent API, testing helpers, uses HttpClient under the hood, and is portable. It is available via NuGet.\n\n    using Flurl.Http;\n\n\n\n\n\nPOST\n\nvar responseString = await \u0022http://www.example.com/recepticle.aspx\u0022\n    .PostUrlEncodedAsync(new { thing1 = \u0022hello\u0022, thing2 = \u0022world\u0022 })\n    .ReceiveString();\n\nGET\n\nvar responseString = await \u0022http://www.example.com/recepticle.aspx\u0022\n    .GetStringAsync();\n\n\n\n\n\nMethod C: HttpWebRequest (not recommended for new work)\n\nAvailable in: .NET Framework 1.1\u002B, .NET Standard 2.0\u002B, .NET Core 1.0\u002B. In .NET Core, it is mostly for compatibility -- it wraps HttpClient, is less performant, and won\u0027t get new features.\n\nusing System.Net;\nusing System.Text;  // For class Encoding\nusing System.IO;    // For StreamReader\n\n\n\n\n\nPOST\n\nvar request = (HttpWebRequest)WebRequest.Create(\u0022http://www.example.com/recepticle.aspx\u0022);\n\nvar postData = \u0022thing1=\u0022 \u002B Uri.EscapeDataString(\u0022hello\u0022);\n    postData \u002B= \u0022\u0026thing2=\u0022 \u002B Uri.EscapeDataString(\u0022world\u0022);\nvar data = Encoding.ASCII.GetBytes(postData);\n\nrequest.Method = \u0022POST\u0022;\nrequest.ContentType = \u0022application/x-www-form-urlencoded\u0022;\nrequest.ContentLength = data.Length;\n\nusing (var stream = request.GetRequestStream())\n{\n    stream.Write(data, 0, data.Length);\n}\n\nvar response = (HttpWebResponse)request.GetResponse();\n\nvar responseString = new StreamReader(response.GetResponseStream()).ReadToEnd();\n\nGET\n\nvar request = (HttpWebRequest)WebRequest.Create(\u0022http://www.example.com/recepticle.aspx\u0022);\n\nvar response = (HttpWebResponse)request.GetResponse();\n\nvar responseString = new StreamReader(response.GetResponseStream()).ReadToEnd();\n\n\n\n\n\nMethod D: WebClient (Not recommended for new work)\n\nThis is a wrapper around HttpWebRequest. Compare with HttpClient.\n\nAvailable in: .NET Framework 1.1\u002B, NET Standard 2.0\u002B, .NET Core 2.0\u002B\n\nusing System.Net;\nusing System.Collections.Specialized;\n\n\n\n\n\nPOST\n\nusing (var client = new WebClient())\n{\n    var values = new NameValueCollection();\n    values[\u0022thing1\u0022] = \u0022hello\u0022;\n    values[\u0022thing2\u0022] = \u0022world\u0022;\n\n    var response = client.UploadValues(\u0022http://www.example.com/recepticle.aspx\u0022, values);\n\n    var responseString = Encoding.Default.GetString(response);\n}\n\nGET\n\nusing (var client = new WebClient())\n{\n    var responseString = client.DownloadString(\u0022http://www.example.com/recepticle.aspx\u0022);\n}\n\n\n    ","\nSimple GET request\n\nusing System.Net;\n\n...\n\nusing (var wb = new WebClient())\n{\n    var response = wb.DownloadString(url);\n}\n\n\nSimple POST request\n\nusing System.Net;\nusing System.Collections.Specialized;\n\n...\n\nusing (var wb = new WebClient())\n{\n    var data = new NameValueCollection();\n    data[\u0022username\u0022] = \u0022myUser\u0022;\n    data[\u0022password\u0022] = \u0022myPassword\u0022;\n\n    var response = wb.UploadValues(url, \u0022POST\u0022, data);\n    string responseInString = Encoding.UTF8.GetString(response);\n}\n\n    ","\nMSDN has a sample.\n\nusing System;\nusing System.IO;\nusing System.Net;\nusing System.Text;\n\nnamespace Examples.System.Net\n{\n    public class WebRequestPostExample\n    {\n        public static void Main()\n        {\n            // Create a request using a URL that can receive a post. \n            WebRequest request = WebRequest.Create(\u0022http://www.contoso.com/PostAccepter.aspx\u0022);\n            // Set the Method property of the request to POST.\n            request.Method = \u0022POST\u0022;\n            // Create POST data and convert it to a byte array.\n            string postData = \u0022This is a test that posts this string to a Web server.\u0022;\n            byte[] byteArray = Encoding.UTF8.GetBytes(postData);\n            // Set the ContentType property of the WebRequest.\n            request.ContentType = \u0022application/x-www-form-urlencoded\u0022;\n            // Set the ContentLength property of the WebRequest.\n            request.ContentLength = byteArray.Length;\n            // Get the request stream.\n            Stream dataStream = request.GetRequestStream();\n            // Write the data to the request stream.\n            dataStream.Write(byteArray, 0, byteArray.Length);\n            // Close the Stream object.\n            dataStream.Close();\n            // Get the response.\n            WebResponse response = request.GetResponse();\n            // Display the status.\n            Console.WriteLine(((HttpWebResponse)response).StatusDescription);\n            // Get the stream containing content returned by the server.\n            dataStream = response.GetResponseStream();\n            // Open the stream using a StreamReader for easy access.\n            StreamReader reader = new StreamReader(dataStream);\n            // Read the content.\n            string responseFromServer = reader.ReadToEnd();\n            // Display the content.\n            Console.WriteLine(responseFromServer);\n            // Clean up the streams.\n            reader.Close();\n            dataStream.Close();\n            response.Close();\n        }\n    }\n}\n\n    ","\nThis is a complete working example of sending/receiving data in JSON format, I used Visual Studio 2013 Express Edition:\n\nusing System;\nusing System.Collections.Generic;\nusing System.Data;\nusing System.Data.OleDb;\nusing System.IO;\nusing System.Linq;\nusing System.Net.Http;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Web.Script.Serialization;\n\nnamespace ConsoleApplication1\n{\n    class Customer\n    {\n        public string Name { get; set; }\n        public string Address { get; set; }\n        public string Phone { get; set; }\n    }\n\n    public class Program\n    {\n        private static readonly HttpClient _Client = new HttpClient();\n        private static JavaScriptSerializer _Serializer = new JavaScriptSerializer();\n\n        static void Main(string[] args)\n        {\n            Run().Wait();\n        }\n\n        static async Task Run()\n        {\n            string url = \u0022http://www.example.com/api/Customer\u0022;\n            Customer cust = new Customer() { Name = \u0022Example Customer\u0022, Address = \u0022Some example address\u0022, Phone = \u0022Some phone number\u0022 };\n            var json = _Serializer.Serialize(cust);\n            var response = await Request(HttpMethod.Post, url, json, new Dictionary\u003Cstring, string\u003E());\n            string responseText = await response.Content.ReadAsStringAsync();\n\n            List\u003CYourCustomClassModel\u003E serializedResult = _Serializer.Deserialize\u003CList\u003CYourCustomClassModel\u003E\u003E(responseText);\n\n            Console.WriteLine(responseText);\n            Console.ReadLine();\n        }\n\n        /// \u003Csummary\u003E\n        /// Makes an async HTTP Request\n        /// \u003C/summary\u003E\n        /// \u003Cparam name=\u0022pMethod\u0022\u003EThose methods you know: GET, POST, HEAD, etc...\u003C/param\u003E\n        /// \u003Cparam name=\u0022pUrl\u0022\u003EVery predictable...\u003C/param\u003E\n        /// \u003Cparam name=\u0022pJsonContent\u0022\u003EString data to POST on the server\u003C/param\u003E\n        /// \u003Cparam name=\u0022pHeaders\u0022\u003EIf you use some kind of Authorization you should use this\u003C/param\u003E\n        /// \u003Creturns\u003E\u003C/returns\u003E\n        static async Task\u003CHttpResponseMessage\u003E Request(HttpMethod pMethod, string pUrl, string pJsonContent, Dictionary\u003Cstring, string\u003E pHeaders)\n        {\n            var httpRequestMessage = new HttpRequestMessage();\n            httpRequestMessage.Method = pMethod;\n            httpRequestMessage.RequestUri = new Uri(pUrl);\n            foreach (var head in pHeaders)\n            {\n                httpRequestMessage.Headers.Add(head.Key, head.Value);\n            }\n            switch (pMethod.Method)\n            {\n                case \u0022POST\u0022:\n                    HttpContent httpContent = new StringContent(pJsonContent, Encoding.UTF8, \u0022application/json\u0022);\n                    httpRequestMessage.Content = httpContent;\n                    break;\n\n            }\n\n            return await _Client.SendAsync(httpRequestMessage);\n        }\n    }\n}\n\n    ","\nThere are some really good answers on here. Let me post a different way to set your headers with the WebClient(). I will also show you how to set an API key.\n\n        var client = new WebClient();\n        string credentials = Convert.ToBase64String(Encoding.ASCII.GetBytes(userName \u002B \u0022:\u0022 \u002B passWord));\n        client.Headers[HttpRequestHeader.Authorization] = $\u0022Basic {credentials}\u0022;\n        //If you have your data stored in an object serialize it into json to pass to the webclient with Newtonsoft\u0027s JsonConvert\n        var encodedJson = JsonConvert.SerializeObject(newAccount);\n\n        client.Headers.Add($\u0022x-api-key:{ApiKey}\u0022);\n        client.Headers.Add(\u0022Content-Type:application/json\u0022);\n        try\n        {\n            var response = client.UploadString($\u0022{apiurl}\u0022, encodedJson);\n            //if you have a model to deserialize the json into Newtonsoft will help bind the data to the model, this is an extremely useful trick for GET calls when you have a lot of data, you can strongly type a model and dump it into an instance of that class.\n            Response response1 = JsonConvert.DeserializeObject\u003CResponse\u003E(response);\n\n    ","\nThis solution uses nothing but standard .NET calls.\n\nTested:\n\n\nIn use in an enterprise WPF application. Uses async/await to avoid blocking the UI.\nCompatible with .NET 4.5\u002B.\nTested with no parameters (requires a \u0022GET\u0022 behind the scenes).\nTested with parameters (requires a \u0022POST\u0022 behind the scenes).\nTested with a standard web page such as Google.\nTested with an internal Java-based webservice.\n\n\nReference:\n\n// Add a Reference to the assembly System.Web\n\n\nCode:\n\nusing System;\nusing System.Collections.Generic;\nusing System.Collections.Specialized;\nusing System.Net;\nusing System.Net.Http;\nusing System.Threading.Tasks;\nusing System.Web;\n\nprivate async Task\u003CWebResponse\u003E CallUri(string url, TimeSpan timeout)\n{\n    var uri = new Uri(url);\n    NameValueCollection rawParameters = HttpUtility.ParseQueryString(uri.Query);\n    var parameters = new Dictionary\u003Cstring, string\u003E();\n    foreach (string p in rawParameters.Keys)\n    {\n        parameters[p] = rawParameters[p];\n    }\n\n    var client = new HttpClient { Timeout = timeout };\n    HttpResponseMessage response;\n    if (parameters.Count == 0)\n    {\n        response = await client.GetAsync(url);\n    }\n    else\n    {\n        var content = new FormUrlEncodedContent(parameters);\n        string urlMinusParameters = uri.OriginalString.Split(\u0027?\u0027)[0]; // Parameters always follow the \u0027?\u0027 symbol.\n        response = await client.PostAsync(urlMinusParameters, content);\n    }\n    var responseString = await response.Content.ReadAsStringAsync();\n\n    return new WebResponse(response.StatusCode, responseString);\n}\n\nprivate class WebResponse\n{\n    public WebResponse(HttpStatusCode httpStatusCode, string response)\n    {\n        this.HttpStatusCode = httpStatusCode;\n        this.Response = response;\n    }\n    public HttpStatusCode HttpStatusCode { get; }\n    public string Response { get; }\n}\n\n\nTo call with no parameters (uses a \u0022GET\u0022 behind the scenes):\n\n var timeout = TimeSpan.FromSeconds(300);\n WebResponse response = await this.CallUri(\u0022http://www.google.com/\u0022, timeout);\n if (response.HttpStatusCode == HttpStatusCode.OK)\n {\n     Console.Write(response.Response); // Print HTML.\n }\n\n\nTo call with parameters (uses a \u0022POST\u0022 behind the scenes):\n\n var timeout = TimeSpan.FromSeconds(300);\n WebResponse response = await this.CallUri(\u0022http://example.com/path/to/page?name=ferret\u0026color=purple\u0022, timeout);\n if (response.HttpStatusCode == HttpStatusCode.OK)\n {\n     Console.Write(response.Response); // Print HTML.\n }\n\n    ","\nSimple (one-liner, no error checking, no wait for response) solution I\u0027ve found so far:\n\n(new WebClient()).UploadStringAsync(new Uri(Address), dataString);\u200F\n\n\nUse with caution!\n    ","\nWhen using Windows.Web.Http namespace, for POST instead of FormUrlEncodedContent  we write  HttpFormUrlEncodedContent. Also the response is type of HttpResponseMessage. The rest is as Evan Mulawski wrote down.\n    ","\nIf you like a fluent API you can use Tiny.RestClient. It\u0027s available at NuGet.\n\nvar client = new TinyRestClient(new HttpClient(), \u0022http://MyAPI.com/api\u0022);\n// POST\nvar city = new City() { Name = \u0022Paris\u0022, Country = \u0022France\u0022 };\n// With content\nvar response = await client.PostRequest(\u0022City\u0022, city)\n                           .ExecuteAsync\u003Cbool\u003E();\n\n    ","\nWhy is this not totally trivial? Doing the request is not and especially not dealing with the results and seems like there are some .NET bugs involved as well - see Bug in HttpClient.GetAsync should throw WebException, not TaskCanceledException\n\nI ended up with this code:\n\nstatic async Task\u003C(bool Success, WebExceptionStatus WebExceptionStatus, HttpStatusCode? HttpStatusCode, string ResponseAsString)\u003E HttpRequestAsync(HttpClient httpClient, string url, string postBuffer = null, CancellationTokenSource cts = null) {\n    try {\n        HttpResponseMessage resp = null;\n\n        if (postBuffer is null) {\n            resp = cts is null ? await httpClient.GetAsync(url) : await httpClient.GetAsync(url, cts.Token);\n\n        } else {\n            using (var httpContent = new StringContent(postBuffer)) {\n                resp = cts is null ? await httpClient.PostAsync(url, httpContent) : await httpClient.PostAsync(url, httpContent, cts.Token);\n            }\n        }\n\n        var respString = await resp.Content.ReadAsStringAsync();\n        return (resp.IsSuccessStatusCode, WebExceptionStatus.Success, resp.StatusCode, respString);\n\n    } catch (WebException ex) {\n        WebExceptionStatus status = ex.Status;\n        if (status == WebExceptionStatus.ProtocolError) {\n            // Get HttpWebResponse so that you can check the HTTP status code.\n            using (HttpWebResponse httpResponse = (HttpWebResponse)ex.Response) {\n                return (false, status, httpResponse.StatusCode, httpResponse.StatusDescription);\n            }\n        } else {\n            return (false, status, null, ex.ToString()); \n        }\n\n    } catch (TaskCanceledException ex) {\n        if (cts is object \u0026\u0026 ex.CancellationToken == cts.Token) {\n            // a real cancellation, triggered by the caller\n            return (false, WebExceptionStatus.RequestCanceled, null, ex.ToString());\n        } else {\n            // a web request timeout (possibly other things!?)\n            return (false, WebExceptionStatus.Timeout, null, ex.ToString());\n        }\n\n    } catch (Exception ex) {\n        return (false, WebExceptionStatus.UnknownError, null, ex.ToString());\n    }\n}\n\n\nThis will do a GET or POST depends if postBuffer is null or not\n\nif Success is true the response will then be in ResponseAsString\n\nif Success is false you can check WebExceptionStatus, HttpStatusCode and ResponseAsString to try to see what went wrong.\n    ","\nIn .net core you can make post-call with following code, here I added some extra features to this code so can make your code work behind a proxy and with network credentials if any, also here I mention that you can change the encoding of your message. \nI hope this explains all and help you in coding.\n\nHttpClient client = GetHttpClient(_config);\n\n        if (headers != null)\n        {\n            foreach (var header in headers)\n            {\n                client.DefaultRequestHeaders.TryAddWithoutValidation(header.Key, header.Value);\n            }\n        }\n\n        client.BaseAddress = new Uri(baseAddress);\n\n        Encoding encoding = Encoding.UTF8;\n\n\n        var result = await client.PostAsync(url, new StringContent(body, encoding, \u0022application/json\u0022)).ConfigureAwait(false);\n        if (result.IsSuccessStatusCode)\n        {\n            return new RequestResponse { severity = \u0022Success\u0022, httpResponse = result.Content.ReadAsStringAsync().Result, StatusCode = result.StatusCode };\n        }\n        else\n        {\n            return new RequestResponse { severity = \u0022failure\u0022, httpResponse = result.Content.ReadAsStringAsync().Result, StatusCode = result.StatusCode };\n        }\n\n\n public HttpClient GetHttpClient(IConfiguration _config)\n        {\n            bool ProxyEnable = Convert.ToBoolean(_config[\u0022GlobalSettings:ProxyEnable\u0022]);\n\n            HttpClient client = null;\n            if (!ProxyEnable)\n            {\n                client = new HttpClient();\n            }\n            else\n            {\n                string ProxyURL = _config[\u0022GlobalSettings:ProxyURL\u0022];\n                string ProxyUserName = _config[\u0022GlobalSettings:ProxyUserName\u0022];\n                string ProxyPassword = _config[\u0022GlobalSettings:ProxyPassword\u0022];\n                string[] ExceptionURL = _config[\u0022GlobalSettings:ExceptionURL\u0022].Split(\u0027;\u0027);\n                bool BypassProxyOnLocal = Convert.ToBoolean(_config[\u0022GlobalSettings:BypassProxyOnLocal\u0022]);\n                bool UseDefaultCredentials = Convert.ToBoolean(_config[\u0022GlobalSettings:UseDefaultCredentials\u0022]);\n\n                WebProxy proxy = new WebProxy\n                {\n                    Address = new Uri(ProxyURL),\n                    BypassProxyOnLocal = BypassProxyOnLocal,\n                    UseDefaultCredentials = UseDefaultCredentials,\n                    BypassList = ExceptionURL,\n                    Credentials = new NetworkCredential(ProxyUserName, ProxyPassword)\n\n                };\n\n                HttpClientHandler handler = new HttpClientHandler { Proxy = proxy };\n                client = new HttpClient(handler,true);\n            }\n            return client;\n        }\n\n    ","\nHere\u0027s what i use in .NET 4.8 to make a HTTP POST request.\nWith this code one can send multiple POST requests at a time Asynchronously.\nAt the end of each request an event is raised. And also at the end of all request another event is raised.\nThe one bellow is the core class:\nImports System.ComponentModel\nImports System.Text.RegularExpressions\nImports System.Timers\nImports System.Windows.Forms\nImports AeonLabs\nImports AeonLabs.Environment\nImports Newtonsoft.Json\n\nPublic Class HttpDataCore\n    Public Property url As String\n    Public Property state As New environmentVarsCore\n    Public Property errorMessage As String = \u0022\u0022\n    Public Property statusMessage As String\n    Public Property threadCount As Integer = 25\n    Public Property numberOfRetryAttempts = 5\n    Public Property queue As List(Of _queue_data_struct)\n    Public Property queueBWorker As Integer() \u0027 has the size of threadCount\n    Public Property queueLock As New Object\n    Public Property retryAttempts As New _retry_attempts\n    Public Property dataStatistics As List(Of _data_statistics)\n    Public Property loadingCounter As Integer\n    Public Property CompletionPercentage As Integer \u0027 value range 0-100\n    Public Property IsBusy As Boolean\n\n    Public Structure _queue_data_struct\n        Dim vars As Dictionary(Of String, String)\n        Dim filenameOrSavePath As String                  \u0027 full address file name or full adress folder path\n        Dim misc As Dictionary(Of String, String)\n        Dim status As Integer                             \u0027 -1 - completed; 0- not sent yet; 1-already sent / processing \n    End Structure\n    Public Structure _retry_attempts\n        Dim counter As Integer\n        Dim pattern As Integer\n        Dim previousPattern As Integer\n        Dim errorMessage As String\n    End Structure\n    Public Structure _data_statistics\n        Dim filesize As Double\n        Dim bytesSentReceived As Double\n        Dim speed As Double\n    End Structure\n\n    Public WithEvents RestartQueueTimer As New Timers.Timer\n    Public bwDataRequest() As BackgroundWorker\n\n    Public Event requestCompleted(sender As Object, requestData As String) \u0027TODO add misc vars\n\n    Private sendToQueue As Boolean\n    Public Sub New(ByVal Optional _state As environmentVarsCore = Nothing, ByVal Optional _url As String = \u0022\u0022)\n        queue = New List(Of _queue_data_struct)\n        dataStatistics = New List(Of _data_statistics)\n        loadingCounter = 0\n        sendToQueue = False\n        If _state IsNot Nothing AndAlso _url.Equals(\u0022\u0022) Then\n            url = _state.ServerBaseAddr \u0026 _state.ApiServerAddrPath\n        ElseIf Not _url.Equals(\u0022\u0022) Then\n            url = _url\n        Else\n            Throw New System.Exception(\u0022Initialization err: state and url cannot be both null at same time\u0022)\n        End If\n\n        If _state IsNot Nothing Then\n            state = _state\n        End If\n\n    End Sub\n    Public Sub loadQueue(ByVal vars As Dictionary(Of String, String), ByVal Optional misc As Dictionary(Of String, String) = Nothing, ByVal Optional filenameOrSavePath As String = Nothing)\n        Dim queueItem As New _queue_data_struct\n        queueItem.vars = New Dictionary(Of String, String)\n        queueItem.misc = New Dictionary(Of String, String)\n\n        queueItem.vars = vars\n        queueItem.status = 0\n        queueItem.misc = misc\n        queueItem.filenameOrSavePath = filenameOrSavePath\n        queue.Add(queueItem)\n    End Sub\n\n    Public Sub clearQueue()\n        loadingCounter = 0\n        queue = New List(Of _queue_data_struct)\n    End Sub\n    Public Sub startRequest()\n        If bwDataRequest(0) Is Nothing Then\n            Throw New Exception(\u0022You need to call initialze first\u0022)\n            Exit Sub\n        End If\n\n        \u0027startSendQueue()\n        IsBusy = True\n\n        AddHandler RestartQueueTimer.Elapsed, New ElapsedEventHandler(AddressOf QueueTimerTick)\n        With RestartQueueTimer\n            .Enabled = True\n            .Interval = 500\n            .Start()\n        End With\n    End Sub\n\n    Private Sub QueueTimerTick(ByVal sender As Object, ByVal e As ElapsedEventArgs)\n        If QueuesToComplete(queue).Equals(0) And QueuesToSend(queue).Equals(0) Then\n            RestartQueueTimer.Stop()\n            queue = New List(Of _queue_data_struct)\n            RaiseEvent requestCompleted(Me, Nothing)\n            IsBusy = False\n            Exit Sub\n        End If\n\n        If retryAttempts.counter \u003E= numberOfRetryAttempts Then \u0027ToDo a retry number of attempts before quits\n            Threading.Thread.CurrentThread.CurrentUICulture = Globalization.CultureInfo.GetCultureInfo(state.currentLang)\n            Dim MsgBox As messageBoxForm\n            MsgBox = New messageBoxForm(retryAttempts.errorMessage \u0026 \u0022. \u0022 \u0026 My.Resources.strings.tryAgain \u0026 \u0022 ?\u0022, My.Resources.strings.question, MessageBoxButtons.YesNo, MessageBoxIcon.Question)\n            If MsgBox.ShowDialog() = DialogResult.Yes Then\n                Dim retry As _retry_attempts\n                With retry\n                    .counter = 0\n                    .previousPattern = -1\n                    .pattern = 0\n                    .errorMessage = \u0022\u0022\n                End With\n                retryAttempts = retry\n                startSendQueue()\n            Else\n                RestartQueueTimer.Stop()\n                queue = New List(Of _queue_data_struct)\n                RaiseEvent requestCompleted(Me, Nothing)\n                IsBusy = False\n                Exit Sub\n            End If\n            Exit Sub\n        ElseIf Not sendToQueue And QueuesToSend(queue) \u003E 0 Then\n            startSendQueue()\n        End If\n    End Sub\n\n    Private Sub startSendQueue()\n        sendToQueue = True\n        While QueuesToSend(queue) \u003E 0\n            For shtIndex = 0 To threadCount\n                For i = 0 To queue.Count - 1\n                    If Not bwDataRequest(shtIndex).IsBusy Then\n                        SyncLock queueLock\n                            If queue.ElementAt(i).status.Equals(0) Then\n                                Dim data As New _queue_data_struct\n                                data.vars = queue.ElementAt(i).vars\n                                data.status = 1\n                                data.misc = queue.ElementAt(i).misc\n                                data.filenameOrSavePath = queue.ElementAt(i).filenameOrSavePath\n                                queue(i) = data\n                                queueBWorker(shtIndex) = i\n                                dataStatistics(shtIndex) = (New _data_statistics)\n\n                                bwDataRequest(shtIndex).RunWorkerAsync(queue(i))\n                                Threading.Thread.Sleep(50)\n                            End If\n                        End SyncLock\n                    End If\n                Next i\n            Next shtIndex\n        End While\n        sendToQueue = False\n    End Sub\n\n    Public Function QueuesToSend(queue As List(Of _queue_data_struct)) As Integer\n        Dim counter As Integer = 0\n        For i = 0 To queue.Count - 1\n            If queue(i).status.Equals(0) Then\n                counter \u002B= 1\n            End If\n        Next i\n        Return counter\n    End Function\n    Public Function QueuesToComplete(queue As List(Of _queue_data_struct)) As Integer\n        Dim counter As Integer = 0\n        For i = 0 To queue.Count - 1\n            If queue(i).status.Equals(1) Then\n                counter \u002B= 1\n            End If\n        Next i\n        Return counter\n    End Function\n    Public Function QueuesMultiHash(queue As List(Of _queue_data_struct)) As Integer\n        Dim counter As Integer = 0\n        For i = 0 To queue.Count - 1\n            If queue(i).status.Equals(1) Then\n                counter \u002B= i\n            End If\n        Next i\n        Return counter\n    End Function\n\n    Public Function IsBase64String(ByVal s As String) As Boolean\n        s = s.Trim()\n        Return (s.Length Mod 4 = 0) AndAlso Regex.IsMatch(s, \u0022^[a-zA-Z0-9\\\u002B/]*={0,3}$\u0022, RegexOptions.None)\n    End Function\n\n    \u0027\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\n    Public Function ConvertDataToArray(key As String, fields As String(), response As String) As Dictionary(Of String, List(Of String))\n        If GetMessage(response).Equals(\u00221001\u0022) Then\n            Threading.Thread.CurrentThread.CurrentUICulture = Globalization.CultureInfo.GetCultureInfo(state.currentLang)\n            errorMessage = \u0022{\u0027error\u0027:true,\u0027message\u0027:\u0027\u0022 \u0026 My.Resources.strings.errorNoRecordsFound \u0026 \u0022\u0027}\u0022\n            Return Nothing\n        End If\n        Try\n            Dim jsonResult = JsonConvert.DeserializeObject(Of Dictionary(Of String, Object))(response)\n            If jsonResult.ContainsKey(key) Then\n                If Not jsonResult.Item(key).item(0).Count.Equals(fields.Length) Then\n                    Threading.Thread.CurrentThread.CurrentUICulture = Globalization.CultureInfo.GetCultureInfo(state.currentLang)\n                    errorMessage = \u0022{\u0027error\u0027:true,\u0027message\u0027:\u0027\u0022 \u0026 My.Resources.strings.JsonFieldsMismatch \u0026 \u0022. table(\u0022 \u0026 key \u0026 \u0022\u0027}\u0022\n                    Return Nothing\n                Else\n                    Dim results = New Dictionary(Of String, List(Of String))\n                    For k = 0 To fields.Length - 1\n                        Dim fieldValues As List(Of String) = New List(Of String)\n                        For i = 0 To jsonResult.Item(key).Count - 1\n                            fieldValues.Add(jsonResult.Item(key).item(i).item(k).ToString)\n                        Next i\n                        results.Add(fields(k), fieldValues)\n\n                    Next k\n                    Return results\n                End If\n            Else\n                Threading.Thread.CurrentThread.CurrentUICulture = Globalization.CultureInfo.GetCultureInfo(state.currentLang)\n                errorMessage = \u0022{\u0027error\u0027:true,\u0027message\u0027:\u0027\u0022 \u0026 My.Resources.strings.JsonkeyNotFound \u0026 \u0022 (\u0022 \u0026 key \u0026 \u0022\u0027}\u0022\n                Return Nothing\n            End If\n        Catch ex As Exception\n            errorMessage = \u0022{\u0027error\u0027:true,\u0027message\u0027:\u0027\u0022 \u0026 ex.ToString \u0026 \u0022\u0027}\u0022\n            errorMessage = ex.ToString\n            Return Nothing\n        End Try\n    End Function\nEnd Class\n\nthe AeonLabs.Envoriment is a class with a collection or fields and properties.\nAnd the one bellow is for making a POST request:\nImports System.ComponentModel\nImports System.IO\nImports System.Net\nImports System.Text\nImports System.Web\nImports System.Web.Script.Serialization\nImports System.Windows.Forms\nImports AeonLabs.Environment\nImports AeonLabs.Security\n\nPublic Class HttpDataPostData\n    Inherits HttpDataCore\n\n    Public Event updateProgress(sender As Object, misc As Dictionary(Of String, String))\n    Public Event dataArrived(sender As Object, requestData As String, misc As Dictionary(Of String, String))\n\n    Public Sub New(ByVal Optional _state As environmentVarsCore = Nothing, ByVal Optional _url As String = \u0022\u0022)\n        MyBase.New(_state, _url)\n    End Sub\n    Public Sub initialize(ByVal Optional _threadCount As Integer = 0)\n        If Not _threadCount.Equals(0) Then\n            threadCount = _threadCount\n        End If\n\n        ReDim bwDataRequest(threadCount)\n        ReDim queueBWorker(threadCount)\n\n        For shtIndex = 0 To threadCount\n            dataStatistics.Add(New _data_statistics)\n\n            bwDataRequest(shtIndex) = New System.ComponentModel.BackgroundWorker\n            bwDataRequest(shtIndex).WorkerReportsProgress = True\n            bwDataRequest(shtIndex).WorkerSupportsCancellation = True\n\n            AddHandler bwDataRequest(shtIndex).DoWork, AddressOf bwDataRequest_DoWork\n            AddHandler bwDataRequest(shtIndex).RunWorkerCompleted, AddressOf bwDataRequest_RunWorkerCompleted\n        Next shtIndex\n        Dim retry As _retry_attempts\n        With retry\n            .counter = 0\n            .previousPattern = -1\n            .pattern = 0\n            .errorMessage = \u0022\u0022\n        End With\n        retryAttempts = retry\n    End Sub\n\n    Private Sub bwDataRequest_DoWork(ByVal sender As System.Object, ByVal e As System.ComponentModel.DoWorkEventArgs)\n\n        \u0027 Find out the Index of the bWorker that called this DoWork (could be cleaner, I know)\n        Dim Y As Integer\n        Dim Index As Integer = Nothing\n        For Y = 0 To UBound(bwDataRequest)\n            If sender.Equals(bwDataRequest(Y)) Then\n                Index = Y\n                Exit For\n            End If\n        Next Y\n\n        Dim queue As _queue_data_struct\n        queue = e.Argument\n\n        Dim vars As New Dictionary(Of String, String)\n        vars = queue.vars\n\n        \u0027TODO translation need to be local\n        If Not System.Net.NetworkInformation.NetworkInterface.GetIsNetworkAvailable() Then\n            Threading.Thread.CurrentThread.CurrentUICulture = System.Globalization.CultureInfo.GetCultureInfo(state.currentLang)\n            e.Result = \u0022{\u0027error\u0027:true,\u0027message\u0027:\u0027\u0022 \u0026 My.Resources.strings.errorNoNetwork \u0026 \u0022\u0027}\u0022\n            Exit Sub\n        End If\n        If vars Is Nothing Then\n            e.Result = \u0022{\u0027error\u0027:true,\u0027message\u0027:\u0027missconfiguration vars\u0027}\u0022\n            Exit Sub\n        End If\n\n        If Not vars.ContainsKey(\u0022id\u0022) Then\n            vars.Add(\u0022id\u0022, state.userId)\n        End If\n        If Not vars.ContainsKey(\u0022pid\u0022) Then\n            Dim appId As New FingerPrint\n            vars.Add(\u0022pid\u0022, appId.Value)\n        End If\n        If Not vars.ContainsKey(\u0022language\u0022) Then\n            vars.Add(\u0022language\u0022, state.currentLang)\n        End If\n        If Not vars.ContainsKey(\u0022origin\u0022) Then\n            vars.Add(\u0022origin\u0022, state.softwareAccessMode)\n        End If\n\n        Dim serializer As New JavaScriptSerializer()\n        Dim json As String = serializer.Serialize(vars)\n        Dim encryption As New AesCipher(state)\n        Dim encrypted As String = HttpUtility.UrlEncode(encryption.encrypt(json))\n        Dim PostData = \u0022origin=\u0022 \u0026 state.softwareAccessMode \u0026 \u0022\u0026data=\u0022 \u0026 encrypted\n        Dim request As WebRequest = WebRequest.Create(url)\n        Dim responseFromServer As String = \u0022\u0022\n        Dim decrypted As String = \u0022\u0022\n\n        request.Method = \u0022POST\u0022\n        Dim byteArray As Byte() = Encoding.UTF8.GetBytes(PostData)\n        request.ContentType = \u0022application/x-www-form-urlencoded\u0022\n        request.Headers.Add(\u0022Authorization\u0022, state.ApiHttpHeaderToken \u0026 \u0022-\u0022 \u0026 state.softwareAccessMode)\n        request.ContentLength = byteArray.Length\n        Try\n            Dim dataStream As Stream = request.GetRequestStream()\n            dataStream.Write(byteArray, 0, byteArray.Length)\n            dataStream.Close()\n            Dim response As HttpWebResponse = CType(request.GetResponse(), HttpWebResponse)\n            dataStream = response.GetResponseStream()\n            Dim reader As New StreamReader(dataStream)\n            responseFromServer = reader.ReadToEnd()\n            reader.Close()\n            dataStream.Close()\n            response.Close()\n\n            If response.StatusCode = HttpStatusCode.Accepted Or response.StatusCode = 200 Then\n                If IsBase64String(responseFromServer) And Not responseFromServer.Equals(\u0022\u0022) Then\n                    decrypted = encryption.decrypt((responseFromServer)).Replace(\u0022\\\u0027\u0022, \u0022\u0027\u0022)\n                Else\n                    Threading.Thread.CurrentThread.CurrentUICulture = System.Globalization.CultureInfo.GetCultureInfo(state.currentLang)\n                    decrypted = \u0022{\u0027error\u0027:true,\u0027encrypted\u0027:false,\u0027message\u0027:\u0027\u0022 \u0026 My.Resources.strings.contactingCommServer \u0026 \u0022 |\u0022 \u0026 responseFromServer \u0026 \u0022|\u0027}\u0022\n                End If\n            Else\n                Threading.Thread.CurrentThread.CurrentUICulture = System.Globalization.CultureInfo.GetCultureInfo(state.currentLang)\n                decrypted = \u0022{\u0027error\u0027:true,\u0027message\u0027:\u0027\u0022 \u0026 My.Resources.strings.contactingCommServer \u0026 \u0022 (\u0022 \u0026 response.StatusCode \u0026 \u0022)\u0027, \u0027statuscode\u0027:\u0027\u0022 \u0026 response.StatusCode \u0026 \u0022\u0027}\u0022\n            End If\n        Catch ex As Exception\n            Threading.Thread.CurrentThread.CurrentUICulture = System.Globalization.CultureInfo.GetCultureInfo(state.currentLang)\n            decrypted = \u0022{\u0027error\u0027:true,\u0027message\u0027:\u0027\u0022 \u0026 My.Resources.strings.contactingCommServer \u0026 \u0022 (\u0022 \u0026 ex.Message.ToString.Replace(\u0022\u0027\u0022, \u0022\\\u0027\u0022) \u0026 \u0022)\u0027}\u0022\n        End Try\n\n        e.Result = decrypted.Replace(\u0022\\\u0027\u0022, \u0022\u0027\u0022)\n    End Sub\n\n    Private Sub bwDataRequest_RunWorkerCompleted(ByVal sender As Object, ByVal e As System.ComponentModel.RunWorkerCompletedEventArgs)\n        \u0027 Find out the Index of the bWorker that called this DoWork (could be cleaner, I know)\n        Dim Y As Integer\n        Dim Index As Integer = Nothing\n        Dim data As New _queue_data_struct\n\n        For Y = 0 To UBound(bwDataRequest)\n            If sender.Equals(bwDataRequest(Y)) Then\n                Index = Y\n                Exit For\n            End If\n        Next Y\n\n        If IsResponseOk(e.Result, \u0022statuscode\u0022) Then\n            data = New _queue_data_struct\n            data = queue(queueBWorker(Index))\n            data.status = 0 \u0027re queue the file\n            SyncLock queueLock\n                queue(queueBWorker(Index)) = data\n            End SyncLock\n            Dim errorMsg As String = GetMessage(e.Result)\n            Dim retry As _retry_attempts\n            With retry\n                .counter = retryAttempts.counter\n                .previousPattern = retryAttempts.previousPattern\n                .pattern = retryAttempts.pattern\n                .errorMessage = retryAttempts.errorMessage\n            End With\n            retry.errorMessage = If(retryAttempts.errorMessage.IndexOf(errorMsg) \u003E -1, retryAttempts.errorMessage, retryAttempts.errorMessage \u0026 System.Environment.NewLine \u0026 errorMsg)\n\n            retry.pattern = QueuesMultiHash(queue)\n            If retry.previousPattern.Equals(retry.pattern) Then\n                retry.counter \u002B= 1\n            Else\n                retry.counter = 1\n                retry.previousPattern = retryAttempts.pattern\n            End If\n\n            retryAttempts = retry\n            Exit Sub\n        End If\n\n        data = New _queue_data_struct\n        data = queue(queueBWorker(Index))\n        data.status = -1 \u0027completed sucessfully status\n        SyncLock queueLock\n            queue(queueBWorker(Index)) = data\n        End SyncLock\n\n        loadingCounter \u002B= 1\n        CompletionPercentage = (loadingCounter / queue.Count) * 100\n        statusMessage = \u0022Loading data from the cloud ...\u0022\n        RaiseEvent updateProgress(Me, queue(queueBWorker(Index)).misc)\n        RaiseEvent dataArrived(Me, e.Result, queue(queueBWorker(Index)).misc)\n    End Sub\nEnd Class\n\nThe Aoenlabs.Security is a class for sending POST data encrypted using standard encryption algorithms\n    ","\nYet another way of doing it:\nusing (HttpClient httpClient = new HttpClient())\nusing (MultipartFormDataContent form = new MultipartFormDataContent())\n{\n    form.Add(new StringContent(param1), \u0022param1\u0022);\n    form.Add(new StringContent(param2), \u0022param2\u0022);\n    using (HttpResponseMessage response = await httpClient.PostAsync(url, form))\n    {\n        response.EnsureSuccessStatusCode();\n        string res = await response.Content.ReadAsStringAsync();\n        return res;\n    }\n}\n\nThis way you can easily post a stream.\n    ","\nYou can also use Postman App for Windows, Linux or OSX. It is a complete web app \u0026 service test environment that involve all the request methods. You can find the latest version here.\n    ","\n                \n                @Lloyd: HttpWebResponse response = (HttpWebResponse)HttpWReq.GetResponse();\n                \n\u2013\u00A0Evan Mulawski\n                Mar 25 \u002711 at 17:44\n            ","\n                \n                Why do you even use ASCII? What if someone needs an xml with UTF-8?\n                \n\u2013\u00A0Gero\n                Aug 9 \u002713 at 11:04\n            ","\n                \n                I hate to beat a dead horse but you should do response.Result.Content.ReadAsStringAsync()\n                \n\u2013\u00A0David S.\n                Jan 25 \u002715 at 23:19\n            ","\n                \n                why did you say WebRequest and WebClient are legacy? MSDN doesn\u0027t say that they are deprecated or anything. Am I missing something?\n                \n\u2013\u00A0Hiep\n                Nov 18 \u002715 at 13:27\n            ","\n                \n                @Hiep: They are not deprecated, there are just newer (and is most cases, better and more flexible) ways of making web requests. In my opinion, for simple, non-critical operations, the old ways are just fine - but it\u0027s up to you and whatever you are most comfortable with.\n                \n\u2013\u00A0Evan Mulawski\n                Nov 18 \u002715 at 14:47\n            ","\n                \n                \u002B1 For regular stuff POST it is great to have such short piece of code.\n                \n\u2013\u00A0user_v\n                Sep 11 \u002713 at 6:15\n            ","\n                \n                Tim - If you right click the literal that can\u0027t be resolved, you will find a Resolve context menu, which contains actions to add the Using statements for you.  If the Resolve context menu doesn\u0027t show up, it means you need to add references first.\n                \n\u2013\u00A0Cameron Wilby\n                Nov 9 \u002713 at 2:45\n                        \n                            \n                        \n            ","\n                \n                I accepted your answer as good because it is much more simpler and clearer.\n                \n\u2013\u00A0Hooch\n                Jan 3 \u002714 at 22:09\n            ","\n                \n                I would like to add that the response variable for the POST request is a byte array. In order to get the string response you just do Encoding.ASCII.GetString(response); (using System.Text)\n                \n\u2013\u00A0Sindre\n                Jan 17 \u002714 at 19:52\n                        \n                            \n                        \n            ","\n                \n                Further, you can send a bit complex array $_POST[\u0027user\u0027] as: data[\u0022user[username]\u0022] = \u0022myUsername\u0022; data[\u0022user[password]\u0022] = \u0022myPassword\u0022;\n                \n\u2013\u00A0Bimal Poudel\n                Jul 17 \u002716 at 0:19\n                        \n                            \n                        \n            ","\n                \n                For some reason it didnt work when i was sending large amount of data\n                \n\u2013\u00A0AnKing\n                Jul 30 \u002714 at 14:48\n            ","\n                \n                @AnKing there is scope for that to be server limits rather than the client sending it.\n                \n\u2013\u00A0Epirocks\n                Oct 12 at 12:52\n            ","\n                \n                Add a reference to System.Web.Extensions\n                \n\u2013\u00A0SBF\n                Oct 11 at 14:22\n            ","\n                \n                Useful, thanks.  BTW It looks like the above technique for setting header-properties also works for  the older (deprecated?), HttpWebRequest approach. e.g. myReq.Headers[HttpRequestHeader.Authorization] = $\u0022Basic {credentials}\u0022;\n                \n\u2013\u00A0Zeek2\n                Jun 24 \u002719 at 15:04\n            ","\n                \n                That is quite bad. I don\u0027t recommend it as there is no error handling of any kind and debugging it is pain. Additionally there already is great answer to this question.\n                \n\u2013\u00A0Hooch\n                Sep 25 \u002717 at 11:24\n                        \n                            \n                        \n            ","\n                \n                @Hooch others might be interested in this type of answers, even if it\u0027s not the best one.\n                \n\u2013\u00A0Mitul\u00E1t b\u00E1ti\n                Dec 30 \u002717 at 16:11\n                        \n                            \n                        \n            ","\n                \n                Agreed, the only context in which this would be useful is code golfing and who golfs in C# ;)\n                \n\u2013\u00A0Extragorey\n                May 9 \u002719 at 3:58\n            ","\n                \n                I wrote this answer looking for http based logging solution, I guess some other people might find it usefull similarly.\n                \n\u2013\u00A0Ohad Cohen\n                Jun 16 at 10:45\n            "]},{"Id":"48dd6ca2-40ad-4f1e-b6f7-eefe5a00e6d5","QuestionId":3927,"Description":"What Are Some Good .NET Profilers?","Votes":374,"Views":315908,"Tags":["c#",".net","profiling","profiler"],"Discussions":["\nI have used JetBrains dotTrace and Redgate ANTS extensively. They are fairly similar in features and price. They both offer useful performance profiling and quite basic memory profiling.\n\ndotTrace integrates with Resharper, which is really convenient, as you can profile the performance of a unit test with one click from the IDE. However, dotTrace often seems to give spurious results (e.g. saying that a method took several years to run)\n\nI prefer the way that ANTS presents the profiling results. It shows you the source code and to the left of each line tells you how long it took to run. dotTrace just has a tree view.\n\nEQATEC profiler is quite basic and requires you to compile special instrumented versions of your assemblies which can then be run in the EQATEC profiler. It is, however, free.\n\nOverall I prefer ANTS for performance profiling, although if you use Resharper then the integration of dotTrace is a killer feature and means it beats ANTS in usability.\n\nThe free Microsoft CLR Profiler (.Net framework 2.0 / .Net Framework 4.0) is all you need for .NET memory profiling.\n\n2011 Update:\n\nThe Scitech memory profiler has quite a basic UI but lots of useful information, including some information on unmanaged memory which dotTrace and ANTS lack - you might find it useful if you are doing COM interop, but I have yet to find any profiler that makes COM memory issues easy to diagnose - you usually have to break out windbg.exe.\n\nThe ANTS profiler has come on in leaps and bounds in the last few years, and its memory profiler has some truly useful features which now pushed it ahead of dotTrace as a package in my estimation. I\u0027m lucky enough to have licenses for both, but if you are going to buy one .Net profiler for both performance and memory, make it ANTS.\n    ","\nOthers have covered performance profiling, but with regards to memory profiling \nI\u0027m currently evaluating both the Scitech .NET Memory Profiler 3.1 and ANTS Memory Profiler 5.1 (current versions as of September 2009). I tried the JetBrains one a year or two ago and it wasn\u0027t as good as ANTS (for memory profiling) so I haven\u0027t bothered this time. From reading the web sites it looks like it doesn\u0027t have the same memory profiling features as the other two.\n\nBoth ANTS and the Scitech memory profiler have features that the other doesn\u0027t, so which is best will depend upon your preferences. Generally speaking, the Scitech one provides more detailed information while the ANTS one is really incredible at identifying the leaking object. Overall, I prefer the ANTS one because it is so quick at identifying possible leaks.\n\nHere are the main the pros and cons of each from my experience:\n\nCommon Features of ANTS and Scitech .NET Memory Profiler\n\n\nReal-time analysis feature\nExcellent how-to videos on their web sites\nEasy to use\nReasonably performant (obviously slower than without the profiler attached, but not so much you become frustrated)\nShow instances of leaking objects\nBasically they both do the job pretty well\n\n\nANTS\n\n\nOne-click filters to find common leaks including: objects kept alive only by event handlers, objects that are disposed but still live and objects that are only being kept alive by a reference from a disposed object. This is probably the killer feature of ANTS - finding leaks is incredibly fast because of this. In my experience, the majority of leaks are caused by event handlers not being unhooked and ANTS just takes you straight to these objects. Awesome.\nObject retention graph. While the same info is available in Scitech, it\u0027s much easier to interpret in ANTS.\nShows size with children in addition to size of the object itself (but only when an instance is selected unfortunately, not in the overall class list).\nBetter integration to Visual Studio (right-click on graph to jump to file)\n\n\nScitech .NET Memory Profiler\n\n\nShows stack trace when object was allocated. This is really useful for objects that are allocated in lots of different places. With ANTS it is difficult to determine exactly where the leaked object was created.\nShows count of disposable objects that were not disposed. While not indicative of a leak, it does identify opportunities to fix this problem and improve your application performance as a result of faster garbage collection.\nMore detailed filtering options (several columns can be filtered independently).\nPresents info on total objects created (including those garbage collected). ANTS only shows \u0027live\u0027 object stats. This makes it easier to analyze and tune overall application performance (eg. identify where lots of objects being created unnecessarily that aren\u0027t necessarily leaking).\n\n\nBy way of summary, I think ANTS helps you find what\u0027s leaking faster while Scitech provides a bit more detail about your overall application memory performance and individual objects once you know what to look at (eg. stack trace on creation). If the stack trace and tracking of undisposed disposable objects was added to ANTS I wouldn\u0027t see the need to use anything else.\n    ","\nI recently discovered EQATEC Profiler http://www.eqatec.com/tools/profiler. It works with most .NET versions and on a bunch of platforms. It is easy to use and parts of it is free, even for commercial use.\n    ","\n[Full Disclosure]\n\nWhile not yet as full-featured as some of the other .NET memory profilers listed here, there is a new entry on the market called JustTrace. It\u0027s made by Telerik and it\u0027s primary goal is to make tracing/profiling easier and faster to do for all types of apps (web/Silverlight/desktop).\n\nIf you\u0027ve ever found profiling and optimization intimidating or slow with other tools, then JustTrace might be worth a look.\n    ","\nDon\u0027t forget nProf - a prefectly good, freeware profiler.\n    ","\nI have found dotTrace Profiler by JetBrains to be an excellent profiling tool for .NET and their ASP.NET mode is quality.\n    ","\nANTS Profiler. I haven\u0027t used many, but I don\u0027t really have any complaints about ANTS. The visualization is really helpful.\n    ","\nAutomatedQA AQTime for timing and SciTech MemProfiler for memory.\n    ","\nIf you\u0027re looking for something quick, easy, and free, http://code.google.com/p/slimtune/ seems to do the job fine.\n    ","\nI\u0027ve been working with JetBrains dotTrace for WinForms and Console Apps (not tested on ASP.net yet), and it works quite well:\n\nThey recently also added a \u0022Personal License\u0022 that is significantly cheaper than the corporate one. Still, if anyone else knows some cheaper or even free ones, I\u0027d like to hear as well :-)\n    ","\nDon\u0027t forget the awesome scitech .net memory profiler\n\nIt\u0027s great for tracking down why your .net app is running out of memory. \n    ","\nI would add that dotTrace\u0027s ability to diff memory and performance trace sessions is absolutely invaluable (ANTS may also have a memory diff feature, but I didn\u0027t see a performance diff).\n\nBeing able to run a profiling session before and after a bug fix or enhancement, then compare the results is incredibly valuable, especially with a mammoth legacy .NET application (as in my case) where performance was never a priority and where finding bottlenecks could be VERY tedious.  Doing a before-and-after diff allows you to see the change in call count for each method and the change in duration for each method.\n\nThis is helpful not only during code changes, but also if you have an application that uses a different database, say, for each client/customer.  If one customer complains of slowness, you can run a profiling session using their database and compare the results with a \u0022fast\u0022 database to determine which operations are contributing to the slowness.  Of course there are many database-side performance tools, but sometimes I really helps to see the performance metrics from the application side (since that\u0027s closer to what the user\u0027s actually seeing).\n\nBottom line: dotTrace works great, and the diff is invaluable.\n    ","\nAQTime is reasonable, but has a bit of a learning curve and isn\u0027t as easy to use as the built in one in Team Suite\n    ","\nIn the past, I\u2019ve used the profiler that ships with Visual Studio Team System.\n    ","\nThe current release of SharpDevelop (3.1.1) has a nice integrated profiler. It\u0027s quite fast, and integrates very well into the SharpDevelop IDE and its NUnit runner. Results are displayed in a flexible Tree/List style (use LINQ to create your own selection). Doubleclicking the displayed method jumps directly into the source code.\n    ","\nI\u0027ve worked with RedGate\u0027s profiler in the past. Did the job for me.\n    ","\nHaven\u0027t tried it myself, but maybe dotTrace? Their ReSharper application is certainly a good one. Maybe dotTrace is too :)\n    ","\nI doubt that the profiler which comes with Visual Studio Team System is the best profiler, but I have found it to be good enough on many occasions. What specifically do you need beyond what VS offers?\n\nEDIT: Unfortunately it is only available in VS Team System, but if you have access to that it is worth checking out. \n    ","\nThe latest version of ANTS memory profiler (I think it\u0027s 5) simply rocks!!! I was haunting a leak using WinDbg and SOS since it proved to be the best way before, then I tried ANTS and I got it in minutes. Really a wonderful piece of software.\n    ","\nI would like to add yourkit java and .net profiler, I love it for Java, haven\u0027t tried .NET version though.\n    ","\nUnfortunate most of the profilers I tried failed when used with tail calls, most notably ANTS. I just end up writing my own.  There is a simple implementation on CodeProject that you can use as a base.\n    ","\nIntel\u00AE  VTune\u2122 Performance Analyzer  for quick sampling\n    ","\nI must bring an amazing tool to your notice which i have used sometime back. AVICode Interceptor Studio. In my previous company we used this wonderful tool to profile the webapplication (This is supposed to be the single largest web application in the world and the largest civilian IT project ever done). The performance team did wonders with the help of this magnificent tool. It is a pain to configure it, but that is a one time activity and i would say it is worth the time. Checkout this page for details.\nThanks,\nJames\n    ","\nFor me SpeedTrace is the best tool on the market because it does not only help you to find bottlenecks inside your applications. It also helps you in troubleshooting scenarios to find out why your application was crashing, your setup did not install, your application hung up, your application performance is sometimes poor depending on the data input, e.g. to identify slow db transactions.\n    ","\nI\u0027ve been testing Telerik\u0027s JustTrace recently and although it is well away from a finished product the guys are going in the right direction.\n    ","\nIf Licensing is an issue you could try WINDBG for memory profiling\n    ","\nThe NuMega True Time profiler lives on in DevPartner Studio by Micro Focus. It provides line and method level detail for .NET apps requiring only PDBs, no source needed (but it helps.) It can discriminate between algorithmically heavy routines versus those with long I/O waits using our proprietary per thread kernel mode timing driver. Version 10.5 ships with new 64-process support on February 4, 2011. Shameless plug: I work on the DevPartner product line. Follow up at http://www.DevPartner.com for news of the 10.5 launch.\n\nDisclaimer: I am the Product Manager for DevPartner at Micro Focus.\n    ","\nI\u0027ve found plenty of problems in a big C# app using this.\n\nUsually the problem occurs during startup or shutdown as plugins are being loaded, and big data structures are being created, destroyed, serialized, or deserialized. Often they are created and initialized more than once, and change handlers get added multiple times, further compounding the problem.\n\nIn cases like this, the program can be so sluggish that only 2 samples are sufficient to pinpoint the guilty method / function / property call sites.\n    ","\nWe selected YourKit Profiler for .NET in my company as it was the best value (price vs. feature). For a small company that wants to have flexible licensing (floating licenses) it was a perfect choice - ANTS was developer seat locket at the time.\n\nAlso, it provided us with the ability to attach to the running process which was not possible with dotTrace. Beware though that attaching is not the best option as everything .NET will slow down, but this was the only way to profile .NET applications started by other processes.\nFeature wise, ANTS and dotTrace were better - but in the end YourKit was good enough.\n    ","\nIf you\u0027re on ASP.NET MVC, you can try MVCMiniProfiler (http://benjii.me/2011/07/using-the-mvc-mini-profiler-with-entity-framework/)\n    ","\n                \n                The profiler in Visual Studio is also really easy to use, Visual Studio 2010 is in Beta and hence is free also.  There have been multiple enhancements in 2010 for viewing contention and concurrency. try it...\n                \n\u2013\u00A0Rick\n                Sep 25 \u002709 at 3:19\n            ","\n                \n                @Rick Unfortunately the profiler of Visual Studio is not present in Professional Edition...\n                \n\u2013\u00A0Drake\n                Oct 26 \u002709 at 9:58\n            ","\n                \n                I strongly disagree about the CLR profiler being all you need for .NET memory profiling, although it\u0027s possibly true if you place no value on your time. See my answer below for a summary of the best couple of memory profilers - they will help you find memory leaks and potential issues much faster.\n                \n\u2013\u00A0Ben Robbins\n                Jan 13 \u002710 at 1:01\n            ","\n                \n                Current releases of the EQUATEC profiler are not free anymore.\n                \n\u2013\u00A0David Schmitt\n                Feb 8 \u002710 at 13:14\n            ","\n                \n                Seems like EQATEC Profiler has become free for .NET (full framework) again\n                \n\u2013\u00A0soren.enemaerke\n                Aug 17 \u002710 at 19:46\n            ","\n                \n                The 4.0 version of .NET Memory Profiler (now in preview) now has a graph view. This was the one feature I liked in the ANTS profiler that Scitech one didn\u0027t have (in 3.1/3.5).\n                \n\u2013\u00A0cplotts\n                Apr 14 \u002711 at 21:50\n            ","\n                \n                Fails on tail calls too :(  Reported bug.\n                \n\u2013\u00A0leppie\n                Jul 16 \u002709 at 17:44\n            ","\n                \n                This one is only free for non-commercial use.\n                \n\u2013\u00A0Jon Seigel\n                Jan 25 \u002710 at 14:33\n                        \n                            \n                        \n            ","\n                \n                It was completely free back in Aug \u002708 when TrolleFar wrote his answer. Now, as Jon says, it is only free for non-commercial use.\n                \n\u2013\u00A0Richard Flamsholt\n                Mar 21 \u002710 at 22:41\n            ","\n                \n                Turns out that they changed the license terms again. Parts of it is free for commercial use again.\n                \n\u2013\u00A0TrolleFar\n                Apr 22 \u002710 at 9:33\n            ","\n                \n                As of FEB2011 normal .NET edition for self/commercial is free. This tool is nice because it works on client/server model and can profile/by-pass repeated boundaries (e.g. Native-\u003ECOM-\u003ENET-\u003ECOM-\u003ENET can be profiled). The UI is rather awful though :-)\n                \n\u2013\u00A0user166390\n                Feb 3 \u002711 at 0:56\n                        \n                            \n                        \n            ","\n                \n                When I go to download it and try it out, Telerik wants me to \u0022register\u0022 and \u0022create an account.\u0022  And all those newsletter subscription buttons are checkmarked by default.  I\u0027d be happy to give JustTrace a try, but not if Telerik makes it this difficult.\n                \n\u2013\u00A0Ryan Lundy\n                Sep 20 \u002711 at 18:32\n                        \n                            \n                        \n            ","\n                \n                Thanks for trying, Kyralessa. We know that process can be improved. We\u0027re working on that right now. We hope to remove those hurdles soon. For now, just uncheck the boxes and in 2 min you can have an account and free JustTrace download. Sorry for the short-term trouble. -T\n                \n\u2013\u00A0Todd\n                Sep 20 \u002711 at 21:24\n            ","\n                \n                post back and let me know when I can download without creating an account, and I\u0027ll give it a try.\n                \n\u2013\u00A0Ryan Lundy\n                Sep 27 \u002711 at 19:56\n            ","\n                \n                Update: Today I was able to download using the link in the answer without having to create an account.\n                \n\u2013\u00A0Ryan Lundy\n                Jan 1 \u002712 at 7:02\n            ","\n                \n                Looks kind of abandoned... only an alpha release from 2006 :-(\n                \n\u2013\u00A0Mauricio Scheffer\n                May 12 \u002709 at 2:25\n            ","\n                \n                Worked great for me.  It\u0027s now a Google Code project.  Had a release in July 2009.\n                \n\u2013\u00A0User1\n                Mar 8 \u002710 at 22:48\n            ","\n                \n                The nProf page now states: NProf is not actively developed anymore. If you are looking for an open source .NET profiler, take a look at SlimTune (code.google.com/p/slimtune)\n                \n\u2013\u00A0Richard Ev\n                Apr 26 \u002711 at 17:12\n            ","\n                \n                MemProfiler has save our team when we had a memory leak.  I tried other tools, but no other tool gave the same detail.\n                \n\u2013\u00A0Greg Ogle\n                Sep 15 \u002708 at 0:26\n            ","\n                \n                Very nice tool. Easy to use and allows you to navigate through your object graph. I espacially like the \u0027realtime\u0027 memory tracking. It shows you how your object counts develop during the runtime of the application.\n                \n\u2013\u00A0lowglider\n                Jan 20 \u002709 at 9:00\n            ","\n                \n                I\u0027ve used dotTrace and can recommend it.\n                \n\u2013\u00A0Jon Skeet\n                Mar 4 \u002709 at 22:21\n            ","\n                \n                I was talking about the one in VS2008, but it may not be available in all version (I\u0027m using VSTS). From the PDC2008 videos it seems like the profiler will improve a lot in VS2010.\n                \n\u2013\u00A0Brian Rasmussen\n                Mar 4 \u002709 at 22:25\n            ","\n                \n                That profiler is only available with the Team Systems versions of Visual Studio.\n                \n\u2013\u00A0Chris Brandsma\n                Mar 4 \u002709 at 22:28\n            ","\n                \n                Visual Studio Team System (Developer Edition) has a profiler. See \u003Cmicrosoft.com/visualstudio/en-us/products/teamsystem/\u2026\u003E.\n                \n\u2013\u00A0gix\n                Mar 4 \u002709 at 22:29\n            ","\n                \n                Visual Studio has a profiler since VS 2005. It is only available with Team System. That is, in fact, the reason I use team system (at work I have professional). It is a very good profiler, in my opinion.\n                \n\u2013\u00A0configurator\n                Mar 4 \u002709 at 22:34\n            ","\n                \n                It\u0027s a fine profiler, but it\u0027s not quite up to the standard of the new version of ANTS.\n                \n\u2013\u00A0mqp\n                Mar 9 \u002709 at 13:38\n            ","\n                \n                @utility73 - really great line-by-line CPU cost breakdown in vtune -- which is exactly what I was hunting for today. Thanks for suggesting this.\n                \n\u2013\u00A0Sichbo\n                Feb 26 \u002711 at 1:01\n            ","\n                \n                welcome to SO. You will need to disclose any relationship to DevPartner or you will be considered a spammer and dealt with as such. I see you\u0027ve answered a number of profiling questions...\n                \n\u2013\u00A0John Saunders\n                Jan 31 \u002711 at 4:07\n            ","\n                \n                Starting from January 2012, YourKit have raised the pricing for the YourKit profiler. Therefore, the price advantage may no longer be valid.\n                \n\u2013\u00A0user128300\n                Jan 19 \u002712 at 15:32\n                        \n                            \n                        \n            "]},{"Id":"2e18a1c6-ae93-4708-b6b6-b22f0811360d","QuestionId":129389,"Description":"How do you do a deep copy of an object in .NET? [duplicate]","Votes":610,"Views":478782,"Tags":["c#",".net","serialization","clone"],"Discussions":["\nI\u0027ve seen a few different approaches to this, but I use a generic utility method as such:    \n\npublic static T DeepClone\u003CT\u003E(this T obj)\n{\n using (var ms = new MemoryStream())\n {\n   var formatter = new BinaryFormatter();\n   formatter.Serialize(ms, obj);\n   ms.Position = 0;\n\n   return (T) formatter.Deserialize(ms);\n }\n}\n\n\nNotes:\n\n\nYour class MUST be marked as [Serializable] for this to work.  \nYour source file must include the following code:\n\nusing System.Runtime.Serialization.Formatters.Binary;\nusing System.IO;\n\n\n    ","\nI wrote a deep object copy extension method, based on recursive \u0022MemberwiseClone\u0022. It is fast (three times faster than BinaryFormatter), and it works with any object. You don\u0027t need a default constructor or serializable attributes.\n\nSource code:\n\nusing System.Collections.Generic;\nusing System.Reflection;\nusing System.ArrayExtensions;\n\nnamespace System\n{\n    public static class ObjectExtensions\n    {\n        private static readonly MethodInfo CloneMethod = typeof(Object).GetMethod(\u0022MemberwiseClone\u0022, BindingFlags.NonPublic | BindingFlags.Instance);\n\n        public static bool IsPrimitive(this Type type)\n        {\n            if (type == typeof(String)) return true;\n            return (type.IsValueType \u0026 type.IsPrimitive);\n        }\n\n        public static Object Copy(this Object originalObject)\n        {\n            return InternalCopy(originalObject, new Dictionary\u003CObject, Object\u003E(new ReferenceEqualityComparer()));\n        }\n        private static Object InternalCopy(Object originalObject, IDictionary\u003CObject, Object\u003E visited)\n        {\n            if (originalObject == null) return null;\n            var typeToReflect = originalObject.GetType();\n            if (IsPrimitive(typeToReflect)) return originalObject;\n            if (visited.ContainsKey(originalObject)) return visited[originalObject];\n            if (typeof(Delegate).IsAssignableFrom(typeToReflect)) return null;\n            var cloneObject = CloneMethod.Invoke(originalObject, null);\n            if (typeToReflect.IsArray)\n            {\n                var arrayType = typeToReflect.GetElementType();\n                if (IsPrimitive(arrayType) == false)\n                {\n                    Array clonedArray = (Array)cloneObject;\n                    clonedArray.ForEach((array, indices) =\u003E array.SetValue(InternalCopy(clonedArray.GetValue(indices), visited), indices));\n                }\n\n            }\n            visited.Add(originalObject, cloneObject);\n            CopyFields(originalObject, visited, cloneObject, typeToReflect);\n            RecursiveCopyBaseTypePrivateFields(originalObject, visited, cloneObject, typeToReflect);\n            return cloneObject;\n        }\n\n        private static void RecursiveCopyBaseTypePrivateFields(object originalObject, IDictionary\u003Cobject, object\u003E visited, object cloneObject, Type typeToReflect)\n        {\n            if (typeToReflect.BaseType != null)\n            {\n                RecursiveCopyBaseTypePrivateFields(originalObject, visited, cloneObject, typeToReflect.BaseType);\n                CopyFields(originalObject, visited, cloneObject, typeToReflect.BaseType, BindingFlags.Instance | BindingFlags.NonPublic, info =\u003E info.IsPrivate);\n            }\n        }\n\n        private static void CopyFields(object originalObject, IDictionary\u003Cobject, object\u003E visited, object cloneObject, Type typeToReflect, BindingFlags bindingFlags = BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.FlattenHierarchy, Func\u003CFieldInfo, bool\u003E filter = null)\n        {\n            foreach (FieldInfo fieldInfo in typeToReflect.GetFields(bindingFlags))\n            {\n                if (filter != null \u0026\u0026 filter(fieldInfo) == false) continue;\n                if (IsPrimitive(fieldInfo.FieldType)) continue;\n                var originalFieldValue = fieldInfo.GetValue(originalObject);\n                var clonedFieldValue = InternalCopy(originalFieldValue, visited);\n                fieldInfo.SetValue(cloneObject, clonedFieldValue);\n            }\n        }\n        public static T Copy\u003CT\u003E(this T original)\n        {\n            return (T)Copy((Object)original);\n        }\n    }\n\n    public class ReferenceEqualityComparer : EqualityComparer\u003CObject\u003E\n    {\n        public override bool Equals(object x, object y)\n        {\n            return ReferenceEquals(x, y);\n        }\n        public override int GetHashCode(object obj)\n        {\n            if (obj == null) return 0;\n            return obj.GetHashCode();\n        }\n    }\n\n    namespace ArrayExtensions\n    {\n        public static class ArrayExtensions\n        {\n            public static void ForEach(this Array array, Action\u003CArray, int[]\u003E action)\n            {\n                if (array.LongLength == 0) return;\n                ArrayTraverse walker = new ArrayTraverse(array);\n                do action(array, walker.Position);\n                while (walker.Step());\n            }\n        }\n\n        internal class ArrayTraverse\n        {\n            public int[] Position;\n            private int[] maxLengths;\n\n            public ArrayTraverse(Array array)\n            {\n                maxLengths = new int[array.Rank];\n                for (int i = 0; i \u003C array.Rank; \u002B\u002Bi)\n                {\n                    maxLengths[i] = array.GetLength(i) - 1;\n                }\n                Position = new int[array.Rank];\n            }\n\n            public bool Step()\n            {\n                for (int i = 0; i \u003C Position.Length; \u002B\u002Bi)\n                {\n                    if (Position[i] \u003C maxLengths[i])\n                    {\n                        Position[i]\u002B\u002B;\n                        for (int j = 0; j \u003C i; j\u002B\u002B)\n                        {\n                            Position[j] = 0;\n                        }\n                        return true;\n                    }\n                }\n                return false;\n            }\n        }\n    }\n\n}\n\n    ","\nBuilding on Kilhoffer\u0027s solution...\n\nWith C# 3.0 you can create an extension method as follows:\n\npublic static class ExtensionMethods\n{\n    // Deep clone\n    public static T DeepClone\u003CT\u003E(this T a)\n    {\n        using (MemoryStream stream = new MemoryStream())\n        {\n            BinaryFormatter formatter = new BinaryFormatter();\n            formatter.Serialize(stream, a);\n            stream.Position = 0;\n            return (T) formatter.Deserialize(stream);\n        }\n    }\n}\n\n\nwhich extends any class that\u0027s been marked as [Serializable] with a DeepClone method\n\nMyClass copy = obj.DeepClone();\n\n    ","\nYou can use Nested MemberwiseClone to do a deep copy. Its almost the same speed as copying a value struct, and its an order of magnitude faster than (a) reflection or (b) serialization (as described in other answers on this page).\n\nNote that if you use Nested MemberwiseClone for a deep copy, you have to manually implement a ShallowCopy for each nested level in the class, and a DeepCopy which calls all said ShallowCopy methods to create a complete clone. This is simple: only a few lines in total, see the demo code below.\n\nHere is the output of the code showing the relative performance difference (4.77 seconds for deep nested MemberwiseCopy vs. 39.93 seconds for Serialization). Using nested MemberwiseCopy is almost as fast as copying a struct, and copying a struct is pretty darn close to the theoretical maximum speed .NET is capable of, which is probably quite close to the speed of the same thing in C or C\u002B\u002B (but would have to run some equivalent benchmarks to check this claim).\n\n    Demo of shallow and deep copy, using classes and MemberwiseClone:\n      Create Bob\n        Bob.Age=30, Bob.Purchase.Description=Lamborghini\n      Clone Bob \u003E\u003E BobsSon\n      Adjust BobsSon details\n        BobsSon.Age=2, BobsSon.Purchase.Description=Toy car\n      Proof of deep copy: If BobsSon is a true clone, then adjusting BobsSon details will not affect Bob:\n        Bob.Age=30, Bob.Purchase.Description=Lamborghini\n      Elapsed time: 00:00:04.7795670,30000000\n    Demo of shallow and deep copy, using structs and value copying:\n      Create Bob\n        Bob.Age=30, Bob.Purchase.Description=Lamborghini\n      Clone Bob \u003E\u003E BobsSon\n      Adjust BobsSon details:\n        BobsSon.Age=2, BobsSon.Purchase.Description=Toy car\n      Proof of deep copy: If BobsSon is a true clone, then adjusting BobsSon details will not affect Bob:\n        Bob.Age=30, Bob.Purchase.Description=Lamborghini\n      Elapsed time: 00:00:01.0875454,30000000\n    Demo of deep copy, using class and serialize/deserialize:\n      Elapsed time: 00:00:39.9339425,30000000\n\n\nTo understand how to do a deep copy using MemberwiseCopy, here is the demo project:\n\n// Nested MemberwiseClone example. \n// Added to demo how to deep copy a reference class.\n[Serializable] // Not required if using MemberwiseClone, only used for speed comparison using serialization.\npublic class Person\n{\n    public Person(int age, string description)\n    {\n        this.Age = age;\n        this.Purchase.Description = description;\n    }\n    [Serializable] // Not required if using MemberwiseClone\n    public class PurchaseType\n    {\n        public string Description;\n        public PurchaseType ShallowCopy()\n        {\n            return (PurchaseType)this.MemberwiseClone();\n        }\n    }\n    public PurchaseType Purchase = new PurchaseType();\n    public int Age;\n    // Add this if using nested MemberwiseClone.\n    // This is a class, which is a reference type, so cloning is more difficult.\n    public Person ShallowCopy()\n    {\n        return (Person)this.MemberwiseClone();\n    }\n    // Add this if using nested MemberwiseClone.\n    // This is a class, which is a reference type, so cloning is more difficult.\n    public Person DeepCopy()\n    {\n            // Clone the root ...\n        Person other = (Person) this.MemberwiseClone();\n            // ... then clone the nested class.\n        other.Purchase = this.Purchase.ShallowCopy();\n        return other;\n    }\n}\n// Added to demo how to copy a value struct (this is easy - a deep copy happens by default)\npublic struct PersonStruct\n{\n    public PersonStruct(int age, string description)\n    {\n        this.Age = age;\n        this.Purchase.Description = description;\n    }\n    public struct PurchaseType\n    {\n        public string Description;\n    }\n    public PurchaseType Purchase;\n    public int Age;\n    // This is a struct, which is a value type, so everything is a clone by default.\n    public PersonStruct ShallowCopy()\n    {\n        return (PersonStruct)this;\n    }\n    // This is a struct, which is a value type, so everything is a clone by default.\n    public PersonStruct DeepCopy()\n    {\n        return (PersonStruct)this;\n    }\n}\n// Added only for a speed comparison.\npublic class MyDeepCopy\n{\n    public static T DeepCopy\u003CT\u003E(T obj)\n    {\n        object result = null;\n        using (var ms = new MemoryStream())\n        {\n            var formatter = new BinaryFormatter();\n            formatter.Serialize(ms, obj);\n            ms.Position = 0;\n            result = (T)formatter.Deserialize(ms);\n            ms.Close();\n        }\n        return (T)result;\n    }\n}\n\n\nThen, call the demo from main:\n\n    void MyMain(string[] args)\n    {\n        {\n            Console.Write(\u0022Demo of shallow and deep copy, using classes and MemberwiseCopy:\\n\u0022);\n            var Bob = new Person(30, \u0022Lamborghini\u0022);\n            Console.Write(\u0022  Create Bob\\n\u0022);\n            Console.Write(\u0022    Bob.Age={0}, Bob.Purchase.Description={1}\\n\u0022, Bob.Age, Bob.Purchase.Description);\n            Console.Write(\u0022  Clone Bob \u003E\u003E BobsSon\\n\u0022);\n            var BobsSon = Bob.DeepCopy();\n            Console.Write(\u0022  Adjust BobsSon details\\n\u0022);\n            BobsSon.Age = 2;\n            BobsSon.Purchase.Description = \u0022Toy car\u0022;\n            Console.Write(\u0022    BobsSon.Age={0}, BobsSon.Purchase.Description={1}\\n\u0022, BobsSon.Age, BobsSon.Purchase.Description);\n            Console.Write(\u0022  Proof of deep copy: If BobsSon is a true clone, then adjusting BobsSon details will not affect Bob:\\n\u0022);\n            Console.Write(\u0022    Bob.Age={0}, Bob.Purchase.Description={1}\\n\u0022, Bob.Age, Bob.Purchase.Description);\n            Debug.Assert(Bob.Age == 30);\n            Debug.Assert(Bob.Purchase.Description == \u0022Lamborghini\u0022);\n            var sw = new Stopwatch();\n            sw.Start();\n            int total = 0;\n            for (int i = 0; i \u003C 100000; i\u002B\u002B)\n            {\n                var n = Bob.DeepCopy();\n                total \u002B= n.Age;\n            }\n            Console.Write(\u0022  Elapsed time: {0},{1}\\n\u0022, sw.Elapsed, total);\n        }\n        {               \n            Console.Write(\u0022Demo of shallow and deep copy, using structs:\\n\u0022);\n            var Bob = new PersonStruct(30, \u0022Lamborghini\u0022);\n            Console.Write(\u0022  Create Bob\\n\u0022);\n            Console.Write(\u0022    Bob.Age={0}, Bob.Purchase.Description={1}\\n\u0022, Bob.Age, Bob.Purchase.Description);\n            Console.Write(\u0022  Clone Bob \u003E\u003E BobsSon\\n\u0022);\n            var BobsSon = Bob.DeepCopy();\n            Console.Write(\u0022  Adjust BobsSon details:\\n\u0022);\n            BobsSon.Age = 2;\n            BobsSon.Purchase.Description = \u0022Toy car\u0022;\n            Console.Write(\u0022    BobsSon.Age={0}, BobsSon.Purchase.Description={1}\\n\u0022, BobsSon.Age, BobsSon.Purchase.Description);\n            Console.Write(\u0022  Proof of deep copy: If BobsSon is a true clone, then adjusting BobsSon details will not affect Bob:\\n\u0022);\n            Console.Write(\u0022    Bob.Age={0}, Bob.Purchase.Description={1}\\n\u0022, Bob.Age, Bob.Purchase.Description);                \n            Debug.Assert(Bob.Age == 30);\n            Debug.Assert(Bob.Purchase.Description == \u0022Lamborghini\u0022);\n            var sw = new Stopwatch();\n            sw.Start();\n            int total = 0;\n            for (int i = 0; i \u003C 100000; i\u002B\u002B)\n            {\n                var n = Bob.DeepCopy();\n                total \u002B= n.Age;\n            }\n            Console.Write(\u0022  Elapsed time: {0},{1}\\n\u0022, sw.Elapsed, total);\n        }\n        {\n            Console.Write(\u0022Demo of deep copy, using class and serialize/deserialize:\\n\u0022);\n            int total = 0;\n            var sw = new Stopwatch();\n            sw.Start();\n            var Bob = new Person(30, \u0022Lamborghini\u0022);\n            for (int i = 0; i \u003C 100000; i\u002B\u002B)\n            {\n                var BobsSon = MyDeepCopy.DeepCopy\u003CPerson\u003E(Bob);\n                total \u002B= BobsSon.Age;\n            }\n            Console.Write(\u0022  Elapsed time: {0},{1}\\n\u0022, sw.Elapsed, total);\n        }\n        Console.ReadKey();\n    }\n\n\nAgain, note that if you use Nested MemberwiseClone for a deep copy, you have to manually implement a ShallowCopy for each nested level in the class, and a DeepCopy which calls all said ShallowCopy methods to create a complete clone. This is simple: only a few lines in total, see the demo code above.\n\nNote that when it comes to cloning an object, there is is a big difference between a \u0022struct\u0022 and a \u0022class\u0022:\n\n\nIf you have a \u0022struct\u0022, it\u0027s a value type so you can just copy it, and the contents will be cloned.\nIf you have a \u0022class\u0022, it\u0027s a reference type, so if you copy it, all you are doing is copying the pointer to it. To create a true clone, you have to be more creative, and use a method which creates another copy of the original object in memory.\nCloning objects incorrectly can lead to very difficult-to-pin-down bugs. In production code, I tend to implement a checksum to double check that the object has been cloned properly, and hasn\u0027t been corrupted by another reference to it. This checksum can be switched off in Release mode.\nI find this method quite useful: often, you only want to clone parts of the object, not the entire thing. It\u0027s also essential for any use case where you are modifying objects, then feeding the modified copies into a queue.\n\n\nUpdate\n\nIt\u0027s probably possible to use reflection to recursively walk through the object graph to do a deep copy. WCF uses this technique to serialize an object, including all of its children. The trick is to annotate all of the child objects with an attribute that makes it discoverable. You might lose some performance benefits, however.\n\nUpdate\n\nQuote on independent speed test (see comments below):\n\n\n  I\u0027ve run my own speed test using Neil\u0027s serialize/deserialize\n  extension method, Contango\u0027s Nested MemberwiseClone, Alex Burtsev\u0027s\n  reflection-based extension method and AutoMapper, 1 million times\n  each. Serialize-deserialize was slowest, taking 15.7 seconds. Then\n  came AutoMapper, taking 10.1 seconds. Much faster was the\n  reflection-based method which took 2.4 seconds. By far the fastest was\n  Nested MemberwiseClone, taking 0.1 seconds. Comes down to performance\n  versus hassle of adding code to each class to clone it. If performance\n  isn\u0027t an issue go with Alex Burtsev\u0027s method. \n  \u2013 Simon Tewsi\n\n    ","\nI believe that the BinaryFormatter approach is relatively slow (which came as a surprise to me!). You might be able to use ProtoBuf .NET for some objects if they meet the requirements of ProtoBuf. From the ProtoBuf Getting Started page (http://code.google.com/p/protobuf-net/wiki/GettingStarted):\n\nNotes on types supported:\n\nCustom classes that:\n\n\nAre marked as data-contract\nHave a parameterless constructor\nFor Silverlight: are public\nMany common primitives, etc.\nSingle dimension arrays: T[]\nList\u003CT\u003E / IList\u003CT\u003E\nDictionary\u003CTKey, TValue\u003E / IDictionary\u003CTKey, TValue\u003E\nany type which implements IEnumerable\u003CT\u003E and has an Add(T) method\n\n\nThe code assumes that types will be mutable around the elected members. Accordingly, custom structs are not supported, since they should be immutable.\n\nIf your class meets these requirements you could try:\n\npublic static void deepCopy\u003CT\u003E(ref T object2Copy, ref T objectCopy)\n{\n    using (var stream = new MemoryStream())\n    {\n        Serializer.Serialize(stream, object2Copy);\n        stream.Position = 0;\n        objectCopy = Serializer.Deserialize\u003CT\u003E(stream);\n    }\n}\n\n\nWhich is VERY fast indeed...\n\nEdit:\n\nHere is working code for a modification of this (tested on .NET 4.6). It uses System.Xml.Serialization and System.IO. No need to mark classes as serializable.\n\npublic void DeepCopy\u003CT\u003E(ref T object2Copy, ref T objectCopy)\n{\n    using (var stream = new MemoryStream())\n    {\n        var serializer = new XS.XmlSerializer(typeof(T));\n\n        serializer.Serialize(stream, object2Copy);\n        stream.Position = 0;\n        objectCopy = (T)serializer.Deserialize(stream);\n    }\n}\n\n    ","\nYou can try this\n\n    public static object DeepCopy(object obj)\n    {\n        if (obj == null)\n            return null;\n        Type type = obj.GetType();\n\n        if (type.IsValueType || type == typeof(string))\n        {\n            return obj;\n        }\n        else if (type.IsArray)\n        {\n            Type elementType = Type.GetType(\n                 type.FullName.Replace(\u0022[]\u0022, string.Empty));\n            var array = obj as Array;\n            Array copied = Array.CreateInstance(elementType, array.Length);\n            for (int i = 0; i \u003C array.Length; i\u002B\u002B)\n            {\n                copied.SetValue(DeepCopy(array.GetValue(i)), i);\n            }\n            return Convert.ChangeType(copied, obj.GetType());\n        }\n        else if (type.IsClass)\n        {\n\n            object toret = Activator.CreateInstance(obj.GetType());\n            FieldInfo[] fields = type.GetFields(BindingFlags.Public |\n                        BindingFlags.NonPublic | BindingFlags.Instance);\n            foreach (FieldInfo field in fields)\n            {\n                object fieldValue = field.GetValue(obj);\n                if (fieldValue == null)\n                    continue;\n                field.SetValue(toret, DeepCopy(fieldValue));\n            }\n            return toret;\n        }\n        else\n            throw new ArgumentException(\u0022Unknown type\u0022);\n    }\n\n\nThanks to DetoX83 article on code project.\n    ","\nMaybe you only need a shallow copy, in that case use Object.MemberWiseClone().\n\nThere are good recommendations in the documentation for MemberWiseClone() for strategies to deep copy: -\n\nhttp://msdn.microsoft.com/en-us/library/system.object.memberwiseclone.aspx\n    ","\nThe best way is:\n\n    public interface IDeepClonable\u003CT\u003E where T : class\n    {\n        T DeepClone();\n    }\n\n    public class MyObj : IDeepClonable\u003CMyObj\u003E\n    {\n        public MyObj Clone()\n        {\n            var myObj = new MyObj();\n            myObj._field1 = _field1;//value type\n            myObj._field2 = _field2;//value type\n            myObj._field3 = _field3;//value type\n\n            if (_child != null)\n            {\n                myObj._child = _child.DeepClone(); //reference type .DeepClone() that does the same\n            }\n\n            int len = _array.Length;\n            myObj._array = new MyObj[len]; // array / collection\n            for (int i = 0; i \u003C len; i\u002B\u002B)\n            {\n                myObj._array[i] = _array[i];\n            }\n\n            return myObj;\n        }\n\n        private bool _field1;\n        public bool Field1\n        {\n            get { return _field1; }\n            set { _field1 = value; }\n        }\n\n        private int _field2;\n        public int Property2\n        {\n            get { return _field2; }\n            set { _field2 = value; }\n        }\n\n        private string _field3;\n        public string Property3\n        {\n            get { return _field3; }\n            set { _field3 = value; }\n        }\n\n        private MyObj _child;\n        private MyObj Child\n        {\n            get { return _child; }\n            set { _child = value; }\n        }\n\n        private MyObj[] _array = new MyObj[4];\n    }\n\n    ","\n    public static object CopyObject(object input)\n    {\n        if (input != null)\n        {\n            object result = Activator.CreateInstance(input.GetType());\n            foreach (FieldInfo field in input.GetType().GetFields(Consts.AppConsts.FullBindingList))\n            {\n                if (field.FieldType.GetInterface(\u0022IList\u0022, false) == null)\n                {\n                    field.SetValue(result, field.GetValue(input));\n                }\n                else\n                {\n                    IList listObject = (IList)field.GetValue(result);\n                    if (listObject != null)\n                    {\n                        foreach (object item in ((IList)field.GetValue(input)))\n                        {\n                            listObject.Add(CopyObject(item));\n                        }\n                    }\n                }\n            }\n            return result;\n        }\n        else\n        {\n            return null;\n        }\n    }\n\n\nThis way is a few times faster than BinarySerialization AND this does not require the [Serializable] attribute.\n    ","\nThe MSDN documentation seems to hint that Clone should perform a deep copy, but it is never explicitly stated:\n\nThe ICloneable interface contains one member, Clone, which is intended to support cloning beyond that supplied by MemberWiseClone\u2026 The MemberwiseClone method creates a shallow copy\u2026\n\nYou can find my post helpful. \n\nhttp://pragmaticcoding.com/index.php/cloning-objects-in-c/\n    ","\nI have a simpler idea. Use LINQ with a new selection.\n\npublic class Fruit\n{\n  public string Name {get; set;}\n  public int SeedCount {get; set;}\n}\n\nvoid SomeMethod()\n{\n  List\u003CFruit\u003E originalFruits = new List\u003CFruit\u003E();\n  originalFruits.Add(new Fruit {Name=\u0022Apple\u0022, SeedCount=10});\n  originalFruits.Add(new Fruit {Name=\u0022Banana\u0022, SeedCount=0});\n\n  //Deep Copy\n  List\u003CFruit\u003E deepCopiedFruits = from f in originalFruits\n              select new Fruit {Name=f.Name, SeedCount=f.SeedCount};\n}\n\n    ","\n                \n                What happen if the object have event, Do they lost everything because of the serialization?\n                \n\u2013\u00A0Patrick Desjardins\n                Sep 24 \u002708 at 19:56\n            ","\n                \n                Event subscribes are included into serialization graph, since BinaryFormatter uses fields via reflection, and events are just fields of delegate types plus add/remove/invoke methods. You can use [field: NonSerialized] on event to avoid this.\n                \n\u2013\u00A0Ilya Ryzhenkov\n                Sep 24 \u002708 at 20:16\n            ","\n                \n                @Sean87: above the class declaration, add [Serializable]. so [Serializable]public class Foo { } will make Foo marked as serializable.\n                \n\u2013\u00A0Dan Atkinson\n                Aug 3 \u002711 at 22:51\n            ","\n                \n                Recursive MemberwiseClone will do deep copy too, it works 3 times faster then BinaryFormatter, doesn\u0027t require default constructor or any attributes. See my answer: stackoverflow.com/a/11308879/235715\n                \n\u2013\u00A0Alex Burtsev\n                Jul 12 \u002712 at 4:19\n            ","\n                \n                This is creating a curious exception \u0022assembly not found\u0022 while using this Utility code within the UserControlTestContainer. Its really weird because the assembly is loaded...\n                \n\u2013\u00A0v.oddou\n                May 21 \u002713 at 3:13\n            ","\n                \n                Thanks Alex, yes I needed to call copy instead and that worked!\n                \n\u2013\u00A0theJerm\n                Feb 19 \u002713 at 20:23\n            ","\n                \n                Regarding IsPrimitive: what is the reason you return true for a string. Also, is there any reason you use the single \u0026 rather than \u0026\u0026 in the statement: return (type.IsValueType \u0026 type.IsPrimitive);?\n                \n\u2013\u00A0Matt Smith\n                Apr 23 \u002714 at 16:51\n            ","\n                \n                @MattSmith It was working for delegates, but I intently disabled it (by setting null), see github.com/Burtsev-Alexey/net-object-deep-copy/issues/7, the subscribers were cloned, in the end if you had two object A and B connected (by event subscription) you would get objects A\u0027 and B\u0027 connected, this is correct but that\u0027s not what most people want when the clone objects.\n                \n\u2013\u00A0Alex Burtsev\n                Apr 23 \u002714 at 18:39\n                        \n                            \n                        \n            ","\n                \n                @Alex141 - just encountered the same puzzlement.  All the relevant code is in the referenced file, there\u0027s an ArrayExtensions namespace lower down.\n                \n\u2013\u00A0Arunas\n                May 15 \u002715 at 3:24\n            ","\n                \n                This is a very clever and powerful implementation, however you have to consider a few things before deciding whether it\u2019s right for your data model. Memberwiseclone() is so fast because it does not invoke constructors. So if your constructors are doing heavy lifting such as event subscription, you are out of luck. It relies on copying private fields of the object, bypassing the business logic in the properties and methods. For example, I saw hashCode field being copied in a HashSet collection, even though all instances have changed.\n                \n\u2013\u00A0kat\n                May 26 \u002715 at 17:21\n            ","\n                \n                To that add \u0022public static T DeepClone\u003CT\u003E(this T a) where T : ISerializable\u0022\n                \n\u2013\u00A0Amir Rezaei\n                Feb 11 \u002711 at 14:35\n            ","\n                \n                @Amir - it isn\u0027t necessary for the class to implement ISerializable, Marking with SerializableAttribute is sufficient.  The attribute uses reflection to perform serialization, while the interface allows you to write a custom serializer\n                \n\u2013\u00A0Neil\n                Feb 14 \u002711 at 16:10\n            ","\n                \n                I agree with your statement, but I like Amir\u0027s suggestion b/c it provides compile-time checking. Is there any way to reconcile the two?\n                \n\u2013\u00A0Michael Blackburn\n                Mar 30 \u002711 at 19:47\n            ","\n                \n                Passed unit test          var stringbuilder = new StringBuilder(\u0022TestData\u0022);          var copy = stringbuilder.DeepClone();          Assert.IsFalse(Equals(stringbuilder,copy));  Thanks a lot.\n                \n\u2013\u00A0om471987\n                May 6 \u002712 at 18:17\n            ","\n                \n                @Neil This method is 10x slower than the NestedMemberwiseClone method, see my post on this page.\n                \n\u2013\u00A0Contango\n                May 20 \u002712 at 18:02\n                        \n                            \n                        \n            ","\n                \n                Good post.  Any idea why serialization is so much slower?  Also, how would your checksum work?  Why not just have an equality checker?\n                \n\u2013\u00A0user420667\n                Apr 1 \u002712 at 15:33\n            ","\n                \n                I can confirm that this is much faster than the serialization method. The cost is: writing more code; the maintenance risk of adding a field without adding it to the clone method; need to write helper classes for any 3rd party classes (such as Dictionary\u003C\u003E)\n                \n\u2013\u00A0Neil\n                May 23 \u002712 at 14:37\n            ","\n                \n                It\u0027s too bad neither Java nor .NET distinguishes among references that encapsulate identity, mutable state, both, or neither. Conceptually, there should only be one type of \u0022clone\u0022: a new object where each reference encapsulates the same thing as in the corresponding reference in the original. If a reference encapsulates identity, the clone\u0027s reference must refer to the same object. If it encapsulates mutable state but not identity, the clone must receive a reference to a different object with the same state [otherwise both references would erroneously...\n                \n\u2013\u00A0supercat\n                Sep 23 \u002713 at 19:53\n            ","\n                \n                ...encapsulate identity as well as state].  An object reference that encapsulates both identity and state cannot be cloned except by copying everything else which holds a reference to that object--a feat which is often difficult or impossible.  While references to some types of object will usually be used to encapsulate identity, and references to others will usually encapsulate mutable state, knowing the type of an object is not sufficient to the purpose for which a reference is held.\n                \n\u2013\u00A0supercat\n                Sep 23 \u002713 at 20:01\n            ","\n                \n                I\u0027ve run my own speed test using Neil\u0027s serialize/deserialize extension method, Contango\u0027s Nested MemberwiseClone, Alex Burtsev\u0027s reflection-based extension method and AutoMapper, 1 million times each.  Serialize-deserialize was slowest, taking 15.7 seconds.  Then came AutoMapper, taking 10.1 seconds.  Much faster was the reflection-based method which took 2.4 seconds.  By far the fastest was Nested MemberwiseClone, taking 0.1 seconds.  Comes down to performance versus hassle of adding code to each class to clone it.  If performance isn\u0027t an issue go with Alex Burtsev\u0027s method.\n                \n\u2013\u00A0Simon Tewsi\n                Jun 7 \u002716 at 15:12\n            ","\n                \n                Wonder how fast it is compared to the Nested MemberwiseClone answer above?\n                \n\u2013\u00A0Contango\n                Sep 24 \u002713 at 20:15\n            ","\n                \n                this won\u0027t work if your class has a Dictionary which has to be copied, as IDictionary cannot be serialized\n                \n\u2013\u00A0Fabio Napodano\n                Nov 15 \u002719 at 16:36\n            ","\n                \n                It works only if your obj has default constructor!\n                \n\u2013\u00A0Cyrus\n                Aug 23 \u002714 at 12:50\n            ","\n                \n                Good try, but he specifically asked for a deep clone.\n                \n\u2013\u00A0Levitikon\n                Sep 26 \u002711 at 17:38\n            ","\n                \n                You can do a deep clone with MemberwiseClone, all you do is add nesting. See answer from @Gravitas above.\n                \n\u2013\u00A0Contango\n                Dec 30 \u002711 at 19:22\n                        \n                            \n                        \n            ","\n                \n                Using CGbR Clone Generator you get the same result without manually writing the code.\n                \n\u2013\u00A0Toxantron\n                Jun 9 \u002716 at 20:50\n            ","\n                \n                You\u0027re not continuing the deep copy down your non-IList branch and I think you would have issues with ICollection/IEnumerable.\n                \n\u2013\u00A0Rob McCready\n                Jul 5 \u002711 at 7:04\n            ","\n                \n                Using the \u0022Nested MemberwiseClone\u0022 technique is an order of magnitude faster again (see my post under @Gravitas).\n                \n\u2013\u00A0Contango\n                Jan 1 \u002712 at 23:29\n                        \n                            \n                        \n            ","\n                \n                What is Consts.AppConsts.FullBindingList?\n                \n\u2013\u00A0DmitryBoyko\n                Apr 24 \u002718 at 7:10\n            ","\n                \n                The problem with ICloneable is that the Clone method does not explicitly specify whether it is performing a shallow or deep copy, so callers can never be sure. Hence, there is some [discussion|blogs.msdn.com/brada/archive/2004/05/03/125427.aspx] about making ICloneable obsolete in the .NET Framework.\n                \n\u2013\u00A0Mahmoud Samy\n                Aug 8 \u002716 at 18:54\n            ","\n                \n                It\u0027s not simpler when you have mutable reference types, many properties, lists with sublists, etc.  This can work in a few simple scenarios, but is still error-prone when your Fruit class adds another property and you forget to change your method.\n                \n\u2013\u00A0Nelson Rothermel\n                Feb 4 \u002713 at 19:32\n            ","\n                \n                Reference assignment \u0027Name=f.Name\u0027 is shallow copying.\n                \n\u2013\u00A0Tarec\n                Feb 5 \u002714 at 10:35\n                        \n                            \n                        \n            ","\n                \n                if we have 100 properties then our whole day will be consumed just writing such code for one object and so on...\n                \n\u2013\u00A0Umar Abbas\n                Apr 10 \u002714 at 5:49\n            ","\n                \n                @Tarec, if Name is a string, and strings are immutable, it shouldn\u0027t matter.\n                \n\u2013\u00A0Arturo Torres S\u00E1nchez\n                May 20 \u002715 at 17:58\n            "]},{"Id":"c42c4baf-1102-4a1b-9bfb-c17762486bfc","QuestionId":17130382,"Description":"Understanding garbage collection in .NET","Votes":176,"Views":55673,"Tags":["c#",".net","garbage-collection"],"Discussions":["\nYou are being tripped up here and drawing very wrong conclusions because you are using a debugger.  You\u0027ll need to run your code the way it runs on your user\u0027s machine.  Switch to the Release build first with Build \u002B Configuration manager, change the \u0022Active solution configuration\u0022 combo in the upper left corner to \u0022Release\u0022.  Next, go into Tools \u002B Options, Debugging, General and untick the \u0022Suppress JIT optimization\u0022 option.\n\nNow run your program again and tinker with the source code.  Note how the extra braces have no effect at all.  And note how setting the variable to null makes no difference at all.  It will always print \u00221\u0022.  It now works the way you hope and expected it would work.\n\nWhich does leave with the task of explaining why it works so differently when you run the Debug build.  That requires explaining how the garbage collector discovers local variables and how that\u0027s affected by having a debugger present.\n\nFirst off, the jitter performs two important duties when it compiles the IL for a method into machine code.  The first one is very visible in the debugger, you can see the machine code with the Debug \u002B Windows \u002B Disassembly window.  The second duty is however completely invisible.  It also generates a table that describes how the local variables inside the method body are used.  That table has an entry for each method argument and local variable with two addresses. The address where the variable will first store an object reference.  And the address of the machine code instruction where that variable is no longer used.  Also whether that variable is stored on the stack frame or a cpu register.\n\nThis table is essential to the garbage collector, it needs to know where to look for object references when it performs a collection.  Pretty easy to do when the reference is part of an object on the GC heap.  Definitely not easy to do when the object reference is stored in a CPU register.  The table says where to look.\n\nThe \u0022no longer used\u0022 address in the table is very important.  It makes the garbage collector very efficient.  It can collect an object reference, even if it is used inside a method and that method hasn\u0027t finished executing yet.  Which is very common, your Main() method for example will only ever stop executing just before your program terminates.  Clearly you would not want any object references used inside that Main() method to live for the duration of the program, that would amount to a leak.  The jitter can use the table to discover that such a local variable is no longer useful, depending on how far the program has progressed inside that Main() method before it made a call.\n\nAn almost magic method that is related to that table is GC.KeepAlive().  It is a very special method, it doesn\u0027t generate any code at all.  Its only duty is to modify that table.  It extends the lifetime of the local variable, preventing the reference it stores from getting garbage collected.  The only time you need to use it is to stop the GC from being to over-eager with collecting a reference, that can happen in interop scenarios where a reference is passed to unmanaged code.  The garbage collector cannot see such references being used by such code since it wasn\u0027t compiled by the jitter so doesn\u0027t have the table that says where to look for the reference.  Passing a delegate object to an unmanaged function like EnumWindows() is the boilerplate example of when you need to use GC.KeepAlive().\n\nSo, as you can tell from your sample snippet after running it in the Release build, local variables can get collected early, before the method finished executing.  Even more powerfully, an object can get collected while one of its methods runs if that method no longer refers to this.  There is a problem with that, it is very awkward to debug such a method.  Since you may well put the variable in the Watch window or inspect it.  And it would disappear while you are debugging if a GC occurs.  That would be very unpleasant, so the jitter is aware of there being a debugger attached.  It then modifies the table and alters the \u0022last used\u0022 address.  And changes it from its normal value to the address of the last instruction in the method.  Which keeps the variable alive as long as the method hasn\u0027t returned.  Which allows you to keep watching it until the method returns.\n\nThis now also explains what you saw earlier and why you asked the question.  It prints \u00220\u0022 because the GC.Collect call cannot collect the reference.  The table says that the variable is in use past the GC.Collect() call, all the way up to the end of the method.  Forced to say so by having the debugger attached and by running the Debug build.\n\nSetting the variable to null does have an effect now because the GC will inspect the variable and will no longer see a reference.  But make sure you don\u0027t fall in the trap that many C# programmers have fallen into, actually writing that code was pointless.  It makes no difference whatsoever whether or not that statement is present when you run the code in the Release build.  In fact, the jitter optimizer will remove that statement since it has no effect whatsoever.  So be sure to not write code like that, even though it seemed to have an effect.\n\n\n\nOne final note about this topic, this is what gets programmers in trouble that write small programs to do something with an Office app.  The debugger usually gets them on the Wrong Path, they want the Office program to exit on demand.  The appropriate way to do that is by calling GC.Collect().  But they\u0027ll discover that it doesn\u0027t work when they debug their app, leading them into never-never land by calling Marshal.ReleaseComObject().  Manual memory management, it rarely works properly because they\u0027ll easily overlook an invisible interface reference.  GC.Collect() actually works, just not when you debug the app.\n    ","\n[ Just wanted to add further on the Internals of Finalization process ]\n\nSo, you create an object and when the object is collected, the object\u0027s Finalize method should be called. But there is more to finalization than this very simple assumption.\n\nSHORT CONCEPTS::\n\n\nObjects NOT implementing Finalize methods, there Memory is\nreclaimed immediately,unless of course, they are not reacheable by\napplication code anymore\nObjects implementing Finalize Method, The Concept/Implementation\nof Application Roots, Finalization Queue, Freacheable Queue comes\nbefore they can be reclaimed.\nAny object is considered garbage if it is NOT reacheable by Application \n     Code\n\n\nAssume:: Classes/Objects A, B, D, G, H do NOT implement Finalize Method and C,  E, F, I, J implement Finalize Method.\n\nWhen an application creates a new object, the new operator allocates the memory from the heap. If the object\u0027s type contains a Finalize method, then a pointer to the object is placed on the finalization queue.\n therefore pointers to objects C, E, F, I, J gets added to finalization queue.\n The finalization queue is an internal data structure controlled by the garbage collector. Each entry in the queue points to an object that should have its Finalize method called before the object\u0027s memory can be reclaimed.\n      Figure below shows a heap containing several objects. Some of these objects are reachable from the application\u0027s roots, and some are not. When objects C, E, F, I, and J were created, the .Net framework detects that these objects have Finalize methods and pointers to these objects are added to the finalization queue. \n\nWhen a GC occurs(1st Collection), objects B, E, G, H, I, and J are determined to be garbage. Because A,C,D,F are still reacheable by Application Code depicted through arrows from yellow Box above.\n\nThe garbage collector scans the finalization queue looking for pointers to these objects. When a pointer is found, the pointer is removed from the finalization queue and appended to the freachable queue (\u0022F-reachable\u0022). The freachable queue is another internal data structure controlled by the garbage collector. Each pointer in the freachable queue identifies an object that is ready to have its Finalize method called.\n\nAfter the collection(1st Collection), the managed heap looks something similar to figure below. Explanation given below::\n1.) The memory occupied by objects B, G, and H has been reclaimed\n      immediately because these objects did not have a finalize method that\n       needed to be called.\n\n2.)  However, the memory occupied by objects E, I, and J could not be \n     reclaimed because their Finalize method has not been called yet.\n     Calling the Finalize method is done by freacheable queue.\n\n3.)  A,C,D,F are still reacheable by Application Code depicted through\n      arrows from yellow Box above, So they will NOT be collected in any\n      case\n\n\nThere is a special runtime thread dedicated to calling Finalize methods. When the freachable queue is empty (which is usually the case), this thread sleeps. But when entries appear, this thread wakes, removes each entry from the queue, and calls each object\u0027s Finalize method. The garbage collector compacts the reclaimable memory and the special runtime thread empties the freachable queue, executing each object\u0027s Finalize method. So here finally is when your Finalize method gets executed\n\nThe next time the garbage collector is invoked(2nd Collection), it sees that the finalized objects are truly garbage, since the application\u0027s roots don\u0027t point to it and the freachable queue no longer points to it(it\u0027s EMPTY too), Therefore the memory for the objects (E, I, J) are simply reclaimed from Heap.See figure below and compare it with figure just above\n\n\nThe important thing to understand here is that two GCs are required to reclaim memory used by objects that require finalization. In reality, more than two collections cab be even required since these objects may get promoted to an older generation\n\nNOTE::  The freachable queue is considered to be a root just like global and static variables are roots. Therefore, if an object is on the freachable queue, then the object is reachable and is not garbage. \n\nAs a last note, remember that debugging application is one thing, Garbage Collection is another thing and works differently. So far you can\u0027t FEEL garbage collection just by debugging applications, further if you wish to investigate Memory get started here.\n    ","\n                \n                See also my question that Hans answered nicely for me. stackoverflow.com/questions/15561025/\u2026\n                \n\u2013\u00A0Dave Nay\n                Jun 16 \u002713 at 14:04\n            ","\n                \n                @HansPassant I just found this awesome explanation, which also answers part of my question here: stackoverflow.com/questions/30529379/\u2026 about GC and thread synchronization. One question that I still have: I\u0027m wondering if the GC actually compacts \u0026 updates addresses that are used in a register (stored in memory while suspended), or just skips them? A process that\u0027s updating registers after suspending the thread (before the resume) feels to me like a serious security thread that\u0027s blocked by the OS.\n                \n\u2013\u00A0atlaste\n                May 29 \u002715 at 15:00\n            ","\n                \n                Indirectly, yes.  The thread is suspended, the GC updates the backing store for the CPU registers.  Once the thread resumes running, it now uses the updated register values.\n                \n\u2013\u00A0Hans Passant\n                May 29 \u002715 at 15:04\n            ","\n                \n                @HansPassant, I would appreciate if you add references for some of the non-obvious details of CLR garbage collector that you described here?\n                \n\u2013\u00A0denfromufa\n                Jul 4 \u002717 at 18:07\n                        \n                            \n                        \n            ","\n                \n                It seems that configuration wise, an important point is that \u0022Optimize code\u0022 (\u003COptimize\u003Etrue\u003C/Optimize\u003E in .csproj) is enabled. This is the default in the \u0022Release\u0022 configuration. But in case one uses custom configurations, it is relevant to know that this setting is important.\n                \n\u2013\u00A0Zero3\n                Nov 12 \u002719 at 11:16\n            "]},{"Id":"5c7bb268-966c-4e53-bf81-362b70d78e27","QuestionId":566462,"Description":"Upload files with HTTPWebrequest (multipart/form-data)","Votes":302,"Views":395422,"Tags":[".net","upload","httpwebrequest"],"Discussions":["\nTook the code above and fixed because it throws Internal Server Error 500. There are some problems with \\r\\n badly positioned and spaces etc. Applied the refactoring with memory stream, writing directly to the request stream. Here is the result:\n\n    public static void HttpUploadFile(string url, string file, string paramName, string contentType, NameValueCollection nvc) {\n        log.Debug(string.Format(\u0022Uploading {0} to {1}\u0022, file, url));\n        string boundary = \u0022---------------------------\u0022 \u002B DateTime.Now.Ticks.ToString(\u0022x\u0022);\n        byte[] boundarybytes = System.Text.Encoding.ASCII.GetBytes(\u0022\\r\\n--\u0022 \u002B boundary \u002B \u0022\\r\\n\u0022);\n\n        HttpWebRequest wr = (HttpWebRequest)WebRequest.Create(url);\n        wr.ContentType = \u0022multipart/form-data; boundary=\u0022 \u002B boundary;\n        wr.Method = \u0022POST\u0022;\n        wr.KeepAlive = true;\n        wr.Credentials = System.Net.CredentialCache.DefaultCredentials;\n\n        Stream rs = wr.GetRequestStream();\n\n        string formdataTemplate = \u0022Content-Disposition: form-data; name=\\\u0022{0}\\\u0022\\r\\n\\r\\n{1}\u0022;\n        foreach (string key in nvc.Keys)\n        {\n            rs.Write(boundarybytes, 0, boundarybytes.Length);\n            string formitem = string.Format(formdataTemplate, key, nvc[key]);\n            byte[] formitembytes = System.Text.Encoding.UTF8.GetBytes(formitem);\n            rs.Write(formitembytes, 0, formitembytes.Length);\n        }\n        rs.Write(boundarybytes, 0, boundarybytes.Length);\n\n        string headerTemplate = \u0022Content-Disposition: form-data; name=\\\u0022{0}\\\u0022; filename=\\\u0022{1}\\\u0022\\r\\nContent-Type: {2}\\r\\n\\r\\n\u0022;\n        string header = string.Format(headerTemplate, paramName, file, contentType);\n        byte[] headerbytes = System.Text.Encoding.UTF8.GetBytes(header);\n        rs.Write(headerbytes, 0, headerbytes.Length);\n\n        FileStream fileStream = new FileStream(file, FileMode.Open, FileAccess.Read);\n        byte[] buffer = new byte[4096];\n        int bytesRead = 0;\n        while ((bytesRead = fileStream.Read(buffer, 0, buffer.Length)) != 0) {\n            rs.Write(buffer, 0, bytesRead);\n        }\n        fileStream.Close();\n\n        byte[] trailer = System.Text.Encoding.ASCII.GetBytes(\u0022\\r\\n--\u0022 \u002B boundary \u002B \u0022--\\r\\n\u0022);\n        rs.Write(trailer, 0, trailer.Length);\n        rs.Close();\n\n        WebResponse wresp = null;\n        try {\n            wresp = wr.GetResponse();\n            Stream stream2 = wresp.GetResponseStream();\n            StreamReader reader2 = new StreamReader(stream2);\n            log.Debug(string.Format(\u0022File uploaded, server response is: {0}\u0022, reader2.ReadToEnd()));\n        } catch(Exception ex) {\n            log.Error(\u0022Error uploading file\u0022, ex);\n            if(wresp != null) {\n                wresp.Close();\n                wresp = null;\n            }\n        } finally {\n            wr = null;\n        }\n    }\n\n\nand sample usage:\n\n    NameValueCollection nvc = new NameValueCollection();\n    nvc.Add(\u0022id\u0022, \u0022TTR\u0022);\n    nvc.Add(\u0022btn-submit-photo\u0022, \u0022Upload\u0022);\n    HttpUploadFile(\u0022http://your.server.com/upload\u0022, \n         @\u0022C:\\test\\test.jpg\u0022, \u0022file\u0022, \u0022image/jpeg\u0022, nvc);\n\n\nIt could be extended to handle multiple files or just call it multiple times for each file. However it suits your needs.\n    ","\nI was looking for something like this, Found in : \nhttp://bytes.com/groups/net-c/268661-how-upload-file-via-c-code (modified for correctness):\n\npublic static string UploadFilesToRemoteUrl(string url, string[] files, NameValueCollection formFields = null)\n{\n    string boundary = \u0022----------------------------\u0022 \u002B DateTime.Now.Ticks.ToString(\u0022x\u0022);\n\n    HttpWebRequest request = (HttpWebRequest) WebRequest.Create(url);\n    request.ContentType = \u0022multipart/form-data; boundary=\u0022 \u002B\n                            boundary;\n    request.Method = \u0022POST\u0022;\n    request.KeepAlive = true;\n\n    Stream memStream = new System.IO.MemoryStream();\n\n    var boundarybytes = System.Text.Encoding.ASCII.GetBytes(\u0022\\r\\n--\u0022 \u002B\n                                                            boundary \u002B \u0022\\r\\n\u0022);\n    var endBoundaryBytes = System.Text.Encoding.ASCII.GetBytes(\u0022\\r\\n--\u0022 \u002B\n                                                                boundary \u002B \u0022--\u0022);\n\n\n    string formdataTemplate = \u0022\\r\\n--\u0022 \u002B boundary \u002B\n                                \u0022\\r\\nContent-Disposition: form-data; name=\\\u0022{0}\\\u0022;\\r\\n\\r\\n{1}\u0022;\n\n    if (formFields != null)\n    {\n        foreach (string key in formFields.Keys)\n        {\n            string formitem = string.Format(formdataTemplate, key, formFields[key]);\n            byte[] formitembytes = System.Text.Encoding.UTF8.GetBytes(formitem);\n            memStream.Write(formitembytes, 0, formitembytes.Length);\n        }\n    }\n\n    string headerTemplate =\n        \u0022Content-Disposition: form-data; name=\\\u0022{0}\\\u0022; filename=\\\u0022{1}\\\u0022\\r\\n\u0022 \u002B\n        \u0022Content-Type: application/octet-stream\\r\\n\\r\\n\u0022;\n\n    for (int i = 0; i \u003C files.Length; i\u002B\u002B)\n    {\n        memStream.Write(boundarybytes, 0, boundarybytes.Length);\n        var header = string.Format(headerTemplate, \u0022uplTheFile\u0022, files[i]);\n        var headerbytes = System.Text.Encoding.UTF8.GetBytes(header);\n\n        memStream.Write(headerbytes, 0, headerbytes.Length);\n\n        using (var fileStream = new FileStream(files[i], FileMode.Open, FileAccess.Read))\n        {\n            var buffer = new byte[1024];\n            var bytesRead = 0;\n            while ((bytesRead = fileStream.Read(buffer, 0, buffer.Length)) != 0)\n            {\n                memStream.Write(buffer, 0, bytesRead);\n            }\n        }\n    }\n\n    memStream.Write(endBoundaryBytes, 0, endBoundaryBytes.Length);\n    request.ContentLength = memStream.Length;\n\n    using (Stream requestStream = request.GetRequestStream())\n    {\n        memStream.Position = 0;\n        byte[] tempBuffer = new byte[memStream.Length];\n        memStream.Read(tempBuffer, 0, tempBuffer.Length);\n        memStream.Close();\n        requestStream.Write(tempBuffer, 0, tempBuffer.Length);\n    }\n\n    using (var response = request.GetResponse())\n    {\n        Stream stream2 = response.GetResponseStream();\n        StreamReader reader2 = new StreamReader(stream2);\n        return reader2.ReadToEnd();\n    }\n}\n\n    ","\nUPDATE: Using .NET 4.5 (or .NET 4.0 by adding the Microsoft.Net.Http package from NuGet) this is possible without external code, extensions, and \u0022low level\u0022 HTTP manipulation. Here is an example:\n\n// Perform the equivalent of posting a form with a filename and two files, in HTML:\n// \u003Cform action=\u0022{url}\u0022 method=\u0022post\u0022 enctype=\u0022multipart/form-data\u0022\u003E\n//     \u003Cinput type=\u0022text\u0022 name=\u0022filename\u0022 /\u003E\n//     \u003Cinput type=\u0022file\u0022 name=\u0022file1\u0022 /\u003E\n//     \u003Cinput type=\u0022file\u0022 name=\u0022file2\u0022 /\u003E\n// \u003C/form\u003E\nprivate async Task\u003CSystem.IO.Stream\u003E UploadAsync(string url, string filename, Stream fileStream, byte [] fileBytes)\n{\n    // Convert each of the three inputs into HttpContent objects\n\n    HttpContent stringContent = new StringContent(filename);\n    // examples of converting both Stream and byte [] to HttpContent objects\n    // representing input type file\n    HttpContent fileStreamContent = new StreamContent(fileStream);\n    HttpContent bytesContent = new ByteArrayContent(fileBytes);\n\n    // Submit the form using HttpClient and \n    // create form data as Multipart (enctype=\u0022multipart/form-data\u0022)\n\n    using (var client = new HttpClient())\n    using (var formData = new MultipartFormDataContent()) \n    {\n        // Add the HttpContent objects to the form data\n\n        // \u003Cinput type=\u0022text\u0022 name=\u0022filename\u0022 /\u003E\n        formData.Add(stringContent, \u0022filename\u0022, \u0022filename\u0022);\n        // \u003Cinput type=\u0022file\u0022 name=\u0022file1\u0022 /\u003E\n        formData.Add(fileStreamContent, \u0022file1\u0022, \u0022file1\u0022);\n        // \u003Cinput type=\u0022file\u0022 name=\u0022file2\u0022 /\u003E\n        formData.Add(bytesContent, \u0022file2\u0022, \u0022file2\u0022);\n\n        // Invoke the request to the server\n\n        // equivalent to pressing the submit button on\n        // a form with attributes (action=\u0022{url}\u0022 method=\u0022post\u0022)\n        var response = await client.PostAsync(url, formData);\n\n        // ensure the request was a success\n        if (!response.IsSuccessStatusCode)\n        {\n            return null;\n        }\n        return await response.Content.ReadAsStreamAsync();\n    }\n}\n\n    ","\nMy ASP.NET Upload FAQ has an article on this, with example code: Upload files using an RFC 1867 POST request with HttpWebRequest/WebClient. This code doesn\u0027t load files into memory (as opposed to the code above), supports multiple files, and supports form values, setting credentials and cookies, etc.\n\nEdit: looks like Axosoft took down the page. Thanks guys.\n\nIt\u0027s still accessible via archive.org.\n    ","\nBased on the code provided above I added support for multiple files and also uploading a stream directly without the need to have a local file.\n\nTo upload files to a specific url including some post params do the following:\n\nRequestHelper.PostMultipart(\n    \u0022http://www.myserver.com/upload.php\u0022, \n    new Dictionary\u003Cstring, object\u003E() {\n        { \u0022testparam\u0022, \u0022my value\u0022 },\n        { \u0022file\u0022, new FormFile() { Name = \u0022image.jpg\u0022, ContentType = \u0022image/jpeg\u0022, FilePath = \u0022c:\\\\temp\\\\myniceimage.jpg\u0022 } },\n        { \u0022other_file\u0022, new FormFile() { Name = \u0022image2.jpg\u0022, ContentType = \u0022image/jpeg\u0022, Stream = imageDataStream } },\n    });\n\n\nTo enhance this even more one could determine the name and mime type from the given file itself.\n\npublic class FormFile \n{\n    public string Name { get; set; }\n\n    public string ContentType { get; set; }\n\n    public string FilePath { get; set; }\n\n    public Stream Stream { get; set; }\n}\n\npublic class RequestHelper\n{\n\n    public static string PostMultipart(string url, Dictionary\u003Cstring, object\u003E parameters) {\n\n        string boundary = \u0022---------------------------\u0022 \u002B DateTime.Now.Ticks.ToString(\u0022x\u0022);\n        byte[] boundaryBytes = System.Text.Encoding.ASCII.GetBytes(\u0022\\r\\n--\u0022 \u002B boundary \u002B \u0022\\r\\n\u0022);\n\n        HttpWebRequest request = (HttpWebRequest)WebRequest.Create(url);\n        request.ContentType = \u0022multipart/form-data; boundary=\u0022 \u002B boundary;\n        request.Method = \u0022POST\u0022;\n        request.KeepAlive = true;\n        request.Credentials = System.Net.CredentialCache.DefaultCredentials;\n\n        if(parameters != null \u0026\u0026 parameters.Count \u003E 0) {\n\n            using(Stream requestStream = request.GetRequestStream()) {\n\n                foreach(KeyValuePair\u003Cstring, object\u003E pair in parameters) {\n\n                    requestStream.Write(boundaryBytes, 0, boundaryBytes.Length);\n                    if(pair.Value is FormFile) {\n                        FormFile file = pair.Value as FormFile;\n                        string header = \u0022Content-Disposition: form-data; name=\\\u0022\u0022 \u002B pair.Key \u002B \u0022\\\u0022; filename=\\\u0022\u0022 \u002B file.Name \u002B \u0022\\\u0022\\r\\nContent-Type: \u0022 \u002B file.ContentType \u002B \u0022\\r\\n\\r\\n\u0022;\n                        byte[] bytes = System.Text.Encoding.UTF8.GetBytes(header);\n                        requestStream.Write(bytes, 0, bytes.Length);\n                        byte[] buffer = new byte[32768];\n                        int bytesRead;\n                        if(file.Stream == null) {\n                            // upload from file\n                            using(FileStream fileStream = File.OpenRead(file.FilePath)) {\n                                while((bytesRead = fileStream.Read(buffer, 0, buffer.Length)) != 0)\n                                    requestStream.Write(buffer, 0, bytesRead);\n                                fileStream.Close();\n                            }\n                        }\n                        else {\n                            // upload from given stream\n                            while((bytesRead = file.Stream.Read(buffer, 0, buffer.Length)) != 0)\n                                requestStream.Write(buffer, 0, bytesRead);\n                        }\n                    }\n                    else {\n                        string data = \u0022Content-Disposition: form-data; name=\\\u0022\u0022 \u002B pair.Key \u002B \u0022\\\u0022\\r\\n\\r\\n\u0022 \u002B pair.Value;\n                        byte[] bytes = System.Text.Encoding.UTF8.GetBytes(data);\n                        requestStream.Write(bytes, 0, bytes.Length);\n                    }\n                }\n\n                byte[] trailer = System.Text.Encoding.ASCII.GetBytes(\u0022\\r\\n--\u0022 \u002B boundary \u002B \u0022--\\r\\n\u0022);\n                requestStream.Write(trailer, 0, trailer.Length);\n                requestStream.Close();\n            }\n        }\n\n        using(WebResponse response = request.GetResponse()) {\n            using(Stream responseStream = response.GetResponseStream())\n            using(StreamReader reader = new StreamReader(responseStream))\n                return reader.ReadToEnd();\n        }\n\n\n    }\n}\n\n    ","\nsomething like this is close:  (untested code)\n\nbyte[] data; // data goes here.\n\nHttpWebRequest request = (HttpWebRequest)WebRequest.Create(url);\nrequest.Credentials = userNetworkCredentials;\nrequest.Method = \u0022PUT\u0022;\nrequest.ContentType = \u0022application/octet-stream\u0022;\nrequest.ContentLength = data.Length;\nStream stream = request.GetRequestStream();\nstream.Write(data,0,data.Length);\nstream.Close();\nresponse = (HttpWebResponse)request.GetResponse();\nStreamReader reader = new StreamReader(response.GetResponseStream());\ntemp = reader.ReadToEnd();\nreader.Close();\n\n    ","\nI think you\u0027re looking for something more like WebClient.\n\nSpecifically, UploadFile().\n    ","\nTook the above and modified it accept some header values, and multiple files\n\n    NameValueCollection headers = new NameValueCollection();\n        headers.Add(\u0022Cookie\u0022, \u0022name=value;\u0022);\n        headers.Add(\u0022Referer\u0022, \u0022http://google.com\u0022);\n    NameValueCollection nvc = new NameValueCollection();\n        nvc.Add(\u0022name\u0022, \u0022value\u0022);\n\n    HttpUploadFile(url, new string[] { \u0022c:\\\\file1.txt\u0022, \u0022c:\\\\file2.jpg\u0022 }, new string[] { \u0022file\u0022, \u0022image\u0022 }, new string[] { \u0022application/octet-stream\u0022, \u0022image/jpeg\u0022 }, nvc, headers);\n\n\n\n\npublic static void HttpUploadFile(string url, string[] file, string[] paramName, string[] contentType, NameValueCollection nvc, NameValueCollection headerItems)\n{\n    //log.Debug(string.Format(\u0022Uploading {0} to {1}\u0022, file, url));\n    string boundary = \u0022---------------------------\u0022 \u002B DateTime.Now.Ticks.ToString(\u0022x\u0022);\n    byte[] boundarybytes = System.Text.Encoding.ASCII.GetBytes(\u0022\\r\\n--\u0022 \u002B boundary \u002B \u0022\\r\\n\u0022);\n\n    HttpWebRequest wr = (HttpWebRequest)WebRequest.Create(url);\n\n    foreach (string key in headerItems.Keys)\n    {\n        if (key == \u0022Referer\u0022)\n        {\n            wr.Referer = headerItems[key];\n        }\n        else\n        {\n            wr.Headers.Add(key, headerItems[key]);\n        }\n    }\n\n    wr.ContentType = \u0022multipart/form-data; boundary=\u0022 \u002B boundary;\n    wr.Method = \u0022POST\u0022;\n    wr.KeepAlive = true;\n    wr.Credentials = System.Net.CredentialCache.DefaultCredentials;\n\n    Stream rs = wr.GetRequestStream();\n\n    string formdataTemplate = \u0022Content-Disposition: form-data; name=\\\u0022{0}\\\u0022\\r\\n\\r\\n{1}\u0022;\n    foreach (string key in nvc.Keys)\n    {\n        rs.Write(boundarybytes, 0, boundarybytes.Length);\n        string formitem = string.Format(formdataTemplate, key, nvc[key]);\n        byte[] formitembytes = System.Text.Encoding.UTF8.GetBytes(formitem);\n        rs.Write(formitembytes, 0, formitembytes.Length);\n    }\n    rs.Write(boundarybytes, 0, boundarybytes.Length);\n\n    string headerTemplate = \u0022Content-Disposition: form-data; name=\\\u0022{0}\\\u0022; filename=\\\u0022{1}\\\u0022\\r\\nContent-Type: {2}\\r\\n\\r\\n\u0022;\n    string header = \u0022\u0022;\n\n    for(int i =0; i\u003Cfile.Count();i\u002B\u002B)\n    {\n        header = string.Format(headerTemplate, paramName[i], System.IO.Path.GetFileName(file[i]), contentType[i]);\n        byte[] headerbytes = System.Text.Encoding.UTF8.GetBytes(header);\n        rs.Write(headerbytes, 0, headerbytes.Length);\n\n        FileStream fileStream = new FileStream(file[i], FileMode.Open, FileAccess.Read);\n        byte[] buffer = new byte[4096];\n        int bytesRead = 0;\n        while ((bytesRead = fileStream.Read(buffer, 0, buffer.Length)) != 0)\n        {\n            rs.Write(buffer, 0, bytesRead);\n        }\n        fileStream.Close();\n        rs.Write(boundarybytes, 0, boundarybytes.Length);\n    }\n    rs.Close();\n\n    WebResponse wresp = null;\n    try\n    {\n        wresp = wr.GetResponse();\n        Stream stream2 = wresp.GetResponseStream();\n        StreamReader reader2 = new StreamReader(stream2);\n        //log.Debug(string.Format(\u0022File uploaded, server response is: {0}\u0022, reader2.ReadToEnd()));\n    }\n    catch (Exception ex)\n    {\n        //log.Error(\u0022Error uploading file\u0022, ex);\n            wresp.Close();\n            wresp = null;\n    }\n    finally\n    {\n        wr = null;\n    }\n}\n\n    ","\nVB Example (converted from C# example on another post):\n\nPrivate Sub HttpUploadFile( _\n    ByVal uri As String, _\n    ByVal filePath As String, _\n    ByVal fileParameterName As String, _\n    ByVal contentType As String, _\n    ByVal otherParameters As Specialized.NameValueCollection)\n\n    Dim boundary As String = \u0022---------------------------\u0022 \u0026 DateTime.Now.Ticks.ToString(\u0022x\u0022)\n    Dim newLine As String = System.Environment.NewLine\n    Dim boundaryBytes As Byte() = Text.Encoding.ASCII.GetBytes(newLine \u0026 \u0022--\u0022 \u0026 boundary \u0026 newLine)\n    Dim request As Net.HttpWebRequest = Net.WebRequest.Create(uri)\n\n    request.ContentType = \u0022multipart/form-data; boundary=\u0022 \u0026 boundary\n    request.Method = \u0022POST\u0022\n    request.KeepAlive = True\n    request.Credentials = Net.CredentialCache.DefaultCredentials\n\n    Using requestStream As IO.Stream = request.GetRequestStream()\n\n        Dim formDataTemplate As String = \u0022Content-Disposition: form-data; name=\u0022\u0022{0}\u0022\u0022{1}{1}{2}\u0022\n\n        For Each key As String In otherParameters.Keys\n\n            requestStream.Write(boundaryBytes, 0, boundaryBytes.Length)\n            Dim formItem As String = String.Format(formDataTemplate, key, newLine, otherParameters(key))\n            Dim formItemBytes As Byte() = Text.Encoding.UTF8.GetBytes(formItem)\n            requestStream.Write(formItemBytes, 0, formItemBytes.Length)\n\n        Next key\n\n        requestStream.Write(boundaryBytes, 0, boundaryBytes.Length)\n\n        Dim headerTemplate As String = \u0022Content-Disposition: form-data; name=\u0022\u0022{0}\u0022\u0022; filename=\u0022\u0022{1}\u0022\u0022{2}Content-Type: {3}{2}{2}\u0022\n        Dim header As String = String.Format(headerTemplate, fileParameterName, filePath, newLine, contentType)\n        Dim headerBytes As Byte() = Text.Encoding.UTF8.GetBytes(header)\n        requestStream.Write(headerBytes, 0, headerBytes.Length)\n\n        Using fileStream As New IO.FileStream(filePath, IO.FileMode.Open, IO.FileAccess.Read)\n\n            Dim buffer(4096) As Byte\n            Dim bytesRead As Int32 = fileStream.Read(buffer, 0, buffer.Length)\n\n            Do While (bytesRead \u003E 0)\n\n                requestStream.Write(buffer, 0, bytesRead)\n                bytesRead = fileStream.Read(buffer, 0, buffer.Length)\n\n            Loop\n\n        End Using\n\n        Dim trailer As Byte() = Text.Encoding.ASCII.GetBytes(newLine \u0026 \u0022--\u0022 \u002B boundary \u002B \u0022--\u0022 \u0026 newLine)\n        requestStream.Write(trailer, 0, trailer.Length)\n\n    End Using\n\n    Dim response As Net.WebResponse = Nothing\n\n    Try\n\n        response = request.GetResponse()\n\n        Using responseStream As IO.Stream = response.GetResponseStream()\n\n            Using responseReader As New IO.StreamReader(responseStream)\n\n                Dim responseText = responseReader.ReadToEnd()\n                Diagnostics.Debug.Write(responseText)\n\n            End Using\n\n        End Using\n\n    Catch exception As Net.WebException\n\n        response = exception.Response\n\n        If (response IsNot Nothing) Then\n\n            Using reader As New IO.StreamReader(response.GetResponseStream())\n\n                Dim responseText = reader.ReadToEnd()\n                Diagnostics.Debug.Write(responseText)\n\n            End Using\n\n            response.Close()\n\n        End If\n\n    Finally\n\n        request = Nothing\n\n    End Try\n\nEnd Sub\n\n    ","\nI had to deal with this recently - another way to approach it is to use the fact that WebClient is inheritable, and change the underlying WebRequest from there:\n\nhttp://msdn.microsoft.com/en-us/library/system.net.webclient.getwebrequest(VS.80).aspx\n\nI prefer C#, but if you\u0027re stuck with VB the results will look something like this:\n\nPublic Class BigWebClient\n    Inherits WebClient\n    Protected Overrides Function GetWebRequest(ByVal address As System.Uri) As System.Net.WebRequest\n        Dim x As WebRequest = MyBase.GetWebRequest(address)\n        x.Timeout = 60 * 60 * 1000\n        Return x\n    End Function\nEnd Class\n\n\u0027Use BigWebClient here instead of WebClient\n\n    ","\nThere is another working example with some my comments :\n\n        List\u003CMimePart\u003E mimeParts = new List\u003CMimePart\u003E();\n\n        try\n        {\n            foreach (string key in form.AllKeys)\n            {\n                StringMimePart part = new StringMimePart();\n\n                part.Headers[\u0022Content-Disposition\u0022] = \u0022form-data; name=\\\u0022\u0022 \u002B key \u002B \u0022\\\u0022\u0022;\n                part.StringData = form[key];\n\n                mimeParts.Add(part);\n            }\n\n            int nameIndex = 0;\n\n            foreach (UploadFile file in files)\n            {\n                StreamMimePart part = new StreamMimePart();\n\n                if (string.IsNullOrEmpty(file.FieldName))\n                    file.FieldName = \u0022file\u0022 \u002B nameIndex\u002B\u002B;\n\n                part.Headers[\u0022Content-Disposition\u0022] = \u0022form-data; name=\\\u0022\u0022 \u002B file.FieldName \u002B \u0022\\\u0022; filename=\\\u0022\u0022 \u002B file.FileName \u002B \u0022\\\u0022\u0022;\n                part.Headers[\u0022Content-Type\u0022] = file.ContentType;\n\n                part.SetStream(file.Data);\n\n                mimeParts.Add(part);\n            }\n\n            string boundary = \u0022----------\u0022 \u002B DateTime.Now.Ticks.ToString(\u0022x\u0022);\n\n            req.ContentType = \u0022multipart/form-data; boundary=\u0022 \u002B boundary;\n            req.Method = \u0022POST\u0022;\n\n            long contentLength = 0;\n\n            byte[] _footer = Encoding.UTF8.GetBytes(\u0022--\u0022 \u002B boundary \u002B \u0022--\\r\\n\u0022);\n\n            foreach (MimePart part in mimeParts)\n            {\n                contentLength \u002B= part.GenerateHeaderFooterData(boundary);\n            }\n\n            req.ContentLength = contentLength \u002B _footer.Length;\n\n            byte[] buffer = new byte[8192];\n            byte[] afterFile = Encoding.UTF8.GetBytes(\u0022\\r\\n\u0022);\n            int read;\n\n            using (Stream s = req.GetRequestStream())\n            {\n                foreach (MimePart part in mimeParts)\n                {\n                    s.Write(part.Header, 0, part.Header.Length);\n\n                    while ((read = part.Data.Read(buffer, 0, buffer.Length)) \u003E 0)\n                        s.Write(buffer, 0, read);\n\n                    part.Data.Dispose();\n\n                    s.Write(afterFile, 0, afterFile.Length);\n                }\n\n                s.Write(_footer, 0, _footer.Length);\n            }\n\n            return (HttpWebResponse)req.GetResponse();\n        }\n        catch\n        {\n            foreach (MimePart part in mimeParts)\n                if (part.Data != null)\n                    part.Data.Dispose();\n\n            throw;\n        }\n\n\nAnd there is example of using : \n\n            UploadFile[] files = new UploadFile[] \n            { \n                new UploadFile(@\u0022C:\\2.jpg\u0022,\u0022new_file\u0022,\u0022image/jpeg\u0022) //new_file is id of upload field\n            };\n\n            NameValueCollection form = new NameValueCollection();\n\n            form[\u0022id_hidden_input\u0022] = \u0022value_hidden_inpu\u0022; //there is additional param (hidden fields on page)\n\n\n            HttpWebRequest req = (HttpWebRequest)WebRequest.Create(full URL of action);\n\n            // set credentials/cookies etc. \n            req.CookieContainer = hrm.CookieContainer; //hrm is my class. i copied all cookies from last request to current (for auth)\n            HttpWebResponse resp = HttpUploadHelper.Upload(req, files, form);\n\n            using (Stream s = resp.GetResponseStream())\n            using (StreamReader sr = new StreamReader(s))\n            {\n                string response = sr.ReadToEnd();\n            }\n             //profit!\n\n    ","\nI was looking to do file upload and add some parameters to a multipart/form-data request in VB.NET and not through a regular forms post.\nThanks to @JoshCodes answer I got the direction I was looking for.\nI am posting my solution to help others find a way to perform a post with both file and parameters\nthe html equivalent of what I try to achieve is :\nhtml\n\n\u003Cform action=\u0022your-api-endpoint\u0022 enctype=\u0022multipart/form-data\u0022 method=\u0022post\u0022\u003E \n\u003Cinput type=\u0022hidden\u0022 name=\u0022action\u0022 value=\u0022api-method-name\u0022/\u003E \n\u003Cinput type=\u0022hidden\u0022 name=\u0022apiKey\u0022 value=\u0022gs1xxxxxxxxxxxxxex\u0022/\u003E \n\u003Cinput type=\u0022hidden\u0022 name=\u0022access\u0022 value=\u0022protected\u0022/\u003E \n\u003Cinput type=\u0022hidden\u0022 name=\u0022name\u0022 value=\u0022test\u0022/\u003E \n\u003Cinput type=\u0022hidden\u0022 name=\u0022title\u0022 value=\u0022test\u0022/\u003E \n\u003Cinput type=\u0022hidden\u0022 name=\u0022signature\u0022 value=\u0022cf1d4xxxxxxxxcd5\u0022/\u003E \n\u003Cinput type=\u0022file\u0022 name=\u0022file\u0022/\u003E \n\u003Cinput type=\u0022submit\u0022 name=\u0022_upload\u0022 value=\u0022Upload\u0022/\u003E \n\u003C/form\u003E\n\n\nDue to the fact that I have to provide the apiKey and the signature (which is a calculated checksum of the request parameters and api key concatenated string), I needed to do it server side.\nThe other reason I needed to do it server side is the fact that the post of the file can be performed at any time by pointing to a file already on the server (providing the path), so there would be no manually selected file during form post thus form data file would not contain the file stream.Otherwise I could have calculated the checksum via an ajax callback and submitted the file through the html post using JQuery.\nI am using .net version 4.0 and cannot upgrade to 4.5 in the actual solution. So I had to install the Microsoft.Net.Http using nuget cmd \n\nPM\u003E install-package Microsoft.Net.Http\n\nPrivate Function UploadFile(req As ApiRequest, filePath As String, fileName As String) As String\n    Dim result = String.empty\n    Try\n        \u0027\u0027//Get file stream\n        Dim paramFileStream As Stream = File.OpenRead(filePath)\n        Dim fileStreamContent As HttpContent = New  StreamContent(paramFileStream)\n        Using client = New HttpClient()\n            Using formData = New MultipartFormDataContent()\n                \u0027\u0027// This adds parameter name (\u0022action\u0022)\n                \u0027\u0027// parameter value (req.Action) to form data\n                formData.Add(New StringContent(req.Action), \u0022action\u0022)\n                formData.Add(New StringContent(req.ApiKey), \u0022apiKey\u0022)\n                For Each param In req.Parameters\n                    formData.Add(New StringContent(param.Value), param.Key)\n                Next\n                formData.Add(New StringContent(req.getRequestSignature.Qualifier), \u0022signature\u0022)\n                \u0027\u0027//This adds the file stream and file info to form data\n                formData.Add(fileStreamContent, \u0022file\u0022, fileName)\n                \u0027\u0027//We are now sending the request\n                Dim response = client.PostAsync(GetAPIEndpoint(), formData).Result\n                \u0027\u0027//We are here reading the response\n                Dim readR = New StreamReader(response.Content.ReadAsStreamAsync().Result, Encoding.UTF8)\n                Dim respContent = readR.ReadToEnd()\n\n                If Not response.IsSuccessStatusCode Then\n                    result =  \u0022Request Failed : Code = \u0022 \u0026 response.StatusCode \u0026 \u0022Reason = \u0022 \u0026 response.ReasonPhrase \u0026 \u0022Message = \u0022 \u0026 respContent\n                End If\n                result.Value = respContent\n            End Using\n        End Using\n    Catch ex As Exception\n        result = \u0022An error occurred : \u0022 \u0026 ex.Message\n    End Try\n\n    Return result\nEnd Function\n\n    ","\nModified @CristianRomanescu code to work with memory stream, accept file as a byte array, allow null nvc, return request response and work with Authorization-header. Tested the code with Web Api 2.\n\nprivate string HttpUploadFile(string url, byte[] file, string fileName, string paramName, string contentType, NameValueCollection nvc, string authorizationHeader)\n{\n    string boundary = \u0022---------------------------\u0022 \u002B DateTime.Now.Ticks.ToString(\u0022x\u0022);\n    byte[] boundarybytes = System.Text.Encoding.ASCII.GetBytes(\u0022\\r\\n--\u0022 \u002B boundary \u002B \u0022\\r\\n\u0022);\n\n    HttpWebRequest wr = (HttpWebRequest)WebRequest.Create(url);\n    wr.ContentType = \u0022multipart/form-data; boundary=\u0022 \u002B boundary;\n    wr.Method = \u0022POST\u0022;\n    wr.Headers.Add(\u0022Authorization\u0022, authorizationHeader);\n    wr.KeepAlive = true;\n\n    Stream rs = wr.GetRequestStream();\n\n    string formdataTemplate = \u0022Content-Disposition: form-data; name=\\\u0022{0}\\\u0022\\r\\n\\r\\n{1}\u0022;\n    if (nvc != null)\n    {\n        foreach (string key in nvc.Keys)\n        {\n            rs.Write(boundarybytes, 0, boundarybytes.Length);\n            string formitem = string.Format(formdataTemplate, key, nvc[key]);\n            byte[] formitembytes = System.Text.Encoding.UTF8.GetBytes(formitem);\n            rs.Write(formitembytes, 0, formitembytes.Length);\n        }\n    }\n\n    rs.Write(boundarybytes, 0, boundarybytes.Length);\n\n    string headerTemplate = \u0022Content-Disposition: form-data; name=\\\u0022{0}\\\u0022; filename=\\\u0022{1}\\\u0022\\r\\nContent-Type: {2}\\r\\n\\r\\n\u0022;\n    string header = string.Format(headerTemplate, paramName, fileName, contentType);\n    byte[] headerbytes = System.Text.Encoding.UTF8.GetBytes(header);\n    rs.Write(headerbytes, 0, headerbytes.Length);\n\n    rs.Write(file, 0, file.Length);\n\n    byte[] trailer = System.Text.Encoding.ASCII.GetBytes(\u0022\\r\\n--\u0022 \u002B boundary \u002B \u0022--\\r\\n\u0022);\n    rs.Write(trailer, 0, trailer.Length);\n    rs.Close();\n\n    WebResponse wresp = null;\n    try\n    {\n        wresp = wr.GetResponse();\n        Stream stream2 = wresp.GetResponseStream();\n        StreamReader reader2 = new StreamReader(stream2);\n        var response = reader2.ReadToEnd();\n        return response;\n    }\n    catch (Exception ex)\n    {\n        if (wresp != null)\n        {\n            wresp.Close();\n            wresp = null;\n        }\n        return null;\n    }\n    finally\n    {\n        wr = null;\n    }\n}\n\n\nTestcode:\n\n[HttpPost]\n[Route(\u0022postformdata\u0022)]\npublic IHttpActionResult PostFormData()\n{\n    // Check if the request contains multipart/form-data.\n    if (!Request.Content.IsMimeMultipartContent())\n    {\n        throw new HttpResponseException(HttpStatusCode.UnsupportedMediaType);\n    }\n\n    var provider = new MultipartMemoryStreamProvider();\n\n    try\n    {\n        // Read the form data.\n        var result = Request.Content.ReadAsMultipartAsync(provider).Result;\n        string response = \u0022\u0022;\n        // This illustrates how to get the file names.\n        foreach (var file in provider.Contents)\n        {\n            var fileName = file.Headers.ContentDisposition.FileName.Trim(\u0027\\\u0022\u0027);\n            var buffer =  file.ReadAsByteArrayAsync().Result;\n            response = HttpUploadFile(\u0022https://localhost/api/v1/createfromfile\u0022, buffer, fileName, \u0022file\u0022, \u0022application/pdf\u0022, null, \u0022AuthorizationKey\u0022);\n        }\n        return Ok(response);\n    }\n    catch (System.Exception e)\n    {\n        return InternalServerError();\n    }\n}\n\n    ","\nFor me, the following works (mostly inspirated from all of the following answers), I started from Elad\u0027s answer and modify/simplify things to match my need (remove not file form inputs, only one file, ...).\n\nHope it can helps somebody :)\n\n(PS: I know that exception handling is not implemented and it assumes that it was written inside a class, so I may need some integration effort...)\n\nprivate void uploadFile()\n    {\n        Random rand = new Random();\n        string boundary = \u0022----boundary\u0022 \u002B rand.Next().ToString();\n        Stream data_stream;\n        byte[] header = System.Text.Encoding.ASCII.GetBytes(\u0022\\r\\n--\u0022 \u002B boundary \u002B \u0022\\r\\nContent-Disposition: form-data; name=\\\u0022file_path\\\u0022; filename=\\\u0022\u0022 \u002B System.IO.Path.GetFileName(this.file) \u002B \u0022\\\u0022\\r\\nContent-Type: application/octet-stream\\r\\n\\r\\n\u0022);\n        byte[] trailer = System.Text.Encoding.ASCII.GetBytes(\u0022\\r\\n--\u0022 \u002B boundary \u002B \u0022--\\r\\n\u0022);\n\n        // Do the request\n        HttpWebRequest request = (HttpWebRequest)WebRequest.Create(MBF_URL);\n        request.UserAgent = \u0022My Toolbox\u0022;\n        request.Method = \u0022POST\u0022;\n        request.KeepAlive = true;\n        request.ContentType = \u0022multipart/form-data; boundary=\u0022 \u002B boundary;\n        data_stream = request.GetRequestStream();\n        data_stream.Write(header, 0, header.Length);\n        byte[] file_bytes = System.IO.File.ReadAllBytes(this.file);\n        data_stream.Write(file_bytes, 0, file_bytes.Length);\n        data_stream.Write(trailer, 0, trailer.Length);\n        data_stream.Close();\n\n        // Read the response\n        WebResponse response = request.GetResponse();\n        data_stream = response.GetResponseStream();\n        StreamReader reader = new StreamReader(data_stream);\n        this.url = reader.ReadToEnd();\n\n        if (this.url == \u0022\u0022) { this.url = \u0022No response :(\u0022; }\n\n        reader.Close();\n        data_stream.Close();\n        response.Close();\n    }\n\n    ","\nNot sure if this was posted before but I got this working with WebClient. i read the documentation for the WebClient. A key point they make is\n\n\n  If the BaseAddress property is not an empty string (\u0022\u0022) and address\n  does not contain an absolute URI, address must be a relative URI that\n  is combined with BaseAddress to form the absolute URI of the requested\n  data. If the QueryString property is not an empty string, it is\n  appended to address.\n\n\nSo all I did was wc.QueryString.Add(\u0022source\u0022, generatedImage) to add the different query parameters and somehow it matches the property name with the image I uploaded. Hope it helps\n\n    public void postImageToFacebook(string generatedImage, string fbGraphUrl)\n    {\n        WebClient wc = new WebClient();\n        byte[] bytes = System.IO.File.ReadAllBytes(generatedImage);\n\n        wc.QueryString.Add(\u0022source\u0022, generatedImage);\n        wc.QueryString.Add(\u0022message\u0022, \u0022helloworld\u0022);\n\n        wc.UploadFile(fbGraphUrl, generatedImage);\n\n        wc.Dispose();\n\n    }\n\n    ","\nI wrote a class using WebClient way back when to do multipart form upload.\n\nhttp://ferozedaud.blogspot.com/2010/03/multipart-form-upload-helper.html\n\n/// \n/// MimePart\n/// Abstract class for all MimeParts\n/// \n\nabstract class MimePart\n{\n    public string Name { get; set; }\n\n    public abstract string ContentDisposition { get; }\n\n    public abstract string ContentType { get; }\n\n    public abstract void CopyTo(Stream stream);\n\n    public String Boundary\n    {\n        get;\n        set;\n    }\n}\n\nclass NameValuePart : MimePart\n{\n    private NameValueCollection nameValues;\n\n    public NameValuePart(NameValueCollection nameValues)\n    {\n        this.nameValues = nameValues;\n    }\n\n    public override void CopyTo(Stream stream)\n    {\n        string boundary = this.Boundary;\n        StringBuilder sb = new StringBuilder();\n\n        foreach (object element in this.nameValues.Keys)\n        {\n            sb.AppendFormat(\u0022--{0}\u0022, boundary);\n            sb.Append(\u0022\\r\\n\u0022);\n            sb.AppendFormat(\u0022Content-Disposition: form-data; name=\\\u0022{0}\\\u0022;\u0022, element);\n            sb.Append(\u0022\\r\\n\u0022);\n            sb.Append(\u0022\\r\\n\u0022);\n            sb.Append(this.nameValues[element.ToString()]);\n\n            sb.Append(\u0022\\r\\n\u0022);\n\n        }\n\n        sb.AppendFormat(\u0022--{0}\u0022, boundary);\n        sb.Append(\u0022\\r\\n\u0022);\n\n        //Trace.WriteLine(sb.ToString());\n        byte [] data = Encoding.ASCII.GetBytes(sb.ToString());\n        stream.Write(data, 0, data.Length);\n    }\n\n    public override string ContentDisposition\n    {\n        get { return \u0022form-data\u0022; }\n    }\n\n    public override string ContentType\n    {\n        get { return String.Empty; }\n    }\n} \n\nclass FilePart : MimePart\n\n{\n\n    private Stream input;\n\n    private String contentType;\n\n\n\n    public FilePart(Stream input, String name, String contentType)\n\n    {\n\n        this.input = input;\n\n        this.contentType = contentType;\n\n        this.Name = name;\n\n    }\n\n\n\n    public override void CopyTo(Stream stream)\n\n    {\n\n        StringBuilder sb = new StringBuilder();\n\n        sb.AppendFormat(\u0022Content-Disposition: {0}\u0022, this.ContentDisposition);\n\n        if (this.Name != null)\n\n            sb.Append(\u0022; \u0022).AppendFormat(\u0022name=\\\u0022{0}\\\u0022\u0022, this.Name);\n\n        if (this.FileName != null)\n\n            sb.Append(\u0022; \u0022).AppendFormat(\u0022filename=\\\u0022{0}\\\u0022\u0022, this.FileName);\n\n        sb.Append(\u0022\\r\\n\u0022);\n\n        sb.AppendFormat(this.ContentType);\n\n        sb.Append(\u0022\\r\\n\u0022);\n\n        sb.Append(\u0022\\r\\n\u0022);\n\n\n\n    // serialize the header data.\n\n    byte[] buffer = Encoding.ASCII.GetBytes(sb.ToString());\n\n    stream.Write(buffer, 0, buffer.Length);\n\n\n\n    // send the stream.\n\n    byte[] readBuffer = new byte[1024];\n\n    int read = input.Read(readBuffer, 0, readBuffer.Length);\n\n    while (read \u003E 0)\n\n    {\n\n        stream.Write(readBuffer, 0, read);\n\n        read = input.Read(readBuffer, 0, readBuffer.Length);\n\n    }\n\n\n\n    // write the terminating boundary\n\n    sb.Length = 0;\n\n    sb.Append(\u0022\\r\\n\u0022);\n\n    sb.AppendFormat(\u0022--{0}\u0022, this.Boundary);\n\n    sb.Append(\u0022\\r\\n\u0022);\n\n    buffer = Encoding.ASCII.GetBytes(sb.ToString());\n\n    stream.Write(buffer, 0, buffer.Length);\n\n\n\n}\n\n public override string ContentDisposition\n {\n      get { return \u0022file\u0022; }\n }\n\n\n\n public override string ContentType\n {\n    get { \n       return String.Format(\u0022content-type: {0}\u0022, this.contentType); \n     }\n }\n\n public String FileName { get; set; }\n\n}\n\n    /// \n    /// Helper class that encapsulates all file uploads\n    /// in a mime part.\n    /// \n\n    class FilesCollection : MimePart\n    {\n        private List files;\n\n        public FilesCollection()\n        {\n            this.files = new List();\n            this.Boundary = MultipartHelper.GetBoundary();\n        }\n\n        public int Count\n        {\n            get { return this.files.Count; }\n        }\n\n        public override string ContentDisposition\n        {\n            get\n            {\n                return String.Format(\u0022form-data; name=\\\u0022{0}\\\u0022\u0022, this.Name);\n            }\n        }\n\n        public override string ContentType\n        {\n            get { return String.Format(\u0022multipart/mixed; boundary={0}\u0022, this.Boundary); }\n        }\n\n        public override void CopyTo(Stream stream)\n        {\n            // serialize the headers\n            StringBuilder sb = new StringBuilder(128);\n            sb.Append(\u0022Content-Disposition: \u0022).Append(this.ContentDisposition).Append(\u0022\\r\\n\u0022);\n            sb.Append(\u0022Content-Type: \u0022).Append(this.ContentType).Append(\u0022\\r\\n\u0022);\n            sb.Append(\u0022\\r\\n\u0022);\n            sb.AppendFormat(\u0022--{0}\u0022, this.Boundary).Append(\u0022\\r\\n\u0022);\n\n            byte[] headerBytes = Encoding.ASCII.GetBytes(sb.ToString());\n            stream.Write(headerBytes, 0, headerBytes.Length);\n            foreach (FilePart part in files)\n            {\n                part.Boundary = this.Boundary;\n                part.CopyTo(stream);\n            }\n        }\n\n        public void Add(FilePart part)\n        {\n            this.files.Add(part);\n        }\n    }\n\n/// \n/// Helper class to aid in uploading multipart\n/// entities to HTTP web endpoints.\n/// \n\nclass MultipartHelper\n{\n    private static Random random = new Random(Environment.TickCount);\n\n    private List formData = new List();\n    private FilesCollection files = null;\n    private MemoryStream bufferStream = new MemoryStream();\n    private string boundary;\n\n    public String Boundary { get { return boundary; } }\n\n    public static String GetBoundary()\n    {\n        return Environment.TickCount.ToString(\u0022X\u0022);\n    }\n\n    public MultipartHelper()\n    {\n        this.boundary = MultipartHelper.GetBoundary();\n    }\n\n    public void Add(NameValuePart part)\n    {\n        this.formData.Add(part);\n        part.Boundary = boundary;\n    }\n\n    public void Add(FilePart part)\n    {\n        if (files == null)\n        {\n            files = new FilesCollection();\n        }\n        this.files.Add(part);\n    }\n\n    public void Upload(WebClient client, string address, string method)\n    {\n        // set header\n        client.Headers.Add(HttpRequestHeader.ContentType, \u0022multipart/form-data; boundary=\u0022 \u002B this.boundary);\n        Trace.WriteLine(\u0022Content-Type: multipart/form-data; boundary=\u0022 \u002B this.boundary \u002B \u0022\\r\\n\u0022);\n\n        // first, serialize the form data\n        foreach (NameValuePart part in this.formData)\n        {\n            part.CopyTo(bufferStream);\n        }\n\n        // serialize the files.\n        this.files.CopyTo(bufferStream);\n\n        if (this.files.Count \u003E 0)\n        {\n            // add the terminating boundary.\n            StringBuilder sb = new StringBuilder();\n            sb.AppendFormat(\u0022--{0}\u0022, this.Boundary).Append(\u0022\\r\\n\u0022);\n            byte [] buffer = Encoding.ASCII.GetBytes(sb.ToString());\n            bufferStream.Write(buffer, 0, buffer.Length);\n        }\n\n        bufferStream.Seek(0, SeekOrigin.Begin);\n\n        Trace.WriteLine(Encoding.ASCII.GetString(bufferStream.ToArray()));\n        byte [] response = client.UploadData(address, method, bufferStream.ToArray());\n        Trace.WriteLine(\u0022----- RESPONSE ------\u0022);\n        Trace.WriteLine(Encoding.ASCII.GetString(response));\n    }\n\n    /// \n    /// Helper class that encapsulates all file uploads\n    /// in a mime part.\n    /// \n\n    class FilesCollection : MimePart\n    {\n        private List files;\n\n        public FilesCollection()\n        {\n            this.files = new List();\n            this.Boundary = MultipartHelper.GetBoundary();\n        }\n\n        public int Count\n        {\n            get { return this.files.Count; }\n        }\n\n        public override string ContentDisposition\n        {\n            get\n            {\n                return String.Format(\u0022form-data; name=\\\u0022{0}\\\u0022\u0022, this.Name);\n            }\n        }\n\n        public override string ContentType\n        {\n            get { return String.Format(\u0022multipart/mixed; boundary={0}\u0022, this.Boundary); }\n        }\n\n        public override void CopyTo(Stream stream)\n        {\n            // serialize the headers\n            StringBuilder sb = new StringBuilder(128);\n            sb.Append(\u0022Content-Disposition: \u0022).Append(this.ContentDisposition).Append(\u0022\\r\\n\u0022);\n            sb.Append(\u0022Content-Type: \u0022).Append(this.ContentType).Append(\u0022\\r\\n\u0022);\n            sb.Append(\u0022\\r\\n\u0022);\n            sb.AppendFormat(\u0022--{0}\u0022, this.Boundary).Append(\u0022\\r\\n\u0022);\n\n            byte[] headerBytes = Encoding.ASCII.GetBytes(sb.ToString());\n            stream.Write(headerBytes, 0, headerBytes.Length);\n            foreach (FilePart part in files)\n            {\n                part.Boundary = this.Boundary;\n                part.CopyTo(stream);\n            }\n        }\n\n        public void Add(FilePart part)\n        {\n            this.files.Add(part);\n        }\n    }\n}\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        Trace.Listeners.Add(new ConsoleTraceListener());\n        try\n        {\n            using (StreamWriter sw = new StreamWriter(\u0022testfile.txt\u0022, false))\n            {\n                sw.Write(\u0022Hello there!\u0022);\n            }\n\n            using (Stream iniStream = File.OpenRead(@\u0022c:\\platform.ini\u0022))\n            using (Stream fileStream = File.OpenRead(\u0022testfile.txt\u0022))\n            using (WebClient client = new WebClient())\n            {\n                MultipartHelper helper = new MultipartHelper();\n\n                NameValueCollection props = new NameValueCollection();\n                props.Add(\u0022fname\u0022, \u0022john\u0022);\n                props.Add(\u0022id\u0022, \u0022acme\u0022);\n                helper.Add(new NameValuePart(props));\n\n                FilePart filepart = new FilePart(fileStream, \u0022pics1\u0022, \u0022text/plain\u0022);\n                filepart.FileName = \u00221.jpg\u0022;\n                helper.Add(filepart);\n\n                FilePart ini = new FilePart(iniStream, \u0022pics2\u0022, \u0022text/plain\u0022);\n                ini.FileName = \u0022inifile.ini\u0022;\n                helper.Add(ini);\n\n                helper.Upload(client, \u0022http://localhost/form.aspx\u0022, \u0022POST\u0022);\n            }\n        }\n        catch (Exception e)\n        {\n            Trace.WriteLine(e);\n        }\n    }\n}\n\n\nThis will work with all versions of the .NET framework.\n    ","\nI can never get the examples to work properly, I always receive a 500 error when sending it to the server.\n\nHowever I came across a very elegant method of doing it in this url\n\nIt is easily extendible and obviously works with binary files as well as XML.\n\nYou call it using something similar to this\n\nclass Program\n{\n    public static string gsaFeedURL = \u0022http://yourGSA.domain.com:19900/xmlfeed\u0022;\n\n    static void Main()\n    {\n        try\n        {\n            postWebData();\n        }\n        catch (Exception ex)\n        {\n        }\n    }\n\n    // new one I made from C# web service\n    public static void postWebData()\n    {\n        StringDictionary dictionary = new StringDictionary();\n        UploadSpec uploadSpecs = new UploadSpec();\n        UTF8Encoding encoding = new UTF8Encoding();\n        byte[] bytes;\n        Uri gsaURI = new Uri(gsaFeedURL);  // Create new URI to GSA feeder gate\n        string sourceURL = @\u0022C:\\FeedFile.xml\u0022; // Location of the XML feed file\n        // Two parameters to send\n        string feedtype = \u0022full\u0022;\n        string datasource = \u0022test\u0022;            \n\n        try\n        {\n            // Add the parameter values to the dictionary\n            dictionary.Add(\u0022feedtype\u0022, feedtype);\n            dictionary.Add(\u0022datasource\u0022, datasource);\n\n            // Load the feed file created and get its bytes\n            XmlDocument xml = new XmlDocument();\n            xml.Load(sourceURL);\n            bytes = Encoding.UTF8.GetBytes(xml.OuterXml);\n\n            // Add data to upload specs\n            uploadSpecs.Contents = bytes;\n            uploadSpecs.FileName = sourceURL;\n            uploadSpecs.FieldName = \u0022data\u0022;\n\n            // Post the data\n            if ((int)HttpUpload.Upload(gsaURI, dictionary, uploadSpecs).StatusCode == 200)\n            {\n                Console.WriteLine(\u0022Successful.\u0022);\n            }\n            else\n            {\n                // GSA POST not successful\n                Console.WriteLine(\u0022Failure.\u0022);\n            }\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine(ex.Message);\n        }\n    }\n}\n\n    ","\nCheck out the MyToolkit library: \n\nvar request = new HttpPostRequest(\u0022http://www.server.com\u0022);\nrequest.Data.Add(\u0022name\u0022, \u0022value\u0022); // POST data\nrequest.Files.Add(new HttpPostFile(\u0022name\u0022, \u0022file.jpg\u0022, \u0022path/to/file.jpg\u0022)); \n\nawait Http.PostAsync(request, OnRequestFinished);\n\n\nhttp://mytoolkit.codeplex.com/wikipage?title=Http\n    ","\nClient use convert File to ToBase64String, after use Xml to promulgate\nto Server call, this server use File.WriteAllBytes(path,Convert.FromBase64String(dataFile_Client_sent)).\n\nGood lucky!\n    ","\nThis method work for upload multiple image simultaneously \n\n        var flagResult = new viewModel();\n        string boundary = \u0022---------------------------\u0022 \u002B DateTime.Now.Ticks.ToString(\u0022x\u0022);\n        byte[] boundarybytes = System.Text.Encoding.ASCII.GetBytes(\u0022\\r\\n--\u0022 \u002B boundary \u002B \u0022\\r\\n\u0022);\n\n        HttpWebRequest wr = (HttpWebRequest)WebRequest.Create(url);\n        wr.ContentType = \u0022multipart/form-data; boundary=\u0022 \u002B boundary;\n        wr.Method = method;\n        wr.KeepAlive = true;\n        wr.Credentials = System.Net.CredentialCache.DefaultCredentials;\n\n        Stream rs = wr.GetRequestStream();\n\n\n        string path = @filePath;\n        System.IO.DirectoryInfo folderInfo = new DirectoryInfo(path);\n\n        foreach (FileInfo file in folderInfo.GetFiles())\n        {\n            rs.Write(boundarybytes, 0, boundarybytes.Length);\n            string headerTemplate = \u0022Content-Disposition: form-data; name=\\\u0022{0}\\\u0022; filename=\\\u0022{1}\\\u0022\\r\\nContent-Type: {2}\\r\\n\\r\\n\u0022;\n            string header = string.Format(headerTemplate, paramName, file, contentType);\n            byte[] headerbytes = System.Text.Encoding.UTF8.GetBytes(header);\n            rs.Write(headerbytes, 0, headerbytes.Length);\n\n            FileStream fileStream = new FileStream(file.FullName, FileMode.Open, FileAccess.Read);\n            byte[] buffer = new byte[4096];\n            int bytesRead = 0;\n            while ((bytesRead = fileStream.Read(buffer, 0, buffer.Length)) != 0)\n            {\n                rs.Write(buffer, 0, bytesRead);\n            }\n            fileStream.Close();\n        }\n\n        byte[] trailer = System.Text.Encoding.ASCII.GetBytes(\u0022\\r\\n--\u0022 \u002B boundary \u002B \u0022--\\r\\n\u0022);\n        rs.Write(trailer, 0, trailer.Length);\n        rs.Close();\n\n        WebResponse wresp = null;\n        try\n        {\n            wresp = wr.GetResponse();\n            Stream stream2 = wresp.GetResponseStream();\n            StreamReader reader2 = new StreamReader(stream2);\n            var result = reader2.ReadToEnd();\n            var cList = JsonConvert.DeserializeObject\u003CHttpViewModel\u003E(result);\n            if (cList.message==\u0022images uploaded!\u0022)\n            {\n                flagResult.success = true;\n            }\n\n        }\n        catch (Exception ex)\n        {\n            //log.Error(\u0022Error uploading file\u0022, ex);\n            if (wresp != null)\n            {\n                wresp.Close();\n                wresp = null;\n            }\n        }\n        finally\n        {\n            wr = null;\n        }\n        return flagResult;\n    }\n\n    ","\nI realize this is probably really late, but I was searching for the same solution.  I found the following response from a Microsoft rep\n\nprivate void UploadFilesToRemoteUrl(string url, string[] files, string logpath, NameValueCollection nvc)\n{\n\n    long length = 0;\n    string boundary = \u0022----------------------------\u0022 \u002B\n    DateTime.Now.Ticks.ToString(\u0022x\u0022);\n\n\n    HttpWebRequest httpWebRequest2 = (HttpWebRequest)WebRequest.Create(url);\n    httpWebRequest2.ContentType = \u0022multipart/form-data; boundary=\u0022 \u002B\n    boundary;\n    httpWebRequest2.Method = \u0022POST\u0022;\n    httpWebRequest2.KeepAlive = true;\n    httpWebRequest2.Credentials = System.Net.CredentialCache.DefaultCredentials;\n\n\n\n    Stream memStream = new System.IO.MemoryStream();\n    byte[] boundarybytes = System.Text.Encoding.ASCII.GetBytes(\u0022\\r\\n--\u0022 \u002B boundary \u002B \u0022\\r\\n\u0022);\n\n\n    string formdataTemplate = \u0022\\r\\n--\u0022 \u002B boundary \u002B \u0022\\r\\nContent-Disposition: form-data; name=\\\u0022{0}\\\u0022;\\r\\n\\r\\n{1}\u0022;\n\n    foreach(string key in nvc.Keys)\n    {\n        string formitem = string.Format(formdataTemplate, key, nvc[key]);\n        byte[] formitembytes = System.Text.Encoding.UTF8.GetBytes(formitem);\n        memStream.Write(formitembytes, 0, formitembytes.Length);\n    }\n\n\n    memStream.Write(boundarybytes,0,boundarybytes.Length);\n\n    string headerTemplate = \u0022Content-Disposition: form-data; name=\\\u0022{0}\\\u0022; filename=\\\u0022{1}\\\u0022\\r\\n Content-Type: application/octet-stream\\r\\n\\r\\n\u0022;\n\n    for(int i=0;i\u003Cfiles.Length;i\u002B\u002B)\n    {\n\n        string header = string.Format(headerTemplate,\u0022file\u0022\u002Bi,files[i]);\n        byte[] headerbytes = System.Text.Encoding.UTF8.GetBytes(header);\n        memStream.Write(headerbytes,0,headerbytes.Length);\n\n\n        FileStream fileStream = new FileStream(files[i], FileMode.Open,\n        FileAccess.Read);\n        byte[] buffer = new byte[1024];\n\n        int bytesRead = 0;\n\n        while ( (bytesRead = fileStream.Read(buffer, 0, buffer.Length)) != 0 )\n        {\n            memStream.Write(buffer, 0, bytesRead);\n        }\n\n\n        memStream.Write(boundarybytes,0,boundarybytes.Length);\n\n\n        fileStream.Close();\n    }\n\n    httpWebRequest2.ContentLength = memStream.Length;\n    Stream requestStream = httpWebRequest2.GetRequestStream();\n\n    memStream.Position = 0;\n    byte[] tempBuffer = new byte[memStream.Length];\n    memStream.Read(tempBuffer,0,tempBuffer.Length);\n    memStream.Close();\n    requestStream.Write(tempBuffer,0,tempBuffer.Length );\n    requestStream.Close();\n\n\n    WebResponse webResponse2 = httpWebRequest2.GetResponse();\n\n    Stream stream2 = webResponse2.GetResponseStream();\n    StreamReader reader2 = new StreamReader(stream2);\n\n    webResponse2.Close();\n    httpWebRequest2 = null;\n    webResponse2 = null;\n\n}\n\n    ","\n                \n                Works like a charm. Thanks a lot.\n                \n\u2013\u00A0Yoo Matsuo\n                Feb 21 \u002711 at 12:31\n            ","\n                \n                i have tried this code but it doesnt upload jpeg files and it doesnt get any error? how is this possible.\n                \n\u2013\u00A0Orhan Cinar\n                Mar 28 \u002711 at 11:37\n            ","\n                \n                When i try send file over 1MB, then a get 500 Server error, file under 1MB work fine, how is possible ?\n                \n\u2013\u00A0David Hor\u00E1k\n                Apr 29 \u002711 at 14:46\n            ","\n                \n                I added a wr.CookieContainer to keep the cookies of earlier calls.\n                \n\u2013\u00A0JoaquinG\n                Jun 1 \u002711 at 8:41\n            ","\n                \n                If you\u0027re going to extend this to do multiple files, be warned:  only the last boundary gets the 2 extra dashes: \u0022\\r\\n--\u0022 \u002B boundary \u002B \u0022--\\r\\n\u0022  Otherwise the additional files will be cut off.\n                \n\u2013\u00A0Peter Drier\n                Oct 3 \u002711 at 15:04\n                        \n                            \n                        \n            ","\n                \n                FYI...you can refactor out the intermediate MemoryStream and write directly to the request stream. The key is to be sure to close the request stream when you\u0027re done, which sets the content length of the request for you!\n                \n\u2013\u00A0John Clayton\n                Aug 21 \u002709 at 21:55\n            ","\n                \n                That worked for me once I removed an extra space. \u0022r\\n Content-Type: application/octet-stream\u0022 needed to be \u0022\\r\\nContent-Type: application/octet-stream\u0022.\n                \n\u2013\u00A0Karl B\n                Feb 19 \u002710 at 13:53\n            ","\n                \n                I also found that the double \\r\\n at the end of headers can cause problems. Removing one of them fixed my problems.\n                \n\u2013\u00A0Hugo Estrada\n                Jul 15 \u002710 at 16:33\n            ","\n                \n                Okay, this code didn\u0027t work for me, but code an Christian worked perfectly for me first go - stackoverflow.com/questions/566462/\u2026  -- I was testing against cgi-lib.berkeley.edu/ex/fup.html\n                \n\u2013\u00A0CVertex\n                Sep 29 \u002710 at 3:38\n                        \n                            \n                        \n            ","\n                \n                I know this is an \u0022old\u0022 answered question but I was only just this week attempting to do this. With the current .NET framework you can do all of this in 3 lines of code...  WebClient client = new WebClient(); byte[] responseBinary = client.UploadFile(url, file); string result = Encoding.UTF8.GetString(responseBinary);\n                \n\u2013\u00A0soutarm\n                Aug 16 \u002711 at 6:34\n                        \n                            \n                        \n            ","\n                \n                Can be used with 4.0 using Microsoft.Net.Http NuGet package. See: stackoverflow.com/questions/11145053/\u2026.\n                \n\u2013\u00A0amolbk\n                Sep 19 \u002713 at 9:42\n                        \n                            \n                        \n            ","\n                \n                This ends up being a really easy way to to do some pretty powerful stuff, including setting custom headers for each form part.\n                \n\u2013\u00A0JasonRShaver\n                Oct 5 \u002713 at 3:32\n            ","\n                \n                @php-jquery-programmer, it\u0027s generic example code so the parameters have generic names. Think of \u0022param1\u0022 as \u0022your_well_named_param_here\u0022 and please reconsider your -1.\n                \n\u2013\u00A0Joshcodes\n                Mar 5 \u002714 at 22:04\n            ","\n                \n                What do you suggest instead of param1?\n                \n\u2013\u00A0Joshcodes\n                Mar 14 \u002714 at 14:12\n            ","\n                \n                Give me a suggestion to change it to bro. Does \u0022filename\u0022 work for you?\n                \n\u2013\u00A0Joshcodes\n                Mar 25 \u002714 at 14:01\n            ","\n                \n                Thanks for the link Chris I actually implemented the other one into my own library and added those support (other than memory). Also converted to VB.NET already :)\n                \n\u2013\u00A0dr. evil\n                Apr 23 \u002709 at 17:53\n            ","\n                \n                Thanks, Chris. This helped a ton!\n                \n\u2013\u00A0flipdoubt\n                Aug 24 \u002711 at 16:47\n            ","\n                \n                First class solution! Thanks very much.\n                \n\u2013\u00A0Bob Denny\n                May 11 \u002712 at 3:17\n            ","\n                \n                Thanks for the heads up!  Unfortunately, I don\u0027t have control of that site. I found the page (including source code) on archive.org and updated the link accordingly.\n                \n\u2013\u00A0Chris Hynes\n                Jul 6 \u002716 at 22:56\n            ","\n                \n                Will anything change if the content-type were multipart/related ?\n                \n\u2013\u00A0Som Bhattacharyya\n                Oct 16 \u002714 at 9:58\n            ","\n                \n                Thanks buy I\u0027m not after a WebDAV or similar solution, I clarified my answer. Please see the edit.\n                \n\u2013\u00A0dr. evil\n                Feb 19 \u002709 at 18:19\n            ","\n                \n                It should be with HTTPWebrequest, I know WebClient but it\u0027s no good for this project.\n                \n\u2013\u00A0dr. evil\n                Feb 19 \u002709 at 18:17\n            ","\n                \n                This didn\u0027t work for me until I modified the last boundary entry. Make sure the boundary after the last file has two dashes at the end \\r\\n--\u0022 \u002B boundary \u002B \u0022--\\r\\n\n                \n\u2013\u00A0Ben Ripley\n                Jun 7 \u002713 at 0:58\n            ","\n                \n                \u002B1 Still webclient is too non-customisable so implementing it would be awkward, but this is a really interesting approach, and I didn\u0027t know that it was possible.\n                \n\u2013\u00A0dr. evil\n                Apr 24 \u002709 at 21:22\n            ","\n                \n                Worked well for me - I needed to upload with a byte[].  Thanks!\n                \n\u2013\u00A0Dicer\n                Mar 17 \u002717 at 16:35\n            ","\n                \n                nice summary of the longer answers. note: i got 400 bad request when using your code and needed to remove the leading \\r\\n before the first boundary\n                \n\u2013\u00A0jemand771\n                Feb 19 at 16:13\n            ","\n                \n                So, essentially the same code as dr. evil above?   stackoverflow.com/questions/566462/\u2026\n                \n\u2013\u00A0Travis Collins\n                Feb 12 \u002710 at 3:10\n                        \n                            \n                        \n            "]},{"Id":"e2669586-93cf-4aa5-8381-862604e20d31","QuestionId":7074,"Description":"What is the difference between String and string in C#?","Votes":6749,"Views":1122562,"Tags":["c#",".net","string","types","alias"],"Discussions":["\nstring is an alias in C# for System.String.\nSo technically, there is no difference.  It\u0027s like int vs. System.Int32.\n\nAs far as guidelines, it\u0027s generally recommended to use string any time you\u0027re referring to an object.\n\ne.g. \n\nstring place = \u0022world\u0022;\n\n\nLikewise, I think it\u0027s generally recommended to use String if you need to refer specifically to the class.\n\ne.g.\n\nstring greet = String.Format(\u0022Hello {0}!\u0022, place);\n\n\nThis is the style that Microsoft tends to use in their examples.\n\nIt appears that the guidance in this area may have changed, as StyleCop now enforces the use of the C# specific aliases.\n    ","\n\nJust for the sake of completeness, here\u0027s a brain dump of related information...\nAs others have noted, string is an alias for System.String. Assuming your code using String compiles to System.String (i.e. you haven\u0027t got a using directive for some other namespace with a different String type), they compile to the same code, so at execution time there is no difference whatsoever. This is just one of the aliases in C#. The complete list is:\nobject:  System.Object\nstring:  System.String\nbool:    System.Boolean\nbyte:    System.Byte\nsbyte:   System.SByte\nshort:   System.Int16\nushort:  System.UInt16\nint:     System.Int32\nuint:    System.UInt32\nlong:    System.Int64\nulong:   System.UInt64\nfloat:   System.Single\ndouble:  System.Double\ndecimal: System.Decimal\nchar:    System.Char\n\nApart from string and object, the aliases are all to value types. decimal is a value type, but not a primitive type in the CLR. The only primitive type which doesn\u0027t have an alias is System.IntPtr.\nIn the spec, the value type aliases are known as \u0022simple types\u0022. Literals can be used for constant values of every simple type; no other value types have literal forms available. (Compare this with VB, which allows DateTime literals, and has an alias for it too.)\nThere is one circumstance in which you have to use the aliases: when explicitly specifying an enum\u0027s underlying type. For instance:\npublic enum Foo : UInt32 {} // Invalid\npublic enum Bar : uint   {} // Valid\n\nThat\u0027s just a matter of the way the spec defines enum declarations - the part after the colon has to be the integral-type production, which is one token of sbyte, byte, short, ushort, int, uint, long, ulong, char... as opposed to a type production as used by variable declarations for example. It doesn\u0027t indicate any other difference.\nFinally, when it comes to which to use: personally I use the aliases everywhere for the implementation, but the CLR type for any APIs. It really doesn\u0027t matter too much which you use in terms of implementation - consistency among your team is nice, but no-one else is going to care. On the other hand, it\u0027s genuinely important that if you refer to a type in an API, you do so in a language-neutral way. A method called ReadInt32 is unambiguous, whereas a method called ReadInt requires interpretation. The caller could be using a language that defines an int alias for Int16, for example. The .NET framework designers have followed this pattern, good examples being in the BitConverter, BinaryReader and Convert classes.\n    ","\nString stands for System.String and it is a .NET Framework type. string is an alias in the C# language for  System.String. Both of them are compiled to System.String in IL (Intermediate Language), so there is no difference. Choose what you like and use that. If you code in C#, I\u0027d prefer string as it\u0027s a C# type alias and well-known by C# programmers.\n\nI can say the same about (int, System.Int32) etc..\n    ","\nThe best answer I have ever heard about using the provided type aliases in C# comes from Jeffrey Richter in his book CLR Via C#. Here are his 3 reasons:\n\n\n  \n  I\u0027ve seen a number of developers confused, not knowing whether to use string or String in their code. Because in C# the string (a keyword) maps exactly to System.String (an FCL type), there is no difference and either can be used.\n  In C#, long maps to System.Int64, but in a different programming language, long could map to an Int16 or Int32. In fact, C\u002B\u002B/CLI does in fact treat long as an Int32. Someone reading source code in one language could easily misinterpret the code\u0027s intention if he or she were used to programming in a different programming language. In fact, most languages won\u0027t even treat long as a keyword and won\u0027t compile code that uses it.\n  The FCL has many methods that have type names as part of their method names. For example, the BinaryReader type offers methods such as ReadBoolean, ReadInt32, ReadSingle, and so on, and the System.Convert type offers methods such as ToBoolean, ToInt32, ToSingle, and so on. Although it\u0027s legal to write the following code, the line with float feels very unnatural to me, and it\u0027s not obvious that the line is correct:\n  \n\n\nBinaryReader br = new BinaryReader(...);\nfloat val  = br.ReadSingle(); // OK, but feels unnatural\nSingle val = br.ReadSingle(); // OK and feels good\n\n\nSo there you have it. I think these are all really good points. I however, don\u0027t find myself using Jeffrey\u0027s advice in my own code. Maybe I am too stuck in my C# world but I end up trying to make my code look like the framework code.\n    ","\nstring is a reserved word, but String is just a class name. \nThis means that string cannot be used as a variable name by itself.\n\nIf for some reason you wanted a variable called string, you\u0027d see only the first of these compiles:\n\nStringBuilder String = new StringBuilder();  // compiles\nStringBuilder string = new StringBuilder();  // doesn\u0027t compile \n\n\nIf you really want a variable name called string you can use @ as a prefix:\n\nStringBuilder @string = new StringBuilder();\n\n\nAnother critical difference: Stack Overflow highlights them differently. \n    ","\nThere is one difference - you can\u0027t use String without using System; beforehand.\n    ","\nIt\u0027s been covered above; however, you can\u0027t use string in reflection; you must use String.\n    ","\nSystem.String is the .NET string class - in C# string is an alias for System.String - so in use they are the same.\n\nAs for guidelines I wouldn\u0027t get too bogged down and just use whichever you feel like - there are more important things in life and the code is going to be the same anyway.\n\nIf you find yourselves building systems where it is necessary to specify the size of the integers you are using and so tend to use Int16, Int32, UInt16, UInt32 etc. then it might look more natural to use String - and when moving around between different .net languages it might make things more understandable - otherwise I would use string and int.\n    ","\n\nI prefer the capitalized .NET types (rather than the aliases) for formatting reasons. The .NET types are colored the same as other object types (the value types are proper objects, after all).\n\nConditional and control keywords (like if, switch, and return) are lowercase and colored dark blue (by default). And I would rather not have the disagreement in use and format.\n\nConsider:\n\nString someString; \nstring anotherString; \n\n    ","\nstring and String are identical in all ways (except the uppercase \u0022S\u0022).  There are no performance implications either way.\n\nLowercase string is preferred in most projects due to the syntax highlighting\n    ","\nC# is a language which is used together with the CLR.\n\nstring is a type in C#.\n\nSystem.String is a type in the CLR.\n\nWhen you use C# together with the CLR string will be mapped to System.String.\n\nTheoretically, you could implement a C#-compiler that generated Java bytecode. A sensible implementation of this compiler would probably map string to java.lang.String in order to interoperate with the Java runtime library.\n    ","\nThis YouTube video demonstrates practically how they differ. \n\nBut now for a long textual answer.\n\nWhen we talk about .NET there are two different things one there is .NET framework and the other there are languages ( C# , VB.NET etc) which use that framework.\n\n\n\n\u0022System.String\u0022 a.k.a \u0022String\u0022 ( capital \u0022S\u0022) is a .NET framework data type while \u0022string\u0022 is a C# data type.\n\n\n\nIn short \u0022String\u0022 is an alias ( the same thing called with different names) of \u0022string\u0022. So technically both the below code statements will give the same output.\n\nString s = \u0022I am String\u0022;\n\n\nor\n\nstring s = \u0022I am String\u0022;\n\n\nIn the same way there are aliases for other c# data type as shown below:-\n\nobject: System.Object, string: System.String, bool: System.Boolean, byte: System.Byte, sbyte: System.SByte, short: System.Int16 and so on\n\nNow the million dollar question from programmer\u0027s point of view So when to use \u0022String\u0022 and \u0022string\u0022?\n\nFirst thing to avoid confusion use one of them consistently. But from best practices perspective when you do variable declaration it\u0027s good to use \u0022string\u0022 ( small \u0022s\u0022) and when you are using it as a class name then \u0022String\u0022 ( capital \u0022S\u0022) is preferred.\n\nIn the below code the left hand side is a variable declaration and it declared using \u0022string\u0022. At the right hand side we are calling a method so \u0022String\u0022 is more sensible.\n\nstring s = String.ToUpper() ;\n\n    ","\nLower case string is an alias for System.String.\nThey are the same in C#.\n\nThere\u0027s a debate over whether you should use the System types (System.Int32, System.String, etc.) types or the C# aliases (int, string, etc). I personally believe you should use the C# aliases, but that\u0027s just my personal preference.\n    ","\nstring is just an alias for System.String. The compiler will treat them identically.\n\nThe only practical difference is the syntax highlighting as you mention, and that you have to write using System if you use String.\n    ","\nBoth are same. But from coding guidelines perspective it\u0027s better to use string instead of String. This is what generally developers use. e.g. instead of using Int32 we use int as int is alias to Int32\n\nFYI\n\u201CThe keyword string is simply an alias for the predefined class System.String.\u201D - C# Language Specification 4.2.3\nhttp://msdn2.microsoft.com/En-US/library/aa691153.aspx\n    ","\nAs the others are saying, they\u0027re the same.  StyleCop rules, by default, will enforce you to use string as a C# code style best practice, except when referencing System.String static functions, such as String.Format, String.Join, String.Concat, etc...\n    ","\nNew answer after 6 years and 5 months (procrastination).\n\nWhile string is a reserved C# keyword that always has a fixed meaning, String is just an ordinary identifier which could refer to anything. Depending on members of the current type, the current namespace and the applied using directives and their placement, String could be a value or a type distinct from global::System.String.\n\nI shall provide two examples where using directives will not help.\n\n\n\nFirst, when String is a value of the current type (or a local variable):\n\nclass MySequence\u003CTElement\u003E\n{\n  public IEnumerable\u003CTElement\u003E String { get; set; }\n\n  void Example()\n  {\n    var test = String.Format(\u0022Hello {0}.\u0022, DateTime.Today.DayOfWeek);\n  }\n}\n\n\nThe above will not compile because IEnumerable\u003C\u003E does not have a non-static member called Format, and no extension methods apply. In the above case, it may still be possible to use String in other contexts where a type is the only possibility syntactically. For example String local = \u0022Hi mum!\u0022; could be OK (depending on namespace and using directives).\n\nWorse: Saying String.Concat(someSequence) will likely (depending on usings) go to the Linq extension method Enumerable.Concat. It will not go to the static method string.Concat.\n\n\n\nSecondly, when String is another type, nested inside the current type:\n\nclass MyPiano\n{\n  protected class String\n  {\n  }\n\n  void Example()\n  {\n    var test1 = String.Format(\u0022Hello {0}.\u0022, DateTime.Today.DayOfWeek);\n    String test2 = \u0022Goodbye\u0022;\n  }\n}\n\n\nNeither statement in the Example method compiles. Here String is always a piano string, MyPiano.String. No member (static or not) Format exists on it (or is inherited from its base class). And the value \u0022Goodbye\u0022 cannot be converted into it.\n    ","\nUsing System types makes it easier to port between C# and VB.Net, if you are into that sort of thing.\n    ","\nAgainst what seems to be common practice among other programmers, I prefer String over string, just to highlight the fact that String is a reference type, as Jon Skeet mentioned.\n    ","\nstring is an alias (or shorthand) of System.String. That means, by typing string we meant System.String. You can read more in think link: \u0027string\u0027 is an alias/shorthand of System.String.\n    ","\nI\u0027d just like to add this to lfousts answer, from Ritchers book:\n\n\n  The C# language specification states, \u201CAs a matter of style, use of the keyword is favored over\n  use of the complete system type name.\u201D I disagree with the language specification; I prefer\n  to use the FCL type names and completely avoid the primitive type names. In fact, I wish that\n  compilers didn\u2019t even offer the primitive type names and forced developers to use the FCL\n  type names instead. Here are my reasons:\n  \n  \n  I\u2019ve seen a number of developers confused, not knowing whether to use string\n  or String in their code. Because in C# string (a keyword) maps exactly to\n  System.String (an FCL type), there is no difference and either can be used. Similarly,\n  I\u2019ve heard some developers say that int represents a 32-bit integer when the application\n  is running on a 32-bit OS and that it represents a 64-bit integer when the application\n  is running on a 64-bit OS. This statement is absolutely false: in C#, an int always maps\n  to System.Int32, and therefore it represents a 32-bit integer regardless of the OS the\n  code is running on. If programmers would use Int32 in their code, then this potential\n  confusion is also eliminated.\n  In C#, long maps to System.Int64, but in a different programming language, long\n  could map to an Int16 or Int32. In fact, C\u002B\u002B/CLI does treat long as an Int32.\n  Someone reading source code in one language could easily misinterpret the code\u2019s\n  intention if he or she were used to programming in a different programming language.\n  In fact, most languages won\u2019t even treat long as a keyword and won\u2019t compile code\n  that uses it.\n  The FCL has many methods that have type names as part of their method names. For\n  example, the BinaryReader type offers methods such as ReadBoolean, ReadInt32,\n  ReadSingle, and so on, and the System.Convert type offers methods such as\n  ToBoolean, ToInt32, ToSingle, and so on. Although it\u2019s legal to write the following\n  code, the line with float feels very unnatural to me, and it\u2019s not obvious that the line is\n  correct:\n\nBinaryReader br = new BinaryReader(...);\nfloat val = br.ReadSingle(); // OK, but feels unnatural\nSingle val = br.ReadSingle(); // OK and feels good\n\n  Many programmers that use C# exclusively tend to forget that other programming\n  languages can be used against the CLR, and because of this, C#-isms creep into the\n  class library code. For example, Microsoft\u2019s FCL is almost exclusively written in C# and\n  developers on the FCL team have now introduced methods into the library such as\n  Array\u2019s GetLongLength, which returns an Int64 value that is a long in C# but not\n  in other languages (like C\u002B\u002B/CLI). Another example is System.Linq.Enumerable\u2019s\n  LongCount method.\n  \n\n\nI didn\u0027t get his opinion before I read the complete paragraph.  \n    ","\nString (System.String) is a class in the base class library. string (lower case) is a reserved work in C# that is an alias for System.String. Int32 vs int is a similar situation as is Boolean vs. bool. These C# language specific keywords enable you to declare primitives in a style similar to C. \n    ","\nString is not a keyword and it can be used as Identifier whereas string is a keyword and cannot be used as Identifier. And in function point of view both are same.\n    ","\nIt\u0027s a matter of convention, really.  string just looks more like C/C\u002B\u002B style.  The general convention is to use whatever shortcuts your chosen language has provided (int/Int for Int32).  This goes for \u0022object\u0022 and decimal as well.\n\nTheoretically this could help to port code into some future 64-bit standard in which \u0022int\u0022 might mean Int64, but that\u0027s not the point, and I would expect any upgrade wizard to change any int references to Int32 anyway just to be safe.\n    ","\nComing late to the party: I use the CLR types 100% of the time (well, except if forced to use the C# type, but I don\u0027t remember when the last time that was). \n\nI originally started doing this years ago, as per the CLR books by Ritchie. It made sense to me that all CLR languages ultimately have to be able to support the set of CLR types, so using the CLR types yourself provided clearer, and possibly more \u0022reusable\u0022 code.\n\nNow that I\u0027ve been doing it for years, it\u0027s a habit and I like the coloration that VS shows for the CLR types.\n\nThe only real downer is that auto-complete uses the C# type, so I end up re-typing automatically generated types to specify the CLR type instead.\n\nAlso, now, when I see \u0022int\u0022 or \u0022string\u0022, it just looks really wrong to me, like I\u0027m looking at 1970\u0027s C code.\n    ","\nThere is no difference.\n\nThe C# keyword string maps to the .NET type System.String - it is an alias that keeps to the naming conventions of the language.\n\nSimilarly, int maps to System.Int32.\n    ","\nThere\u0027s a quote on this issue from Daniel Solis\u0027 book.\n\n\n  All the predefined types  are mapped directly to\n  underlying .NET types. The C# type names (string) are simply aliases for the\n  .NET types (String or System.String), so using the .NET names works fine syntactically, although\n  this is discouraged. Within a C# program, you should use the C# names\n  rather than the .NET names.\n\n    ","\n@JaredPar (a developer on the C# compiler and prolific SO user!) wrote a great blog post on this issue. I think it is worth sharing here. It is a nice perspective on our subject.\n\n\n  string vs. String is not a style debate\n  \n  [...]\n  \n  The keyword string has concrete meaning in C#. It is the type System.String which exists in the core runtime assembly. The runtime intrinsictly understands this type and provides the capabilities developers expect for strings in .NET. Its presence is so critical to C# that if that type doesn\u2019t exist the compiler will exit before attempting to even parse a line of code. Hence string has a precise, unambiguous meaning in C# code.\n  \n  The identifier String though has no concrete meaning in C#. It is an identifier that goes through all the name lookup rules as Widget, Student, etc \u2026 It could bind to string or it could bind to a type in another assembly entirely whose purposes may be entirely different than string. Worse it could be defined in a way such that code like String s = \u0022hello\u0022; continued to compile.\n\nclass TricksterString { \n  void Example() {\n    String s = \u0022Hello World\u0022; // Okay but probably not what you expect.\n  }\n}\n\nclass String {\n  public static implicit operator String(string s) =\u003E null;\n}\n\n  \n  The actual meaning of String will always depend on name resolution.\n  That means it depends on all the source files in the project and all\n  the types defined in all the referenced assemblies. In short it\n  requires quite a bit of context to know what it means.\n  \n  True that in the vast majority of cases String and string will bind to\n  the same type. But using String still means developers are leaving\n  their program up to interpretation in places where there is only one\n  correct answer. When String does bind to the wrong type it can leave\n  developers debugging for hours, filing bugs on the compiler team and\n  generally wasting time that could\u2019ve been saved by using string.\n  \n  Another way to visualize the difference is with this sample:\n\nstring s1 = 42; // Errors 100% of the time  \nString s2 = 42; // Might error, might not, depends on the code\n\n  \n  Many will argue that while this is information technically accurate using String is still fine because it\u2019s exceedingly rare that a code base would define a type of this name. Or that when String is defined it\u2019s a sign of a bad code base.\n  \n  [...]\n  \n  You\u2019ll see that String is defined for a number of completely valid purposes: reflection helpers, serialization libraries, lexers, protocols, etc \u2026 For any of these libraries String vs. string has real consequences depending on where the code is used.\n  \n  So remember when you see the String vs. string debate this is about semantics, not style. Choosing string gives crisp meaning to your code base. Choosing String isn\u2019t wrong but it\u2019s leaving the door open for surprises in the future.\n\n\nNote: I copy/pasted most of the blog post for archive reason. I ignore some parts, so I recommend to skip and to read the blog post if you can.\n    ","\nYes, that\u0027s no difference between them, just like the bool and Boolean.\n    ","\nstring is a keyword, and you can\u0027t use string as an identifier. \n\nString is not a keyword, and you can use it as an identifier:\n\nExample\n\nstring String = \u0022I am a string\u0022;\n\n\nThe keyword string  is an alias for\n System.String aside from the keyword issue, the two are exactly\n equivalent.\n\n typeof(string) == typeof(String) == typeof(System.String)\n\n    ","\n                \n                If you decide to use StyleCop and follow that, that will say to use the types specific to the language. So for C# you\u0027ll have string (instead of String), int (instead of Int32), float (instead of Single) - stylecop.soyuz5.com/SA1121.html\n                \n\u2013\u00A0Dominic Zukiewicz\n                May 22 \u002712 at 22:36\n                        \n                            \n                        \n            ","\n                \n                I always use the aliases because I\u0027ve assumed one day it might come in handy because they are acting as an abstraction, so therefore can have their implementations changed without me having to know.\n                \n\u2013\u00A0Rob\n                Oct 12 \u002712 at 23:25\n            ","\n                \n                Visual Studio 2015 says that String.Format should be changed to string.Format, so I guess Microsoft is going that way. I have also always used String for the static methods.\n                \n\u2013\u00A0Sami Kuhmonen\n                Dec 22 \u002714 at 5:21\n            ","\n                \n                StyleCop is awesomerful af---#linting\n                \n\u2013\u00A0A-Dubb\n                Oct 4 at 20:16\n            ","\n                \n                What do you say to the fact that you could define your own type \u201CString\u201D but can\u2019t do the same for \u201Cstring\u201D as it\u2019s a keyword,  as explained in stackoverflow.com/questions/7074/\u2026\n                \n\u2013\u00A0jmoreno\n                Oct 13 at 21:37\n            ","\n                \n                I personally prefer using \u0022Int32\u0022, since it immediately shows the range of the value. Imagine if they upgraded the type of \u0022int\u0022 on later higher-bit systems. \u0027int\u0027 in c is apparently seen as \u0022the integer type that the target processor is most efficient working with\u0022, and defined as \u0022at least 16 bit\u0022. I\u0027d prefer predictable consistency there, thank you very much.\n                \n\u2013\u00A0Nyerguds\n                Apr 28 \u002716 at 11:41\n                        \n                            \n                        \n            ","\n                \n                @MyDaftQuestions I concur. If anything it would make sense to consistently use the .net types because they are language ignorant and the type is obvious, independent of any language (do I know all of F#\u0027s or VB\u0027s idiosyncrasies?).\n                \n\u2013\u00A0Peter - Reinstate Monica\n                Jan 21 \u002717 at 17:39\n                        \n                            \n                        \n            ","\n                \n                @Nyerguds There are two reasons to simply not worry about it. One is that int is defined in the C# language spec as a 32 bit integer regardless of the hardware. C#, despite a shared heritage in the mists of time, is not actually C. Changing int to a 64 bit integer would be a breaking change in the specification and the language. It would also require redefining long, as long is currently the 64 bit integer. The other reason not to worry is irrelevant since the types will never change, but .NET is just abstract enough that 99% of the time you don\u0027t have to think about it anyway. ;-)\n                \n\u2013\u00A0Craig\n                Dec 8 \u002718 at 2:47\n            ","\n                \n                @Craig I dig into lots of old proprietary game formats where I do have to think about that all the time, though. And then using Int16, Int32 and Int64 is a lot more transparent in the code than using the rather nondescriptive short, int and long\n                \n\u2013\u00A0Nyerguds\n                Dec 9 \u002718 at 2:29\n                        \n                            \n                        \n            ","\n                \n                But short, not, long, float, double, et al are descriptive, because they\u2019re in the language spec. C# is not C. I prefer them on declarations because they\u2019re concise, small, and aesthetically pleasing. I do prefer the Torre library names on API\u2019s where the API has a data type dependency.\n                \n\u2013\u00A0Craig\n                Oct 14 at 15:49\n            ","\n                \n                The second point sounds actually like a reason not to use string, int etc.\n                \n\u2013\u00A0MauganRa\n                Jun 15 \u002715 at 15:37\n            ","\n                \n                @MauganRa And it\u0027s supposed to, the author of the book lists those reasons as to why he doesn\u0027t use aliases.\n                \n\u2013\u00A0tomi.lee.jones\n                Sep 15 \u002715 at 17:48\n            ","\n                \n                \u0022If someone is reading C# source code they should interpret long according to the language spec, not another languages spec.\u0022  That misses the point entirely.  It\u0027s not that anyone intends to misinterpret code, it\u0027s simply easy for one\u0027s brain to jump to the wrong conclusion when a type has a different meaning than what the programmer sees on a daily basis in another context.  We all make mistakes; using explicitly named types makes those mistakes less likely.\n                \n\u2013\u00A0Darryl\n                Sep 21 \u002715 at 22:11\n            ","\n                \n                @Darryl - I remember programming with .NET 1.x on Windows XP 32x.  One of the kernel APIs required a long, and I kept getting overflow errors by using a .NET long for the struct I was passing in; it had to be a .NET int /Int32 to translate to the kernel\u0027s definition of a long.  So there\u0027s still room for confusion!  msdn.microsoft.com/en-us/library/windows/desktop/\u2026\n                \n\u2013\u00A0ps2goat\n                Aug 31 \u002716 at 4:15\n            ","\n                \n                \u002BThese reasons sum up my feelings on the matter. When I first started coding in C# (coming from a Java/C\u002B\u002B/C background) I thought the aliases were ugly. I still feel that way, unfortunately most of the world doesn\u0027t seem to agree with me, or they don\u0027t care, and so use the lowercase.\n                \n\u2013\u00A0gusgorman\n                Mar 2 \u002717 at 10:41\n            ","\n                \n                Keep in mind that calling a local @string is really rather pointless, since the names of locals are only present in PDBs. Might as well call it _string or something. It makes more sense for things that have names accessible via reflection, where the name of an @string member would be \u0022string\u0022.\n                \n\u2013\u00A0Roman Starkov\n                Aug 19 \u002713 at 10:30\n            ","\n                \n                Also keep in mind using a reserved word as a variable name is grossly inelegant.\n                \n\u2013\u00A0Elton\n                Oct 27 \u002715 at 15:16\n            ","\n                \n                The OP does not want to use String or string as a variable name. They asked for an explanation of the difference between these Types. Your answer only serves to add more confusion IMO\n                \n\u2013\u00A0Matt Wilko\n                Jul 4 \u002716 at 15:14\n            ","\n                \n                @craig if you were writing software to teach people how to tie knots?\n                \n\u2013\u00A0Simon_Weaver\n                Dec 9 \u002718 at 3:31\n            ","\n                \n                @Simon_Weaver knots in strings?  haha, nice.  :-) Of course, you could pick an alternative name, like thread. Wait a minute... D\u0027oh!\n                \n\u2013\u00A0Craig\n                Dec 9 \u002718 at 3:59\n            ","\n                \n                by default most people do add this in any ways at the top of the file. VS does this by default in most cases of not all!\n                \n\u2013\u00A0IbrarMumtaz\n                Apr 6 \u002710 at 16:10\n            ","\n                \n                By default I add only using statements I require, and explicitly remove all that I don\u0027t.  Power Productivity Tools \u003E \u0022[x] Remove and Format Usings on save\u0022\n                \n\u2013\u00A0JMD\n                May 18 \u002716 at 16:58\n            ","\n                \n                That may be so for C#, but not all .NET languages. (Powershell imports the System namespace by default.)\n                \n\u2013\u00A0FSCKur\n                Mar 19 \u002719 at 23:29\n            ","\n                \n                I do not understand what this answer means and why it was upvoted. You can use typeof(string) in reflection. Example one: if (someMethodInfo.ReturnType == typeof(string)) { ... } Example two: var p = typeof(string).GetProperty(\u0022FirstChar\u0022, BindingFlags.NonPublic | BindingFlags.Instance); Where is it that you must use String, not string? If you try things like Type.GetType(\u0022String\u0022) or Type.GetType(\u0022string\u0022), neither will find the class because the namespace is missing. If for some silly reason you compare .Name of a type to \u0022string\u0022 in a case-sensitive way, you are right.\n                \n\u2013\u00A0Jeppe Stig Nielsen\n                May 24 \u002719 at 12:04\n            ","\n                \n                Just pick one and be consistent. If you work somewhere with a house style, use that.\n                \n\u2013\u00A0Alan B\n                Mar 16 \u002715 at 16:32\n            ","\n                \n                unfortunately style is personal preference and may be too expensive to enforce in a large code base across several teams without dedicated code owner. there are always more important matters to take care of rather than string vs String. which brings us back to \u0022more important things in life\u0022\n                \n\u2013\u00A0aiodintsov\n                Feb 24 \u002716 at 6:51\n            ","\n                \n                This is definitely a preference thing; for example: I prefer to use short, int, ushort, uint instead of Int16, etc. Mostly because this is how I learned. Granted, the Int16 is easier to immediately understand for those with less experience. \u002B1 From me!\n                \n\u2013\u00A0Taco \u30BF\u30B3\u30B9\n                Jan 2 \u002719 at 19:18\n                        \n                            \n                        \n            ","\n                \n                Do you also write code like: Int32 i = 1;  Rather than int i = 1; ?  Seems inconsistent to not use the string alias when it\u0027s availble.\n                \n\u2013\u00A0bytedev\n                Jan 28 \u002713 at 10:49\n            ","\n                \n                @nashwan: actually, yes, I do use Int32 i=1; intstead of int i = 1;  I find the former to be more readable as to my intent: namely that I want a 32 bit signed integer.\n                \n\u2013\u00A0NotMe\n                Feb 15 \u002713 at 17:30\n            ","\n                \n                Well I guess it all depends whether the developer thinks they are writing C# code (string) or .NET code (String).  Personally I foremost think I\u0027m writing C# (and it\u0027s C# that is using .NET).\n                \n\u2013\u00A0bytedev\n                Apr 15 \u002714 at 13:09\n            ","\n                \n                @Alex: my point was simply that I prefer to be very specific in my coding in order to remove ambiguity.\n                \n\u2013\u00A0NotMe\n                Apr 27 \u002715 at 2:56\n            ","\n                \n                On the absolute other end of the spectrum, I nearly always just use var\n                \n\u2013\u00A0tic\n                Mar 18 \u002716 at 15:38\n            ","\n                \n                Jeffrey Richter recommends using the CLR type in all cases (CLR via C#) to avoid exactly the kind of confusion that is taking place here.\n                \n\u2013\u00A0Josh\n                Oct 18 \u002708 at 17:02\n            ","\n                \n                Clearly, whether you use S or s it will have caused this questions, so down-vote Richter. ;)\n                \n\u2013\u00A0Brad Wilson\n                Oct 18 \u002708 at 17:17\n            ","\n                \n                Richter meant that string shouldn\u0027t have been an option - Microsoft shouldn\u0027t have it in the language. You can\u0027t down-vote Richter - he\u0027s a legend! :)\n                \n\u2013\u00A0Joe Ratzer\n                Oct 18 \u002708 at 19:23\n            ","\n                \n                Fair point Jon, but I just happen to agree with Richter on this point about String. And yes, I totally agree - CLR via C# is wonderful!\n                \n\u2013\u00A0Joe Ratzer\n                Oct 18 \u002708 at 19:51\n            ","\n                \n                \u0022string\u0022 is not the same as \u0022String\u0022. Is means \u0022System.String\u0022. So if you use \u0022String\u0022 you have to put \u0022using System\u0022 to include the namespace\n                \n\u2013\u00A0ThiagoAlves\n                Dec 3 \u002711 at 16:41\n            ","\n                \n                string is not a type in C#; it is a reserved word that maps to a type in the CLR.\n                \n\u2013\u00A0CesarGon\n                Jul 31 \u002711 at 17:58\n            ","\n                \n                @CesarGon: According to ECMA-334, section 8.2.1: \u0022C# provides a set of predefined types [...] The predefined reference types are object and string.\u0022\n                \n\u2013\u00A0Rasmus Faber\n                Jul 31 \u002711 at 19:03\n            ","\n                \n                According to ECMA-334, section 9.4.3, \u0022string\u0022 is a keyword. :-) I agree with you that \u0022string\u0022 is a type if you focus on the semantics, but I\u0027d say it\u0027s a keyword (i.e. a reserved word) if you focus on the syntax. The standard backs both points of view (perhaps too ambiguously!). To me, the OP is about syntax, so I tend to focus on syntax when I look at answers, but I see your point too. Furthermore, your answer, as it stands, may be interpreted as to mean that two different types exist: string and String, when that is not the case. One is a maping to the other.\n                \n\u2013\u00A0CesarGon\n                Jul 31 \u002711 at 19:30\n                        \n                            \n                        \n            ","\n                \n                Let\u0027s be clear about this.  \u0027string\u0027 is a reserved alias.  It is not a true datatype.  It is something that points to something else.  You can remove all these aliases (or just never use them) and have a perfectly good programming language.\n                \n\u2013\u00A0Quarkly\n                Jul 8 \u002713 at 16:50\n            ","\n                \n                \u0022In short \u0022String\u0022 is an alias ( the same thing called with different names) of \u0022string\u0022\u0022. This is not correct: the alias is \u0022string\u0022.\n                \n\u2013\u00A0Xavier Egea\n                Nov 6 \u002714 at 12:04\n            ","\n                \n                when you do variable declaration it\u0027s good to use \u0022string\u0022 ( small \u0022s\u0022) and when you are using it as a class name then \u0022String\u0022 ( capital \u0022S\u0022) is preferred. This convention seems to be no more valid: if you use Visual Studio 2015 and try to write String it suggest you to \u0022simplify your code\u0022, carrying it to string...\n                \n\u2013\u00A0Massimiliano Kraus\n                Nov 4 \u002716 at 14:11\n            ","\n                \n                That\u0027s the problem, they are not \u0027C#\u0027 aliases, they are \u0027C\u0027 aliases.  There is no native \u0027string\u0027 or \u0027int\u0027 in the C# language, just syntactic sugar.\n                \n\u2013\u00A0Quarkly\n                May 29 \u002715 at 20:23\n                        \n                            \n                        \n            ","\n                \n                not sure where \u0022C\u0022 came from here, since C# 5 language specification reads \u0022The keyword string is simply an alias for the predefined class System.String.\u0022 on page 85, paragraph 4.2.4. All high level languages are syntactic sugar over CPU instruction sets and bytecode.\n                \n\u2013\u00A0aiodintsov\n                Feb 24 \u002716 at 6:57\n            ","\n                \n                You don\u0027t need to prefix System to use String.\n                \n\u2013\u00A0Joe Ratzer\n                Oct 18 \u002708 at 19:24\n            ","\n                \n                You do have to include a using System when using String, otherwise you get the following error: The type or namespace name \u0027String\u0027 could not be found (are you missing a using directive or an assembly reference?)\n                \n\u2013\u00A0Ronald\n                Oct 16 \u002709 at 17:53\n            ","\n                \n                I suppose to be diabolical one could: using String = System.Int32; using Int32 = System.String;  and then count the bugs.\n                \n\u2013\u00A0Steve\n                May 8 \u002715 at 0:40\n                        \n                            \n                        \n            ","\n                \n                this is the right answer. string is System.String. String could be anything.\n                \n\u2013\u00A0Dave Cousineau\n                Oct 9 \u002718 at 20:26\n            ","\n                \n                Agreed @DaveCousineau - that\u0027s the point of the alias. You can create another String type that wouldn\u0027t be set to the System.String object. Check out: blog.paranoidcoding.com/2019/04/08/\u2026\n                \n\u2013\u00A0Kristopher\n                Apr 11 \u002719 at 16:37\n            ","\n                \n                \u0022The keyword string has concrete meaning in C#. It is the type System.String which exists in the core runtime assembly. The runtime intrinsically understands this type and provides the capabilities developers expect for strings in .NET. Its presence is so critical to C# that if that type doesn\u2019t exist the compiler will exit before attempting to even parse a line of code. Hence string has a precise, unambiguous meaning in C# code. The identifier String though has no concrete meaning in C#. It is an identifier that goes through all the name lookup rules as Widget, Student, etc\u2026\u0022\n                \n\u2013\u00A0Kristopher\n                Apr 11 \u002719 at 16:40\n            ","\n                \n                Diskussed on Meta: meta.stackoverflow.com/questions/385304/\u2026\n                \n\u2013\u00A0Patrick Artner\n                May 23 \u002719 at 5:46\n            ","\n                \n                In a 64 bit build, int maps to System.Int64 (8 bytes) , in 32 bit build it maps to System.Int32 (4 bytes)\n                \n\u2013\u00A0Alex\n                Jul 25 \u002712 at 15:26\n            ","\n                \n                IntPtr and UIntPtr are the only types that change size according to platform (disregarding actual pointer types like int* and types composed of [U]IntPtrs or actual pointers).\n                \n\u2013\u00A0P Daddy\n                Apr 23 \u002713 at 21:20\n            ","\n                \n                The only tiny difference is that if you use the String class, you need to import the System namespace on top of your file, whereas you don\u2019t have to do this when using the string keyword.\n                \n\u2013\u00A0Uttam\n                Mar 4 \u002718 at 9:29\n            ","\n                \n                There are simple use-cases where the equality statement would fail... Such as defining a type call String in the blah namespace and importing that namespace into the file in which the equality statement is running.\n                \n\u2013\u00A0rick\n                Jun 4 \u002719 at 13:36\n            "]},{"Id":"ab9cf4f5-c609-4997-ab22-843664be6c88","QuestionId":14455293,"Description":"How and when to use \u2018async\u2019 and \u2018await\u2019","Votes":1128,"Views":903978,"Tags":["c#",".net","asynchronous","async-await"],"Discussions":["\nWhen using async and await the compiler generates a state machine in the background.\nHere\u0027s an example on which I hope I can explain some of the high-level details that are going on:\npublic async Task MyMethodAsync()\n{\n    Task\u003Cint\u003E longRunningTask = LongRunningOperationAsync();\n    // independent work which doesn\u0027t need the result of LongRunningOperationAsync can be done here\n\n    //and now we call await on the task \n    int result = await longRunningTask;\n    //use the result \n    Console.WriteLine(result);\n}\n\npublic async Task\u003Cint\u003E LongRunningOperationAsync() // assume we return an int from this long running operation \n{\n    await Task.Delay(1000); // 1 second delay\n    return 1;\n}\n\nOK, so what happens here:\n\nTask\u003Cint\u003E longRunningTask = LongRunningOperationAsync(); starts executing LongRunningOperation\n\nIndependent work is done on let\u0027s assume the Main Thread (Thread ID = 1) then await longRunningTask is reached.\nNow, if the longRunningTask hasn\u0027t finished and it is still running, MyMethodAsync() will return to its calling method, thus the main thread doesn\u0027t get blocked. When the longRunningTask is done then a thread from the ThreadPool (can be any thread) will return to MyMethodAsync() in its previous context and continue execution (in this case printing the result to the console).\n\n\nA second case would be that the longRunningTask has already finished its execution and the result is available. When reaching the await longRunningTask we already have the result so the code will continue executing on the very same thread. (in this case printing result to console). Of course this is not the case for the above example, where there\u0027s a Task.Delay(1000) involved.\n    ","\n\n  From my understanding one of the main things that async and await do is to make code easy to write and read.\n\n\nThey\u0027re to make asynchronous code easy to write and read, yes.\n\n\n  Is it the same thing as spawning background threads to perform long duration logic?\n\n\nNot at all.\n\n\n  // I don\u0027t understand why this method must be marked as \u0027async\u0027.\n\n\nThe async keyword enables the await keyword. So any method using await must be marked async.\n\n\n  // This line is reached after the 5 seconds sleep from DoSomethingAsync() method. Shouldn\u0027t it be reached immediately? \n\n\nNo, because async methods are not run on another thread by default.\n\n\n  // Is this executed on a background thread?\n\n\nNo.\n\n\n\nYou may find my async/await intro helpful. The official MSDN docs are also unusually good (particularly the TAP section), and the async team put out an excellent FAQ.\n    ","\nExplanation\n\nHere is a quick example of async/await at a high level. There are a lot more details to consider beyond this.\n\nNote: Task.Delay(1000) simulates doing work for 1 second. I think it\u0027s best to think of this as waiting for a response from an external resource. Since our code is waiting for a response, the system can set the running task off to the side and come back to it once it\u0027s finished. Meanwhile, it can do some other work on that thread.\n\nIn the example below, the first block is doing exactly that. It starts all the tasks immediately (the Task.Delay lines) and sets them off to the side. The code will pause on the await a line until the 1 second delay is done before going to the next line. Since b, c, d, and e all started executing at almost the exact same time as a (due to lack of the await), they should finish at roughly the same time in this case.\n\nIn the example below, the second block is starting a task and waiting for it to finish (that is what await does) before starting the subsequent tasks. Each iteration of this takes 1 second. The await is pausing the program and waiting for the result before continuing. This is the main difference between the first and second blocks.\n\nExample\n\nConsole.WriteLine(DateTime.Now);\n\n// This block takes 1 second to run because all\n// 5 tasks are running simultaneously\n{\n    var a = Task.Delay(1000);\n    var b = Task.Delay(1000);\n    var c = Task.Delay(1000);\n    var d = Task.Delay(1000);\n    var e = Task.Delay(1000);\n\n    await a;\n    await b;\n    await c;\n    await d;\n    await e;\n}\n\nConsole.WriteLine(DateTime.Now);\n\n// This block takes 5 seconds to run because each \u0022await\u0022\n// pauses the code until the task finishes\n{\n    await Task.Delay(1000);\n    await Task.Delay(1000);\n    await Task.Delay(1000);\n    await Task.Delay(1000);\n    await Task.Delay(1000);\n}\nConsole.WriteLine(DateTime.Now);\n\n\nOUTPUT:\n\n5/24/2017 2:22:50 PM\n5/24/2017 2:22:51 PM (First block took 1 second)\n5/24/2017 2:22:56 PM (Second block took 5 seconds)\n\n\n\n\nExtra info regarding SynchronizationContext\n\nNote: This is where things get a little foggy for me, so if I\u0027m wrong on anything, please correct me and I will update the answer. It\u0027s important to have a basic understanding of how this works but you can get by without being an expert on it as long as you never use ConfigureAwait(false), although you will likely lose out on some opportunity for optimization, I assume.\n\nThere is one aspect of this which makes the async/await concept somewhat trickier to grasp. That\u0027s the fact that in this example, this is all happening on the same thread (or at least what appears to be the same thread in regards to its SynchronizationContext). By default, await will restore the synchronization context of the original thread that it was running on. For example, in ASP.NET you have an HttpContext which is tied to a thread when a request comes in. This context contains things specific to the original Http request such as the original Request object which has things like language, IP address, headers, etc. If you switch threads halfway through processing something, you could potentially end up trying to pull information out of this object on a different HttpContext which could be disastrous. If you know you won\u0027t be using the context for anything, you can choose to \u0022not care\u0022 about it. This basically allows your code to run on a separate thread without bringing the context around with it.\n\nHow do you achieve this? By default, the await a; code actually is making an assumption that you DO want to capture and restore the context:\n\nawait a; //Same as the line below\nawait a.ConfigureAwait(true);\n\n\nIf you want to allow the main code to continue on a new thread without the original context, you simply use false instead of true so it knows it doesn\u0027t need to restore the context.\n\nawait a.ConfigureAwait(false);\n\n\nAfter the program is done being paused, it will continue potentially on an entirely different thread with a different context. This is where the performance improvement would come from -- it could continue on on any available thread without having to restore the original context it started with.\n\nIs this stuff confusing? Hell yeah! Can you figure it out? Probably! Once you have a grasp of the concepts, then move on to Stephen Cleary\u0027s explanations which tend to be geared more toward someone with a technical understanding of async/await already.\n    ","\nFurther to the other answers, have a look at await (C# Reference)\n\nand more specifically at the example included, it explains your situation a bit\n\n\n  The following Windows Forms example illustrates the use of await in an\n  async method, WaitAsynchronouslyAsync. Contrast the behavior of that\n  method with the behavior of WaitSynchronously. Without an await\n  operator applied to a task, WaitSynchronously runs synchronously\n  despite the use of the async modifier in its definition and a call to\n  Thread.Sleep in its body.\n\n\nprivate async void button1_Click(object sender, EventArgs e)\n{\n    // Call the method that runs asynchronously.\n    string result = await WaitAsynchronouslyAsync();\n\n    // Call the method that runs synchronously.\n    //string result = await WaitSynchronously ();\n\n    // Display the result.\n    textBox1.Text \u002B= result;\n}\n\n// The following method runs asynchronously. The UI thread is not\n// blocked during the delay. You can move or resize the Form1 window \n// while Task.Delay is running.\npublic async Task\u003Cstring\u003E WaitAsynchronouslyAsync()\n{\n    await Task.Delay(10000);\n    return \u0022Finished\u0022;\n}\n\n// The following method runs synchronously, despite the use of async.\n// You cannot move or resize the Form1 window while Thread.Sleep\n// is running because the UI thread is blocked.\npublic async Task\u003Cstring\u003E WaitSynchronously()\n{\n    // Add a using directive for System.Threading.\n    Thread.Sleep(10000);\n    return \u0022Finished\u0022;\n}\n\n    ","\nShowing the above explanations in action in a simple console program:\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        TestAsyncAwaitMethods();\n        Console.WriteLine(\u0022Press any key to exit...\u0022);\n        Console.ReadLine();\n    }\n\n    public async static void TestAsyncAwaitMethods()\n    {\n        await LongRunningMethod();\n    }\n\n    public static async Task\u003Cint\u003E LongRunningMethod()\n    {\n        Console.WriteLine(\u0022Starting Long Running method...\u0022);\n        await Task.Delay(5000);\n        Console.WriteLine(\u0022End Long Running method...\u0022);\n        return 1;\n    }\n}\n\n\nAnd the output is:\n\nStarting Long Running method...\nPress any key to exit...\nEnd Long Running method...\n\n\nThus,\n\n\nMain starts the long running method via TestAsyncAwaitMethods. That immediately returns without halting the current thread and we immediately see \u0027Press any key to exit\u0027 message\nAll this while, the LongRunningMethod is running in the background. Once its completed, another thread from Threadpool picks up this context and displays the final message\n\n\nThus, not thread is blocked. \n    ","\nI think you\u0027ve picked a bad example with System.Threading.Thread.Sleep\n\nPoint of an async Task is to let it execute in background without locking the main thread, such as doing a DownloadFileAsync\n\nSystem.Threading.Thread.Sleep isn\u0027t something that is \u0022being done\u0022, it just sleeps, and therefore your next line is reached after 5 seconds ...\n\nRead this article, I think it is a great explanation of async and await concept: http://msdn.microsoft.com/en-us/library/vstudio/hh191443.aspx\n    ","\nFor fastest learning..\n\nUnderstand method execution flow(with a diagram): 3 mins\n\nQuestion introspection (learning sake): 1 min\n\nQuickly get through syntax sugar: 5 mins\n\nShare the confusion of a developer : 5 mins\n\nProblem: Quickly change a real-world implementation of normal code to\nAsync code: 2 mins\n\nWhere to Next?\n\n\nUnderstand method execution flow(with a diagram): 3 mins\nIn this image, just focus on #6 (nothing more)\n\nAt #6 step, execution ran out of work and stopped. To continue it needs a result from getStringTask(kind of a function). Therefore, it uses an await operator to suspend its progress and give control back(yield) to the caller(of this method we are in). The actual call to getStringTask was made earlier in #2. At #2 a promise was made to return a string result. But when will it return the result? Should we(#1:AccessTheWebAsync) make a 2nd call again? Who gets the result, #2(calling statement) or #6(awaiting statement)\nThe external caller of AccessTheWebAsync() also is waiting now. So caller waiting for AccessTheWebAsync, and AccessTheWebAsync is waiting for GetStringAsync at the moment. Interesting thing is AccessTheWebAsync did some work(#4) before waiting perhaps to save time from waiting. The same freedom to multitask is also available for the external caller(and all callers in the chain) and this is the biggest plus of this \u0027async\u0027 thingy! You feel like it is synchronous..or normal but it is not.\n#2 and #6 is split so we have the advantage of #4(work while waiting). But we can also do it without splitting. string urlContents = await client.GetStringAsync(\u0022...\u0022);. Here we see no advantage but somewhere in the chain one function will be splitting while rest of them call it without splitting. It depends which function/class in the chain you use. This change in behavior from function to function is the most confusing part.\nRemember, the method was already returned(#2), it cannot return again(no second time). So how will the caller know? It is all about Tasks! Task was returned. Task status was waited for (not method, not value). Value will be set in Task. Task status will be set to complete. Caller just monitors Task(#6). So 6# is the answer to where/who gets the result. Further reads for later here.\nQuestion introspection for learning sake: 1 min\nLet us adjust the question a bit:\n\nHow and When to use  async and await  Tasks?\n\nBecause learning Task automatically covers the other two(and answers your question)\nQuickly get through syntax sugar: 5 mins\n\nOriginal non-async method\n\n\ninternal static int Method(int arg0, int arg1)\n        {\n            int result = arg0 \u002B arg1;\n            IO(); // Do some long running IO.\n            return result;\n        }\n\n\n\na brand new Task-ified method to call the above method\n\n\ninternal static Task\u003Cint\u003E MethodTask(int arg0, int arg1)\n    {\n        Task\u003Cint\u003E task = new Task\u003Cint\u003E(() =\u003E Method(arg0, arg1));\n        task.Start(); // Hot task (started task) should always be returned.\n        return task;\n    }\n\n\nDid we mention await or async? No. Call the above method and you get a task which you can monitor. You already know what the task returns.. an integer.\n\nCalling a Task is slightly tricky and that is when the keywords starts to appear. If there was a method calling the original method(non-async) then we need to edit it as given below. Let us call MethodTask()\n\n\ninternal static async Task\u003Cint\u003E MethodAsync(int arg0, int arg1)\n    {\n        int result = await HelperMethods.MethodTask(arg0, arg1);\n        return result;\n    }\n\n\nSame code above added as image below:\n\n\nWe are \u0027awaiting\u0027 task to be finished. Hence the await(mandatory syntax)\nSince we use await, we must use async(mandatory syntax)\nMethodAsync with Async as the prefix (coding standard)\n\nawait is easy to understand but the remaining two (async,Async) may not be :). Well, it should make a lot more sense to the compiler though.Further reads for later here\nSo there are 2 parts.\n\nCreate \u0027Task\u0027 (only one task and it will be an additional method)\n\nCreate syntactic sugar to call the task with await\u002Basync(this involves changing existing code if you are converting a non-async method)\n\n\nRemember, we had an external caller to AccessTheWebAsync() and that caller is not spared either... i.e it needs the same await\u002Basync too. And the chain continues(hence this is a breaking change which could affect many classes). It can also be considered a non-breaking change because the original method is still there to be called. Change it\u0027s access if you want to impose a breaking change and then the classes will be forced to use Task-method. Or just delete the method and move it to task-method. Anyways, in an async call there will always be a Task at one end and only one.\nAll okay, but one developer was surprised to see Task\nmissing...\nShare the confusion of a developer: 5 mins\nA developer has made a mistake of not implementing Task but it still works! Try to understand the question and just the accepted answer provided here. Hope you have read and fully understood. The summary is that we may not see/implement \u0027Task\u0027 but it is implemented somewhere in a parent/associated class. Likewise in our example calling an already built MethodAsync() is way easier than implementing that method with a Task (MethodTask()) ourself. Most developers find it difficult to get their head around Tasks while converting a code to Asynchronous one.\nTip: Try to find an existing Async implementation (like MethodAsync or ToListAsync) to outsource the difficulty. So we only need to deal with Async and await (which is easy and pretty similar to normal code)\nProblem: Quickly change a real-world implementation of normal code to\nAsync operation: 2 mins\nCode line shown below in Data Layer started to break(many places). Because we updated some of our code from .Net framework 4.2.* to .Net core. We had to fix this in 1 hour all over the application!\nvar myContract = query.Where(c =\u003E c.ContractID == _contractID).First();\n\neasypeasy!\n\nWe installed EntityFramework nuget package because it has QueryableExtensions. Or in other words it does the Async implementation(task), so we could survive with simple Async and await in code.\nnamespace = Microsoft.EntityFrameworkCore\n\ncalling code line got changed like this\nvar myContract = await query.Where(c =\u003E c.ContractID == _contractID).FirstAsync();\n\n\nMethod signature changed from\n\nContract GetContract(int contractnumber)\nto\nasync Task\u003CContract\u003E GetContractAsync(int contractnumber)\n\ncalling method also got affected: GetContractAsync(123456); was called as GetContractAsync(123456).Result;\n\nWe changed it everywhere in 30 minutes!\n\n\nBut the architect told us not to use EntityFramework library just for this! oops! drama! Then we made a custom Task implementation(yuk). Which you know how. Still easy! ..still yuk..\nWhere to Next?\nThere is a wonderful quick video we could watch about Converting Synchronous Calls to Asynchronous in ASP.Net Core, perhaps that is likely the direction one would go after reading this. Or have I explained enough? ;)\n    ","\nHere is a quick console program to make it clear to those who follow. The TaskToDo method is your long running method that you want to make async. Making it run async is done by the TestAsync method. The test loops method just runs through the TaskToDo tasks and runs them async. You can see that in the results because they don\u0027t complete in the same order from run to run - they are reporting to the console UI thread when they complete. Simplistic, but I think the simplistic examples bring out the core of the pattern better than more involved examples:\n\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading;\nusing System.Threading.Tasks;\n\nnamespace TestingAsync\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            TestLoops();\n            Console.Read();\n        }\n\n        private static async void TestLoops()\n        {\n            for (int i = 0; i \u003C 100; i\u002B\u002B)\n            {\n                await TestAsync(i);\n            }\n        }\n\n        private static Task TestAsync(int i)\n        {\n            return Task.Run(() =\u003E TaskToDo(i));\n        }\n\n        private async static void TaskToDo(int i)\n        {\n            await Task.Delay(10);\n            Console.WriteLine(i);\n        }\n    }\n}\n\n    ","\nAll the answers here use Task.Delay() or some other built in async function. But here is my example that use none of those async functions:\n\n// Starts counting to a large number and then immediately displays message \u0022I\u0027m counting...\u0022. \n// Then it waits for task to finish and displays \u0022finished, press any key\u0022.\nstatic void asyncTest ()\n{\n    Console.WriteLine(\u0022Started asyncTest()\u0022);\n    Task\u003Clong\u003E task = asyncTest_count();\n    Console.WriteLine(\u0022Started counting, please wait...\u0022);\n    task.Wait(); // if you comment this line you will see that message \u0022Finished counting\u0022 will be displayed before we actually finished counting.\n    //Console.WriteLine(\u0022Finished counting to \u0022 \u002B task.Result.ToString()); // using task.Result seems to also call task.Wait().\n    Console.WriteLine(\u0022Finished counting.\u0022);\n    Console.WriteLine(\u0022Press any key to exit program.\u0022);\n    Console.ReadLine();\n}\n\nstatic async Task\u003Clong\u003E asyncTest_count()\n{\n    long k = 0;\n    Console.WriteLine(\u0022Started asyncTest_count()\u0022);\n    await Task.Run(() =\u003E\n    {\n        long countTo = 100000000;\n        int prevPercentDone = -1;\n        for (long i = 0; i \u003C= countTo; i\u002B\u002B)\n        {\n            int percentDone = (int)(100 * (i / (double)countTo));\n            if (percentDone != prevPercentDone)\n            {\n                prevPercentDone = percentDone;\n                Console.Write(percentDone.ToString() \u002B \u0022% \u0022);\n            }\n\n            k = i;\n        }\n    });\n    Console.WriteLine(\u0022\u0022);\n    Console.WriteLine(\u0022Finished asyncTest_count()\u0022);\n    return k;\n}\n\n    ","\nAsync \u0026 Await Simple Explanation\nSimple Analogy\nA person may wait for their morning train. This is all they are doing as this is their primary task that they are currently performing. (synchronous programming (what you normally do!))\nAnother person may await their morning train whilst they smoke a cigarette and then drink their coffee. (Asynchronous programming)\nWhat is asynchronous programming?\nAsynchronous programming is where a programmer will choose to run some of his code on a separate thread from the main thread of execution and then notify the main thread on it\u0027s completion.\nWhat does the async keyword actually do?\nPrefixing the async keyword to a method name like\nasync void DoSomething(){ . . .\n\nallows the programmer to use the await keyword when calling asynchronous tasks. That\u0027s all it does.\nWhy is this important?\nIn a lot of software systems the main thread is reserved for operations specifically relating to the User Interface. If I am running a very complex recursive algorithm that takes 5 seconds to complete on my computer, but I am running this on the Main Thread (UI thread) When the user tries to click on anything on my application, it will appear to be frozen as my main thread has queued and is currently processing far too many operations. As a result the main thread cannot process the mouse click to run the method from the button click.\nWhen do you use Async and Await?\nUse the asynchronous keywords ideally when you are doing anything that doesn\u0027t involve the user interface.\nSo lets say you\u0027re writing a program that allows the user to sketch on their mobile phone but every 5 seconds it is going to be checking the weather on the internet.\nWe should be awaiting the call the polling calls every 5 seconds to the network to get the weather as the user of the application needs to keep interacting with the mobile touch screen to draw pretty pictures.\nHow do you use Async and Await\nFollowing on from the example above, here is some pseudo code of how to write it:\n    //ASYNCHRONOUS\n    //this is called using the await keyword every 5 seconds from a polling timer or something.\n\n    async Task CheckWeather()\n    {\n        var weather = await GetWeather();\n        //do something with the weather now you have it\n    }\n\n    async Task\u003CWeatherResult\u003E GetWeather()\n    {\n\n        var weatherJson = await CallToNetworkAddressToGetWeather();\n        return deserializeJson\u003CweatherJson\u003E(weatherJson);\n    }\n\n    //SYNCHRONOUS\n    //This method is called whenever the screen is pressed\n    void ScreenPressed()\n    {\n        DrawSketchOnScreen();\n    }\n\nAdditional Notes - Update\nI forgot to mention in my original notes that in C# you can only await methods that are wrapped in Tasks. for example you may await this method:\n// awaiting this will return a string.\n// calling this without await (synchronously) will result in a Task\u003Cstring\u003E object.\nasync Task\u003Cstring\u003E FetchHelloWorld() {..\n\nYou cannot await methods that are not tasks like this:\nasync string FetchHelloWorld() {..\n\nFeel free to review the source code for the Task class here.\n    ","\nThis answer aims to provide some info specific to ASP.NET.\n\nBy utilizing async/await in MVC controller, it is possible to increase thread pool utilization and achieve a much better throughput, as explained in the below article,\n\nhttp://www.asp.net/mvc/tutorials/mvc-4/using-asynchronous-methods-in-aspnet-mvc-4\n\n\n  In web applications that sees a large number of concurrent requests at\n  start-up or has a bursty load (where concurrency increases suddenly),\n  making these web service calls asynchronous will increase the\n  responsiveness of your application. An asynchronous request takes the\n  same amount of time to process as a synchronous request. For example,\n  if a request makes a web service call that requires two seconds to\n  complete, the request takes two seconds whether it is performed\n  synchronously or asynchronously. However, during an asynchronous call,\n  a thread is not blocked  from responding to other requests while it\n  waits for the first request to complete. Therefore, asynchronous\n  requests prevent request queuing and thread pool growth when there are\n  many concurrent requests that invoke long-running operations.\n\n    ","\nAsync / Await\n\nActually Async / Await are a pair of keywords which are just syntactic sugar for creating a callback of an asynchronous task.\n\nTake by example this operation:\n\n    public static void DoSomeWork()\n    {\n        var task = Task.Run(() =\u003E\n        {\n            // [RUNS ON WORKER THREAD]\n\n            // IS NOT bubbling up due to the different threads\n            throw new Exception();\n            Thread.Sleep(2000);\n\n            return \u0022Hello\u0022;\n        });\n\n        // This is the callback\n        task.ContinueWith((t) =\u003E {\n            // -\u003E Exception is swallowed silently\n            Console.WriteLine(\u0022Completed\u0022);\n\n            // [RUNS ON WORKER THREAD]\n        });\n    }\n\n\nThe code above has several disadvantages. Errors are not passed on and it\u0027s hard to read.\nBut Async and Await come in to help us out:\n\n    public async static void DoSomeWork()\n    {\n        var result = await Task.Run(() =\u003E\n        {\n            // [RUNS ON WORKER THREAD]\n\n            // IS bubbling up\n            throw new Exception();\n            Thread.Sleep(2000);\n\n            return \u0022Hello\u0022;\n        });\n\n        // every thing below is a callback \n        // (including the calling methods)\n\n        Console.WriteLine(\u0022Completed\u0022);\n\n    }\n\n\nAwait calls have to be in Async methods. This has some advantages:\n\n\nReturns the result of the Task\ncreates automatically a callback\nchecks for errors and lets them bubble up in callstack (only up to none-await calls in callstack)\nwaits for the result\nfrees up the main thread\nruns the callback on the main thread\nuses a worker thread from the threadpool for the task\nmakes the code easy to read\nand a lot more\n\n\nNOTE: Async and Await are used with asynchronous calls not to make these. You have to use Task Libary for this, like Task.Run() .\n\nHere is a comparison between await and none await solutions\n\nThis is the none async solution:\n\n    public static long DoTask()\n    {\n        stopWatch.Reset();\n        stopWatch.Start();\n\n        // [RUNS ON MAIN THREAD]\n        var task = Task.Run(() =\u003E {\n            Thread.Sleep(2000);\n            // [RUNS ON WORKER THREAD]\n        });\n        // goes directly further\n        // WITHOUT waiting until the task is finished\n\n        // [RUNS ON MAIN THREAD]\n\n        stopWatch.Stop();\n        // 50 milliseconds\n        return stopWatch.ElapsedMilliseconds;\n    }\n\n\nThis is the async method:\n\n    public async static Task\u003Clong\u003E DoAwaitTask()\n    {\n        stopWatch.Reset();\n        stopWatch.Start();\n\n        // [RUNS ON MAIN THREAD]\n\n        await Task.Run(() =\u003E {\n            Thread.Sleep(2000);\n            // [RUNS ON WORKER THREAD]\n        });\n        // Waits until task is finished\n\n        // [RUNS ON MAIN THREAD]\n\n        stopWatch.Stop();\n        // 2050 milliseconds\n        return stopWatch.ElapsedMilliseconds;\n    }\n\n\nYou can actually call an async method without the await keyword but this means that any Exception here are swallowed in release mode:\n\n    public static Stopwatch stopWatch { get; } = new Stopwatch();\n\n    static void Main(string[] args)\n    {\n        Console.WriteLine(\u0022DoAwaitTask: \u0022 \u002B DoAwaitTask().Result \u002B \u0022 ms\u0022);\n        // 2050 (2000 more because of the await)\n        Console.WriteLine(\u0022DoTask: \u0022 \u002B DoTask() \u002B \u0022 ms\u0022);\n        // 50\n        Console.ReadKey();\n    }\n\n\nAsync and Await are not meant for parallel computing. They are used to not block your main thread. When it\u0027s about asp.net or Windows applications, blocking your main thread due to a network call is a bad thing. If you do this, your app will get unresponsive or even crash.\n\nCheck out ms docs for more examples.\n    ","\nTo be honest I still think the best explanation is the one about future and promises on the Wikipedia: http://en.wikipedia.org/wiki/Futures_and_promises\n\nThe basic idea is that you have a separate pool of threads that execute tasks asynchronously. When using it. The object does however make the promise that it will execute the operation at some time and give you the result when you request it. This means that it will block when you request the result and hasn\u0027t finished, but execute in the thread pool otherwise.\n\nFrom there you can optimize things: some operations can be implemented async and you can optimize things like file IO and network communication by batching together subsequent requests and/or reordering them. I\u0027m not sure if this is already in the task framework of Microsoft - but if it isn\u0027t that would be one of the first things I would add.\n\nYou can actually implement the future pattern sort-of with yields in C# 4.0. If you want to know how it works exactly, I can recommend this link that does a decent job: http://code.google.com/p/fracture/source/browse/trunk/Squared/TaskLib/ . However, if you start toying with it yourself, you will notice that you really need language support if you want to do all the cool things -- which is exactly what Microsoft did.\n    ","\nSee this fiddle https://dotnetfiddle.net/VhZdLU (and improve it if possible) for running a simple console application which shows usages of Task, Task.WaitAll(), async and await operators in the same program. \n\nThis fiddle should clear your execution cycle concept. \n\nHere is the sample code\n\nusing System;\nusing System.Threading.Tasks;\n\npublic class Program\n{\n    public static void Main()\n    {               \n        var a = MyMethodAsync(); //Task started for Execution and immediately goes to Line 19 of the code. Cursor will come back as soon as await operator is met       \n        Console.WriteLine(\u0022Cursor Moved to Next Line Without Waiting for MyMethodAsync() completion\u0022);\n        Console.WriteLine(\u0022Now Waiting for Task to be Finished\u0022);       \n        Task.WaitAll(a); //Now Waiting      \n        Console.WriteLine(\u0022Exiting CommandLine\u0022);       \n    }\n\n    public static async Task MyMethodAsync()\n    {\n        Task\u003Cint\u003E longRunningTask = LongRunningOperation();\n        // independent work which doesn\u0027t need the result of LongRunningOperationAsync can be done here\n        Console.WriteLine(\u0022Independent Works of now executes in MyMethodAsync()\u0022);\n        //and now we call await on the task \n        int result = await longRunningTask;\n        //use the result \n        Console.WriteLine(\u0022Result of LongRunningOperation() is \u0022 \u002B result);\n    }\n\n    public static async Task\u003Cint\u003E LongRunningOperation() // assume we return an int from this long running operation \n    {\n        Console.WriteLine(\u0022LongRunningOperation() Started\u0022);\n        await Task.Delay(2000); // 2 second delay\n        Console.WriteLine(\u0022LongRunningOperation() Finished after 2 Seconds\u0022);\n        return 1;\n    }   \n\n}\n\n\nTrace coming from Output Window:\n\n    ","\nThe way I understand it is also, there should be a third term added to the mix: Task.\n\nAsync is just a qualifier you put on your method to say it\u0027s an asynchronous method.\n\nTask is the return of the async function. It executes asynchronously.\n\nYou await a Task. When code execution reaches this line, control jumps out back to caller of your surrounding original function.\n\nIf instead, you assign the return of an async function (ie Task) to a variable, when code execution reaches this line, it just continues past that line in the surrounding function while the Task executes asynchronously.\n    ","\npublic static void Main(string[] args)\n{\n    string result = DownloadContentAsync().Result;\n    Console.ReadKey();\n}\n\n// You use the async keyword to mark a method for asynchronous operations.\n// The \u0022async\u0022 modifier simply starts synchronously the current thread. \n// What it does is enable the method to be split into multiple pieces.\n// The boundaries of these pieces are marked with the await keyword.\npublic static async Task\u003Cstring\u003E DownloadContentAsync()// By convention, the method name ends with \u0022Async\n{\n    using (HttpClient client = new HttpClient())\n    {\n        // When you use the await keyword, the compiler generates the code that checks if the asynchronous operation is finished.\n        // If it is already finished, the method continues to run synchronously.\n        // If not completed, the state machine will connect a continuation method that must be executed WHEN the Task is completed.\n\n\n        // Http request example. \n        // (In this example I can set the milliseconds after \u0022sleep=\u0022)\n        String result = await client.GetStringAsync(\u0022http://httpstat.us/200?sleep=1000\u0022);\n\n        Console.WriteLine(result);\n\n        // After completing the result response, the state machine will continue to synchronously execute the other processes.\n\n\n        return result;\n    }\n}\n\n    ","\nOn a higher level:\n\n1) Async keyword enables the await and that\u0027s all it does. Async keyword does not run the method in a separate thread. The beginning f async method runs synchronously until it hits await on a time-consuming task.\n\n2) You can await on a method that returns Task or Task of type T. You cannot await on async void method.\n\n3) The moment main thread encounters await on time-consuming task or when the actual work is started, the main thread returns to the caller of the current method. \n\n4) If the main thread sees await on a task that is still executing, it doesn\u0027t wait for it and returns to the caller of the current method. In this way, the application remains responsive.\n\n5) Await on processing task, will now execute on a separate thread from the thread pool.\n\n6) When this await task is completed, all the code below it will be executed by the separate thread\n\nBelow is the sample code. Execute it and check the thread id\n\nusing System;\nusing System.Threading;\nusing System.Threading.Tasks;\n\nnamespace AsyncAwaitDemo\n{\n    class Program\n    {\n        public static async void AsynchronousOperation()\n        {\n            Console.WriteLine(\u0022Inside AsynchronousOperation Before AsyncMethod, Thread Id: \u0022 \u002B Thread.CurrentThread.ManagedThreadId);\n            //Task\u003Cint\u003E _task = AsyncMethod();\n            int count = await AsyncMethod();\n\n            Console.WriteLine(\u0022Inside AsynchronousOperation After AsyncMethod Before Await, Thread Id: \u0022 \u002B Thread.CurrentThread.ManagedThreadId);\n\n            //int count = await _task;\n\n            Console.WriteLine(\u0022Inside AsynchronousOperation After AsyncMethod After Await Before DependentMethod, Thread Id: \u0022 \u002B Thread.CurrentThread.ManagedThreadId);\n\n            DependentMethod(count);\n\n            Console.WriteLine(\u0022Inside AsynchronousOperation After AsyncMethod After Await After DependentMethod, Thread Id: \u0022 \u002B Thread.CurrentThread.ManagedThreadId);\n        }\n\n        public static async Task\u003Cint\u003E AsyncMethod()\n        {\n            Console.WriteLine(\u0022Inside AsyncMethod, Thread Id: \u0022 \u002B Thread.CurrentThread.ManagedThreadId);\n            int count = 0;\n\n            await Task.Run(() =\u003E\n            {\n                Console.WriteLine(\u0022Executing a long running task which takes 10 seconds to complete, Thread Id: \u0022 \u002B Thread.CurrentThread.ManagedThreadId);\n                Thread.Sleep(20000);\n                count = 10;\n            });\n\n            Console.WriteLine(\u0022Completed AsyncMethod, Thread Id: \u0022 \u002B Thread.CurrentThread.ManagedThreadId);\n\n            return count;\n        }       \n\n        public static void DependentMethod(int count)\n        {\n            Console.WriteLine(\u0022Inside DependentMethod, Thread Id: \u0022 \u002B Thread.CurrentThread.ManagedThreadId \u002B \u0022. Total count is \u0022 \u002B count);\n        }\n\n        static void Main(string[] args)\n        {\n            Console.WriteLine(\u0022Started Main method, Thread Id: \u0022 \u002B Thread.CurrentThread.ManagedThreadId);\n\n            AsynchronousOperation();\n\n            Console.WriteLine(\u0022Completed Main method, Thread Id: \u0022 \u002B Thread.CurrentThread.ManagedThreadId);\n\n            Console.ReadKey();\n        }\n\n    }\n}\n\n    ","\n\n  is using them equal to spawning background threads to perform long\n  duration logic?\n\n\nThis article MDSN:Asynchronous Programming with async and await (C#) explains it explicitly:\n\n\n  The async and await keywords don\u0027t cause additional threads to be\n  created. Async methods don\u0027t require multithreading because an async\n  method doesn\u0027t run on its own thread. The method runs on the current\n  synchronization context and uses time on the thread only when the\n  method is active.\n\n    ","\nBelow is code which reads excel file by opening dialog and then uses async and wait to run asynchronous the code which reads one by one line from excel and binds to grid \n\nnamespace EmailBillingRates\n{\n    public partial class Form1 : Form\n    {\n        public Form1()\n        {\n            InitializeComponent();\n            lblProcessing.Text = \u0022\u0022;\n        }\n\n        private async void btnReadExcel_Click(object sender, EventArgs e)\n        {\n            string filename = OpenFileDialog();\n\n            Microsoft.Office.Interop.Excel.Application xlApp = new Microsoft.Office.Interop.Excel.Application();\n            Microsoft.Office.Interop.Excel.Workbook xlWorkbook = xlApp.Workbooks.Open(filename);\n            Microsoft.Office.Interop.Excel._Worksheet xlWorksheet = xlWorkbook.Sheets[1];\n            Microsoft.Office.Interop.Excel.Range xlRange = xlWorksheet.UsedRange;\n            try\n            {\n                Task\u003Cint\u003E longRunningTask = BindGrid(xlRange);\n                int result = await longRunningTask;\n\n            }\n            catch (Exception ex)\n            {\n                MessageBox.Show(ex.Message.ToString());\n            }\n            finally\n            {\n                //cleanup  \n               // GC.Collect();\n                //GC.WaitForPendingFinalizers();\n\n                //rule of thumb for releasing com objects:  \n                //  never use two dots, all COM objects must be referenced and released individually  \n                //  ex: [somthing].[something].[something] is bad  \n\n                //release com objects to fully kill excel process from running in the background  \n                Marshal.ReleaseComObject(xlRange);\n                Marshal.ReleaseComObject(xlWorksheet);\n\n                //close and release  \n                xlWorkbook.Close();\n                Marshal.ReleaseComObject(xlWorkbook);\n\n                //quit and release  \n                xlApp.Quit();\n                Marshal.ReleaseComObject(xlApp);\n            }\n\n        }\n\n        private void btnSendEmail_Click(object sender, EventArgs e)\n        {\n\n        }\n\n        private string OpenFileDialog()\n        {\n            string filename = \u0022\u0022;\n            OpenFileDialog fdlg = new OpenFileDialog();\n            fdlg.Title = \u0022Excel File Dialog\u0022;\n            fdlg.InitialDirectory = @\u0022c:\\\u0022;\n            fdlg.Filter = \u0022All files (*.*)|*.*|All files (*.*)|*.*\u0022;\n            fdlg.FilterIndex = 2;\n            fdlg.RestoreDirectory = true;\n            if (fdlg.ShowDialog() == DialogResult.OK)\n            {\n                filename = fdlg.FileName;\n            }\n            return filename;\n        }\n\n        private async Task\u003Cint\u003E BindGrid(Microsoft.Office.Interop.Excel.Range xlRange)\n        {\n            lblProcessing.Text = \u0022Processing File.. Please wait\u0022;\n            int rowCount = xlRange.Rows.Count;\n            int colCount = xlRange.Columns.Count;\n\n            // dt.Column = colCount;  \n            dataGridView1.ColumnCount = colCount;\n            dataGridView1.RowCount = rowCount;\n\n            for (int i = 1; i \u003C= rowCount; i\u002B\u002B)\n            {\n                for (int j = 1; j \u003C= colCount; j\u002B\u002B)\n                {\n                    //write the value to the Grid  \n                    if (xlRange.Cells[i, j] != null \u0026\u0026 xlRange.Cells[i, j].Value2 != null)\n                    {\n                         await Task.Delay(1);\n                         dataGridView1.Rows[i - 1].Cells[j - 1].Value =  xlRange.Cells[i, j].Value2.ToString();\n                    }\n\n                }\n            }\n            lblProcessing.Text = \u0022\u0022;\n            return 0;\n        }\n    }\n\n    internal class async\n    {\n    }\n}\n\n    ","\nThe answers here are useful as a general guidance about await/async.  They also contain some detail about how await/async is wired. I would like to share some practical experience with you that you should know before using this design pattern.\n\nThe term \u0022await\u0022 is literal, so whatever thread you call it on will wait for the result of the method before continuing.  On the foreground thread, this is a disaster.  The foreground thread carries the burden of constructing your app, including views, view models, initial animations, and whatever else you have boot-strapped with those elements. So when you await the foreground thread, you stop the app.  The user waits and waits when nothing appears to happen. This provides a negative user experience.\n\nYou can certainly await a background thread using a variety of means:\n\nDevice.BeginInvokeOnMainThread(async () =\u003E { await AnyAwaitableMethod(); });\n\n// Notice that we do not await the following call, \n// as that would tie it to the foreground thread.\ntry\n{\nTask.Run(async () =\u003E { await AnyAwaitableMethod(); });\n}\ncatch\n{}\n\n\nThe complete code for these remarks is at https://github.com/marcusts/xamarin-forms-annoyances.  See the solution called AwaitAsyncAntipattern.sln.\n\nThe GitHub site also provides links to a more detailed discussion on this topic.\n    ","\nTasks let you control the number of threads you are running on.\nThe optimal number of threads is the number of cores you have. \n\n\nwhen your app is Console, WinForms or WPF then you are normally running on a single-thread. \n\n\nin this case you want to increase the number of threads\nyour main tool is Task.Run(), and sometimes  Parallel.ForERach()\ndoing synchronous I/O on a thread (with Task.Run()) is sub-optimal but acceptable\n\nwhen your app runs on a Webserver it normally is running on (too) many threads.\nasp.net waits for incoming requests and quickly hands each one to a new pool thread.\n\n\nin this case you want to decrease the number of threads\nyour main tool is to await asynchrous I/O\nmake sure you have an unbroken await chain from your async Action method down to the actual I/O\ndoing synchronous I/O or CPU intensive work on a thread (with Task.Run()) is a de-optimization. \n\n\n    ","\n                \n                Why do we have an \u0022await\u0022 with the \u0022Task.Delay(1000);\u0022 in LongRunningOperation async method?\n                \n\u2013\u00A0Benison Sam\n                Mar 8 \u002715 at 17:28\n                        \n                            \n                        \n            ","\n                \n                @codea In Eric Lippert\u0027s comments to the article he linked an introductory article to this topic where he specifically compares DoEvents strategy with async-await\n                \n\u2013\u00A0Camilo Martinez\n                Apr 23 \u002715 at 15:44\n            ","\n                \n                @BenisonSam thread is a bit old, but I had the same question and have been looking for an answer.  Reason for the \u0022await\u0022 is that if we omit the \u0022await\u0022 the LongRunningOperationAsync() will return immediately.  In fact the compiler will give a warning if we remove the await.  Stephen Cleary\u0027s blog post blog.stephencleary.com/2011/09/\u2026 gives an execellent of the design discussions.\n                \n\u2013\u00A0shelbypereira\n                Dec 4 \u002715 at 10:33\n            ","\n                \n                If every async method need to have an await inside of it, and a await can only be done on a methods with async, when does it stop?\n                \n\u2013\u00A0Bruno Santos\n                May 19 \u002716 at 13:46\n            ","\n                \n                This answer is clearly wrong. These many upvotes will cause wrong understanding to many users. MS documentation clearly says, no other thread is used when just using async, await. msdn.microsoft.com/en-us/library/mt674882.aspx Please somebody correct the answer. Due to this i wasted one whole day.\n                \n\u2013\u00A0Krishna Deepak\n                Aug 15 \u002716 at 23:35\n                        \n                            \n                        \n            ","\n                \n                So it\u0027s not running on a background thread, but it also doesn\u0027t block. This is possible due to asynchronous API\u0027s which use callbacks instead of juggling with threads. You initiate an (I/O, socket, ..) operation and return to doing your things. When the operation is done, the OS will invoke the callback. This is what Node.js or the Python Twisted framework does and they have some nice explanation, too.\n                \n\u2013\u00A0Roman Pl\u00E1\u0161il\n                Aug 18 \u002713 at 16:59\n            ","\n                \n                \u0022The async keyword enables the await keyword. So any method using await must be marked async.\u0022, - but why? this answer doesn\u0027t help to understand why the method must be marked as async. Can\u0027t the compiler just infer that the method is async by looking inside for await keywords?\n                \n\u2013\u00A0Stanislav\n                Jan 14 \u002714 at 15:07\n                        \n                            \n                        \n            ","\n                \n                @Stanislav: I have a blog entry that addresses that question.\n                \n\u2013\u00A0Stephen Cleary\n                Jan 14 \u002714 at 16:25\n            ","\n                \n                Suggested clarification: No, because async methods are not run on another thread by default. In your example, the Sleep() call within DoSomethingAsync() blocks the current thread which prevents execution from continuing within button1_Click() until DoSomethingAsync() completes. Note that while Thread.Sleep() blocks the executing thread, Task.Delay() does not.\n                \n\u2013\u00A0DavidRR\n                May 27 \u002716 at 19:11\n                        \n                            \n                        \n            ","\n                \n                @PeterLarsen\u0027CPH\u0027: My answers here are \u0022async is not the same as spawning a thread\u0022, \u0022async methods are not run on another thread by default\u0022, and \u0022Sleep in an async method does not run on another thread\u0022. All of these are true and the docs agree.\n                \n\u2013\u00A0Stephen Cleary\n                Jun 22 at 14:31\n            ","\n                \n                Lets say if all these task are returning a int and if I am using first task\u0027s result in second task(or some calculation) It would be wrong?\n                \n\u2013\u00A0veerendra gupta\n                Jun 9 \u002717 at 7:41\n                        \n                            \n                        \n            ","\n                \n                @veerendragupta yes. You would consciously choose not to run them asynchronously in that case (because they\u0027re not asynchronous). There are also a few other things to realize regarding configuration context which I won\u0027t go into here\n                \n\u2013\u00A0Joe Phillips\n                Jun 9 \u002717 at 12:48\n            ","\n                \n                So await MethodCall() is an absolute waste? You might as well drop the await/async?\n                \n\u2013\u00A0Vitani\n                Jan 24 \u002718 at 14:47\n                        \n                            \n                        \n            ","\n                \n                @Jocie Not quite. When you call await, I think it releases the thread back to the pool instead of holding it. This makes it available for use elsewhere while awaiting the return of the Task\n                \n\u2013\u00A0Joe Phillips\n                Jan 24 \u002718 at 15:33\n            ","\n                \n                @JoePhillips I think what you just said is the essence of async/await. The calling thread is freed and can be used by other processes on the machine. When the await call is complete, a new thread is used to resume what the caller originally started. The caller is still waiting, but the benefit is that a thread is freed in the meantime. That\u0027s the benefit of async/wait?\n                \n\u2013\u00A0Bob Horn\n                Mar 11 \u002718 at 15:26\n                        \n                            \n                        \n            ","\n                \n                thanks for the answer. But is WaitAsynchronouslyAsync() executed on a separate thread?\n                \n\u2013\u00A0Dan Dinu\n                Jan 22 \u002713 at 9:51\n            ","\n                \n                I do belive so, from the section An await expression does not block the thread on which it is executing. Instead, it causes the compiler to sign up the rest of the async method as a continuation on the awaited task. Control then returns to the caller of the async method. When the task completes, it invokes its continuation, and execution of the async method resumes where it left off.\n                \n\u2013\u00A0Adriaan Stander\n                Jan 22 \u002713 at 9:56\n            ","\n                \n                According to this MSDN article, \u0022The async and await keywords don\u0027t cause additional threads to be created.... an async method doesn\u0027t run on its own thread\u0022.  My understanding is that at await keywords the framework skips ahead (back to the caller) to allow all possible independent code to run while waiting for long operations to finish.  I think that means that once all independent code has run, if the long operation hasn\u0027t returned, it will block.  I am just learning this now, though.\n                \n\u2013\u00A0Vimes\n                Apr 12 \u002713 at 19:49\n                        \n                            \n                        \n            ","\n                \n                @astander That is incorrect. It does not execute on a different thread. It is just schedules the continuation (the rest of the method) to be called when the timer used by Task.Delay fires.\n                \n\u2013\u00A0MgSam\n                Nov 14 \u002713 at 19:02\n                        \n                            \n                        \n            ","\n                \n                This answer is wrong because of the Sleep. See the accepted answer with await Task.Delay(1000); which has the correct behavior.\n                \n\u2013\u00A0Jared Updike\n                Feb 28 \u002714 at 23:25\n                        \n                            \n                        \n            ","\n                \n                \u0022Press any key to exit...\u0022 will be showed in which part of output?\n                \n\u2013\u00A0StudioX\n                Nov 23 \u002718 at 7:05\n            ","\n                \n                and what\u0027s the usage of (return 1)? is it necessary?\n                \n\u2013\u00A0StudioX\n                Nov 23 \u002718 at 7:07\n            ","\n                \n                @StudioX i think it must have return type integer\n                \n\u2013\u00A0Kuba Do\n                Oct 28 \u002719 at 14:35\n            ","\n                \n                I think the return 1 part deserves some further explanation: the await keyword allows you to return the underlying type of Task\u003CT\u003E directly, thus making it easier to adapt your exiting code to the await/async world. But you don\u0027t have to return a value, as it is possible to return a Task without specifying a returning type, which would be the equivalent of a synchronous void method. Mind that C# allows async void methods, but you should avoid doing so unless you\u0027re tackling event handlers.\n                \n\u2013\u00A0Christiano Kiss\n                Jan 16 at 16:17\n            ","\n                \n                Why Sleep is bad example but Download is good example. It is like FooBar kind of thing when I see Thread.Sleep I understand there is some task that takes times. I think his question is relevant\n                \n\u2013\u00A0Abdurrahim\n                Feb 2 \u002719 at 11:01\n            ","\n                \n                @Abdurrahim Thread.Sleep blocks the thread (the thread cannot do anything else but sit idle), but an async method does not. In the case of DownloadFileAsync, the thread can go and do something else until a reply comes from the remote server. A better placeholder for \u0022some task that takes time\u0022 in an async method is Task.Delay, since that is actually asynchronous.\n                \n\u2013\u00A0Gabriel Luci\n                Sep 11 \u002719 at 1:12\n                        \n                            \n                        \n            ","\n                \n                @GabrielLuci my objection is not about Delay vs Sleep; Your answer is looking more like a strawman answer; If you put this as a comment to the question that would be nothing I could object, but as an answer it smells more like a strawman answer. I think it is still fine to use async there even all calls he/she have to be making will be blocking calls; It won\u0027t invalidate all the purpose... Even all left will be syntactic sugar it counts as a valid case,\n                \n\u2013\u00A0Abdurrahim\n                Sep 12 \u002719 at 0:36\n            ","\n                \n                This wasn\u0027t my answer. But to address your point: it depends on the purpose of the method. If he just wanted a method to call, he succeeded. But in this case he was trying to make a method that runs  asynchronously. He did that by just using the async keyword. But his method still ran synchronously, and this answer explained perfectly why: because he didn\u0027t actually run any asynchronous code. Methods marked async still run synchronously up until you await an incomplete Task. If there is no await, then the method runs synchronously, and the compiler will warn you of that.\n                \n\u2013\u00A0Gabriel Luci\n                Sep 12 \u002719 at 1:01\n            ","\n                \n                fantastic answer! this helped me a ton\n                \n\u2013\u00A0cklimowski\n                Jan 3 at 22:26\n            ","\n                \n                Nice answer. You just might want to fix a couple of small things like: (a) mention of \u0022.Net framework 4.2\u0022 (no such version that I know of, exists) (b) casing in  EntityFrameWork =\u003E EntityFramework\n                \n\u2013\u00A0immitev\n                Apr 7 at 10:53\n            ","\n                \n                Asynchronous programming is such a blind spot for me no matter how much I read, but this helped. Seeing Task\u003Cstring\u003E getStringTask = client.GetStringAsync(\u0022...\u0022); separated out from the string urlContents = await getStringTask; finally made it make some sense. Almost every example you see just shows something like string urlContents = await client.GetStringAsync(\u0022...\u0022); and I\u0027ve just never understood what the point of that was (maybe there isn\u0027t any!).\n                \n\u2013\u00A0Philip Stratford\n                Oct 6 at 12:25\n                        \n                            \n                        \n            ","\n                \n                @PhilipStratford one reason I could think of is when a parent class calls it(eg: calling AccessTheWebAsync) and this parent class does not have a requirement to multi task but is forced to use it. But inside AccessTheWebAsync multi tasking is ideal hence the split using tasks(and also the reason for async implementation).\n                \n\u2013\u00A0Blue Clouds\n                Oct 6 at 13:02\n            ","\n                \n                Thank you! the first answer that actually does some work instead of waiting.\n                \n\u2013\u00A0Jeffnl\n                Jul 27 \u002718 at 5:33\n            ","\n                \n                thank you for showing task.Wait(); and how it can be used to avoid async/await hell :P\n                \n\u2013\u00A0encoder\n                Dec 29 \u002718 at 19:04\n            ","\n                \n                Thanks for taking time to write this one.\n                \n\u2013\u00A0Prashant\n                Nov 27 \u002719 at 9:44\n            ","\n                \n                that was a insightful real world analogy! sometimes for some developers understanding the technical parts becomes a lot easy when a real time analogy is made. thanks for it\n                \n\u2013\u00A0coder kemp\n                Jun 23 at 21:36\n            ","\n                \n                This answer is neither simple, nor an explanation.\n                \n\u2013\u00A015ee8f99-57ff-4f92-890c-b56153\n                Nov 13 at 16:42\n            ","\n                \n                Thank you for your criticism. People ingest information and learn differently, how could I improve my answer? What was difficult to understand? @15ee8f99-57ff-4f92-890c-b56153\n                \n\u2013\u00A0James Mallon\n                Nov 19 at 10:08\n                        \n                            \n                        \n            ","\n                \n                From what I understand, async / await is syntactic sugar for callbacks, it has nothing to do with threading. msdn.microsoft.com/en-us/magazine/hh456401.aspx   It is for non-CPU bound code, e.g. waiting for input or a delay. Task.Run should only be used for CPU-bound code blog.stephencleary.com/2013/10/\u2026\n                \n\u2013\u00A0geometrikal\n                Jun 11 \u002718 at 6:26\n            ","\n                \n                The term \u0022await\u0022 is literal, so whatever thread you call it on will wait for the result of the method before continuing. This is not true - maybe you meant Task.Wait()? When you use await, it sets the rest of the method as a continuation to be executed when whatever you await-ed is complete. It exits the method that you used it in, so the caller can continue. Then when the await-ed line is actually complete, it finishes the remainder of that method on some thread (usually a worker thread).\n                \n\u2013\u00A0Don Cheadle\n                Jul 1 \u002718 at 20:41\n                        \n                            \n                        \n            ","\n                \n                @geometrikal at the very core, async/await is about freeing up .NET Threads. When you await a truly-async operation (such as .NET\u0027s File.WriteAsync), it suspends the remainder of the method you used await in, so the caller can continue and potentially finish its purpose. There is no thread blocking or waiting for the await-ed operation. When the operation you awaited is complete, the remainder of the async/await method is put on a thread and executed (similar to a call-back idea).\n                \n\u2013\u00A0Don Cheadle\n                Jul 1 \u002718 at 20:47\n                        \n                            \n                        \n            ","\n                \n                Correlating tasks and threads is the wrong way to start explaining the async-await concept IMHO. It is the kind of explanation that you will later need to unlearn.\n                \n\u2013\u00A0Theodor Zoulias\n                Sep 1 \u002719 at 15:37\n            ","\n                \n                @TheodorZoulias, I disagree. What do you think the whole purpose of async I/O is?  I think it is about freeing up a thread.  And you need to know how many threads you will have before you know if Task.Run() is a good or a bad idea.\n                \n\u2013\u00A0Henk Holterman\n                Sep 1 \u002719 at 15:50\n            "]},{"Id":"8dd9f9b9-430c-415c-a477-b5d95d83bfe9","QuestionId":1315621,"Description":"Implementing INotifyPropertyChanged - does a better way exist?","Votes":672,"Views":318917,"Tags":["c#",".net","winforms","inotifypropertychanged"],"Discussions":["\nWithout using something like postsharp, the minimal version I use uses something like:\npublic class Data : INotifyPropertyChanged\n{\n    // boiler-plate\n    public event PropertyChangedEventHandler PropertyChanged;\n    protected virtual void OnPropertyChanged(string propertyName)\n    {\n        PropertyChangedEventHandler handler = PropertyChanged;\n        if (handler != null) handler(this, new PropertyChangedEventArgs(propertyName));\n    }\n    protected bool SetField\u003CT\u003E(ref T field, T value, string propertyName)\n    {\n        if (EqualityComparer\u003CT\u003E.Default.Equals(field, value)) return false;\n        field = value;\n        OnPropertyChanged(propertyName);\n        return true;\n    }\n\n    // props\n    private string name;\n    public string Name\n    {\n        get { return name; }\n        set { SetField(ref name, value, \u0022Name\u0022); }\n    }\n}\n\nEach property is then just something like:\nprivate string name;\npublic string Name\n{\n    get { return name; }\n    set { SetField(ref name, value, \u0022Name\u0022); }\n}\n\nwhich isn\u0027t huge; it can also be used as a base-class if you want. The bool return from SetField tells you if it was a no-op, in case you want to apply other logic.\n\nor even easier with C# 5:\nprotected bool SetField\u003CT\u003E(ref T field, T value,\n    [CallerMemberName] string propertyName = null)\n{...}\n\nwhich can be called like this:\nset { SetField(ref name, value); }\n\nwith which the compiler will add the \u0022Name\u0022 automatically.\n\nC# 6.0 makes the implementation easier:\nprotected void OnPropertyChanged([CallerMemberName] string propertyName = null)\n{\n    PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));\n}\n\n\n...and now with C#7:\nprotected void OnPropertyChanged(string propertyName)\n   =\u003E PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));\n\nprotected bool SetField\u003CT\u003E(ref T field, T value,[CallerMemberName] string propertyName =  null)\n{\n    if (EqualityComparer\u003CT\u003E.Default.Equals(field, value)) return false;\n    field = value;\n    OnPropertyChanged(propertyName);\n    return true;\n}\n\nprivate string name;\npublic string Name\n{\n    get =\u003E name;\n    set =\u003E SetField(ref name, value);\n}\n\n\nAnd, with C# 8 and Nullable reference types, it would look like this:\npublic event PropertyChangedEventHandler? PropertyChanged;\n\nprotected void OnPropertyChanged(string? propertyName) =\u003E PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));\n\nprotected bool SetField\u003CT\u003E(ref T field, T value, [CallerMemberName] string? propertyName = null)\n{\n    if (EqualityComparer\u003CT\u003E.Default.Equals(field, value)) return false;\n    field = value;\n    OnPropertyChanged(propertyName);\n    return true;\n}\n\nprivate string name;\npublic string Name\n{\n    get =\u003E name;\n    set =\u003E SetField(ref name, value);\n}\n\n    ","\nAs of .Net 4.5 there is finally an easy way to do this.\n\n.Net 4.5 introduces a new Caller Information Attributes.\n\nprivate void OnPropertyChanged\u003CT\u003E([CallerMemberName]string caller = null) {\n     // make sure only to call this if the value actually changes\n\n     var handler = PropertyChanged;\n     if (handler != null) {\n        handler(this, new PropertyChangedEventArgs(caller));\n     }\n}\n\n\nIt\u0027s probably a good idea to add a comparer to the function as well.\n\nEqualityComparer\u003CT\u003E.Default.Equals\n\n\nMore examples here and here\n\nAlso see Caller Information (C# and Visual Basic)\n    ","\nI really like Marc\u0027s solution, but I think it can be slightly improved to avoid using a \u0022magic string\u0022 (which doesn\u0027t support refactoring). Instead of using the property name as a string, it\u0027s easy to make it a lambda expression :\n\nprivate string name;\npublic string Name\n{\n    get { return name; }\n    set { SetField(ref name, value, () =\u003E Name); }\n}\n\n\nJust add the following methods to Marc\u0027s code, it will do the trick :\n\nprotected virtual void OnPropertyChanged\u003CT\u003E(Expression\u003CFunc\u003CT\u003E\u003E selectorExpression)\n{\n    if (selectorExpression == null)\n        throw new ArgumentNullException(\u0022selectorExpression\u0022);\n    MemberExpression body = selectorExpression.Body as MemberExpression;\n    if (body == null)\n        throw new ArgumentException(\u0022The body must be a member expression\u0022);\n    OnPropertyChanged(body.Member.Name);\n}\n\nprotected bool SetField\u003CT\u003E(ref T field, T value, Expression\u003CFunc\u003CT\u003E\u003E selectorExpression)\n{\n    if (EqualityComparer\u003CT\u003E.Default.Equals(field, value)) return false;\n    field = value;\n    OnPropertyChanged(selectorExpression);\n    return true;\n}\n\n\nBTW, this was inspired by this blog post updated URL\n    ","\nThere\u0027s also Fody which has a PropertyChanged add-in, which lets you write this:\n\n[ImplementPropertyChanged]\npublic class Person \n{        \n    public string GivenNames { get; set; }\n    public string FamilyName { get; set; }\n}\n\n\n...and at compile time injects property changed notifications.\n    ","\nI think people should pay a little more attention to performance; it really does impact the UI when there are a lot of objects to be bound (think of a grid with 10,000\u002B rows), or if the object\u0027s value changes frequently (real-time monitoring app).\n\nI took various implementation found here and elsewhere and did a comparison; check it out perfomance comparison of INotifyPropertyChanged implementations.\n\n\n\nHere is a peek at the result\n\n    ","\nI introduce a Bindable class in my blog at http://timoch.com/blog/2013/08/annoyed-with-inotifypropertychange/\nBindable uses a dictionary as a property bag. It\u0027s easy enough to add the necessary overloads for a subclass to manage its own backing field using ref parameters.\n\n\nNo magic string\nNo reflection\nCan be improved to suppress the default dictionary lookup\n\n\nThe code: \n\npublic class Bindable : INotifyPropertyChanged {\n    private Dictionary\u003Cstring, object\u003E _properties = new Dictionary\u003Cstring, object\u003E();\n\n    /// \u003Csummary\u003E\n    /// Gets the value of a property\n    /// \u003C/summary\u003E\n    /// \u003Ctypeparam name=\u0022T\u0022\u003E\u003C/typeparam\u003E\n    /// \u003Cparam name=\u0022name\u0022\u003E\u003C/param\u003E\n    /// \u003Creturns\u003E\u003C/returns\u003E\n    protected T Get\u003CT\u003E([CallerMemberName] string name = null) {\n        Debug.Assert(name != null, \u0022name != null\u0022);\n        object value = null;\n        if (_properties.TryGetValue(name, out value))\n            return value == null ? default(T) : (T)value;\n        return default(T);\n    }\n\n    /// \u003Csummary\u003E\n    /// Sets the value of a property\n    /// \u003C/summary\u003E\n    /// \u003Ctypeparam name=\u0022T\u0022\u003E\u003C/typeparam\u003E\n    /// \u003Cparam name=\u0022value\u0022\u003E\u003C/param\u003E\n    /// \u003Cparam name=\u0022name\u0022\u003E\u003C/param\u003E\n    /// \u003Cremarks\u003EUse this overload when implicitly naming the property\u003C/remarks\u003E\n    protected void Set\u003CT\u003E(T value, [CallerMemberName] string name = null) {\n        Debug.Assert(name != null, \u0022name != null\u0022);\n        if (Equals(value, Get\u003CT\u003E(name)))\n            return;\n        _properties[name] = value;\n        OnPropertyChanged(name);\n    }\n\n    public event PropertyChangedEventHandler PropertyChanged;\n\n    protected virtual void OnPropertyChanged([CallerMemberName] string propertyName = null) {\n        PropertyChangedEventHandler handler = PropertyChanged;\n        if (handler != null) {\n            handler(this, new PropertyChangedEventArgs(propertyName));\n        }\n    }\n}\n\n\nIt can be used like this:\n\npublic class Contact : Bindable {\n    public string FirstName {\n        get { return Get\u003Cstring\u003E(); }\n        set { Set(value); }\n    }\n}\n\n    ","\nI haven\u0027t actually had a chance to try this myself yet, but next time I\u0027m setting up a project with a big requirement for INotifyPropertyChanged I\u0027m intending on writing a Postsharp attribute that will inject the code at compile time. Something like:\n\n[NotifiesChange]\npublic string FirstName { get; set; }\n\n\nWill become:\n\nprivate string _firstName;\n\npublic string FirstName\n{\n   get { return _firstname; }\n   set\n   {\n      if (_firstname != value)\n      {\n          _firstname = value;\n          OnPropertyChanged(\u0022FirstName\u0022)\n      }\n   }\n}\n\n\nI\u0027m not sure if this will work in practice and I need to sit down and try it out, but I don\u0027t see why not. I may need to make it accept some parameters for situations where more than one OnPropertyChanged needs to be triggered (if, for example, I had a FullName property in the class above)\n\nCurrently I\u0027m using a custom template in Resharper, but even with that I\u0027m getting fed up of all my properties being so long.\n\n\n\nAh, a quick Google search (which I should have done before I wrote this) shows that at least one person has done something like this before here. Not exactly what I had in mind, but close enough to show that the theory is good.\n    ","\nYes, better way certainly exists.\nHere it is:\n\nStep by step tutorial shrank by me, based on this useful article.\n\n\nCreate new project\nInstall castle core package into the project \n\n\n\n  Install-Package Castle.Core\n\n\n\nInstall mvvm light libraries only\n\n\n\n  Install-Package MvvmLightLibs\n\n\n\nAdd two classes in project:\n\n\nNotifierInterceptor\n\npublic class NotifierInterceptor : IInterceptor\n    {\n        private PropertyChangedEventHandler handler;\n        public static Dictionary\u003CString, PropertyChangedEventArgs\u003E _cache =\n          new Dictionary\u003Cstring, PropertyChangedEventArgs\u003E();\n\n        public void Intercept(IInvocation invocation)\n        {\n            switch (invocation.Method.Name)\n            {\n                case \u0022add_PropertyChanged\u0022:\n                    handler = (PropertyChangedEventHandler)\n                              Delegate.Combine(handler, (Delegate)invocation.Arguments[0]);\n                    invocation.ReturnValue = handler;\n                    break;\n                case \u0022remove_PropertyChanged\u0022:\n                    handler = (PropertyChangedEventHandler)\n                              Delegate.Remove(handler, (Delegate)invocation.Arguments[0]);\n                    invocation.ReturnValue = handler;\n                    break;\n                default:\n                    if (invocation.Method.Name.StartsWith(\u0022set_\u0022))\n                    {\n                        invocation.Proceed();\n                        if (handler != null)\n                        {\n                            var arg = retrievePropertyChangedArg(invocation.Method.Name);\n                            handler(invocation.Proxy, arg);\n                        }\n                    }\n                    else invocation.Proceed();\n                    break;\n            }\n        }\n\n        private static PropertyChangedEventArgs retrievePropertyChangedArg(String methodName)\n        {\n            PropertyChangedEventArgs arg = null;\n            _cache.TryGetValue(methodName, out arg);\n            if (arg == null)\n            {\n                arg = new PropertyChangedEventArgs(methodName.Substring(4));\n                _cache.Add(methodName, arg);\n            }\n            return arg;\n        }\n    }\n\n\nProxyCreator\n\npublic class ProxyCreator\n{\n    public static T MakeINotifyPropertyChanged\u003CT\u003E() where T : class, new()\n    {\n        var proxyGen = new ProxyGenerator();\n        var proxy = proxyGen.CreateClassProxy(\n          typeof(T),\n          new[] { typeof(INotifyPropertyChanged) },\n          ProxyGenerationOptions.Default,\n          new NotifierInterceptor()\n          );\n        return proxy as T;\n    }\n}\n\n\n\nCreate your view model, for example:\n\n\n-\n\n public class MainViewModel\n    {\n        public virtual string MainTextBox { get; set; }\n\n        public RelayCommand TestActionCommand\n        {\n            get { return new RelayCommand(TestAction); }\n        }\n\n        public void TestAction()\n        {\n            Trace.WriteLine(MainTextBox);\n        }\n    }\n\n\n\nPut bindings into xaml:\n\n\u003CTextBox Text=\u0022{Binding MainTextBox}\u0022 \u003E\u003C/TextBox\u003E\n\u003CButton Command=\u0022{Binding TestActionCommand}\u0022 \u003ETest\u003C/Button\u003E\n\nPut line of code in code-behind file MainWindow.xaml.cs like this:\n\n\nDataContext = ProxyCreator.MakeINotifyPropertyChanged\u003CMainViewModel\u003E();\n\n\nEnjoy.\n\n\n\n\nAttention!!! All bounded properties should be decorated with\nkeyword virtual because they used by castle proxy for overriding.\n    ","\nA very AOP-like approach is to inject the INotifyPropertyChanged stuff onto an already instantiated object on the fly.  You can do this with something like Castle DynamicProxy.  Here is an article that explains the technique:\n\nAdding INotifyPropertyChanged to an existing object\n    ","\nLook here : http://dotnet-forum.de/blogs/thearchitect/archive/2012/11/01/die-optimale-implementierung-des-inotifypropertychanged-interfaces.aspx\n\nIt\u0027s written in German, but you can download the ViewModelBase.cs. All the comments in the cs-File are written in English.\n\nWith this ViewModelBase-Class it is possible to implement bindable properties similar to the well known Dependency Properties :\n\npublic string SomeProperty\n{\n    get { return GetValue( () =\u003E SomeProperty ); }\n    set { SetValue( () =\u003E SomeProperty, value ); }\n}\n\n    ","\nBased on the answer by Thomas which was adapted from an answer by Marc I\u0027ve turned the reflecting property changed code into a base class:\n\npublic abstract class PropertyChangedBase : INotifyPropertyChanged\n{\n    public event PropertyChangedEventHandler PropertyChanged;\n\n    protected void OnPropertyChanged(string propertyName)\n    {\n        PropertyChangedEventHandler handler = PropertyChanged;\n        if (handler != null) \n            handler(this, new PropertyChangedEventArgs(propertyName));\n    }\n\n    protected void OnPropertyChanged\u003CT\u003E(Expression\u003CFunc\u003CT\u003E\u003E selectorExpression)\n    {\n        if (selectorExpression == null)\n            throw new ArgumentNullException(\u0022selectorExpression\u0022);\n        var me = selectorExpression.Body as MemberExpression;\n\n        // Nullable properties can be nested inside of a convert function\n        if (me == null)\n        {\n            var ue = selectorExpression.Body as UnaryExpression;\n            if (ue != null)\n                me = ue.Operand as MemberExpression;\n        }\n\n        if (me == null)\n            throw new ArgumentException(\u0022The body must be a member expression\u0022);\n\n        OnPropertyChanged(me.Member.Name);\n    }\n\n    protected void SetField\u003CT\u003E(ref T field, T value, Expression\u003CFunc\u003CT\u003E\u003E selectorExpression, params Expression\u003CFunc\u003Cobject\u003E\u003E[] additonal)\n    {\n        if (EqualityComparer\u003CT\u003E.Default.Equals(field, value)) return;\n        field = value;\n        OnPropertyChanged(selectorExpression);\n        foreach (var item in additonal)\n            OnPropertyChanged(item);\n    }\n}\n\n\nUsage is the same as Thomas\u0027 answer except that you can pass additional properties to notify for.  This was necessary to handle calculated columns which need to be refreshed in a grid.\n\nprivate int _quantity;\nprivate int _price;\n\npublic int Quantity \n{ \n    get { return _quantity; } \n    set { SetField(ref _quantity, value, () =\u003E Quantity, () =\u003E Total); } \n}\npublic int Price \n{ \n    get { return _price; } \n    set { SetField(ref _price, value, () =\u003E Price, () =\u003E Total); } \n}\npublic int Total { get { return _price * _quantity; } }\n\n\nI have this driving a collection of items stored in a BindingList exposed via a DataGridView.  It has eliminated the need for me to do manual Refresh() calls to the grid.\n    ","\nLet me introduce my own approach called Yappi.\nIt belongs to Runtime proxy|derived class generators, adding new functionality to an existing object or type, like Caste Project\u0027s Dynamic Proxy.\n\nIt allows to implement INotifyPropertyChanged once in base class, and then declare derived classes in following style, still supporting INotifyPropertyChanged for new properties:\n\npublic class Animal:Concept\n{\n    protected Animal(){}\n    public virtual string Name { get; set; }\n    public virtual int Age { get; set; }\n}\n\n\nComplexity of derived class or proxy construction can be hidden behind the following line:\n\nvar animal = Concept.Create\u003CAnimal\u003E.New();\n\n\nAnd all INotifyPropertyChanged implementation work can be done like this:\n\npublic class Concept:INotifyPropertyChanged\n{\n    //Hide constructor\n    protected Concept(){}\n\n    public static class Create\u003CTConcept\u003E where TConcept:Concept\n    {\n        //Construct derived Type calling PropertyProxy.ConstructType\n        public static readonly Type Type = PropertyProxy.ConstructType\u003CTConcept, Implementation\u003CTConcept\u003E\u003E(new Type[0], true);\n        //Create constructing delegate calling Constructor.Compile\n        public static Func\u003CTConcept\u003E New = Constructor.Compile\u003CFunc\u003CTConcept\u003E\u003E(Type);\n    }\n\n\n    public event PropertyChangedEventHandler PropertyChanged;\n\n    protected void OnPropertyChanged(PropertyChangedEventArgs eventArgs)\n    {\n        var caller = PropertyChanged;\n        if(caller!=null)\n        {\n            caller(this, eventArgs);\n        }\n    }\n\n    //define implementation\n    public class Implementation\u003CTConcept\u003E : DefaultImplementation\u003CTConcept\u003E where TConcept:Concept\n    {\n        public override Func\u003CTBaseType, TResult\u003E OverrideGetter\u003CTBaseType, TDeclaringType, TConstructedType, TResult\u003E(PropertyInfo property)\n        {\n            return PropertyImplementation\u003CTBaseType, TDeclaringType\u003E.GetGetter\u003CTResult\u003E(property.Name);\n        }\n        /// \u003Csummary\u003E\n        /// Overriding property setter implementation.\n        /// \u003C/summary\u003E\n        /// \u003Ctypeparam name=\u0022TBaseType\u0022\u003EBase type for implementation. TBaseType must be TConcept, and inherits all its constraints. Also TBaseType is TDeclaringType.\u003C/typeparam\u003E\n        /// \u003Ctypeparam name=\u0022TDeclaringType\u0022\u003EType, declaring property.\u003C/typeparam\u003E\n        /// \u003Ctypeparam name=\u0022TConstructedType\u0022\u003EConstructed type. TConstructedType is TDeclaringType and TBaseType.\u003C/typeparam\u003E\n        /// \u003Ctypeparam name=\u0022TResult\u0022\u003EType of property.\u003C/typeparam\u003E\n        /// \u003Cparam name=\u0022property\u0022\u003EPropertyInfo of property.\u003C/param\u003E\n        /// \u003Creturns\u003EDelegate, corresponding to property setter implementation.\u003C/returns\u003E\n        public override Action\u003CTBaseType, TResult\u003E OverrideSetter\u003CTBaseType, TDeclaringType, TConstructedType, TResult\u003E(PropertyInfo property)\n        {\n            //This code called once for each declared property on derived type\u0027s initialization.\n            //EventArgs instance is shared between all events for each concrete property.\n            var eventArgs = new PropertyChangedEventArgs(property.Name);\n            //get delegates for base calls.\n            Action\u003CTBaseType, TResult\u003E setter = PropertyImplementation\u003CTBaseType, TDeclaringType\u003E.GetSetter\u003CTResult\u003E(property.Name);\n            Func\u003CTBaseType, TResult\u003E getter = PropertyImplementation\u003CTBaseType, TDeclaringType\u003E.GetGetter\u003CTResult\u003E(property.Name);\n\n            var comparer = EqualityComparer\u003CTResult\u003E.Default;\n\n            return (pthis, value) =\u003E\n            {//This code executes each time property setter is called.\n                if (comparer.Equals(value, getter(pthis))) return;\n                //base. call\n                setter(pthis, value);\n                //Directly accessing Concept\u0027s protected method.\n                pthis.OnPropertyChanged(eventArgs);\n            };\n        }\n    }\n}\n\n\nIt is fully safe for refactoring, uses no reflection after type construction and fast enough.\n    ","\nAll these answer are very nice.\n\nMy solution is using the code snippets to do the job.\n\nThis uses the simplest call to PropertyChanged event.\n\nSave this snippet and use it as you use \u0027fullprop\u0027 snippet.\n\n\n  the location can be found at \u0027Tools\\Code Snippet Manager...\u0027 menu at Visual Studio.\n\n\n\u003C?xml version=\u00221.0\u0022 encoding=\u0022utf-8\u0022 ?\u003E\n\u003CCodeSnippets  xmlns=\u0022http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet\u0022\u003E\n    \u003CCodeSnippet Format=\u00221.0.0\u0022\u003E\n        \u003CHeader\u003E\n            \u003CTitle\u003Einotifypropfull\u003C/Title\u003E\n            \u003CShortcut\u003Einotifypropfull\u003C/Shortcut\u003E\n            \u003CHelpUrl\u003Ehttp://ofirzeitoun.wordpress.com/\u003C/HelpUrl\u003E\n            \u003CDescription\u003ECode snippet for property and backing field with notification\u003C/Description\u003E\n            \u003CAuthor\u003EOfir Zeitoun\u003C/Author\u003E\n            \u003CSnippetTypes\u003E\n                \u003CSnippetType\u003EExpansion\u003C/SnippetType\u003E\n            \u003C/SnippetTypes\u003E\n        \u003C/Header\u003E\n        \u003CSnippet\u003E\n            \u003CDeclarations\u003E\n                \u003CLiteral\u003E\n                    \u003CID\u003Etype\u003C/ID\u003E\n                    \u003CToolTip\u003EProperty type\u003C/ToolTip\u003E\n                    \u003CDefault\u003Eint\u003C/Default\u003E\n                \u003C/Literal\u003E\n                \u003CLiteral\u003E\n                    \u003CID\u003Eproperty\u003C/ID\u003E\n                    \u003CToolTip\u003EProperty name\u003C/ToolTip\u003E\n                    \u003CDefault\u003EMyProperty\u003C/Default\u003E\n                \u003C/Literal\u003E\n                \u003CLiteral\u003E\n                    \u003CID\u003Efield\u003C/ID\u003E\n                    \u003CToolTip\u003EThe variable backing this property\u003C/ToolTip\u003E\n                    \u003CDefault\u003EmyVar\u003C/Default\u003E\n                \u003C/Literal\u003E\n            \u003C/Declarations\u003E\n            \u003CCode Language=\u0022csharp\u0022\u003E\n                \u003C![CDATA[private $type$ $field$;\n\n    public $type$ $property$\n    {\n        get { return $field$;}\n        set { \n            $field$ = value;\n            var temp = PropertyChanged;\n            if (temp != null)\n            {\n                temp(this, new PropertyChangedEventArgs(\u0022$property$\u0022));\n            }\n        }\n    }\n    $end$]]\u003E\n            \u003C/Code\u003E\n        \u003C/Snippet\u003E\n    \u003C/CodeSnippet\u003E\n\u003C/CodeSnippets\u003E\n\n\nYou can modify the call as you like (to use the above solutions)\n    ","\nWhilst there are obviously lots of ways to do this, with the exception of the AOP magic answers, none of the answers seem to look at setting a Model\u0027s property directly from the view model without having a local field to reference.\nThe issue is you can\u0027t reference a property. However, you can use an Action to set that property.\nprotected bool TrySetProperty\u003CT\u003E(Action\u003CT\u003E property, T newValue, T oldValue, [CallerMemberName] string propertyName = null)\n{\n    if (EqualityComparer\u003CT\u003E.Default.Equals(oldValue, newValue))\n    {\n        return false;\n    }\n\n    property(newValue);\n    RaisePropertyChanged(propertyName);\n    return true;\n}\n\nThis can be used like the following code extract.\npublic int Prop {\n    get =\u003E model.Prop;\n    set =\u003E TrySetProperty(x =\u003E model.Prop = x, value, model.Prop);\n}\n\nCheck out this BitBucket repo for a full implementation of the method and a few different ways of achieving the same result, including a method that uses LINQ and a method that uses reflection. Do note that these methods are slower performance wise.\n    ","\nIf you are using dynamics in .NET 4.5 you don\u0027t need to worry about INotifyPropertyChanged. \n\ndynamic obj = new ExpandoObject();\nobj.Name = \u0022John\u0022;\n\n\nif Name is bound to some control it just works fine. \n    ","\nAnother combined solution is using StackFrame:\n\npublic class BaseViewModel : INotifyPropertyChanged\n{\n    public event PropertyChangedEventHandler PropertyChanged;\n\n    protected void Set\u003CT\u003E(ref T field, T value)\n    {\n        MethodBase method = new StackFrame(1).GetMethod();\n        field = value;\n        Raise(method.Name.Substring(4));\n    }\n\n    protected void Raise(string propertyName)\n    {\n        var temp = PropertyChanged;\n        if (temp != null)\n        {\n            temp(this, new PropertyChangedEventArgs(propertyName));\n        }\n    }\n}\n\n\nUsage:\n\npublic class TempVM : BaseViewModel\n{\n    private int _intP;\n    public int IntP\n    {\n        get { return _intP; }\n        set { Set\u003Cint\u003E(ref _intP, value); }\n    }\n}\n\n    ","\nI created an Extension Method in my base Library for reuse:\n\npublic static class INotifyPropertyChangedExtensions\n{\n    public static bool SetPropertyAndNotify\u003CT\u003E(this INotifyPropertyChanged sender,\n               PropertyChangedEventHandler handler, ref T field, T value, \n               [CallerMemberName] string propertyName = \u0022\u0022,\n               EqualityComparer\u003CT\u003E equalityComparer = null)\n    {\n        bool rtn = false;\n        var eqComp = equalityComparer ?? EqualityComparer\u003CT\u003E.Default;\n        if (!eqComp.Equals(field,value))\n        {\n            field = value;\n            rtn = true;\n            if (handler != null)\n            {\n                var args = new PropertyChangedEventArgs(propertyName);\n                handler(sender, args);\n            }\n        }\n        return rtn;\n    }\n}\n\n\nThis works with .Net 4.5 because of CallerMemberNameAttribute.\nIf you want to use it with an earlier .Net version you have to change the method declaration from: ...,[CallerMemberName] string propertyName = \u0022\u0022, ... to ...,string propertyName, ...\n\nUsage:\n\npublic class Dog : INotifyPropertyChanged\n{\n    public event PropertyChangedEventHandler PropertyChanged;\n    string _name;\n\n    public string Name\n    {\n        get { return _name; }\n        set\n        {\n            this.SetPropertyAndNotify(PropertyChanged, ref _name, value);\n        }\n    }\n}\n\n    ","\nI resolved in This Way (it\u0027s a little bit laboriouse, but it\u0027s surely the faster in runtime).\n\nIn VB (sorry, but I think it\u0027s not hard translate it in C#), I make this substitution with RE:\n\n(?\u003CAttr\u003E\u003C(.*ComponentModel\\.)Bindable\\(True\\)\u003E)( |\\r\\n)*(?\u003CDef\u003E(Public|Private|Friend|Protected) .*Property )(?\u003CName\u003E[^ ]*) As (?\u003CType\u003E.*?)[ |\\r\\n](?![ |\\r\\n]*Get)\n\n\nwith:\n\nPrivate _${Name} As ${Type}\\r\\n${Attr}\\r\\n${Def}${Name} As ${Type}\\r\\nGet\\r\\nReturn _${Name}\\r\\nEnd Get\\r\\nSet (Value As ${Type})\\r\\nIf _${Name} \u003C\u003E Value Then \\r\\n_${Name} = Value\\r\\nRaiseEvent PropertyChanged(Me, New ComponentModel.PropertyChangedEventArgs(\u0022${Name}\u0022))\\r\\nEnd If\\r\\nEnd Set\\r\\nEnd Property\\r\\n\n\n\nThis transofrm all code like this:\n\n\u003CBindable(True)\u003E\nProtected Friend Property StartDate As DateTime?\n\n\nIn\n\nPrivate _StartDate As DateTime?\n\u003CBindable(True)\u003E\nProtected Friend Property StartDate As DateTime?\n    Get\n        Return _StartDate\n    End Get\n    Set(Value As DateTime?)\n        If _StartDate \u003C\u003E Value Then\n            _StartDate = Value\n            RaiseEvent PropertyChange(Me, New ComponentModel.PropertyChangedEventArgs(\u0022StartDate\u0022))\n        End If\n    End Set\nEnd Property\n\n\nAnd If I want to have a more readable code, I can be the opposite just making the following substitution:\n\nPrivate _(?\u003CName\u003E.*) As (?\u003CType\u003E.*)[\\r\\n ]*(?\u003CAttr\u003E\u003C(.*ComponentModel\\.)Bindable\\(True\\)\u003E)[\\r\\n ]*(?\u003CDef\u003E(Public|Private|Friend|Protected) .*Property )\\k\u003CName\u003E As \\k\u003CType\u003E[\\r\\n ]*Get[\\r\\n ]*Return _\\k\u003CName\u003E[\\r\\n ]*End Get[\\r\\n ]*Set\\(Value As \\k\u003CType\u003E\\)[\\r\\n ]*If _\\k\u003CName\u003E \u003C\u003E Value Then[\\r\\n ]*_\\k\u003CName\u003E = Value[\\r\\n ]*RaiseEvent PropertyChanged\\(Me, New (.*ComponentModel\\.)PropertyChangedEventArgs\\(\u0022\\k\u003CName\u003E\u0022\\)\\)[\\r\\n ]*End If[\\r\\n ]*End Set[\\r\\n ]*End Property\n\n\nWith\n\n${Attr} ${Def} ${Name} As ${Type}\n\n\nI throw to replace the IL code of the set method, but I can\u0027t write a lot of compiled code in IL... If a day I write it, I\u0027ll say you!\n    ","\nI keep this around as a snippet. C# 6 adds some nice syntax for invoking the handler.\n\n// INotifyPropertyChanged\n\npublic event PropertyChangedEventHandler PropertyChanged;\n\nprivate void Set\u003CT\u003E(ref T property, T value, [CallerMemberName] string propertyName = null)\n{\n    if (EqualityComparer\u003CT\u003E.Default.Equals(property, value) == false)\n    {\n        property = value;\n        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));\n    }\n}\n\n    ","\nHere is a Unity3D or non-CallerMemberName version of NotifyPropertyChanged\n\npublic abstract class Bindable : MonoBehaviour, INotifyPropertyChanged\n{\n    private readonly Dictionary\u003Cstring, object\u003E _properties = new Dictionary\u003Cstring, object\u003E();\n    private static readonly StackTrace stackTrace = new StackTrace();\n    public event PropertyChangedEventHandler PropertyChanged;\n\n    /// \u003Csummary\u003E\n    ///     Resolves a Property\u0027s name from a Lambda Expression passed in.\n    /// \u003C/summary\u003E\n    /// \u003Ctypeparam name=\u0022T\u0022\u003E\u003C/typeparam\u003E\n    /// \u003Cparam name=\u0022property\u0022\u003E\u003C/param\u003E\n    /// \u003Creturns\u003E\u003C/returns\u003E\n    internal string GetPropertyName\u003CT\u003E(Expression\u003CFunc\u003CT\u003E\u003E property)\n    {\n        var expression = (MemberExpression) property.Body;\n        var propertyName = expression.Member.Name;\n\n        Debug.AssertFormat(propertyName != null, \u0022Bindable Property shouldn\u0027t be null!\u0022);\n        return propertyName;\n    }\n\n    #region Notification Handlers\n\n    /// \u003Csummary\u003E\n    ///     Notify\u0027s all other objects listening that a value has changed for nominated propertyName\n    /// \u003C/summary\u003E\n    /// \u003Cparam name=\u0022propertyName\u0022\u003E\u003C/param\u003E\n    internal void NotifyOfPropertyChange(string propertyName)\n    {\n        OnPropertyChanged(new PropertyChangedEventArgs(propertyName));\n    }\n\n    /// \u003Csummary\u003E\n    ///     Notifies subscribers of the property change.\n    /// \u003C/summary\u003E\n    /// \u003Ctypeparam name=\u0022TProperty\u0022\u003EThe type of the property.\u003C/typeparam\u003E\n    /// \u003Cparam name=\u0022property\u0022\u003EThe property expression.\u003C/param\u003E\n    internal void NotifyOfPropertyChange\u003CTProperty\u003E(Expression\u003CFunc\u003CTProperty\u003E\u003E property)\n    {\n        var propertyName = GetPropertyName(property);\n        NotifyOfPropertyChange(propertyName);\n    }\n\n    /// \u003Csummary\u003E\n    ///     Raises the \u003Csee cref=\u0022PropertyChanged\u0022 /\u003E event directly.\n    /// \u003C/summary\u003E\n    /// \u003Cparam name=\u0022e\u0022\u003EThe \u003Csee cref=\u0022PropertyChangedEventArgs\u0022 /\u003E instance containing the event data.\u003C/param\u003E\n    internal void OnPropertyChanged(PropertyChangedEventArgs e)\n    {\n        var handler = PropertyChanged;\n        if (handler != null)\n        {\n            handler(this, e);\n        }\n    }\n\n    #endregion\n\n    #region Getters\n\n    /// \u003Csummary\u003E\n    ///     Gets the value of a property\n    /// \u003C/summary\u003E\n    /// \u003Ctypeparam name=\u0022T\u0022\u003E\u003C/typeparam\u003E\n    /// \u003Cparam name=\u0022name\u0022\u003E\u003C/param\u003E\n    /// \u003Creturns\u003E\u003C/returns\u003E\n    internal T Get\u003CT\u003E(Expression\u003CFunc\u003CT\u003E\u003E property)\n    {\n        var propertyName = GetPropertyName(property);\n        return Get\u003CT\u003E(GetPropertyName(property));\n    }\n\n    /// \u003Csummary\u003E\n    ///     Gets the value of a property automatically based on its caller.\n    /// \u003C/summary\u003E\n    /// \u003Ctypeparam name=\u0022T\u0022\u003E\u003C/typeparam\u003E\n    /// \u003Creturns\u003E\u003C/returns\u003E\n    internal T Get\u003CT\u003E()\n    {\n        var name = stackTrace.GetFrame(1).GetMethod().Name.Substring(4); // strips the set_ from name;\n        return Get\u003CT\u003E(name);\n    }\n\n    /// \u003Csummary\u003E\n    ///     Gets the name of a property based on a string.\n    /// \u003C/summary\u003E\n    /// \u003Ctypeparam name=\u0022T\u0022\u003E\u003C/typeparam\u003E\n    /// \u003Cparam name=\u0022name\u0022\u003E\u003C/param\u003E\n    /// \u003Creturns\u003E\u003C/returns\u003E\n    internal T Get\u003CT\u003E(string name)\n    {\n        object value = null;\n        if (_properties.TryGetValue(name, out value))\n            return value == null ? default(T) : (T) value;\n        return default(T);\n    }\n\n    #endregion\n\n    #region Setters\n\n    /// \u003Csummary\u003E\n    ///     Sets the value of a property whilst automatically looking up its caller name.\n    /// \u003C/summary\u003E\n    /// \u003Ctypeparam name=\u0022T\u0022\u003E\u003C/typeparam\u003E\n    /// \u003Cparam name=\u0022value\u0022\u003E\u003C/param\u003E\n    internal void Set\u003CT\u003E(T value)\n    {\n        var propertyName = stackTrace.GetFrame(1).GetMethod().Name.Substring(4); // strips the set_ from name;\n        Set(value, propertyName);\n    }\n\n    /// \u003Csummary\u003E\n    ///     Sets the value of a property\n    /// \u003C/summary\u003E\n    /// \u003Ctypeparam name=\u0022T\u0022\u003E\u003C/typeparam\u003E\n    /// \u003Cparam name=\u0022value\u0022\u003E\u003C/param\u003E\n    /// \u003Cparam name=\u0022name\u0022\u003E\u003C/param\u003E\n    internal void Set\u003CT\u003E(T value, string propertyName)\n    {\n        Debug.Assert(propertyName != null, \u0022name != null\u0022);\n        if (Equals(value, Get\u003CT\u003E(propertyName)))\n            return;\n        _properties[propertyName] = value;\n        NotifyOfPropertyChange(propertyName);\n    }\n\n    /// \u003Csummary\u003E\n    ///     Sets the value of a property based off an Expression (()=\u003EFieldName)\n    /// \u003C/summary\u003E\n    /// \u003Ctypeparam name=\u0022T\u0022\u003E\u003C/typeparam\u003E\n    /// \u003Cparam name=\u0022value\u0022\u003E\u003C/param\u003E\n    /// \u003Cparam name=\u0022property\u0022\u003E\u003C/param\u003E\n    internal void Set\u003CT\u003E(T value, Expression\u003CFunc\u003CT\u003E\u003E property)\n    {\n        var propertyName = GetPropertyName(property);\n\n        Debug.Assert(propertyName != null, \u0022name != null\u0022);\n\n        if (Equals(value, Get\u003CT\u003E(propertyName)))\n            return;\n        _properties[propertyName] = value;\n        NotifyOfPropertyChange(propertyName);\n    }\n\n    #endregion\n}\n\n\nThis code enables you to write property backing fields like this:\n\n  public string Text\n    {\n        get { return Get\u003Cstring\u003E(); }\n        set { Set(value); }\n    }\n\n\nFurthermore, in resharper if you create a pattern/search snippet you can then also automate you\u0027re workflow by converting simple prop fields into the above backing.\n\nSearch Pattern:\n\npublic $type$ $fname$ { get; set; }\n\n\nReplace Pattern:\n\npublic $type$ $fname$\n{\n    get { return Get\u003C$type$\u003E(); }\n    set { Set(value); }\n}\n\n    ","\nI have written an article that helps with this (https://msdn.microsoft.com/magazine/mt736453).  You can use the SolSoft.DataBinding NuGet package.  Then you can write code like this:\n\npublic class TestViewModel : IRaisePropertyChanged\n{\n  public TestViewModel()\n  {\n    this.m_nameProperty = new NotifyProperty\u003Cstring\u003E(this, nameof(Name), null);\n  }\n\n  private readonly NotifyProperty\u003Cstring\u003E m_nameProperty;\n  public string Name\n  {\n    get\n    {\n      return m_nameProperty.Value;\n    }\n    set\n    {\n      m_nameProperty.SetValue(value);\n    }\n  }\n\n  // Plus implement IRaisePropertyChanged (or extend BaseViewModel)\n}\n\n\nBenefits:\n\n\nbase class is optional\nno reflection on every \u0027set value\u0027\ncan have properties that depend on other properties, and they all automatically raise the appropriate events (article has an example of this)\n\n    ","\nOther things you may want to consider when implementing these sorts of properties is the fact that the INotifyPropertyChang *ed *ing both use event argument classes.\n\nIf you have a large number of properties that are being set then the number of event argument class instances can be huge, you should consider caching them as they are one of the areas that a string explosion can occur.\n\nTake a look at this implementation and explanation of why it was conceived.\n\nJosh Smiths Blog\n    ","\nI have just found ActiveSharp - Automatic INotifyPropertyChanged, I have yet to use it, but it looks good.\n\nTo quote from it\u0027s web site...\n\n\n\n\n  Send property change notifications\n  without specifying property name as a\n  string.\n\n\nInstead, write properties like this:\n\npublic int Foo\n{\n    get { return _foo; }\n    set { SetValue(ref _foo, value); }  // \u003C-- no property name here\n}\n\n\nNote that there is no need to include the name of the property as a string. ActiveSharp reliably and correctly figures that out for itself. It works based on the fact that your property implementation passes the backing field (_foo) by ref. (ActiveSharp uses that \u0022by ref\u0022 call to identify which backing field was passed, and from the field it identifies the property).\n    ","\nAn idea using reflection:\n\nclass ViewModelBase : INotifyPropertyChanged {\n\n    public event PropertyChangedEventHandler PropertyChanged;\n\n    bool Notify\u003CT\u003E(MethodBase mb, ref T oldValue, T newValue) {\n\n        // Get Name of Property\n        string name = mb.Name.Substring(4);\n\n        // Detect Change\n        bool changed = EqualityComparer\u003CT\u003E.Default.Equals(oldValue, newValue);\n\n        // Return if no change\n        if (!changed) return false;\n\n        // Update value\n        oldValue = newValue;\n\n        // Raise Event\n        if (PropertyChanged != null) {\n            PropertyChanged(this, new PropertyChangedEventArgs(name));\n        }//if\n\n        // Notify caller of change\n        return true;\n\n    }//method\n\n    string name;\n\n    public string Name {\n        get { return name; }\n        set {\n            Notify(MethodInfo.GetCurrentMethod(), ref this.name, value);\n        }\n    }//method\n\n}//class\n\n    ","\nI realize this question already has a gazillion answers, but none of them felt quite right for me. My issue is I don\u0027t want any performance hits and am willing to put up with a little verbosity for that reason alone. I also don\u0027t care too much for auto properties either, which led me to the following solution:\n\npublic abstract class AbstractObject : INotifyPropertyChanged\n{\n    public event PropertyChangedEventHandler PropertyChanged;\n\n    public void OnPropertyChanged(string propertyName)\n    {\n        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));\n    }\n\n    protected virtual bool SetValue\u003CTKind\u003E(ref TKind Source, TKind NewValue, params string[] Notify)\n    {\n        //Set value if the new value is different from the old\n        if (!Source.Equals(NewValue))\n        {\n            Source = NewValue;\n\n            //Notify all applicable properties\n            foreach (var i in Notify)\n                OnPropertyChanged(i);\n\n            return true;\n        }\n\n        return false;\n    }\n\n    public AbstractObject()\n    {\n    }\n}\n\n\nIn other words, the above solution is convenient if you don\u0027t mind doing this:\n\npublic class SomeObject : AbstractObject\n{\n    public string AnotherProperty\n    {\n        get\n        {\n            return someProperty ? \u0022Car\u0022 : \u0022Plane\u0022;\n        }\n    }\n\n    bool someProperty = false;\n    public bool SomeProperty\n    {\n        get\n        {\n            return someProperty;\n        }\n        set\n        {\n            SetValue(ref someProperty, value, \u0022SomeProperty\u0022, \u0022AnotherProperty\u0022);\n        }\n    }\n\n    public SomeObject() : base()\n    {\n    }\n}\n\n\nPros\n\n\nNo reflection\nOnly notifies if old value != new value\nNotify multiple properties at once\n\n\nCons\n\n\nNo auto properties (you can add support for both, though!)\nSome verbosity\nBoxing (small performance hit?)\n\n\nAlas, it is still better than doing this,\n\nset\n{\n    if (!someProperty.Equals(value))\n    {\n        someProperty = value;\n        OnPropertyChanged(\u0022SomeProperty\u0022);\n        OnPropertyChanged(\u0022AnotherProperty\u0022);\n    }\n}\n\n\nFor every single property, which becomes a nightmare with the additional verbosity ;-(\n\nNote, I do not claim this solution is better performance-wise compared to the others, just that it is a viable solution for those who don\u0027t like the other solutions presented.\n    ","\nI came up with this base class to implement the observable pattern, pretty much does what you need (\u0022automatically\u0022 implementing the set and get). I spent line an hour on this as prototype, so it doesn\u0027t have many unit tests, but proves the concept. Note it uses the Dictionary\u003Cstring, ObservablePropertyContext\u003E to remove the need for private fields.\n\n  public class ObservableByTracking\u003CT\u003E : IObservable\u003CT\u003E\n  {\n    private readonly Dictionary\u003Cstring, ObservablePropertyContext\u003E _expando;\n    private bool _isDirty;\n\n    public ObservableByTracking()\n    {\n      _expando = new Dictionary\u003Cstring, ObservablePropertyContext\u003E();\n\n      var properties = this.GetType().GetProperties(BindingFlags.Public | BindingFlags.Instance).ToList();\n      foreach (var property in properties)\n      {\n        var valueContext = new ObservablePropertyContext(property.Name, property.PropertyType)\n        {\n          Value = GetDefault(property.PropertyType)\n        };\n\n        _expando[BuildKey(valueContext)] = valueContext;\n      }\n    }\n\n    protected void SetValue\u003CT\u003E(Expression\u003CFunc\u003CT\u003E\u003E expression, T value)\n    {\n      var keyContext = GetKeyContext(expression);\n      var key = BuildKey(keyContext.PropertyName, keyContext.PropertyType);\n\n      if (!_expando.ContainsKey(key))\n      {\n        throw new Exception($\u0022Object doesn\u0027t contain {keyContext.PropertyName} property.\u0022);\n      }\n\n      var originalValue = (T)_expando[key].Value;\n      if (EqualityComparer\u003CT\u003E.Default.Equals(originalValue, value))\n      {\n        return;\n      }\n\n      _expando[key].Value = value;\n      _isDirty = true;\n    }\n\n    protected T GetValue\u003CT\u003E(Expression\u003CFunc\u003CT\u003E\u003E expression)\n    {\n      var keyContext = GetKeyContext(expression);\n      var key = BuildKey(keyContext.PropertyName, keyContext.PropertyType);\n\n      if (!_expando.ContainsKey(key))\n      {\n        throw new Exception($\u0022Object doesn\u0027t contain {keyContext.PropertyName} property.\u0022);\n      }\n\n      var value = _expando[key].Value;\n      return (T)value;\n    }\n\n    private KeyContext GetKeyContext\u003CT\u003E(Expression\u003CFunc\u003CT\u003E\u003E expression)\n    {\n      var castedExpression = expression.Body as MemberExpression;\n      if (castedExpression == null)\n      {\n        throw new Exception($\u0022Invalid expression.\u0022);\n      }\n\n      var parameterName = castedExpression.Member.Name;\n\n      var propertyInfo = castedExpression.Member as PropertyInfo;\n      if (propertyInfo == null)\n      {\n        throw new Exception($\u0022Invalid expression.\u0022);\n      }\n\n      return new KeyContext {PropertyType = propertyInfo.PropertyType, PropertyName = parameterName};\n    }\n\n    private static string BuildKey(ObservablePropertyContext observablePropertyContext)\n    {\n      return $\u0022{observablePropertyContext.Type.Name}.{observablePropertyContext.Name}\u0022;\n    }\n\n    private static string BuildKey(string parameterName, Type type)\n    {\n      return $\u0022{type.Name}.{parameterName}\u0022;\n    }\n\n    private static object GetDefault(Type type)\n    {\n      if (type.IsValueType)\n      {\n        return Activator.CreateInstance(type);\n      }\n      return null;\n    }\n\n    public bool IsDirty()\n    {\n      return _isDirty;\n    }\n\n    public void SetPristine()\n    {\n      _isDirty = false;\n    }\n\n    private class KeyContext\n    {\n      public string PropertyName { get; set; }\n      public Type PropertyType { get; set; }\n    }\n  }\n\n  public interface IObservable\u003CT\u003E\n  {\n    bool IsDirty();\n    void SetPristine();\n  }\n\n\nHere\u0027s the usage\n\npublic class ObservableByTrackingTestClass : ObservableByTracking\u003CObservableByTrackingTestClass\u003E\n  {\n    public ObservableByTrackingTestClass()\n    {\n      StringList = new List\u003Cstring\u003E();\n      StringIList = new List\u003Cstring\u003E();\n      NestedCollection = new List\u003CObservableByTrackingTestClass\u003E();\n    }\n\n    public IEnumerable\u003Cstring\u003E StringList\n    {\n      get { return GetValue(() =\u003E StringList); }\n      set { SetValue(() =\u003E StringIList, value); }\n    }\n\n    public IList\u003Cstring\u003E StringIList\n    {\n      get { return GetValue(() =\u003E StringIList); }\n      set { SetValue(() =\u003E StringIList, value); }\n    }\n\n    public int IntProperty\n    {\n      get { return GetValue(() =\u003E IntProperty); }\n      set { SetValue(() =\u003E IntProperty, value); }\n    }\n\n    public ObservableByTrackingTestClass NestedChild\n    {\n      get { return GetValue(() =\u003E NestedChild); }\n      set { SetValue(() =\u003E NestedChild, value); }\n    }\n\n    public IList\u003CObservableByTrackingTestClass\u003E NestedCollection\n    {\n      get { return GetValue(() =\u003E NestedCollection); }\n      set { SetValue(() =\u003E NestedCollection, value); }\n    }\n\n    public string StringProperty\n    {\n      get { return GetValue(() =\u003E StringProperty); }\n      set { SetValue(() =\u003E StringProperty, value); }\n    }\n  }\n\n    ","\nI suggest to use ReactiveProperty.\nThis is the shortest method except Fody.\n\npublic class Data : INotifyPropertyChanged\n{\n    // boiler-plate\n    ...\n    // props\n    private string name;\n    public string Name\n    {\n        get { return name; }\n        set { SetField(ref name, value, \u0022Name\u0022); }\n    }\n}\n\n\ninstead\n\npublic class Data\n{\n    // Don\u0027t need boiler-plate and INotifyPropertyChanged\n\n    // props\n    public ReactiveProperty\u003Cstring\u003E Name { get; } = new ReactiveProperty\u003Cstring\u003E();\n}\n\n\n(DOCS)\n    ","\nI\u0027m writing a library that deals with INotifyPropertyChanged, and the main idea is using a dynamic proxy to notify changes.\n\nthe repo is here: CaulyKan/NoMorePropertyChanged\n\nwith this library, you can write:\n\n    public dynamic Test1Binding { get; set; }\n    public TestDTO Test1\n    {\n        get { return (TestDTO)Test1Binding; }\n        set { SetBinding(nameof(Test1Binding), value); }\n    }\n\n\nThen make all bindings and modifications go to Test1Binding, which will notify PropertyChange and CollectionChanged automatically no matter how complex TestDTO is.\n\nit can also handle dependencies.\n\n    [DependsOn(\u0022Test1Binding.TestString\u0022)]\n    public string Test2\n    {\n        get { return Test1Binding.TestString; }\n    }\n\n\nPlease give me some suggestions.\n    ","\nAnother Idea...\n\n public class ViewModelBase : INotifyPropertyChanged\n{\n    private Dictionary\u003Cstring, object\u003E _propertyStore = new Dictionary\u003Cstring, object\u003E();\n    protected virtual void SetValue\u003CT\u003E(T value, [CallerMemberName] string propertyName=\u0022\u0022) {\n        _propertyStore[propertyName] = value;\n        OnPropertyChanged(propertyName);\n    }\n    protected virtual T GetValue\u003CT\u003E([CallerMemberName] string propertyName = \u0022\u0022)\n    {\n        object ret;\n        if (_propertyStore.TryGetValue(propertyName, out ret))\n        {\n            return (T)ret;\n        }\n        else\n        {\n            return default(T);\n        }\n    }\n\n    //Usage\n    //public string SomeProperty {\n    //    get { return GetValue\u003Cstring\u003E();  }\n    //    set { SetValue(value); }\n    //}\n\n    public event PropertyChangedEventHandler PropertyChanged;\n    protected void OnPropertyChanged(string propertyName)\n    {\n        var temp = PropertyChanged;\n        if (temp != null)\n            temp.Invoke(this, new PropertyChangedEventArgs(propertyName));\n    }\n}\n\n    ","\n=\u003E here my solution with the following features\n\n public ResourceStatus Status\n {\n     get { return _status; }\n     set\n     {\n         _status = value;\n         Notify(Npcea.Status,Npcea.Comments);\n     }\n }\n\n\n\nno refelction\nshort notation\nno magic string in your business code\nReusability of PropertyChangedEventArgs across application\nPossibility to notify multiple properties in one statement\n\n    ","\n                \n                Nice trick Marc ! I suggested an improvement to use a lambda expression instead of the property name, see my answer\n                \n\u2013\u00A0Thomas Levesque\n                Aug 22 \u002709 at 17:50\n            ","\n                \n                @Thomas - the lambda is all well and good, but it adds a lot of overhead for something that is actually very simple. A handy trick, but I\u0027m not sure it is always practical.\n                \n\u2013\u00A0Marc Gravell\u2666\n                Aug 22 \u002709 at 19:38\n            ","\n                \n                @Marc - Yes, it can probably degrade performance... However I really like the fact that it\u0027s checked at compile time, and is correctly refactored by the \u0022Rename\u0022 command\n                \n\u2013\u00A0Thomas Levesque\n                Aug 22 \u002709 at 21:23\n            ","\n                \n                @Gusdor fortunately, with C#5 there is no need to compromise - you can get the best of both via (as Pedro77 notes) [CallerMemberName]\n                \n\u2013\u00A0Marc Gravell\u2666\n                Oct 22 \u002713 at 8:30\n            ","\n                \n                @Gusdor the language and framework are separate; you can use the C# 5 compiler, target .NET 4, and just add the missing attribute yourself - it will work fine. It just has to have the correct name and be in the correct namespace. It does not need to be in a specific assembly.\n                \n\u2013\u00A0Marc Gravell\u2666\n                Oct 22 \u002713 at 8:39\n            ","\n                \n                Brilliant! But why is it generic?\n                \n\u2013\u00A0abatishchev\n                Dec 12 \u002712 at 18:40\n            ","\n                \n                @abatishchev I guess it doesn\u0027t have to be, I was just playing with the idea of having the function set the property as well. I\u0027ll see if I can update my answer provide the full solution. The extra examples do a good job that in the meantime.\n                \n\u2013\u00A0Daniel Little\n                Dec 13 \u002712 at 0:06\n            ","\n                \n                It was introduced by C # 5.0. It has nothing to do with .net 4.5, but this is a great solution!\n                \n\u2013\u00A0J. Lennon\n                Feb 17 \u002713 at 23:20\n            ","\n                \n                @J. Lennon .net 4.5 still has something to do with it, after all the attribute comes from somewhere msdn.microsoft.com/en-au/library/\u2026\n                \n\u2013\u00A0Daniel Little\n                Feb 17 \u002713 at 23:43\n            ","\n                \n                @Lavinski change your application to eg .NET 3.5 and see what will work (in vs2012)\n                \n\u2013\u00A0J. Lennon\n                Feb 18 \u002713 at 0:23\n                        \n                            \n                        \n            ","\n                \n                There\u0027s at least one framework using this method, ReactiveUI.\n                \n\u2013\u00A0AlSki\n                Oct 11 \u002711 at 16:19\n            ","\n                \n                Very late, this meant going through reflection, which meant a performance hit. It could be acceptable, but setting a property isn\u0027t a place where I\u0027d like my application to spend to many cycles.\n                \n\u2013\u00A0Bruno Brant\n                Feb 26 \u002715 at 19:46\n            ","\n                \n                @BrunoBrant Are you sure there is a performance hit?  According to the blog post the reflection happens during compile time rather than runtime (i.e. static reflection).\n                \n\u2013\u00A0Nathaniel Elkins\n                Mar 17 \u002715 at 21:47\n            ","\n                \n                I believe your whole OnPropertyChanged\u003CT\u003E is obsolete with the nameof operator of C# 6, making this monster a bit sleeker.\n                \n\u2013\u00A0Traubenfuchs\n                May 1 \u002715 at 18:04\n            ","\n                \n                @Traubenfuchs, actually, C#5\u0027s CallerMemberName attribute makes it even simpler, since you don\u0027t need to pass anything at all ...\n                \n\u2013\u00A0Thomas Levesque\n                May 2 \u002715 at 0:02\n            ","\n                \n                I think this is exactly what OP was looking for when they asked \u0022Can we ourselves implement something like \u0027notify\u0027 in our properties. Is there a graceful solution for implementing INotifyPropertyChanged in your class\u0022\n                \n\u2013\u00A0Ashoat\n                Aug 5 \u002716 at 6:59\n            ","\n                \n                This is the only graceful solution really, and it does work flawlessly as @CADbloke said. And I was skeptic about the weaver as well, but I checked/rechecked the IL code behind and it\u0027s perfect, it\u0027s simple, does all you need and none else. It also hooks and calls whatever method name you have designated in the base class for it, whether NotifyOnProp..., OnNotify... doesn\u0027t matter, so works well with any base class that you might have and that implements INotify...\n                \n\u2013\u00A0NSGaga-mostly-inactive\n                Mar 4 \u002717 at 22:04\n            ","\n                \n                You can easily double-check what the weaver is doing, have a look at the build output window, it lists all the PropertyChanged things it has weaved. Using the VScolorOutput extension with the regex pattern \u0022Fody/.*?:\u0022,LogCustom2,True highlights it in the \u0022Custom 2\u0022 color. I made it bright pink so it\u0027s easy to find. Just Fody everything, it\u0027s the neatest way to do anything that has lots of repetitive typing.\n                \n\u2013\u00A0CAD bloke\n                Jul 25 \u002717 at 4:28\n            ","\n                \n                @mahmoudnezarsarhan no, it\u0027s not, I remember there was a slight change in the way it has to be configured, but Fody PropertyChanged is still alive and active.\n                \n\u2013\u00A0Larry\n                Jul 23 \u002719 at 12:50\n            ","\n                \n                -1 : there is no performance overhead : CallerMemberName are changed into literal values at compile time. Just try and decompile your app.\n                \n\u2013\u00A0JYL\n                Mar 17 \u002714 at 0:11\n                        \n                            \n                        \n            ","\n                \n                here is the according question and answer: stackoverflow.com/questions/22580623/\u2026\n                \n\u2013\u00A0uli78\n                Mar 25 \u002714 at 13:47\n                        \n                            \n                        \n            ","\n                \n                @JYL, you are correct that CallerMemberName did not add a large overhead.  I must have implemented something wrong last time I tried it.  I will update the blog and answer to reflect the benchmark for CallerMemberName and Fody implementation later.\n                \n\u2013\u00A0Peijen\n                Apr 22 \u002714 at 5:43\n            ","\n                \n                If you have a grid of 10,000\u002B in the UI then you should probably be combining approaches to handle performance, like paging where you only show 10, 50, 100, 250 hits per page...\n                \n\u2013\u00A0Austin Rhymer\n                Jul 19 \u002717 at 15:06\n            ","\n                \n                Austin Rhymer , if you have larg data \u002B 50 use data virtualisation no need to load all data it will load only the data that is visible on the current scolling displayed area !\n                \n\u2013\u00A0Bilal\n                May 5 at 0:17\n            ","\n                \n                This is a nice solution, but the only downside is that there\u0027s a small performance hit involving boxing / unboxing.\n                \n\u2013\u00A0MCattle\n                Oct 17 \u002714 at 21:57\n            ","\n                \n                I would suggest to use protected T Get\u003CT\u003E(T defaultValue, [CallerMemberName] string name = null) and also check if (_properties.ContainsKey(name) \u0026\u0026 Equals(value, Get\u003CT\u003E(default(T), name))) in Set (to raise \u0026 save when first set to default value)\n                \n\u2013\u00A0Miquel\n                Feb 12 \u002715 at 2:35\n            ","\n                \n                @Miquel adding support for custom default values can be useful for sure, however you should be careful to only raise the changed event when the value actually changed. Setting a property to the same value it had should not raise events. I must admit in most cases it\u0027s harmless, howeverI\u0027ve been bit quite a few times with properties being set thousands of time to the same value with events destroying UI responsiveness.\n                \n\u2013\u00A0TiMoch\n                Mar 1 \u002715 at 20:14\n            ","\n                \n                @stakx I have a few applications that build on this to support the memento pattern for undo/redo or to enable the unit of work pattern in applications where nhibernate isn\u0027t usable\n                \n\u2013\u00A0TiMoch\n                Mar 1 \u002715 at 20:16\n            ","\n                \n                I really like this particular solution: short notation, no dynamic proxy stuff, no IL-meddling, etc. Although, you can make it shorter by removing the need to specify T every time for Get by making Get return dynamic. I know, this impacts runtime performance, but now the code for getters and setters can finally be always the same and in one line, praise the Lord! P.S. you should take additional care inside your Get method (one time when you write the base class) when returning default values for valuetypes as dynamic. Be sure to always return correct default values (it can be done)\n                \n\u2013\u00A0evilkos\n                Feb 5 \u002716 at 9:31\n            ","\n                \n                A free tool called Fody seems to do the same thing, functioning as a generic compile-time code injector.  It\u0027s downloadable in Nuget, as are its PropertyChanged and PropertyChanging plugin packages.\n                \n\u2013\u00A0Triynko\n                Feb 10 \u002714 at 20:39\n                        \n                            \n                        \n            ","\n                \n                I\u0027m interested to know which version of Castle you are using. I am using 3.3.0 and the CreateClassProxy method does not have those parameters: type, interfaces to apply, interceptors.\n                \n\u2013\u00A0IAbstract\n                Apr 13 \u002716 at 21:56\n            ","\n                \n                Nevermind, I was using the generic CreateClassProxy\u003CT\u003E method. Much different ...hmmm, wondering why so limited with the generic method. :(\n                \n\u2013\u00A0IAbstract\n                Apr 13 \u002716 at 22:25\n            ","\n                \n                Link is broken.\n                \n\u2013\u00A0Guge\n                Jan 30 \u002717 at 12:49\n            ","\n                \n                Why do you need TDeclaration type parameter on PropertyImplementation? Surely you can find appropriate type to call (not callvirt) the getter/setter from with only TImplementation?\n                \n\u2013\u00A0Andrew Savinykh\n                Jun 22 \u002715 at 3:13\n            ","\n                \n                TImplementation works in most of cases. Exceptions are: 1. Properties  redefined with \u0022new\u0022 C# keyvord. 2. Properties of explicit interface implementation.\n                \n\u2013\u00A0Kelqualyn\n                Jul 29 \u002715 at 5:53\n                        \n                            \n                        \n            ","\n                \n                I\u0027ve been looking for this. Thanks for sharing your implementation. Are you still using this method?\n                \n\u2013\u00A0GisMofx\n                Aug 29 at 16:34\n            ","\n                \n                @GisMofx I haven\u0027t really done much WPF development recently but in my last WPF project, I did use this method, along with some of the others in NotifyPropertyChange from my repo that I linked\n                \n\u2013\u00A0Dan\n                Sep 1 at 19:46\n            ","\n                \n                any disadvantages of using this?\n                \n\u2013\u00A0juFo\n                Sep 15 \u002717 at 7:56\n            ","\n                \n                Is that fast ? Isn\u0027t access to stack frame bound to some permission requirement ? Is that robust in a context of using async/await ?\n                \n\u2013\u00A0St\u00E9phane Gourichon\n                Oct 28 \u002714 at 19:30\n            ","\n                \n                @St\u00E9phaneGourichon No, it isn\u0027t. Accessing the stack frame means a considerable performance hit on most cases.\n                \n\u2013\u00A0Bruno Brant\n                Apr 1 \u002715 at 13:02\n            ","\n                \n                Yes there is, you can see it at codereview.stackexchange.com/questions/13823/\u2026\n                \n\u2013\u00A0Ofir\n                Jun 27 \u002716 at 12:01\n            ","\n                \n                Note that inlining may hide the get_Foo method in Release mode.\n                \n\u2013\u00A0bytecode77\n                Apr 10 \u002719 at 13:54\n            ","\n                \n                This is pretty cool, I like it more than expression approach. On the downside, should be slower.\n                \n\u2013\u00A0nawfal\n                Aug 12 \u002714 at 8:11\n                        \n                            \n                        \n            "]},{"Id":"a64ba9ea-32ae-47a9-9f34-08709bbf2175","QuestionId":255669,"Description":"How to enable assembly bind failure logging (Fusion) in .NET","Votes":835,"Views":458453,"Tags":["c#",".net","vb.net","binding","assemblies"],"Discussions":["\nAdd the following values to\n\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Fusion\nAdd:\nDWORD ForceLog set value to 1\nDWORD LogFailures set value to 1\nDWORD LogResourceBinds set value to 1\nDWORD EnableLog set value to 1\nString LogPath set value to folder for logs (e.g. C:\\FusionLog\\)\n\n\nMake sure you include the backslash after the folder name and that the Folder exists. \n\nYou need to restart the program that you\u0027re running to force it to read those registry settings.\n\nBy the way, don\u0027t forget to turn off fusion logging when not needed.\n\n\n    ","\nI usually use the Fusion Log Viewer (Fuslogvw.exe from a Visual Studio command prompt or Fusion Log Viewer from the start menu) - my standard setup is:\n\n\nOpen Fusion Log Viewer as administrator\nClick settings\nCheck the Enable custom log path checkbox\nEnter the location you want logs to get written to, for example, c:\\FusionLogs (Important: make sure that you have actually created this folder in the file system.)\nMake sure that the right level of logging is on (I sometimes just select Log all binds to disk just to make sure things are working right)\nClick OK\nSet the log location option to Custom\n\n\nRemember to turn of logging off once you\u0027re done! \n\n(I just posted this on a similar question - I think it\u0027s relevant here too.)\n    ","\nIf you have the Windows SDK installed on your machine, you\u0027ll find the \u0022Fusion Log Viewer\u0022 under Microsoft SDK\\Tools (just type \u0022Fusion\u0022 in the start menu on Vista or Windows 7/8). Launch it, click the Settings button, and select \u0022Log bind failure\u0022 or \u0022Log all binds\u0022.\n\nIf these buttons are disabled, go back to the start menu, right-click the Log Viewer, and select \u0022Run as Administrator\u0022.\n    ","\nSet the following registry value:\n\n[HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Fusion!EnableLog] (DWORD) to 1\n\nTo disable, set to 0 or delete the value.\n\n[edit ]:Save the following text to a file, e.g FusionEnableLog.reg, in\nWindows Registry Editor Format:\n\nWindows Registry Editor Version 5.00\n\n[HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Fusion]\n\u0022EnableLog\u0022=dword:00000001\n\n\nThen run the file from windows explorer and ignore the warning about possible damage.\n    ","\nYou can run this Powershell script as administrator to enable FL:\n\nSet-ItemProperty -Path HKLM:\\Software\\Microsoft\\Fusion -Name ForceLog         -Value 1               -Type DWord\nSet-ItemProperty -Path HKLM:\\Software\\Microsoft\\Fusion -Name LogFailures      -Value 1               -Type DWord\nSet-ItemProperty -Path HKLM:\\Software\\Microsoft\\Fusion -Name LogResourceBinds -Value 1               -Type DWord\nSet-ItemProperty -Path HKLM:\\Software\\Microsoft\\Fusion -Name LogPath          -Value \u0027C:\\FusionLog\\\u0027 -Type String\nmkdir C:\\FusionLog -Force\n\n\nand this one to disable:\n\nRemove-ItemProperty -Path HKLM:\\Software\\Microsoft\\Fusion -Name ForceLog\nRemove-ItemProperty -Path HKLM:\\Software\\Microsoft\\Fusion -Name LogFailures\nRemove-ItemProperty -Path HKLM:\\Software\\Microsoft\\Fusion -Name LogResourceBinds\nRemove-ItemProperty -Path HKLM:\\Software\\Microsoft\\Fusion -Name LogPath\n\n    ","\nThe Fusion Log Settings Viewer changer script is bar none the best way to do this. \n\nIn ASP.NET, it has been tricky at times to get this to work correctly. This script works great and was listed on Scott Hanselman\u0027s Power Tool list as well. I\u0027ve personally used it for years and its never let me down.\n    ","\nI wrote an assembly binding log viewer named Fusion\u002B\u002B and put it on GitHub. \n\nYou can get the latest release from here or via chocolatey (choco install fusionplusplus).\n\nI hope you and some of the visitors in here can save some worthy lifetime minutes with it.\n\n\n    ","\nInstead of using a ugly log file, you can also activate Fusion log via ETW/xperf by turning on the DotnetRuntime Private provider (Microsoft-Windows-DotNETRuntimePrivate) with GUID 763FD754-7086-4DFE-95EB-C01A46FAF4CA and the FusionKeyword keyword (0x4) on.\n\n@echo off\necho Press a key when ready to start...\npause\necho .\necho ...Capturing...\necho .\n\n\u0022C:\\Program Files (x86)\\Windows Kits\\8.1\\Windows Performance Toolkit\\xperf.exe\u0022 -on PROC_THREAD\u002BLOADER\u002BPROFILE -stackwalk Profile -buffersize 1024 -MaxFile 2048 -FileMode Circular -f Kernel.etl\n\u0022C:\\Program Files (x86)\\Windows Kits\\8.1\\Windows Performance Toolkit\\xperf.exe\u0022 -start ClrSession -on Microsoft-Windows-DotNETRuntime:0x8118:0x5:\u0027stack\u0027\u002B763FD754-7086-4DFE-95EB-C01A46FAF4CA:0x4:0x5 -f clr.etl -buffersize 1024\n\necho Press a key when you want to stop...\npause\npause\necho .\necho ...Stopping...\necho .\n\n\u0022C:\\Program Files (x86)\\Windows Kits\\8.1\\Windows Performance Toolkit\\xperf.exe\u0022 -start ClrRundownSession -on Microsoft-Windows-DotNETRuntime:0x8118:0x5:\u0027stack\u0027\u002BMicrosoft-Windows-DotNETRuntimeRundown:0x118:0x5:\u0027stack\u0027 -f clr_DCend.etl -buffersize 1024 \n\ntimeout /t 15\n\nset XPERF_CreateNGenPdbs=1\n\n\u0022C:\\Program Files (x86)\\Windows Kits\\8.1\\Windows Performance Toolkit\\xperf.exe\u0022 -stop ClrSession ClrRundownSession \n\u0022C:\\Program Files (x86)\\Windows Kits\\8.1\\Windows Performance Toolkit\\xperf.exe\u0022 -stop\n\u0022C:\\Program Files (x86)\\Windows Kits\\8.1\\Windows Performance Toolkit\\xperf.exe\u0022 -merge kernel.etl clr.etl clr_DCend.etl Result.etl -compress\ndel kernel.etl\ndel clr.etl\ndel clr_DCend.etl\n\n\nWhen you now open the ETL file in PerfView and look under the Events table, you can find the Fusion data:\n\n\n    ","\nJust a tiny bit of info that might help others; if you do something along the lines of searching all assemblies in some directory for classes that inherit/implement classes/interfaces, then make sure you clean out stale assemblies if you get this error pertaining to one of your own assemblies.\n\nThe scenario would be something like:\n\n\nAssembly A loads all assemblies in some folder \nAssembly B in this folder is stale, but references assembly C \nAssembly C exists, but namespaces, class names or some other detail might have changed in the time that has passed since assembly B became stale (in my case a namespace was changed through a refactoring process)\n\n\nIn short: A ---loads--\u003E B (stale) ---references---\u003E C\n\nIf this happens, the only telltale sign is the namespace and classname in the error message. Examine it closely. If you can\u0027t find it anywhere in your solution, you are likely trying to load a stale assembly.\n    ","\nFor those who are a bit lazy, I recommend running this as a bat file for when ever you want to enable it:\n\nreg add \u0022HKLM\\Software\\Microsoft\\Fusion\u0022 /v EnableLog /t REG_DWORD /d 1 /f\nreg add \u0022HKLM\\Software\\Microsoft\\Fusion\u0022 /v ForceLog /t REG_DWORD /d 1 /f\nreg add \u0022HKLM\\Software\\Microsoft\\Fusion\u0022 /v LogFailures /t REG_DWORD /d 1 /f\nreg add \u0022HKLM\\Software\\Microsoft\\Fusion\u0022 /v LogResourceBinds /t REG_DWORD /d 1 /f\nreg add \u0022HKLM\\Software\\Microsoft\\Fusion\u0022 /v LogPath /t REG_SZ /d C:\\FusionLog\\\n\nif not exist \u0022C:\\FusionLog\\\u0022 mkdir C:\\FusionLog\n\n    ","\nIf you already have logging enabled and you still get this error on Windows 7 64 bit, try this in IIS 7.5:\n\n\nCreate a new application pool\nGo to the Advanced Settings of this application pool\nSet the Enable 32-Bit Application to True\nPoint your web application to use this new pool\n\n    ","\nJust in case you\u0027re wondering about the location of FusionLog.exe -\nYou know you have it, but you cannot find it? I was looking for FUSLOVW in last few years over and over again. After move to .NET 4.5 number of version of FUSION LOG has exploded. \nHer are places where it can be found on your disk, depending on software which you have installed:\n\nC:\\Program Files (x86)\\Microsoft SDKs\\Windows\\v8.0A\\bin\\NETFX 4.0 Tools\\x64 \n\nC:\\Program Files (x86)\\Microsoft SDKs\\Windows\\v7.0A\\Bin\\x64 \n\nC:\\Program Files (x86)\\Microsoft SDKs\\Windows\\v8.1A\\bin\\NETFX 4.5.1 Tools\\x64 \n\nC:\\Program Files (x86)\\Microsoft SDKs\\Windows\\v8.0A\\bin\\NETFX 4.0 Tools \n\nC:\\Program Files (x86)\\Microsoft SDKs\\Windows\\v8.1A\\bin\\NETFX 4.5.1 Tools \n\nC:\\Program Files (x86)\\Microsoft SDKs\\Windows\\v7.0A\\Bin\n    ","\nIn my case helped type disk name in lower case\n\nWrong - C:\\someFolder\n\nCorrect - c:\\someFolder\n    ","\n                \n                Gary\u0027s solutions worked for me although I also had to follow by resetting IIS. Note I configured this in a clean environment where I didn\u0027t want to install SDKs and the like.\n                \n\u2013\u00A0Michhes\n                Jul 30 \u002710 at 2:21\n            ","\n                \n                Been reported by some that registry change does not take right away.  Have you tried turning Fusion logging on then rebooting?\n                \n\u2013\u00A0Gary Kindel\n                Dec 6 \u002710 at 20:18\n            ","\n                \n                You need to restart whatever program it is you\u0027re running for it to read those registry settings\n                \n\u2013\u00A0Orion Edwards\n                Mar 28 \u002711 at 22:29\n            ","\n                \n                The Fusion Log Viewer does all that for you. Go to Start -\u003E Programs -\u003E Visual Studio xxxx \u003E Visual Studio Tools \u003E Visual Studio Command Prompt (run as admin) and type \u0022fuslogvw\u0022. In Settings you adjust the logging.\n                \n\u2013\u00A0r3mark\n                Jun 4 \u002713 at 3:09\n            ","\n                \n                To turn on/off logging handy, I\u0027ve created .reg files, which are based on Gary Kindel\u0027s answer: enabling and disabling.\n                \n\u2013\u00A0Igor Kustov\n                Nov 19 \u002713 at 7:16\n            ","\n                \n                Note that in cases where you are hosting the runtime yourself from a native application you will be required to use a custom log path for some reason otherwise you won\u0027t get anything logged.\n                \n\u2013\u00A0jpierson\n                Oct 4 \u002712 at 3:34\n            ","\n                \n                At least in my situation, I didn\u0027t actually have to set the custom log paths. All I had to do was turn logging on, e.g., \u0022Log all binds to disk\u0022 on the settings dialog.\n                \n\u2013\u00A0Josh\n                Jul 31 \u002714 at 20:11\n            ","\n                \n                Run as Administrator was required in my case, otherwise all options were disabled.\n                \n\u2013\u00A0vezenkov\n                Aug 12 \u002716 at 12:32\n            ","\n                \n                Note: create the folder as Admin!\n                \n\u2013\u00A0Tabrock\n                May 10 \u002717 at 21:07\n            ","\n                \n                Make sure you are running fuslogvw not only as admin but also from the correct Windows SDK path the Visual Studio project throwing the exception is using. Check its csproj and search for SDK within (my sdk node is named TargetFrameworkSDKToolsDirectory). Using a non matching fuslogvw version seems to not catch the exceptions (which makes sense...)\n                \n\u2013\u00A0Veverke\n                Jun 12 \u002717 at 14:28\n                        \n                            \n                        \n            ","\n                \n                Those buttons are disabled for me - why?\n                \n\u2013\u00A0Tim Lovell-Smith\n                Aug 24 \u002710 at 22:11\n            ","\n                \n                @Tim, not seen that before - could it be to do with Admin privileges? It is HKEY_LOCAL_MACHINE that is being modified after all.\n                \n\u2013\u00A0Samuel Jack\n                Sep 24 \u002710 at 15:35\n            ","\n                \n                \u0022Settings, Log bind failures\u0022 was enough to find my problem.\n                \n\u2013\u00A0pauloya\n                Aug 16 \u002711 at 12:00\n                        \n                            \n                        \n            ","\n                \n                Make sure the folder allows write access. UAC and c:\\logs do not play nice with the fusion log\n                \n\u2013\u00A0Edward Wilde\n                Feb 20 \u002713 at 9:27\n            ","\n                \n                Just as a note, if the buttons are disabled, re-run fusion log viewer with admin privileges.\n                \n\u2013\u00A0Bruno Lopes\n                Mar 7 \u002713 at 19:33\n            ","\n                \n                Not that the entry probably won\u0027t exist - you\u0027ll have to create it. At least, I did when I was about to answer this question just before the crash this morning :)\n                \n\u2013\u00A0Jon Skeet\n                Nov 1 \u002708 at 15:54\n            ","\n                \n                What does the ! mean? Key or value? What about 64 bits systems?\n                \n\u2013\u00A0Bruno Martinez\n                Jul 14 \u002709 at 15:21\n            ","\n                \n                actually, this does work...you just need to run iisreset afterwords to get it to work.\n                \n\u2013\u00A0Nick DeMayo\n                Jun 22 \u002710 at 13:02\n            ","\n                \n                @Norman: Because this particular setting is used to make the Asp.Net errors show assembly binding error messages in the error pages, not to save the logs to file.  @OP: \u002B1.  Edited to include a .reg file.  The ! format is one I had never seen, except in the error message that sent me to this page looking for answers.\n                \n\u2013\u00A0Brian\n                Feb 8 \u002711 at 21:53\n                        \n                            \n                        \n            ","\n                \n                You don\u0027t need to reset IIS \u2013 just the relevant application pool. Or at least that was all I needed to do.\n                \n\u2013\u00A0Kenny Evitt\n                Jan 23 \u002715 at 16:54\n            ","\n                \n                Thanks! I\u0027ve allowed myself to put your commands into this gist. And I added creation of the c:\\FusionLog dir so that people don\u0027t forget that ;-)\n                \n\u2013\u00A0Oliver\n                Oct 30 \u002715 at 21:44\n                        \n                            \n                        \n            ","\n                \n                Command line rules! I could quickly replay this using the best invented so far code reusability technology called \u0022cut and paste\u0022. Thanks.\n                \n\u2013\u00A0Remigijus Pankevi\u010Dius\n                Jan 17 \u002719 at 9:32\n            ","\n                \n                This answer is way more useful, I put it into my scripts last time. Now few months later, I came back here and saw the thread again. Remind me of how I use it last time.\n                \n\u2013\u00A0cwhsu\n                Jul 12 at 9:14\n            ","\n                \n                ps MAKE SURE you disable it after running or this folder could get quite large\n                \n\u2013\u00A0Adam Tuliper - MSFT\n                Sep 19 \u002712 at 0:32\n            ","\n                \n                this is why I use ETW, to only log data if I really need them, not all the time in an ugly large log file.\n                \n\u2013\u00A0magicandre1981\n                Apr 3 \u002715 at 6:58\n            ","\n                \n                Dear sir, you are a god!\n                \n\u2013\u00A0Sylvain Girard\n                Jun 3 \u002719 at 10:14\n            ","\n                \n                @YuriBondarchuk this activates it on demand and you have more data in the ETL (other processes, fileversion data) so that you can give the files t other users and they can get MUCH more information compared to the normal fusion log\n                \n\u2013\u00A0magicandre1981\n                Sep 17 \u002715 at 4:04\n            ","\n                \n                man, you save my day, I took about 8 hour to resolved the issue. many thanks. :)\n                \n\u2013\u00A0Dika Arta Karunia\n                Apr 16 at 3:03\n            "]},{"Id":"cbf225fb-5e32-4a45-a1df-e986926fb229","QuestionId":25004226,"Description":"MSI vs nuget packages: which are is better for continuous delivery?","Votes":18,"Views":21181,"Tags":[".net","wix","nuget","windows-installer","continuous-deployment"],"Discussions":["\n\nAd-Hoc: How do I avoid common design flaws in my WiX / MSI deployment solution?\n\na very messy and less-than-ideal ad-hoc summary of common problems found in MSI files. Not great. Better than nothing? The stuff that is not in the books (too messy).\n\n\n\nImportant Topic: How do I avoid distributing sensitive information in my MSI by accident?\n\n\nWiX \u0026 MSI:\n\nMSI is the accepted corporate application standard. It has some major corporate benefits (and the short, concise version) compared to legacy deployment\ntechniques. WiX is the new open source way to create MSI files.\n\nWix Toolset Download (1) Main WiX setup, 2) Votive - Visual Studio integration setup\nWiX Documentation\n\nAfter WiX  installation locate WiX.chm and msi.chm help files in installation folder \u0022%ProgramFiles(x86)%\\WiX Toolset v3.11\\doc\u0022 for quick access to documentation.\n\n\nOnline: WiX Reference Manual v3, Official WiX Tutorial.\nGithub, Bug Tracker, Mailing List, FireGiant WiX KDB (FireGiant is WiX\u0027s commercial branch).\nTo get your head around Wix, you might want to read a quick, unofficial summary of the history behind it.\nMSBuild - using Visual Studio, Votive and MSBuild\nHarvesting (1): WiX has its own tool for generating WiX markup based on an input folder.\n\nThe tool is called heat.exe. WiX\u0027s commercial branch FireGiant has a tool called HeatWave with more features.\nLargely untested by me is the tool WixHeatATLHarvesterExtension: https://github.com/nirbar/WixHeatATLHarvesterExtension (a WiX Heat extension to harvest registry information from x64 modules)\n\n\n\n\nOther Tools:\n\n\nThen you might want to check other ways to deliver an installer, besides Wix by reading:\n\nWhat installation product to use? InstallShield, WiX, Wise, Advanced Installer, etc\nOne more quick-list of tools\n\n\nMajor Tools: Advanced Installer, - InstallShield, - PACE Suite\n\n\nHello World \u0026 Hello WiX:\n\n\nFinally view a complete example of how a Wix source file and its components look like on Codeproject. This is the \u0022Hello\nWorld\u0022 of Wix.\n\u0022Hello WiX - step-by-step in Visual Studio\u0022.\n\n\n\nThis needs WiX and Votive (WiX Toolset Visual Studio Extension - WiX\u0027s Visual Studio integration so you get Intellisense). See download page.\nInline comments in bottom markup is probably all you need to get going.\nSmall sample of WiX preprocessor variables / defines.\nHello WiX C# Custom Actions\nHow to add C# custom actions to an existing WiX project.\n\nVideo Samples:\n\n\nHow To Create Windows Installer MSI - .Net Core WiX\n\n\nMore Sample Code:\n\nWiX Quick Start: Here are some of the best sample code links that I have found:\n\nHelge Klein\u0027s real-world WiX sample - do check this out (Wayback - Archived Version).\nRainer Stropek\u0027s WiX Samples on Github - can be very helpful.\nFrom MSI to WiX by Alex Schevchuk - aging content, but excellent.\nChris Painter\u0027s IsWiX Tutorials - excellent WiX samples.\n\nAnd finally:\n\nPhil Wilson\u0027s Github repository for MSI samples: https://github.com/Apress/def-guide-to-win-installer. The best content, but aging. General MSI samples, not WiX as such.\nMy experimental site: installdude.com.\nHow-to-create-a-Windows-Service-MSI-Installer-Using-WiX.\nWiX Extension: https://github.com/nirbar/PanelSwWixExtension (Dism.exe, etc...)\n\n\nDebugging: Always check all event logs, application logs and MSI logs - if available. Just to mention it. And use any debugging tool available and google the exact error message before doing anything else.\nAnd check for any obviously missing runtimes. For example: .Net, .Net Core, Java, Silverlight, Direct X, VC\u002B\u002B Runtime, MS-XML (legacy), etc....\n\nCustom Action Debugging:\n\nCommon Causes for Custom Action runtime failures\nDebugging Custom Actions\n\nFor native code / C\u002B\u002B just attach debugger to msiexec.exe\nAdvanced Installer\u0027s Debug C# Custom Actions video tutorial\n\n\n\nMSI logging:\n\nOverview and summary (how to log, interpreting log file, etc...)\nInstallsite: MSI log \u0022how-to\u0022\nMore MSI logging information\n\nEvent Viewer:\n\nHold down Windows Key, tap R, type eventvwr.msc and press Enter.\nGo to Windows Logs =\u003E Applications. Look for MsiInstaller events.\nCheck the other logs too (Security, System, Configuration).\n\nGeneral Debugging:\n\n\u0022Debugging Light\u0022\n\nApplication Launch Problem: Debugging Ideas (torpedoes full spread)\n\nProcMon.exe: The tool of the trade. The one-size-fits-all\ntool. The bee\u0027s knees, the topper-most, the quantum leap, the cat\u0027s\npajamas. It can be a challenge to use it effectively, but it is the\nbest general-purpose debugging tool that is free (comment link for safekeeping).\n\nQuick, Rudimentary Sample\nHanselman\u0027s longer video sample (from about 3:50 onwards)\n\n\n\nDebugging Tools:\n\nTools to debug dependency issues - ProcMon.exe, VS, Dependency Walker, etc...\n\nCOM dependency errors\nFuslogvw.exe (Assembly Binding Log Viewer)\n\n\nEssential service debugging tools:\n\nEvent Viewer, Task Manager, Services.msc\nProcess Explorer, NET command, SC.exe\nWindows Services Frequently Asked Questions (FAQ)\n\n\n\nError Code: Looking up error codes and exception messages.\n\n\u0022The Magic Number Database\u0022 - online lookup.\nChecking Error Codes - several tools and approaches.\n\n\n\n\nA Deployment Mnemonic: A general mnemonic to think about deployment problems: What is locking (in use, malware), what is blocking (permissions, anti-virus, security tools), what is corrupt (disk, malware, configs, encryption) what are unexpected system states (disk space, time \u0026 date settings, language, licensing, windows patch state, path too long, PendingFileRenames, etc...), what are incompatible products (things that can\u0027t co-exist), what is unreachable or misconfigured (what points to erroneous locations and resources: network server names, disk paths, URLs, databases, services, UAT environments, PROD environments, etc...) and last but not least: what is missing (runtime, resource image, settings file, etc...)?\n\n\n\nNOTE: Always first (step 8 below): Google exact error message.\nExpress Failure to Launch Debugging: 1) Reboot, 2) disable anti-virus, 3) launch as admin and check, 4) Check dependencies and runtimes (Java, VC\u002B\u002B Runtime, .NET, etc...). Then, if need be: 5) verbose log, 6) event logs, 7) Try on a virtual if you still can\u0027t get it working? (many virtuals lack essential runtimes - check) Or secondary computer? Also 8) google exact error messages and check user comments, 9) Run update for the application in question? (new installer could eliminate the error situation). 10) Run a full check for malware too? It is all over the place these days. 11) Some software (often server software) may need configuration settings sorted out (misconfiguration). Desktop applications may need license to launch at all.\n\n\n\nLocks?: With permission and locks you can try to run the tool with elevated rights? You could have disk corruption - disk errors? Faulty ACL permissions? (possible). Your anti-virus suite has locked some file that MSI is trying to put back in place. You can try to disable it temporarily to see. Note that the file can have been quarantined as well (moved somewhere else).\n\n\nGeneric Tricks? - Consumer issues, failure to install setup.exe:\n\nA simplified, generic check-list for deployment issues (alternative to list below).\nVisual Studio Problems: A check list for Visual Studio installation problems - and an updated version\n.NET Repair: .Net Framework Repair Tool\nBroken Uninstalls: MS FixIt: Remove packages that won\u0027t uninstall\nLog: Microsoft Visual Studio and .NET Framework Log Collection Tool\nSmartscreen issues: Digital signatures, false positives, tagged downloaded file\n\nFor setups that won\u0027t install properly. A few generic tricks below - in addition to checking event logs and installation- and application logs and googling any error messages (always do that too - perhaps first - but maybe just do a reboot first - before facing all the complexity):\n\n\nReboot: Reboot first after a failed install to see if that solves locks and pending renames.\nOther Computer: Try installing on another physical machine instead?\n\nImportant smoke test of the installation media!\n\n\nVirtual: Try installing on a Virtual machine instead?\n\nOften outdated, check runtimes, check Windows Update.\n\n\nRuntimes: Ensure required runtimes of various types are on there in the required version:\n\nCommon: VCRedist, .NET, .NET Core, Java, Direct X, etc...\nSpecific: Python, DBMS systems (PostgreSQL, MSSQL, etc...)\nWindows Components: IIS, MSMQ - Message Queue, Powershell, etc...\n\n\nSecondary Account: Try installing on main box using a different admin account. This can sort out problems caused by errors in the user profile (not at all that uncommon).\nLocal Installation Files: Copy installation files locally if they are on the network when invoked (to eliminate network error sources).\nLocalization Issues: It is not uncommon for setups delivered in other languages to contain brand new bugs not seen in the original installer (usually English).\n\n\u0022Murphy Field\u0022: \u0022We have managed to add additional bugs to the internationalized setups beyond the English version\u0022. Oh the humanity say! Bummer.\nTry to download an English setup version and test install?\nTry the localized setup on an English machine or virtual?\nAlso investigate running with another user account with different language settings.\n\n\n\n\nSetup.exe - again - the common \u0022blockers\u0022:\n\n\nCorrupt Setup File: Corrupt setup file. Re-download to be sure? Get this done as one of the first steps before wasting a whole day? Correct platform bitness? Right CPU-architecture?\nMalware: Malware can cause just about \u0022anything\u0022 in terms of problems.\nSecurity Software: Anti-virus, firewalls, scanners, etc... can interfere with installation. Disable temporarily if possible when required.\nDisk Space: Ensure enough disk space!\n\nWays to clear out disk space. Long version.\nJust run cleanmgr.exe first.\n\n\nProxy: If there is a network requirement, is there a proxy server that blocks things?\nPolicies: There can be policies in effect on managed networks to block certain features making the install impossible. Try on virtual? Usually less restricted.\nDisk Errors: Scan disk to see if it is OK. If not, fix it first. Modern NVMe disks can lose a lot of data with power outages for desktops without UPS.\nDisk Security ACL: Custom security ACL (NTFS access configuration) configuration that leads to runtime errors for Windows components and software alike. Never use custom ACL for Windows directories unless you know what you are doing. Errors are CERTAIN.\n\n\nSome Links:\n\nThe setup process in windows fails access denied when trying to create \u0022uc.micro\u0022 folder\nSQL Server 2017 installation is stuck\nVisual Studio installer fails on AspNetDiagnosticPack.msi\nThe installer has encountered an unexpected error installing this package - .Error code 2896\n\n\nEasy Access:\n\nXML Files: Installing XML files\nFalse Positives\nInstaller Class Methods - More Installer Class Methods\nWould this method of installing COM\u002B work?\nWindows Installer Best Practice\nReboot Manager and Logging\nChange my component GUID in wix?\nSimplify WiX markup - you can leave out a lot of source attributes from your Wix xml file\nRunning Legacy Applications (virtuals, compatibility mode, repackaging, etc...)\nWhat are ICE Rules\nPreprocessor versus Localization Variables, and the issue of include files\nWiX Preprocessor\n\nRepackaging, Application Launch Debugging:\n\nProcmon.exe, capture, repackaging, service installation and installer methods\nSection on repackaging here\nHow to run an installation in /silent mode with adjusted settings\nMore on distribution of software\nWix - How to run/install application without UI (embedding setup.exe, silent running setup.exe, application repackaging, bootstrappers / chainers)\n\nUpgrades:\n\nCauses of major upgrade failures\nSome minor upgrade technical restrictions\n\nSome Other WiX Links:\n\nWiX 3 dependency on .NET 3.5\nSimplify your WiX markup.\nRegistering COM EXEs with WiX.\nCan\u0027t uninstall, it fails.\nDynamic Link Libraries.\nMicrosoft Debugging Environments.\nHow do I create a Prerequisite Package for Windows Installer?\nHow do I embed CustomAction.CA.dll in to MSI?\nInstalled program is removed automatically everytime when server restarts from windows server 2012 R2\n\n\nProcedures:\n\nOpen Temp folder:  Windows Key =\u003E Tap R =\u003E Type: %TEMP% =\u003E Press: Enter.\nARP: Go start \u2192 run \u2192 appwiz.cpl \u2192 ENTER in order to open the add/remove programs applet (or click add/ remove programs in the control panel).\nSettings GUI Win8/10: Windows Key \u002B Tap I =\u003E Apps \u0026 Features. Select entry and uninstall.\nQuick start of Powershell: hold Windows key, tap R, type in \u0022powershell\u0022 and press Enter.\nRestart Graphics Driver: Windows key \u002B Ctrl \u002B Shift and tap B.\n\n\nSome good starting links to learn Wix:\n\nMy Wix quick start suggestions\nGood resources for learning how to create MSI installers from WiX\nHow to implement WiX installer upgrade? (major upgrade)\nWhat are limitations of WiX and WiX Toolset?\n\nExtract Files from Setup.exe WiX Bundle or from an MSI file itself:\n\nExtract MSI from EXE - including how to extract files embedded in a WiX Burn bundle executable.\nHow can I compare the content of two (or more) MSI files? - Including how to extract files from an MSI using WiX\u0027s dark.exe tool\n\nAs I wrote in my suggested \u0022Wix quick start\u0022 post above: Wix is hands-on. Just focus on simple, but complete real-world samples like the one from Codeproject - reading the documentation alone is likely to be merely confusing.\nFocus on splitting your application into components and set up a major upgrade. Use one file per component as a rule of thumb, and read this answer for a better understanding of component creation: Change my component GUID in wix?\nA major upgrade is the most commonly used upgrade mechanism for deployed software (the other common upgrade type is minor upgrade). It is obviously crucial that you can upgrade what you have deployed already. Get upgrade scenarios working before you deploy your first software version so you have confidence in your deployment solution.\nOnce you got your components set up and your upgrade solution is working, the rest of the pieces fall into place as you work your way through your application\u0027s deployment requirements and check for samples on the Wix tutorial site: https://www.firegiant.com/wix/tutorial/.\nFor those writing Wix code directly (without a GUI editor), I suggest you check this answer for a way to keep your source files terse: Syntax for guids in WIX?\nFurther read:\n\nWindows Installer and the creation of WiX\nInstaller capabilities, WIX vs InstallShield Express\nInstallshield or Wix\nWiX Bug Tracker\n\n    ","\nIm going down this path now, where i have inherited software using MSI/WiX for the installer, but looking at converting our process to continious delivery and pushing out updates that are installed without client interaction. I think its incorrect to pigeon hole nuget as a SDK tool, in its essence it is a tool to deploy versioned sets of files. Furthermore, if the software you are deploying replies heavily on nuget already, and you are already packaging your assemblies into nuget packages for internal use, then why add extra technology into the mix for the sake of it? package up a nuget.exe in your msi, call update on it periodically, done.\n\nI know WiX supports creating patches, but it seems like its an afterthought. Additionally, what happens if your patch fails installation? Installing patches out of order? Your main installer requires UAC permissions, while your patch does not?\n\ni think times are changing, and MSI represents an older way of thinking about things. Chocolatey is a good example, but its still at a this hybrid stage, mixing both technologies. \n\nMSI is more like pull - u get a package, then install it.\nNuget is more like a push stratergy - u get the name of a package, install it, then periodically u can call update, and a new version is downloaded and installed.\n    ","\n                \n                Great list. Do you have any sample for custom actions which takes in parameters and update configuration files in an application?\n                \n\u2013\u00A0kudlatiger\n                Aug 6 \u002719 at 14:20\n            ","\n                \n                Never tried it, but have a look here and let us know if it is a good entry for the list above.\n                \n\u2013\u00A0Stein \u00C5smul\n                Aug 6 \u002719 at 15:38\n            ","\n                \n                Agreed, I would stay away from patch packages (.msp).  An application I wrote years ago used .msp as an update mechanism and it routinely corrupted the installation.  For fun I looked through my registry for applications that used .msp patching (out of hundreds of applications installed) and found exactly 1... my own.\n                \n\u2013\u00A0Brandon Bonds\n                Jun 10 \u002716 at 1:32\n            "]},{"Id":"ee85f83f-72d2-4a15-a1e8-f424171fcd72","QuestionId":9,"Description":"In C#, how do I calculate someone\u0027s age based on a DateTime type birthday?","Votes":1937,"Views":641267,"Tags":["c#",".net","datetime"],"Discussions":["\nAn easy to understand and simple solution.\n// Save today\u0027s date.\nvar today = DateTime.Today;\n\n// Calculate the age.\nvar age = today.Year - birthdate.Year;\n\n// Go back to the year in which the person was born in case of a leap year\nif (birthdate.Date \u003E today.AddYears(-age)) age--;\n\nHowever, this assumes you are looking for the western idea of the age and not using East Asian reckoning.\n    ","\nThis is a strange way to do it, but if you format the date to yyyymmdd and subtract the date of birth from the current date then drop the last 4 digits you\u0027ve got the age :)\n\nI don\u0027t know C#, but I believe this will work in any language.\n\n20080814 - 19800703 = 280111 \n\n\nDrop the last 4 digits = 28.\n\nC# Code:\n\nint now = int.Parse(DateTime.Now.ToString(\u0022yyyyMMdd\u0022));\nint dob = int.Parse(dateOfBirth.ToString(\u0022yyyyMMdd\u0022));\nint age = (now - dob) / 10000;\n\n\nOr alternatively without all the type conversion in the form of an extension method. Error checking omitted:\n\npublic static Int32 GetAge(this DateTime dateOfBirth)\n{\n    var today = DateTime.Today;\n\n    var a = (today.Year * 100 \u002B today.Month) * 100 \u002B today.Day;\n    var b = (dateOfBirth.Year * 100 \u002B dateOfBirth.Month) * 100 \u002B dateOfBirth.Day;\n\n    return (a - b) / 10000;\n}\n\n    ","\nHere is a test snippet:\n\nDateTime bDay = new DateTime(2000, 2, 29);\nDateTime now = new DateTime(2009, 2, 28);\nMessageBox.Show(string.Format(\u0022Test {0} {1} {2}\u0022,\n                CalculateAgeWrong1(bDay, now),      // outputs 9\n                CalculateAgeWrong2(bDay, now),      // outputs 9\n                CalculateAgeCorrect(bDay, now),     // outputs 8\n                CalculateAgeCorrect2(bDay, now)));  // outputs 8\n\n\nHere you have the methods:\n\npublic int CalculateAgeWrong1(DateTime birthDate, DateTime now)\n{\n    return new DateTime(now.Subtract(birthDate).Ticks).Year - 1;\n}\n\npublic int CalculateAgeWrong2(DateTime birthDate, DateTime now)\n{\n    int age = now.Year - birthDate.Year;\n\n    if (now \u003C birthDate.AddYears(age))\n        age--;\n\n    return age;\n}\n\npublic int CalculateAgeCorrect(DateTime birthDate, DateTime now)\n{\n    int age = now.Year - birthDate.Year;\n\n    if (now.Month \u003C birthDate.Month || (now.Month == birthDate.Month \u0026\u0026 now.Day \u003C birthDate.Day))\n        age--;\n\n    return age;\n}\n\npublic int CalculateAgeCorrect2(DateTime birthDate, DateTime now)\n{\n    int age = now.Year - birthDate.Year;\n\n    // For leap years we need this\n    if (birthDate \u003E now.AddYears(-age)) \n        age--;\n    // Don\u0027t use:\n    // if (birthDate.AddYears(age) \u003E now) \n    //     age--;\n\n    return age;\n}\n\n    ","\nThe simple answer to this is to apply AddYears as shown below because this is the only native method to add years to the 29th of Feb. of leap years and obtain the correct result of the 28th of Feb. for common years. \n\nSome feel that 1th of Mar. is the birthday of leaplings but neither .Net nor any official rule supports this, nor does common logic explain why some born in February should have 75% of their birthdays in another month.\n\nFurther, an Age method lends itself to be added as an extension to DateTime. By this you can obtain the age in the simplest possible way:\n\n\nList item\n\n\nint age = birthDate.Age();\n\npublic static class DateTimeExtensions\n{\n    /// \u003Csummary\u003E\n    /// Calculates the age in years of the current System.DateTime object today.\n    /// \u003C/summary\u003E\n    /// \u003Cparam name=\u0022birthDate\u0022\u003EThe date of birth\u003C/param\u003E\n    /// \u003Creturns\u003EAge in years today. 0 is returned for a future date of birth.\u003C/returns\u003E\n    public static int Age(this DateTime birthDate)\n    {\n        return Age(birthDate, DateTime.Today);\n    }\n\n    /// \u003Csummary\u003E\n    /// Calculates the age in years of the current System.DateTime object on a later date.\n    /// \u003C/summary\u003E\n    /// \u003Cparam name=\u0022birthDate\u0022\u003EThe date of birth\u003C/param\u003E\n    /// \u003Cparam name=\u0022laterDate\u0022\u003EThe date on which to calculate the age.\u003C/param\u003E\n    /// \u003Creturns\u003EAge in years on a later day. 0 is returned as minimum.\u003C/returns\u003E\n    public static int Age(this DateTime birthDate, DateTime laterDate)\n    {\n        int age;\n        age = laterDate.Year - birthDate.Year;\n\n        if (age \u003E 0)\n        {\n            age -= Convert.ToInt32(laterDate.Date \u003C birthDate.Date.AddYears(age));\n        }\n        else\n        {\n            age = 0;\n        }\n\n        return age;\n    }\n}\n\n\nNow, run this test:\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        RunTest();\n    }\n\n    private static void RunTest()\n    {\n        DateTime birthDate = new DateTime(2000, 2, 28);\n        DateTime laterDate = new DateTime(2011, 2, 27);\n        string iso = \u0022yyyy-MM-dd\u0022;\n\n        for (int i = 0; i \u003C 3; i\u002B\u002B)\n        {\n            for (int j = 0; j \u003C 3; j\u002B\u002B)\n            {\n                Console.WriteLine(\u0022Birth date: \u0022 \u002B birthDate.AddDays(i).ToString(iso) \u002B \u0022  Later date: \u0022 \u002B laterDate.AddDays(j).ToString(iso) \u002B \u0022  Age: \u0022 \u002B birthDate.AddDays(i).Age(laterDate.AddDays(j)).ToString());\n            }\n        }\n\n        Console.ReadKey();\n    }\n}\n\n\nThe critical date example is this:\n\nBirth date: 2000-02-29  Later date: 2011-02-28  Age: 11\n\nOutput:\n\n{\n    Birth date: 2000-02-28  Later date: 2011-02-27  Age: 10\n    Birth date: 2000-02-28  Later date: 2011-02-28  Age: 11\n    Birth date: 2000-02-28  Later date: 2011-03-01  Age: 11\n    Birth date: 2000-02-29  Later date: 2011-02-27  Age: 10\n    Birth date: 2000-02-29  Later date: 2011-02-28  Age: 11\n    Birth date: 2000-02-29  Later date: 2011-03-01  Age: 11\n    Birth date: 2000-03-01  Later date: 2011-02-27  Age: 10\n    Birth date: 2000-03-01  Later date: 2011-02-28  Age: 10\n    Birth date: 2000-03-01  Later date: 2011-03-01  Age: 11\n}\n\n\nAnd for the later date 2012-02-28:\n\n{\n    Birth date: 2000-02-28  Later date: 2012-02-28  Age: 12\n    Birth date: 2000-02-28  Later date: 2012-02-29  Age: 12\n    Birth date: 2000-02-28  Later date: 2012-03-01  Age: 12\n    Birth date: 2000-02-29  Later date: 2012-02-28  Age: 11\n    Birth date: 2000-02-29  Later date: 2012-02-29  Age: 12\n    Birth date: 2000-02-29  Later date: 2012-03-01  Age: 12\n    Birth date: 2000-03-01  Later date: 2012-02-28  Age: 11\n    Birth date: 2000-03-01  Later date: 2012-02-29  Age: 11\n    Birth date: 2000-03-01  Later date: 2012-03-01  Age: 12\n}\n\n    ","\nMy suggestion\n\nint age = (int) ((DateTime.Now - bday).TotalDays/365.242199);\n\n\nThat seems to have the year changing on the right date. (I spot tested up to age 107.)\n    ","\nAnother function, not by me but found on the web and refined it a bit:\n\npublic static int GetAge(DateTime birthDate)\n{\n    DateTime n = DateTime.Now; // To avoid a race condition around midnight\n    int age = n.Year - birthDate.Year;\n\n    if (n.Month \u003C birthDate.Month || (n.Month == birthDate.Month \u0026\u0026 n.Day \u003C birthDate.Day))\n        age--;\n\n    return age;\n}\n\n\nJust two things that come into my mind: What about people from countries that do not use the Gregorian calendar? DateTime.Now is in the server-specific culture I think. I have absolutely zero knowledge about actually working with Asian calendars and I do not know if there is an easy way to convert dates between calendars, but just in case you\u0027re wondering about those Chinese guys from the year 4660 :-)\n    ","\n2 Main problems to solve are:\n\n1. Calculate Exact age - in years, months, days, etc.\n\n2. Calculate Generally perceived age - people usually do not care how old they exactly are, they just care when their birthday in the current year is.\n\n\n\nSolution for 1 is obvious:\n\nDateTime birth = DateTime.Parse(\u00221.1.2000\u0022);\nDateTime today = DateTime.Today;     //we usually don\u0027t care about birth time\nTimeSpan age = today - birth;        //.NET FCL should guarantee this as precise\ndouble ageInDays = age.TotalDays;    //total number of days ... also precise\ndouble daysInYear = 365.2425;        //statistical value for 400 years\ndouble ageInYears = ageInDays / daysInYear;  //can be shifted ... not so precise\n\n\n\n\nSolution for 2 is the one which is not so precise in determing total age, but is perceived as precise by people. People also usually use it, when they calculate their age \u0022manually\u0022:\n\nDateTime birth = DateTime.Parse(\u00221.1.2000\u0022);\nDateTime today = DateTime.Today;\nint age = today.Year - birth.Year;    //people perceive their age in years\n\nif (today.Month \u003C birth.Month ||\n   ((today.Month == birth.Month) \u0026\u0026 (today.Day \u003C birth.Day)))\n{\n  age--;  //birthday in current year not yet reached, we are 1 year younger ;)\n          //\u002B no birthday for 29.2. guys ... sorry, just wrong date for birth\n}\n\n\nNotes to 2.:\n\n\nThis is my preferred solution\nWe cannot use DateTime.DayOfYear or TimeSpans, as they shift number of days in leap years\nI have put there little more lines for readability\n\n\nJust one more note ... I would create 2 static overloaded methods for it, one for universal usage, second for usage-friendliness:\n\npublic static int GetAge(DateTime bithDay, DateTime today) \n{ \n  //chosen solution method body\n}\n\npublic static int GetAge(DateTime birthDay) \n{ \n  return GetAge(birthDay, DateTime.Now);\n}\n\n    ","\nHere\u0027s a one-liner:\n\nint age = new DateTime(DateTime.Now.Subtract(birthday).Ticks).Year-1;\n\n    ","\nThe best way that I know of because of leap years and everything is:\n\nDateTime birthDate = new DateTime(2000,3,1);\nint age = (int)Math.Floor((DateTime.Now - birthDate).TotalDays / 365.25D);\n\n    ","\nThis is the version we use here. It works, and it\u0027s fairly simple. It\u0027s the same idea as Jeff\u0027s but I think it\u0027s a little clearer because it separates out the logic for subtracting one, so it\u0027s a little easier to understand.\n\npublic static int GetAge(this DateTime dateOfBirth, DateTime dateAsAt)\n{\n    return dateAsAt.Year - dateOfBirth.Year - (dateOfBirth.DayOfYear \u003C dateAsAt.DayOfYear ? 0 : 1);\n}\n\n\nYou could expand the ternary operator to make it even clearer, if you think that sort of thing is unclear.\n\nObviously this is done as an extension method on DateTime, but clearly you can grab that one line of code that does the work and put it anywhere. Here we have another overload of the Extension method that passes in DateTime.Now, just for completeness.\n    ","\nI use this:\n\npublic static class DateTimeExtensions\n{\n    public static int Age(this DateTime birthDate)\n    {\n        return Age(birthDate, DateTime.Now);\n    }\n\n    public static int Age(this DateTime birthDate, DateTime offsetDate)\n    {\n        int result=0;\n        result = offsetDate.Year - birthDate.Year;\n\n        if (offsetDate.DayOfYear \u003C birthDate.DayOfYear)\n        {\n              result--;\n        }\n\n        return result;\n    }\n}\n\n    ","\nThis gives \u0022more detail\u0022 to this question. Maybe this is what you\u0027re looking for\n\nDateTime birth = new DateTime(1974, 8, 29);\nDateTime today = DateTime.Now;\nTimeSpan span = today - birth;\nDateTime age = DateTime.MinValue \u002B span;\n\n// Make adjustment due to MinValue equalling 1/1/1\nint years = age.Year - 1;\nint months = age.Month - 1;\nint days = age.Day - 1;\n\n// Print out not only how many years old they are but give months and days as well\nConsole.Write(\u0022{0} years, {1} months, {2} days\u0022, years, months, days);\n\n    ","\nI have created a SQL Server User Defined Function to calculate someone\u0027s age, given their birthdate. This is useful when you need it as part of a query:\n\nusing System;\nusing System.Data;\nusing System.Data.Sql;\nusing System.Data.SqlClient;\nusing System.Data.SqlTypes;\nusing Microsoft.SqlServer.Server;\n\npublic partial class UserDefinedFunctions\n{\n    [SqlFunction(DataAccess = DataAccessKind.Read)]\n    public static SqlInt32 CalculateAge(string strBirthDate)\n    {\n        DateTime dtBirthDate = new DateTime();\n        dtBirthDate = Convert.ToDateTime(strBirthDate);\n        DateTime dtToday = DateTime.Now;\n\n        // get the difference in years\n        int years = dtToday.Year - dtBirthDate.Year;\n\n        // subtract another year if we\u0027re before the\n        // birth day in the current year\n        if (dtToday.Month \u003C dtBirthDate.Month || (dtToday.Month == dtBirthDate.Month \u0026\u0026 dtToday.Day \u003C dtBirthDate.Day))\n            years=years-1;\n\n        int intCustomerAge = years;\n        return intCustomerAge;\n    }\n};\n\n    ","\nHere\u0027s yet another answer:\npublic static int AgeInYears(DateTime birthday, DateTime today)\n{\n    return ((today.Year - birthday.Year) * 372 \u002B (today.Month - birthday.Month) * 31 \u002B (today.Day - birthday.Day)) / 372;\n}\n\nThis has been extensively unit-tested. It does look a bit \u0022magic\u0022. The number 372 is the number of days there would be in a year if every month had 31 days.\nThe explanation of why it works (lifted from here) is:\n\nLet\u0027s set Yn = DateTime.Now.Year, Yb = birthday.Year, Mn = DateTime.Now.Month, Mb = birthday.Month, Dn = DateTime.Now.Day, Db = birthday.Day\nage = Yn - Yb \u002B (31*(Mn - Mb) \u002B (Dn - Db)) / 372\nWe know that what we need is either Yn-Yb if the date has already been reached, Yn-Yb-1 if it has not.\na) If Mn\u003CMb, we have -341 \u003C= 31*(Mn-Mb) \u003C= -31 and -30 \u003C= Dn-Db \u003C= 30\n-371 \u003C= 31*(Mn - Mb) \u002B (Dn - Db) \u003C= -1\nWith integer division\n(31*(Mn - Mb) \u002B (Dn - Db)) / 372 = -1\nb) If Mn=Mb and Dn\u003CDb, we have 31*(Mn - Mb) = 0 and -30 \u003C= Dn-Db \u003C= -1\nWith integer division, again\n(31*(Mn - Mb) \u002B (Dn - Db)) / 372 = -1\nc) If Mn\u003EMb, we have 31 \u003C= 31*(Mn-Mb) \u003C= 341 and -30 \u003C= Dn-Db \u003C= 30\n1 \u003C= 31*(Mn - Mb) \u002B (Dn - Db) \u003C= 371\nWith integer division\n(31*(Mn - Mb) \u002B (Dn - Db)) / 372 = 0\nd) If Mn=Mb and Dn\u003EDb, we have 31*(Mn - Mb) = 0 and 1 \u003C= Dn-Db \u003C= 30\nWith integer division, again\n(31*(Mn - Mb) \u002B (Dn - Db)) / 372 = 0\ne) If Mn=Mb and Dn=Db, we have 31*(Mn - Mb) \u002B Dn-Db = 0\nand therefore (31*(Mn - Mb) \u002B (Dn - Db)) / 372 = 0\n\n    ","\nI\u0027ve spent some time working on this and came up with this to calculate someone\u0027s age in years, months and days. I\u0027ve tested against the Feb 29th problem and leap years and it seems to work, I\u0027d appreciate any feedback:\n\npublic void LoopAge(DateTime myDOB, DateTime FutureDate)\n{\n    int years = 0;\n    int months = 0;\n    int days = 0;\n\n    DateTime tmpMyDOB = new DateTime(myDOB.Year, myDOB.Month, 1);\n\n    DateTime tmpFutureDate = new DateTime(FutureDate.Year, FutureDate.Month, 1);\n\n    while (tmpMyDOB.AddYears(years).AddMonths(months) \u003C tmpFutureDate)\n    {\n        months\u002B\u002B;\n\n        if (months \u003E 12)\n        {\n            years\u002B\u002B;\n            months = months - 12;\n        }\n    }\n\n    if (FutureDate.Day \u003E= myDOB.Day)\n    {\n        days = days \u002B FutureDate.Day - myDOB.Day;\n    }\n    else\n    {\n        months--;\n\n        if (months \u003C 0)\n        {\n            years--;\n            months = months \u002B 12;\n        }\n\n        days \u002B=\n            DateTime.DaysInMonth(\n                FutureDate.AddMonths(-1).Year, FutureDate.AddMonths(-1).Month\n            ) \u002B FutureDate.Day - myDOB.Day;\n\n    }\n\n    //add an extra day if the dob is a leap day\n    if (DateTime.IsLeapYear(myDOB.Year) \u0026\u0026 myDOB.Month == 2 \u0026\u0026 myDOB.Day == 29)\n    {\n        //but only if the future date is less than 1st March\n        if (FutureDate \u003E= new DateTime(FutureDate.Year, 3, 1))\n            days\u002B\u002B;\n    }\n\n}\n\n    ","\nDo we need to consider people who is smaller than 1 year? as Chinese culture, we describe small babies\u0027 age as 2 months or 4 weeks. \n\nBelow is my implementation, it is not as simple as what I imagined, especially to deal with date like 2/28. \n\npublic static string HowOld(DateTime birthday, DateTime now)\n{\n    if (now \u003C birthday)\n        throw new ArgumentOutOfRangeException(\u0022birthday must be less than now.\u0022);\n\n    TimeSpan diff = now - birthday;\n    int diffDays = (int)diff.TotalDays;\n\n    if (diffDays \u003E 7)//year, month and week\n    {\n        int age = now.Year - birthday.Year;\n\n        if (birthday \u003E now.AddYears(-age))\n            age--;\n\n        if (age \u003E 0)\n        {\n            return age \u002B (age \u003E 1 ? \u0022 years\u0022 : \u0022 year\u0022);\n        }\n        else\n        {// month and week\n            DateTime d = birthday;\n            int diffMonth = 1;\n\n            while (d.AddMonths(diffMonth) \u003C= now)\n            {\n                diffMonth\u002B\u002B;\n            }\n\n            age = diffMonth-1;\n\n            if (age == 1 \u0026\u0026 d.Day \u003E now.Day)\n                age--;\n\n            if (age \u003E 0)\n            {\n                return age \u002B (age \u003E 1 ? \u0022 months\u0022 : \u0022 month\u0022);\n            }\n            else\n            {\n                age = diffDays / 7;\n                return age \u002B (age \u003E 1 ? \u0022 weeks\u0022 : \u0022 week\u0022);\n            }\n        }\n    }\n    else if (diffDays \u003E 0)\n    {\n        int age = diffDays;\n        return age \u002B (age \u003E 1 ? \u0022 days\u0022 : \u0022 day\u0022);\n    }\n    else\n    {\n        int age = diffDays;\n        return \u0022just born\u0022;\n    }\n}\n\n\nThis implementation has passed below test cases.\n\n[TestMethod]\npublic void TestAge()\n{\n    string age = HowOld(new DateTime(2011, 1, 1), new DateTime(2012, 11, 30));\n    Assert.AreEqual(\u00221 year\u0022, age);\n\n    age = HowOld(new DateTime(2011, 11, 30), new DateTime(2012, 11, 30));\n    Assert.AreEqual(\u00221 year\u0022, age);\n\n    age = HowOld(new DateTime(2001, 1, 1), new DateTime(2012, 11, 30));\n    Assert.AreEqual(\u002211 years\u0022, age);\n\n    age = HowOld(new DateTime(2012, 1, 1), new DateTime(2012, 11, 30));\n    Assert.AreEqual(\u002210 months\u0022, age);\n\n    age = HowOld(new DateTime(2011, 12, 1), new DateTime(2012, 11, 30));\n    Assert.AreEqual(\u002211 months\u0022, age);\n\n    age = HowOld(new DateTime(2012, 10, 1), new DateTime(2012, 11, 30));\n    Assert.AreEqual(\u00221 month\u0022, age);\n\n    age = HowOld(new DateTime(2008, 2, 28), new DateTime(2009, 2, 28));\n    Assert.AreEqual(\u00221 year\u0022, age);\n\n    age = HowOld(new DateTime(2008, 3, 28), new DateTime(2009, 2, 28));\n    Assert.AreEqual(\u002211 months\u0022, age);\n\n    age = HowOld(new DateTime(2008, 3, 28), new DateTime(2009, 3, 28));\n    Assert.AreEqual(\u00221 year\u0022, age);\n\n    age = HowOld(new DateTime(2009, 1, 28), new DateTime(2009, 2, 28));\n    Assert.AreEqual(\u00221 month\u0022, age);\n\n    age = HowOld(new DateTime(2009, 2, 1), new DateTime(2009, 3, 1));\n    Assert.AreEqual(\u00221 month\u0022, age);\n\n    // NOTE.\n    // new DateTime(2008, 1, 31).AddMonths(1) == new DateTime(2009, 2, 28);\n    // new DateTime(2008, 1, 28).AddMonths(1) == new DateTime(2009, 2, 28);\n    age = HowOld(new DateTime(2009, 1, 31), new DateTime(2009, 2, 28));\n    Assert.AreEqual(\u00224 weeks\u0022, age);\n\n    age = HowOld(new DateTime(2009, 2, 1), new DateTime(2009, 2, 28));\n    Assert.AreEqual(\u00223 weeks\u0022, age);\n\n    age = HowOld(new DateTime(2009, 2, 1), new DateTime(2009, 3, 1));\n    Assert.AreEqual(\u00221 month\u0022, age);\n\n    age = HowOld(new DateTime(2012, 11, 5), new DateTime(2012, 11, 30));\n    Assert.AreEqual(\u00223 weeks\u0022, age);\n\n    age = HowOld(new DateTime(2012, 11, 1), new DateTime(2012, 11, 30));\n    Assert.AreEqual(\u00224 weeks\u0022, age);\n\n    age = HowOld(new DateTime(2012, 11, 20), new DateTime(2012, 11, 30));\n    Assert.AreEqual(\u00221 week\u0022, age);\n\n    age = HowOld(new DateTime(2012, 11, 25), new DateTime(2012, 11, 30));\n    Assert.AreEqual(\u00225 days\u0022, age);\n\n    age = HowOld(new DateTime(2012, 11, 29), new DateTime(2012, 11, 30));\n    Assert.AreEqual(\u00221 day\u0022, age);\n\n    age = HowOld(new DateTime(2012, 11, 30), new DateTime(2012, 11, 30));\n    Assert.AreEqual(\u0022just born\u0022, age);\n\n    age = HowOld(new DateTime(2000, 2, 29), new DateTime(2009, 2, 28));\n    Assert.AreEqual(\u00228 years\u0022, age);\n\n    age = HowOld(new DateTime(2000, 2, 29), new DateTime(2009, 3, 1));\n    Assert.AreEqual(\u00229 years\u0022, age);\n\n    Exception e = null;\n\n    try\n    {\n        age = HowOld(new DateTime(2012, 12, 1), new DateTime(2012, 11, 30));\n    }\n    catch (ArgumentOutOfRangeException ex)\n    {\n        e = ex;\n    }\n\n    Assert.IsTrue(e != null);\n}\n\n\nHope it\u0027s helpful.\n    ","\nKeeping it simple (and possibly stupid:)).\n\nDateTime birth = new DateTime(1975, 09, 27, 01, 00, 00, 00);\nTimeSpan ts = DateTime.Now - birth;\nConsole.WriteLine(\u0022You are approximately \u0022 \u002B ts.TotalSeconds.ToString() \u002B \u0022 seconds old.\u0022);\n\n    ","\nThis is not a direct answer, but more of a philosophical reasoning about the problem at hand from a quasi-scientific point of view.\n\nI would argue that the question does not specify the unit nor culture in which to measure age, most answers seem to assume an integer annual representation. The SI-unit for time is second, ergo the correct generic answer should be (of course assuming normalized DateTime and taking no regard whatsoever to relativistic effects):\n\nvar lifeInSeconds = (DateTime.Now.Ticks - then.Ticks)/TickFactor;\n\n\nIn the Christian way of calculating age in years:\n\nvar then = ... // Then, in this case the birthday\nvar now = DateTime.UtcNow;\nint age = now.Year - then.Year;\nif (now.AddYears(-age) \u003C then) age--;\n\n\nIn finance there is a similar problem when calculating something often referred to as the Day Count Fraction, which roughly is a number of years for a given period. And the age issue is really a time measuring issue.\n\nExample for the actual/actual (counting all days \u0022correctly\u0022) convention:\n\nDateTime start, end = .... // Whatever, assume start is before end\n\ndouble startYearContribution = 1 - (double) start.DayOfYear / (double) (DateTime.IsLeapYear(start.Year) ? 366 : 365);\ndouble endYearContribution = (double)end.DayOfYear / (double)(DateTime.IsLeapYear(end.Year) ? 366 : 365);\ndouble middleContribution = (double) (end.Year - start.Year - 1);\n\ndouble DCF = startYearContribution \u002B endYearContribution \u002B middleContribution;\n\n\nAnother quite common way to measure time generally is by \u0022serializing\u0022 (the dude who named this date convention must seriously have been trippin\u0027):\n\nDateTime start, end = .... // Whatever, assume start is before end\nint days = (end - start).Days;\n\n\nI wonder how long we have to go before a relativistic age in seconds becomes more useful than the rough approximation of earth-around-sun-cycles during one\u0027s lifetime so far :) Or in other words, when a period must be given a location or a function representing motion for itself to be valid :)\n    ","\nThe simplest way I\u0027ve ever found is this. It works correctly for the US and western europe locales. Can\u0027t speak to other locales, especially places like China. 4 extra compares, at most, following the initial computation of age.\n\npublic int AgeInYears(DateTime birthDate, DateTime referenceDate)\n{\n  Debug.Assert(referenceDate \u003E= birthDate, \n               \u0022birth date must be on or prior to the reference date\u0022);\n\n  DateTime birth = birthDate.Date;\n  DateTime reference = referenceDate.Date;\n  int years = (reference.Year - birth.Year);\n\n  //\n  // an offset of -1 is applied if the birth date has \n  // not yet occurred in the current year.\n  //\n  if (reference.Month \u003E birth.Month);\n  else if (reference.Month \u003C birth.Month) \n    --years;\n  else // in birth month\n  {\n    if (reference.Day \u003C birth.Day)\n      --years;\n  }\n\n  return years ;\n}\n\n\nI was looking over the answers to this and noticed that nobody has made reference to regulatory/legal implications of leap day births. For instance, per Wikipedia, if you\u0027re born on February 29th in various jurisdictions, you\u0027re non-leap year birthday varies:\n\n\nIn the United Kingdom and Hong Kong: it\u0027s the ordinal day of the year, so the next day, March 1st is your birthday.\nIn New Zealand: it\u0027s the previous day, February 28th for the purposes of driver licencing, and March 1st for other purposes.\nTaiwan: it\u0027s February 28th.\n\n\nAnd as near as I can tell, in the US, the statutes are silent on the matter, leaving it up to the common law and to how various regulatory bodies define things in their regulations.\n\nTo that end, an improvement:\n\npublic enum LeapDayRule\n{\n  OrdinalDay     = 1 ,\n  LastDayOfMonth = 2 ,\n}\n\nstatic int ComputeAgeInYears(DateTime birth, DateTime reference, LeapYearBirthdayRule ruleInEffect)\n{\n  bool isLeapYearBirthday = CultureInfo.CurrentCulture.Calendar.IsLeapDay(birth.Year, birth.Month, birth.Day);\n  DateTime cutoff;\n\n  if (isLeapYearBirthday \u0026\u0026 !DateTime.IsLeapYear(reference.Year))\n  {\n    switch (ruleInEffect)\n    {\n      case LeapDayRule.OrdinalDay:\n        cutoff = new DateTime(reference.Year, 1, 1)\n                             .AddDays(birth.DayOfYear - 1);\n        break;\n\n      case LeapDayRule.LastDayOfMonth:\n        cutoff = new DateTime(reference.Year, birth.Month, 1)\n                             .AddMonths(1)\n                             .AddDays(-1);\n        break;\n\n      default:\n        throw new InvalidOperationException();\n    }\n  }\n  else\n  {\n    cutoff = new DateTime(reference.Year, birth.Month, birth.Day);\n  }\n\n  int age = (reference.Year - birth.Year) \u002B (reference \u003E= cutoff ? 0 : -1);\n  return age \u003C 0 ? 0 : age;\n}\n\n\nIt should be noted that this code assumes:\n\n\nA western (European) reckoning of age, and\nA calendar, like the Gregorian calendar that inserts a single leap day at the end of a month.\n\n    ","\nTimeSpan diff = DateTime.Now - birthdayDateTime;\nstring age = String.Format(\u0022{0:%y} years, {0:%M} months, {0:%d}, days old\u0022, diff);\n\n\nI\u0027m not sure how exactly you\u0027d like it returned to you, so I just made a readable string.\n    ","\nHere is a solution.\n\nDateTime dateOfBirth = new DateTime(2000, 4, 18);\nDateTime currentDate = DateTime.Now;\n\nint ageInYears = 0;\nint ageInMonths = 0;\nint ageInDays = 0;\n\nageInDays = currentDate.Day - dateOfBirth.Day;\nageInMonths = currentDate.Month - dateOfBirth.Month;\nageInYears = currentDate.Year - dateOfBirth.Year;\n\nif (ageInDays \u003C 0)\n{\n    ageInDays \u002B= DateTime.DaysInMonth(currentDate.Year, currentDate.Month);\n    ageInMonths = ageInMonths--;\n\n    if (ageInMonths \u003C 0)\n    {\n        ageInMonths \u002B= 12;\n        ageInYears--;\n    }\n}\n\nif (ageInMonths \u003C 0)\n{\n    ageInMonths \u002B= 12;\n    ageInYears--;\n}\n\nConsole.WriteLine(\u0022{0}, {1}, {2}\u0022, ageInYears, ageInMonths, ageInDays);\n\n    ","\nThis is one of the most accurate answers that is able to resolve the birthday of 29th of Feb compared to any year of 28th Feb.\n\npublic int GetAge(DateTime birthDate)\n{\n    int age = DateTime.Now.Year - birthDate.Year;\n\n    if (birthDate.DayOfYear \u003E DateTime.Now.DayOfYear)\n        age--;\n\n    return age;\n}\n\n\n\n\n\n    ","\nI have a customized method to calculate age, plus a bonus validation message just in case it helps:\n\npublic void GetAge(DateTime dob, DateTime now, out int years, out int months, out int days)\n{\n    years = 0;\n    months = 0;\n    days = 0;\n\n    DateTime tmpdob = new DateTime(dob.Year, dob.Month, 1);\n    DateTime tmpnow = new DateTime(now.Year, now.Month, 1);\n\n    while (tmpdob.AddYears(years).AddMonths(months) \u003C tmpnow)\n    {\n        months\u002B\u002B;\n        if (months \u003E 12)\n        {\n            years\u002B\u002B;\n            months = months - 12;\n        }\n    }\n\n    if (now.Day \u003E= dob.Day)\n        days = days \u002B now.Day - dob.Day;\n    else\n    {\n        months--;\n        if (months \u003C 0)\n        {\n            years--;\n            months = months \u002B 12;\n        }\n        days \u002B= DateTime.DaysInMonth(now.AddMonths(-1).Year, now.AddMonths(-1).Month) \u002B now.Day - dob.Day;\n    }\n\n    if (DateTime.IsLeapYear(dob.Year) \u0026\u0026 dob.Month == 2 \u0026\u0026 dob.Day == 29 \u0026\u0026 now \u003E= new DateTime(now.Year, 3, 1))\n        days\u002B\u002B;\n\n}   \n\nprivate string ValidateDate(DateTime dob) //This method will validate the date\n{\n    int Years = 0; int Months = 0; int Days = 0;\n\n    GetAge(dob, DateTime.Now, out Years, out Months, out Days);\n\n    if (Years \u003C 18)\n        message =  Years \u002B \u0022 is too young. Please try again on your 18th birthday.\u0022;\n    else if (Years \u003E= 65)\n        message = Years \u002B \u0022 is too old. Date of Birth must not be 65 or older.\u0022;\n    else\n        return null; //Denotes validation passed\n}\n\n\nMethod call here and pass out datetime value (MM/dd/yyyy if server set to USA locale). Replace this with anything a messagebox or any container to display:\n\nDateTime dob = DateTime.Parse(\u002203/10/1982\u0022);  \n\nstring message = ValidateDate(dob);\n\nlbldatemessage.Visible = !StringIsNullOrWhitespace(message);\nlbldatemessage.Text = message ?? \u0022\u0022; //Ternary if message is null then default to empty string\n\n\nRemember you can format the message any way you like.\n    ","\nHow about this solution? \n\nstatic string CalcAge(DateTime birthDay)\n{\n    DateTime currentDate = DateTime.Now;         \n    int approximateAge = currentDate.Year - birthDay.Year;\n    int daysToNextBirthDay = (birthDay.Month * 30 \u002B birthDay.Day) - \n        (currentDate.Month * 30 \u002B currentDate.Day) ;\n\n    if (approximateAge == 0 || approximateAge == 1)\n    {                \n        int month =  Math.Abs(daysToNextBirthDay / 30);\n        int days = Math.Abs(daysToNextBirthDay % 30);\n\n        if (month == 0)\n            return \u0022Your age is: \u0022 \u002B daysToNextBirthDay \u002B \u0022 days\u0022;\n\n        return \u0022Your age is: \u0022 \u002B month \u002B \u0022 months and \u0022 \u002B days \u002B \u0022 days\u0022; ;\n    }\n\n    if (daysToNextBirthDay \u003E 0)\n        return \u0022Your age is: \u0022 \u002B --approximateAge \u002B \u0022 Years\u0022;\n\n    return \u0022Your age is: \u0022 \u002B approximateAge \u002B \u0022 Years\u0022; ;\n}\n\n    ","\nprivate int GetAge(int _year, int _month, int _day\n{\n    DateTime yourBirthDate= new DateTime(_year, _month, _day);\n\n    DateTime todaysDateTime = DateTime.Today;\n    int noOfYears = todaysDateTime.Year - yourBirthDate.Year;\n\n    if (DateTime.Now.Month \u003C yourBirthDate.Month ||\n        (DateTime.Now.Month == yourBirthDate.Month \u0026\u0026 DateTime.Now.Day \u003C yourBirthDate.Day))\n    {\n        noOfYears--;\n    }\n\n    return  noOfYears;\n}\n\n    ","\nThe following approach (extract from Time Period Library for .NET class DateDiff) considers the calendar of the culture info:\n\n// ----------------------------------------------------------------------\nprivate static int YearDiff( DateTime date1, DateTime date2 )\n{\n  return YearDiff( date1, date2, DateTimeFormatInfo.CurrentInfo.Calendar );\n} // YearDiff\n\n// ----------------------------------------------------------------------\nprivate static int YearDiff( DateTime date1, DateTime date2, Calendar calendar )\n{\n  if ( date1.Equals( date2 ) )\n  {\n    return 0;\n  }\n\n  int year1 = calendar.GetYear( date1 );\n  int month1 = calendar.GetMonth( date1 );\n  int year2 = calendar.GetYear( date2 );\n  int month2 = calendar.GetMonth( date2 );\n\n  // find the the day to compare\n  int compareDay = date2.Day;\n  int compareDaysPerMonth = calendar.GetDaysInMonth( year1, month1 );\n  if ( compareDay \u003E compareDaysPerMonth )\n  {\n    compareDay = compareDaysPerMonth;\n  }\n\n  // build the compare date\n  DateTime compareDate = new DateTime( year1, month2, compareDay,\n    date2.Hour, date2.Minute, date2.Second, date2.Millisecond );\n  if ( date2 \u003E date1 )\n  {\n    if ( compareDate \u003C date1 )\n    {\n      compareDate = compareDate.AddYears( 1 );\n    }\n  }\n  else\n  {\n    if ( compareDate \u003E date1 )\n    {\n      compareDate = compareDate.AddYears( -1 );\n    }\n  }\n  return year2 - calendar.GetYear( compareDate );\n} // YearDiff\n\n\nUsage:\n\n// ----------------------------------------------------------------------\npublic void CalculateAgeSamples()\n{\n  PrintAge( new DateTime( 2000, 02, 29 ), new DateTime( 2009, 02, 28 ) );\n  // \u003E Birthdate=29.02.2000, Age at 28.02.2009 is 8 years\n  PrintAge( new DateTime( 2000, 02, 29 ), new DateTime( 2012, 02, 28 ) );\n  // \u003E Birthdate=29.02.2000, Age at 28.02.2012 is 11 years\n} // CalculateAgeSamples\n\n// ----------------------------------------------------------------------\npublic void PrintAge( DateTime birthDate, DateTime moment )\n{\n  Console.WriteLine( \u0022Birthdate={0:d}, Age at {1:d} is {2} years\u0022, birthDate, moment, YearDiff( birthDate, moment ) );\n} // PrintAge\n\n    ","\nThis classic question is deserving of a Noda Time solution.\n\nstatic int GetAge(LocalDate dateOfBirth)\n{\n    Instant now = SystemClock.Instance.Now;\n\n    // The target time zone is important.\n    // It should align with the *current physical location* of the person\n    // you are talking about.  When the whereabouts of that person are unknown,\n    // then you use the time zone of the person who is *asking* for the age.\n    // The time zone of birth is irrelevant!\n\n    DateTimeZone zone = DateTimeZoneProviders.Tzdb[\u0022America/New_York\u0022];\n\n    LocalDate today = now.InZone(zone).Date;\n\n    Period period = Period.Between(dateOfBirth, today, PeriodUnits.Years);\n\n    return (int) period.Years;\n}\n\n\nUsage:\n\nLocalDate dateOfBirth = new LocalDate(1976, 8, 27);\nint age = GetAge(dateOfBirth);\n\n\nYou might also be interested in the following improvements:\n\n\nPassing in the clock as an IClock, instead of using SystemClock.Instance, would improve testability.\nThe target time zone will likely change, so you\u0027d want a DateTimeZone parameter as well.\n\n\nSee also my blog post on this subject: Handling Birthdays, and Other Anniversaries\n    ","\nI used ScArcher2\u0027s solution for an accurate Year calculation of a persons age but I needed to take it further and calculate their Months and Days along with the Years.\n\n    public static Dictionary\u003Cstring,int\u003E CurrentAgeInYearsMonthsDays(DateTime? ndtBirthDate, DateTime? ndtReferralDate)\n    {\n        //----------------------------------------------------------------------\n        // Can\u0027t determine age if we don\u0027t have a dates.\n        //----------------------------------------------------------------------\n        if (ndtBirthDate == null) return null;\n        if (ndtReferralDate == null) return null;\n\n        DateTime dtBirthDate = Convert.ToDateTime(ndtBirthDate);\n        DateTime dtReferralDate = Convert.ToDateTime(ndtReferralDate);\n\n        //----------------------------------------------------------------------\n        // Create our Variables\n        //----------------------------------------------------------------------\n        Dictionary\u003Cstring, int\u003E dYMD = new Dictionary\u003Cstring,int\u003E();\n        int iNowDate, iBirthDate, iYears, iMonths, iDays;\n        string sDif = \u0022\u0022;\n\n        //----------------------------------------------------------------------\n        // Store off current date/time and DOB into local variables\n        //---------------------------------------------------------------------- \n        iNowDate = int.Parse(dtReferralDate.ToString(\u0022yyyyMMdd\u0022));\n        iBirthDate = int.Parse(dtBirthDate.ToString(\u0022yyyyMMdd\u0022));\n\n        //----------------------------------------------------------------------\n        // Calculate Years\n        //----------------------------------------------------------------------\n        sDif = (iNowDate - iBirthDate).ToString();\n        iYears = int.Parse(sDif.Substring(0, sDif.Length - 4));\n\n        //----------------------------------------------------------------------\n        // Store Years in Return Value\n        //----------------------------------------------------------------------\n        dYMD.Add(\u0022Years\u0022, iYears);\n\n        //----------------------------------------------------------------------\n        // Calculate Months\n        //----------------------------------------------------------------------\n        if (dtBirthDate.Month \u003E dtReferralDate.Month)\n            iMonths = 12 - dtBirthDate.Month \u002B dtReferralDate.Month - 1;\n        else\n            iMonths = dtBirthDate.Month - dtReferralDate.Month;\n\n        //----------------------------------------------------------------------\n        // Store Months in Return Value\n        //----------------------------------------------------------------------\n        dYMD.Add(\u0022Months\u0022, iMonths);\n\n        //----------------------------------------------------------------------\n        // Calculate Remaining Days\n        //----------------------------------------------------------------------\n        if (dtBirthDate.Day \u003E dtReferralDate.Day)\n            //Logic: Figure out the days in month previous to the current month, or the admitted month.\n            //       Subtract the birthday from the total days which will give us how many days the person has lived since their birthdate day the previous month.\n            //       then take the referral date and simply add the number of days the person has lived this month.\n\n            //If referral date is january, we need to go back to the following year\u0027s December to get the days in that month.\n            if (dtReferralDate.Month == 1)\n                iDays = DateTime.DaysInMonth(dtReferralDate.Year - 1, 12) - dtBirthDate.Day \u002B dtReferralDate.Day;       \n            else\n                iDays = DateTime.DaysInMonth(dtReferralDate.Year, dtReferralDate.Month - 1) - dtBirthDate.Day \u002B dtReferralDate.Day;       \n        else\n            iDays = dtReferralDate.Day - dtBirthDate.Day;             \n\n        //----------------------------------------------------------------------\n        // Store Days in Return Value\n        //----------------------------------------------------------------------\n        dYMD.Add(\u0022Days\u0022, iDays);\n\n        return dYMD;\n}\n\n    ","\nSQL version:\n\ndeclare @dd smalldatetime = \u00271980-04-01\u0027\ndeclare @age int = YEAR(GETDATE())-YEAR(@dd)\nif (@dd\u003E DATEADD(YYYY, -@age, GETDATE())) set @age = @age -1\n\nprint @age  \n\n    ","\nI\u0027ve made one small change to Mark Soen\u0027s answer: I\u0027ve rewriten the third line so that the expression can be parsed a bit more easily.\n\npublic int AgeInYears(DateTime bday)\n{\n    DateTime now = DateTime.Today;\n    int age = now.Year - bday.Year;            \n    if (bday.AddYears(age) \u003E now) \n        age--;\n    return age;\n}\n\n\nI\u0027ve also made it into a function for the sake of clarity.\n    ","\n                \n                Just wanted to comment on DateTime.Now performance. If you don\u0027t need an accurate time zone value, use DateTime.UtcNow it\u0027s much faster.\n                \n\u2013\u00A0JAG\n                Jan 22 \u002709 at 10:29\n            ","\n                \n                Given we\u0027re talking birthdays you can just use DateTime.Today given the time part has no relevance.\n                \n\u2013\u00A0Tristan Warner-Smith\n                Jul 24 \u002709 at 18:04\n            ","\n                \n                This answer does not work with all locales and all ages. Several countries have skipped dates after the birth of current living people, including Russia (1918), Greece (1924) and Turkey (1926).\n                \n\u2013\u00A0Lars D\n                Nov 9 \u002709 at 22:09\n            ","\n                \n                Actually, it\u0027s still not entirely correct. This code presumes that \u0027bday\u0027 is the date-portion of a DateTime. It\u0027s an edge-case (I guess most people will just be passing dates and not date-times), but if you pass in a birthday as a date-and-time where the time is greater than 00:00:00 then you\u0027ll run into the bug Danvil pointed out. Setting bday = bday.Date fixes this.\n                \n\u2013\u00A0\u00D8yvind\n                Nov 16 \u002710 at 15:37\n            ","\n                \n                The last line made me think too much. Instead how about: if (bday.AddYears(age) \u003E now) age--; This seems to be a more intuitive expression.\n                \n\u2013\u00A0cdiggins\n                Jul 16 \u002711 at 17:53\n                        \n                            \n                        \n            ","\n                \n                Actually this is great for usage on MS-SQL with datetime-fields (total days since 01-011900)\n                \n\u2013\u00A0Patrik\n                Jul 3 \u002715 at 12:01\n            ","\n                \n                @numerek Please post your suggested modifications as their own answer. For what it\u0027s worth, the current year times 10000 is nowhere near an integer overflow, by two orders of magnitude.  20,150,000 vs 2,147,483,648\n                \n\u2013\u00A0GalacticCowboy\n                Sep 3 \u002715 at 20:23\n            ","\n                \n                @LongChalk 20180101 - 20171231 = 8870. Drop the last 4 digits and you have (an implied) 0 for the age. How did you get 1?\n                \n\u2013\u00A0Rufus L\n                Jun 14 \u002718 at 20:36\n                        \n                            \n                        \n            ","\n                \n                I know this is an old answer but I wouldn\u0027t make an extension method out of it, it\u0027s not the right place to define such logics.\n                \n\u2013\u00A0Lucca Ferri\n                Oct 25 \u002718 at 11:15\n            ","\n                \n                What kind of sorcery is this?\n                \n\u2013\u00A0Muleskinner\n                May 1 at 11:42\n            ","\n                \n                While this code works, it asserts that a person born on a leap day attains the next year of age on March 1st on non-leap years, rather than on February 28th.  In reality, either option may be correct.  Wikipedia has something to say about this.  So while your code is not \u0022wrong\u0022, neither is the accepted solution.\n                \n\u2013\u00A0Matt Johnson-Pint\n                Aug 17 \u002714 at 5:44\n            ","\n                \n                @MattJohnson I think that\u0027s actually correct. If my bday was Feb 29, then Feb 28 my bday hasn\u0027t passed, and I should still be the same age as on Feb 27. On March 1, however, we have passed my bday and I should be the next age.  In the US, a business that sells alcohol will have a sign that says something like \u0022If you were born after this day in YYYY, you can\u0027t purchase alcohol\u0022 (where YYYY changes every year). That means that someone born on Feb 29 cannot buy alcohol on Feb 28 in the year they turn 21 (most places), and lends support to the idea that they are not a year older until March 1.\n                \n\u2013\u00A0jfren484\n                Jul 12 \u002716 at 17:18\n            ","\n                \n                @jfren484 - read the Wikipedia article.  It varies considerably across jurisdictions.\n                \n\u2013\u00A0Matt Johnson-Pint\n                Jul 12 \u002716 at 19:26\n            ","\n                \n                @jfren484 Your claim has absolutely nothing to do with philosophy; but everything to do with your own personal feeling. When a person born on 29 Feb \u0022ages\u0022 is largely unimportant unless the age forms a \u0027legal age boundary\u0027 (e.g. Can buy alcohol, vote, get pension, join army, get driving license). Consider US drinking age (21 years): For most people that\u0027s 7670 days. It\u0027s 7671 days if born before 29 Feb in leap year or from 1 Mar before leap year. If born on 29 Feb: 28 Feb is 7670 days and 1 Mar is 7671 days. The choice is arbitrary it can go either way.\n                \n\u2013\u00A0Disillusioned\n                Mar 4 \u002717 at 10:06\n            ","\n                \n                @CraigYoung You don\u0027t understand what I meant by philosophically. I used that term as a contrast to legally. If one is writing an application that needs to know the legal age of a person, then all they need to know is how the legal jurisdictions that their application is used in/for treat people born on Feb 29. If, however, we\u0027re talking about how that should be treated, then that is by definition, philosophy. And yes, the opinion I gave is my own opinion, but as I said, I think it would be easier to argue for March 1 than it would be for Feb 28.\n                \n\u2013\u00A0jfren484\n                Mar 4 \u002717 at 18:45\n            ","\n                \n                A comment regarding having the 29th Feb birthday on 1st March, technically, having it on the 28th is too early (1 day early in fact). On the 1st is one day too late. But since the birthday is between, using the 1st to calculate the age in non-leap years makes more sense to me, since that person is indeed that old on March 1st (and 2nd and 3rd) every year, but not on Feb 28th.\n                \n\u2013\u00A0CyberClaw\n                Jul 24 \u002718 at 16:31\n            ","\n                \n                From a software design point, writing this as an extension method doesn\u0027t make much sense to me. date.Age(other)?\n                \n\u2013\u00A0marsze\n                Dec 12 \u002718 at 8:11\n            ","\n                \n                I don\u0027t think Harry Patch would have appreciated your spot-testing methodology:  latimes.com/news/obituaries/\u2026\n                \n\u2013\u00A0MusiGenesis\n                Aug 1 \u002709 at 16:03\n            ","\n                \n                Google says days in a year =  365.242199\n                \n\u2013\u00A0mpen\n                Aug 12 \u002710 at 5:28\n            ","\n                \n                The average length of a year in the Gregorian Calendar is 365.2425 days.\n                \n\u2013\u00A0dan04\n                Oct 6 \u002710 at 2:01\n            ","\n                \n                I would say, this is one of the simplest solutions and it\u0027s good enough. Who cares if I am half a day before my Xth birthday and the program says I am X years old. The program is more or less right, although not mathematically. I really like this solution.\n                \n\u2013\u00A0Peter Perh\u00E1\u010D\n                Mar 9 \u002711 at 12:07\n            ","\n                \n                ^^ Because sometimes it\u0027s important. In my testing this fails on the persons birthday, it reports them younger than they are.\n                \n\u2013\u00A0ChadT\n                Mar 25 \u002711 at 5:27\n            ","\n                \n                This appears to handle different regions (date formats) the best.\n                \n\u2013\u00A0webdad3\n                Nov 9 \u002716 at 22:06\n            ","\n                \n                This is broken. Made testable:   public static int CalculateAge(DateTime dateOfBirth, DateTime dateToCalculateAge)         {             return new DateTime(dateToCalculateAge.Subtract(dateOfBirth).Ticks).Year - 1;         } ...Gives age 14 when I input 1990-06-01 and calculate the age on the day BEFORE his 14th birthday (1990-05-31).\n                \n\u2013\u00A0Kjensen\n                Feb 5 \u002711 at 21:42\n                        \n                            \n                        \n            ","\n                \n                I think this can be off by one day when exactly one of dateOfBirth or dateAsAt falls in a leap year. Consider the age of a person born on March 1, 2003 on February 29, 2004.  To rectify this, you need to do a lexicographic comparison of (Month, DayOfMonth) pairs and use that for the conditional.\n                \n\u2013\u00A0Doug McClean\n                Dec 23 \u002708 at 15:36\n            ","\n                \n                it\u0027s also not going to show the right age as of your birthday.\n                \n\u2013\u00A0dotjoe\n                Jan 29 \u002709 at 21:19\n            ","\n                \n                This does not work all the time. Adding a Span to the DateTime.MinValue could work boes this does not account for leap years etc. If you add the Years, months and days to Age using the AddYears(), AddMonths and AddDays() function it will not always return the Datetime.Now date.\n                \n\u2013\u00A0Athanasios Kataras\n                Oct 23 \u002713 at 9:44\n            ","\n                \n                timespan itself automatically takes into account leap years between 2 dates so I\u0027m not sure what your getting on about. I have asked on microsoft forums and microsoft has confirmed it takes into account leap years between 2 dates.\n                \n\u2013\u00A0Jacqueline Loriault\n                Oct 23 \u002713 at 19:29\n            ","\n                \n                Consider the following TWO senarios. 1st DateTime.Now is 1/1/2001 and a child is born on 1/1/2000. 2000 is a leap year and the result will be 1years, 0 months and 1 days. In the second senarion DateTime.Now is 1/1/2002 and the child is born on 1/1/2001. In this case the result will be 1 years, 0 months and 0 days. That will happen because you are adding the timespan on a non-leap year. If DateTime.MinValue was a leap year then the results would be 1 year at the first and 0 years 11 months and 30 days. (Try it in your code).\n                \n\u2013\u00A0Athanasios Kataras\n                Oct 24 \u002713 at 10:31\n                        \n                            \n                        \n            ","\n                \n                Upvote!  I came up with a solution that is pretty much identical (I used  DateTime.MinValue.AddTicks(span.Ticks) instead of \u002B, but the result is the same and yours has a few characters less code).\n                \n\u2013\u00A0Makotosan\n                Mar 17 \u002715 at 20:57\n            ","\n                \n                You are quite right it\u0027s not. But IF it was that would be the result. Why does it matter? It doesn\u0027t. In either case leap or not then there are examples where this does not work. That was what I wanted to show. The DIFF is correct. Span takes into account leap years. But ADDING to a base date is not. Try the examples in code and you will see I\u0027m right.\n                \n\u2013\u00A0Athanasios Kataras\n                Mar 18 \u002715 at 18:20\n                        \n                            \n                        \n            ","\n                \n                I stumbled into this long and annoying discussion, and your solution is a really nice and small approach. Thanks for keeping it simple\n                \n\u2013\u00A0nabuchodonossor\n                May 29 \u002718 at 9:43\n            ","\n                \n                TimeSpan was my first choice, but found that it doesn\u0027t offer a TotalYears property. You could try (ts.TotalDays / 365) - but it doesn\u0027t account for leap years etc.\n                \n\u2013\u00A0Lazlow\n                Sep 21 \u002711 at 20:14\n            ","\n                \n                What is TickFactor?\n                \n\u2013\u00A0Protiguous\n                Jun 5 at 10:22\n            ","\n                \n                @Protiguous Ticks per second, used to normalise ticks to seconds.\n                \n\u2013\u00A0flindeberg\n                Jun 5 at 14:52\n            ","\n                \n                With string concat, this would be possible:  47 Yrs 11 Mo 7 days\n                \n\u2013\u00A0JoshYates1980\n                Jun 14 \u002718 at 15:58\n            ","\n                \n                It is today! (The next one is four years from now.)\n                \n\u2013\u00A0Peter Mortensen\n                Feb 29 at 1:06\n                        \n                            \n                        \n            ","\n                \n                You can use DateTime.Today instead, since time does not matter for the calculation\n                \n\u2013\u00A0tif\n                Aug 18 at 11:04\n            ","\n                \n                Are you affiliated with Noda Time?\n                \n\u2013\u00A0Zimano\n                Mar 29 \u002719 at 13:15\n            ","\n                \n                I have made contributions to it, but it is primarily Jon Skeet\u0027s.\n                \n\u2013\u00A0Matt Johnson-Pint\n                Mar 29 \u002719 at 14:05\n            "]},{"Id":"5dab2221-dcc8-4ab5-8099-cb9d48e274a3","QuestionId":19147,"Description":"What is the correct way to create a single-instance WPF application?","Votes":670,"Views":217050,"Tags":["c#",".net","wpf","mutex"],"Discussions":["\nHere is a very good article regarding the Mutex solution.  The approach described by the article is advantageous for two reasons.\n\nFirst, it does not require a dependency on the Microsoft.VisualBasic assembly.  If my project already had a dependency on that assembly, I would probably advocate using the approach shown in another answer.  But as it is, I do not use the Microsoft.VisualBasic assembly, and I\u0027d rather not add an unnecessary dependency to my project.\n\nSecond, the article shows how to bring the existing instance of the application to the foreground when the user tries to start another instance.  That\u0027s a very nice touch that the other Mutex solutions described here do not address.\n\n\n\nUPDATE\n\nAs of 8/1/2014, the article I linked to above is still active, but the blog hasn\u0027t been updated in a while.  That makes me worry that eventually it might disappear, and with it, the advocated solution.  I\u0027m reproducing the content of the article here for posterity.  The words belong solely to the blog owner at Sanity Free Coding.\n\n\n  Today I wanted to refactor some code that prohibited my application\n  from running multiple instances of itself.\n  \n  Previously I had use System.Diagnostics.Process to search for an\n  instance of my myapp.exe in the process list. While this works, it\n  brings on a lot of overhead, and I wanted something cleaner.\n  \n  Knowing that I could use a mutex for this (but never having done it\n  before) I set out to cut down my code and simplify my life.\n  \n  In the class of my application main I created a static named Mutex:\n\n\nstatic class Program\n{\n    static Mutex mutex = new Mutex(true, \u0022{8F6F0AC4-B9A1-45fd-A8CF-72F04E6BDE8F}\u0022);\n    [STAThread]\n    ...\n}\n\n\n\n  Having a named mutex allows us to stack synchronization across\n  multiple threads and processes which is just the magic I\u0027m looking\n  for.\n  \n  Mutex.WaitOne has an overload that specifies an amount of time for us\n  to wait. Since we\u0027re not actually wanting to synchronizing our code\n  (more just check if it is currently in use) we use the overload with\n  two parameters: Mutex.WaitOne(Timespan timeout, bool exitContext).\n  Wait one returns true if it is able to enter, and false if it wasn\u0027t.\n  In this case, we don\u0027t want to wait at all; If our mutex is being\n  used, skip it, and move on, so we pass in TimeSpan.Zero (wait 0\n  milliseconds), and set the exitContext to true so we can exit the\n  synchronization context before we try to aquire a lock on it. Using\n  this, we wrap our Application.Run code inside something like this:\n\n\nstatic class Program\n{\n    static Mutex mutex = new Mutex(true, \u0022{8F6F0AC4-B9A1-45fd-A8CF-72F04E6BDE8F}\u0022);\n    [STAThread]\n    static void Main() {\n        if(mutex.WaitOne(TimeSpan.Zero, true)) {\n            Application.EnableVisualStyles();\n            Application.SetCompatibleTextRenderingDefault(false);\n            Application.Run(new Form1());\n            mutex.ReleaseMutex();\n        } else {\n            MessageBox.Show(\u0022only one instance at a time\u0022);\n        }\n    }\n}\n\n\n\n  So, if our app is running, WaitOne will return false, and we\u0027ll get a\n  message box.\n  \n  Instead of showing a message box, I opted to utilize a little Win32 to\n  notify my running instance that someone forgot that it was already\n  running (by bringing itself to the top of all the other windows). To\n  achieve this I used PostMessage to broadcast a custom message to every\n  window (the custom message was registered with RegisterWindowMessage\n  by my running application, which means only my application knows what\n  it is) then my second instance exits. The running application instance\n  would receive that notification and process it. In order to do that, I\n  overrode WndProc in my main form and listened for my custom\n  notification. When I received that notification I set the form\u0027s\n  TopMost property to true to bring it up on top.\n  \n  Here is what I ended up with:\n  \n  \n  Program.cs\n  \n\n\nstatic class Program\n{\n    static Mutex mutex = new Mutex(true, \u0022{8F6F0AC4-B9A1-45fd-A8CF-72F04E6BDE8F}\u0022);\n    [STAThread]\n    static void Main() {\n        if(mutex.WaitOne(TimeSpan.Zero, true)) {\n            Application.EnableVisualStyles();\n            Application.SetCompatibleTextRenderingDefault(false);\n            Application.Run(new Form1());\n            mutex.ReleaseMutex();\n        } else {\n            // send our Win32 message to make the currently running instance\n            // jump on top of all the other windows\n            NativeMethods.PostMessage(\n                (IntPtr)NativeMethods.HWND_BROADCAST,\n                NativeMethods.WM_SHOWME,\n                IntPtr.Zero,\n                IntPtr.Zero);\n        }\n    }\n}\n\n\n\n  \n  NativeMethods.cs\n  \n\n\n// this class just wraps some Win32 stuff that we\u0027re going to use\ninternal class NativeMethods\n{\n    public const int HWND_BROADCAST = 0xffff;\n    public static readonly int WM_SHOWME = RegisterWindowMessage(\u0022WM_SHOWME\u0022);\n    [DllImport(\u0022user32\u0022)]\n    public static extern bool PostMessage(IntPtr hwnd, int msg, IntPtr wparam, IntPtr lparam);\n    [DllImport(\u0022user32\u0022)]\n    public static extern int RegisterWindowMessage(string message);\n}\n\n\n\n  \n  Form1.cs (front side partial)\n  \n\n\npublic partial class Form1 : Form\n{\n    public Form1()\n    {\n        InitializeComponent();\n    }\n    protected override void WndProc(ref Message m)\n    {\n        if(m.Msg == NativeMethods.WM_SHOWME) {\n            ShowMe();\n        }\n        base.WndProc(ref m);\n    }\n    private void ShowMe()\n    {\n        if(WindowState == FormWindowState.Minimized) {\n            WindowState = FormWindowState.Normal;\n        }\n        // get our current \u0022TopMost\u0022 value (ours will always be false though)\n        bool top = TopMost;\n        // make our form jump to the top of everything\n        TopMost = true;\n        // set it back to whatever it was\n        TopMost = top;\n    }\n}\n\n    ","\nYou could use the Mutex class, but you will soon find out that you will need to implement the code to pass the arguments and such yourself.  Well, I learned a trick when programming in WinForms when I read Chris Sell\u0027s book.  This trick uses logic that is already available to us in the framework.  I don\u0027t know about you, but when I learn about stuff I can reuse in the framework, that is usually the route I take instead of reinventing the wheel.  Unless of course it doesn\u0027t do everything I want.\n\nWhen I got into WPF, I came up with a way to use that same code, but in a WPF application.  This solution should meet your needs based off your question.\n\nFirst, we need to create our application class.  In this class we are going override the OnStartup event and create a method called Activate, which will be used later.\n\npublic class SingleInstanceApplication : System.Windows.Application\n{\n    protected override void OnStartup(System.Windows.StartupEventArgs e)\n    {\n        // Call the OnStartup event on our base class\n        base.OnStartup(e);\n\n        // Create our MainWindow and show it\n        MainWindow window = new MainWindow();\n        window.Show();\n    }\n\n    public void Activate()\n    {\n        // Reactivate the main window\n        MainWindow.Activate();\n    }\n}\n\n\nSecond, we will need to create a class that can manage our instances.  Before we go through that, we are actually going to reuse some code that is in the Microsoft.VisualBasic assembly.  Since, I am using C# in this example, I had to make a reference to the assembly.  If you are using VB.NET, you don\u0027t have to do anything.  The class we are going to use is WindowsFormsApplicationBase and inherit our instance manager off of it and then leverage properties and events to handle the single instancing.\n\npublic class SingleInstanceManager : Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase\n{\n    private SingleInstanceApplication _application;\n    private System.Collections.ObjectModel.ReadOnlyCollection\u003Cstring\u003E _commandLine;\n\n    public SingleInstanceManager()\n    {\n        IsSingleInstance = true;\n    }\n\n    protected override bool OnStartup(Microsoft.VisualBasic.ApplicationServices.StartupEventArgs eventArgs)\n    {\n        // First time _application is launched\n        _commandLine = eventArgs.CommandLine;\n        _application = new SingleInstanceApplication();\n        _application.Run();\n        return false;\n    }\n\n    protected override void OnStartupNextInstance(StartupNextInstanceEventArgs eventArgs)\n    {\n        // Subsequent launches\n        base.OnStartupNextInstance(eventArgs);\n        _commandLine = eventArgs.CommandLine;\n        _application.Activate();\n    }\n}\n\n\nBasically, we are using the VB bits to detect single instance\u0027s and process accordingly.  OnStartup will be fired when the first instance loads.  OnStartupNextInstance is fired when the application is re-run again.  As you can see, I can get to what was passed on the command line through the event arguments.  I set the value to an instance field.  You could parse the command line here, or you could pass it to your application through the constructor and the call to the Activate method.\n\nThird, it\u0027s time to create our EntryPoint.  Instead of newing up the application like you would normally do, we are going to take advantage of our SingleInstanceManager.\n\npublic class EntryPoint\n{\n    [STAThread]\n    public static void Main(string[] args)\n    {\n        SingleInstanceManager manager = new SingleInstanceManager();\n        manager.Run(args);\n    }\n}\n\n\nWell, I hope you are able to follow everything and be able use this implementation and make it your own.\n    ","\nFrom here.\n\nA common use for a cross-process Mutex is to ensure that only instance of a program can run at a time. Here\u0027s how it\u0027s done:\n\nclass OneAtATimePlease {\n\n  // Use a name unique to the application (eg include your company URL)\n  static Mutex mutex = new Mutex (false, \u0022oreilly.com OneAtATimeDemo\u0022);\n\n  static void Main()\n  {\n    // Wait 5 seconds if contended \u2013 in case another instance\n    // of the program is in the process of shutting down.\n    if (!mutex.WaitOne(TimeSpan.FromSeconds (5), false))\n    {\n        Console.WriteLine(\u0022Another instance of the app is running. Bye!\u0022);\n        return;\n    }\n\n    try\n    {    \n        Console.WriteLine(\u0022Running - press Enter to exit\u0022);\n        Console.ReadLine();\n    }\n    finally\n    {\n        mutex.ReleaseMutex();\n    }    \n  }    \n}\n\n\nA good feature of Mutex is that if the application terminates without ReleaseMutex first being called, the CLR will release the Mutex automatically.\n    ","\nMSDN actually has a sample application for both C# and VB to do exactly this: http://msdn.microsoft.com/en-us/library/ms771662(v=VS.90).aspx\n\n\n  The most common and reliable technique\n  for developing single-instance\n  detection is to use the Microsoft .NET\n  Framework remoting infrastructure\n  (System.Remoting). The Microsoft .NET\n  Framework (version 2.0) includes a\n  type, WindowsFormsApplicationBase,\n  which encapsulates the required\n  remoting functionality. To incorporate\n  this type into a WPF application, a\n  type needs to derive from it, and be\n  used as a shim between the application\n  static entry point method, Main, and\n  the WPF application\u0027s Application\n  type. The shim detects when an\n  application is first launched, and\n  when subsequent launches are\n  attempted, and yields control the WPF\n  Application type to determine how to\n  process the launches.\n\n\n\nFor C# people just take a deep breath and forget about  the whole \u0027I don\u0027t wanna include VisualBasic DLL\u0027. Because of this and what Scott Hanselman says and the fact that this pretty much is the cleanest solution to the problem and is designed by people who know a lot more about the framework than you do.\nFrom a usability standpoint the fact is if your user is loading an application and it is already open and you\u0027re giving them an error message like \u0027Another instance of the app is running. Bye\u0027 then they\u0027re not gonna be a very happy user. You simply MUST (in a GUI application) switch to that application and pass in the arguments provided - or if command line parameters have no meaning then you must pop up the application which may have been minimized.\n\n\nThe framework already has support for this - its just that some idiot named the DLL Microsoft.VisualBasic and it didn\u0027t get put into Microsoft.ApplicationUtils or something like that. Get over it - or open up Reflector.\n\nTip: If you use this approach exactly as is, and you already have an App.xaml with resources etc. you\u0027ll want to take a look at this too.\n    ","\nThis code should go to the main method. Look at here for more information about the main method in WPF.\n\n[DllImport(\u0022user32.dll\u0022)]\nprivate static extern Boolean ShowWindow(IntPtr hWnd, Int32 nCmdShow);\n\nprivate const int SW_SHOWMAXIMIZED = 3;\n\nstatic void Main() \n{\n    Process currentProcess = Process.GetCurrentProcess();\n    var runningProcess = (from process in Process.GetProcesses()\n                          where\n                            process.Id != currentProcess.Id \u0026\u0026\n                            process.ProcessName.Equals(\n                              currentProcess.ProcessName,\n                              StringComparison.Ordinal)\n                          select process).FirstOrDefault();\n    if (runningProcess != null)\n    {\n        ShowWindow(runningProcess.MainWindowHandle, SW_SHOWMAXIMIZED);\n       return; \n    }\n}\n\n\nMethod 2\n\nstatic void Main()\n{\n    string procName = Process.GetCurrentProcess().ProcessName;\n    // get the list of all processes by that name\n\n    Process[] processes=Process.GetProcessesByName(procName);\n\n    if (processes.Length \u003E 1)\n    {\n        MessageBox.Show(procName \u002B \u0022 already running\u0022);  \n        return;\n    } \n    else\n    {\n        // Application.Run(...);\n    }\n}\n\n\nNote : Above methods assumes your process/application has a unique name. Because it uses process name to find if any existing processors. So, if your application has a very common name (ie: Notepad), above approach won\u0027t work. \n    ","\nWell, I have a disposable Class for this that works easily for most use cases:\n\nUse it like this:\n\nstatic void Main()\n{\n    using (SingleInstanceMutex sim = new SingleInstanceMutex())\n    {\n        if (sim.IsOtherInstanceRunning)\n        {\n            Application.Exit();\n        }\n\n        // Initialize program here.\n    }\n}\n\n\nHere it is:\n\n/// \u003Csummary\u003E\n/// Represents a \u003Csee cref=\u0022SingleInstanceMutex\u0022/\u003E class.\n/// \u003C/summary\u003E\npublic partial class SingleInstanceMutex : IDisposable\n{\n    #region Fields\n\n    /// \u003Csummary\u003E\n    /// Indicator whether another instance of this application is running or not.\n    /// \u003C/summary\u003E\n    private bool isNoOtherInstanceRunning;\n\n    /// \u003Csummary\u003E\n    /// The \u003Csee cref=\u0022Mutex\u0022/\u003E used to ask for other instances of this application.\n    /// \u003C/summary\u003E\n    private Mutex singleInstanceMutex = null;\n\n    /// \u003Csummary\u003E\n    /// An indicator whether this object is beeing actively disposed or not.\n    /// \u003C/summary\u003E\n    private bool disposed;\n\n    #endregion\n\n    #region Constructor\n\n    /// \u003Csummary\u003E\n    /// Initializes a new instance of the \u003Csee cref=\u0022SingleInstanceMutex\u0022/\u003E class.\n    /// \u003C/summary\u003E\n    public SingleInstanceMutex()\n    {\n        this.singleInstanceMutex = new Mutex(true, Assembly.GetCallingAssembly().FullName, out this.isNoOtherInstanceRunning);\n    }\n\n    #endregion\n\n    #region Properties\n\n    /// \u003Csummary\u003E\n    /// Gets an indicator whether another instance of the application is running or not.\n    /// \u003C/summary\u003E\n    public bool IsOtherInstanceRunning\n    {\n        get\n        {\n            return !this.isNoOtherInstanceRunning;\n        }\n    }\n\n    #endregion\n\n    #region Methods\n\n    /// \u003Csummary\u003E\n    /// Closes the \u003Csee cref=\u0022SingleInstanceMutex\u0022/\u003E.\n    /// \u003C/summary\u003E\n    public void Close()\n    {\n        this.ThrowIfDisposed();\n        this.singleInstanceMutex.Close();\n    }\n\n    public void Dispose()\n    {\n        this.Dispose(true);\n        GC.SuppressFinalize(this);\n    }\n\n    private void Dispose(bool disposing)\n    {\n        if (!this.disposed)\n        {\n            /* Release unmanaged ressources */\n\n            if (disposing)\n            {\n                /* Release managed ressources */\n                this.Close();\n            }\n\n            this.disposed = true;\n        }\n    }\n\n    /// \u003Csummary\u003E\n    /// Throws an exception if something is tried to be done with an already disposed object.\n    /// \u003C/summary\u003E\n    /// \u003Cremarks\u003E\n    /// All public methods of the class must first call this.\n    /// \u003C/remarks\u003E\n    public void ThrowIfDisposed()\n    {\n        if (this.disposed)\n        {\n            throw new ObjectDisposedException(this.GetType().Name);\n        }\n    }\n\n    #endregion\n}\n\n    ","\nA new one that uses Mutex and IPC stuff, and also passes any command line arguments to the running instance, is WPF Single Instance Application.\n    ","\nThe code C# .NET Single Instance Application that is the reference for the marked answer is a great start.\n\nHowever, I found it doesn\u0027t handle very well the cases when the instance that already exist has a modal dialog open, whether that dialog is a managed one (like another Form such as an about box), or an unmanaged one (like the OpenFileDialog even when using the standard .NET class). With the original code, the main form is activated, but the modal one stays unactive, which looks strange, plus the user must click on it to keep using the app.\n\nSo, I have create a SingleInstance utility class to handle all this quite automatically for Winforms and WPF applications.\n\nWinforms:\n\n1) modify the Program class like this:\n\nstatic class Program\n{\n    public static readonly SingleInstance Singleton = new SingleInstance(typeof(Program).FullName);\n\n    [STAThread]\n    static void Main(string[] args)\n    {\n        // NOTE: if this always return false, close \u0026 restart Visual Studio\n        // this is probably due to the vshost.exe thing\n        Singleton.RunFirstInstance(() =\u003E\n        {\n            SingleInstanceMain(args);\n        });\n    }\n\n    public static void SingleInstanceMain(string[] args)\n    {\n        // standard code that was in Main now goes here\n        Application.EnableVisualStyles();\n        Application.SetCompatibleTextRenderingDefault(false);\n        Application.Run(new Form1());\n    }\n}\n\n\n2) modify the main window class like this:\n\npublic partial class Form1 : Form\n{\n    public Form1()\n    {\n        InitializeComponent();\n    }\n\n    protected override void WndProc(ref Message m)\n    {\n        // if needed, the singleton will restore this window\n        Program.Singleton.OnWndProc(this, m, true);\n\n        // TODO: handle specific messages here if needed\n        base.WndProc(ref m);\n    }\n}\n\n\nWPF:\n\n1) modify the App page like this (and make sure you set its build action to page to be able to redefine the Main method):\n\npublic partial class App : Application\n{\n    public static readonly SingleInstance Singleton = new SingleInstance(typeof(App).FullName);\n\n    [STAThread]\n    public static void Main(string[] args)\n    {\n        // NOTE: if this always return false, close \u0026 restart Visual Studio\n        // this is probably due to the vshost.exe thing\n        Singleton.RunFirstInstance(() =\u003E\n        {\n            SingleInstanceMain(args);\n        });\n    }\n\n    public static void SingleInstanceMain(string[] args)\n    {\n        // standard code that was in Main now goes here\n        App app = new App();\n        app.InitializeComponent();\n        app.Run();\n    }\n}\n\n\n2) modify the main window class like this:\n\npublic partial class MainWindow : Window\n{\n    private HwndSource _source;\n\n    public MainWindow()\n    {\n        InitializeComponent();\n    }\n\n    protected override void OnSourceInitialized(EventArgs e)\n    {\n        base.OnSourceInitialized(e);\n        _source = (HwndSource)PresentationSource.FromVisual(this);\n        _source.AddHook(HwndSourceHook);\n    }\n\n    protected virtual IntPtr HwndSourceHook(IntPtr hwnd, int msg, IntPtr wParam, IntPtr lParam, ref bool handled)\n    {\n        // if needed, the singleton will restore this window\n        App.Singleton.OnWndProc(hwnd, msg, wParam, lParam, true, true);\n\n        // TODO: handle other specific message\n        return IntPtr.Zero;\n    }\n\n\nAnd here is the utility class:\n\nusing System;\nusing System.ComponentModel;\nusing System.Runtime.InteropServices;\nusing System.Threading;\n\nnamespace SingleInstanceUtilities\n{\n    public sealed class SingleInstance\n    {\n        private const int HWND_BROADCAST = 0xFFFF;\n\n        [DllImport(\u0022user32.dll\u0022)]\n        private static extern bool PostMessage(IntPtr hwnd, int msg, IntPtr wparam, IntPtr lparam);\n\n        [DllImport(\u0022user32.dll\u0022, CharSet = CharSet.Unicode)]\n        private static extern int RegisterWindowMessage(string message);\n\n        [DllImport(\u0022user32.dll\u0022)]\n        private static extern bool SetForegroundWindow(IntPtr hWnd);\n\n        public SingleInstance(string uniqueName)\n        {\n            if (uniqueName == null)\n                throw new ArgumentNullException(\u0022uniqueName\u0022);\n\n            Mutex = new Mutex(true, uniqueName);\n            Message = RegisterWindowMessage(\u0022WM_\u0022 \u002B uniqueName);\n        }\n\n        public Mutex Mutex { get; private set; }\n        public int Message { get; private set; }\n\n        public void RunFirstInstance(Action action)\n        {\n            RunFirstInstance(action, IntPtr.Zero, IntPtr.Zero);\n        }\n\n        // NOTE: if this always return false, close \u0026 restart Visual Studio\n        // this is probably due to the vshost.exe thing\n        public void RunFirstInstance(Action action, IntPtr wParam, IntPtr lParam)\n        {\n            if (action == null)\n                throw new ArgumentNullException(\u0022action\u0022);\n\n            if (WaitForMutext(wParam, lParam))\n            {\n                try\n                {\n                    action();\n                }\n                finally\n                {\n                    ReleaseMutex();\n                }\n            }\n        }\n\n        public static void ActivateWindow(IntPtr hwnd)\n        {\n            if (hwnd == IntPtr.Zero)\n                return;\n\n            FormUtilities.ActivateWindow(FormUtilities.GetModalWindow(hwnd));\n        }\n\n        public void OnWndProc(IntPtr hwnd, int m, IntPtr wParam, IntPtr lParam, bool restorePlacement, bool activate)\n        {\n            if (m == Message)\n            {\n                if (restorePlacement)\n                {\n                    WindowPlacement placement = WindowPlacement.GetPlacement(hwnd, false);\n                    if (placement.IsValid \u0026\u0026 placement.IsMinimized)\n                    {\n                        const int SW_SHOWNORMAL = 1;\n                        placement.ShowCmd = SW_SHOWNORMAL;\n                        placement.SetPlacement(hwnd);\n                    }\n                }\n\n                if (activate)\n                {\n                    SetForegroundWindow(hwnd);\n                    FormUtilities.ActivateWindow(FormUtilities.GetModalWindow(hwnd));\n                }\n            }\n        }\n\n#if WINFORMS // define this for Winforms apps\n        public void OnWndProc(System.Windows.Forms.Form form, int m, IntPtr wParam, IntPtr lParam, bool activate)\n        {\n            if (form == null)\n                throw new ArgumentNullException(\u0022form\u0022);\n\n            if (m == Message)\n            {\n                if (activate)\n                {\n                    if (form.WindowState == System.Windows.Forms.FormWindowState.Minimized)\n                    {\n                        form.WindowState = System.Windows.Forms.FormWindowState.Normal;\n                    }\n\n                    form.Activate();\n                    FormUtilities.ActivateWindow(FormUtilities.GetModalWindow(form.Handle));\n                }\n            }\n        }\n\n        public void OnWndProc(System.Windows.Forms.Form form, System.Windows.Forms.Message m, bool activate)\n        {\n            if (form == null)\n                throw new ArgumentNullException(\u0022form\u0022);\n\n            OnWndProc(form, m.Msg, m.WParam, m.LParam, activate);\n        }\n#endif\n\n        public void ReleaseMutex()\n        {\n            Mutex.ReleaseMutex();\n        }\n\n        public bool WaitForMutext(bool force, IntPtr wParam, IntPtr lParam)\n        {\n            bool b = PrivateWaitForMutext(force);\n            if (!b)\n            {\n                PostMessage((IntPtr)HWND_BROADCAST, Message, wParam, lParam);\n            }\n            return b;\n        }\n\n        public bool WaitForMutext(IntPtr wParam, IntPtr lParam)\n        {\n            return WaitForMutext(false, wParam, lParam);\n        }\n\n        private bool PrivateWaitForMutext(bool force)\n        {\n            if (force)\n                return true;\n\n            try\n            {\n                return Mutex.WaitOne(TimeSpan.Zero, true);\n            }\n            catch (AbandonedMutexException)\n            {\n                return true;\n            }\n        }\n    }\n\n    // NOTE: don\u0027t add any field or public get/set property, as this must exactly map to Windows\u0027 WINDOWPLACEMENT structure\n    [StructLayout(LayoutKind.Sequential)]\n    public struct WindowPlacement\n    {\n        public int Length { get; set; }\n        public int Flags { get; set; }\n        public int ShowCmd { get; set; }\n        public int MinPositionX { get; set; }\n        public int MinPositionY { get; set; }\n        public int MaxPositionX { get; set; }\n        public int MaxPositionY { get; set; }\n        public int NormalPositionLeft { get; set; }\n        public int NormalPositionTop { get; set; }\n        public int NormalPositionRight { get; set; }\n        public int NormalPositionBottom { get; set; }\n\n        [DllImport(\u0022user32.dll\u0022, SetLastError = true)]\n        private static extern bool SetWindowPlacement(IntPtr hWnd, ref WindowPlacement lpwndpl);\n\n        [DllImport(\u0022user32.dll\u0022, SetLastError = true)]\n        private static extern bool GetWindowPlacement(IntPtr hWnd, ref WindowPlacement lpwndpl);\n\n        private const int SW_SHOWMINIMIZED = 2;\n\n        public bool IsMinimized\n        {\n            get\n            {\n                return ShowCmd == SW_SHOWMINIMIZED;\n            }\n        }\n\n        public bool IsValid\n        {\n            get\n            {\n                return Length == Marshal.SizeOf(typeof(WindowPlacement));\n            }\n        }\n\n        public void SetPlacement(IntPtr windowHandle)\n        {\n            SetWindowPlacement(windowHandle, ref this);\n        }\n\n        public static WindowPlacement GetPlacement(IntPtr windowHandle, bool throwOnError)\n        {\n            WindowPlacement placement = new WindowPlacement();\n            if (windowHandle == IntPtr.Zero)\n                return placement;\n\n            placement.Length = Marshal.SizeOf(typeof(WindowPlacement));\n            if (!GetWindowPlacement(windowHandle, ref placement))\n            {\n                if (throwOnError)\n                    throw new Win32Exception(Marshal.GetLastWin32Error());\n\n                return new WindowPlacement();\n            }\n            return placement;\n        }\n    }\n\n    public static class FormUtilities\n    {\n        [DllImport(\u0022user32.dll\u0022)]\n        private static extern IntPtr GetWindow(IntPtr hWnd, int uCmd);\n\n        [DllImport(\u0022user32.dll\u0022, SetLastError = true)]\n        private static extern IntPtr SetActiveWindow(IntPtr hWnd);\n\n        [DllImport(\u0022user32.dll\u0022)]\n        private static extern bool IsWindowVisible(IntPtr hWnd);\n\n        [DllImport(\u0022kernel32.dll\u0022)]\n        public static extern int GetCurrentThreadId();\n\n        private delegate bool EnumChildrenCallback(IntPtr hwnd, IntPtr lParam);\n\n        [DllImport(\u0022user32.dll\u0022)]\n        private static extern bool EnumThreadWindows(int dwThreadId, EnumChildrenCallback lpEnumFunc, IntPtr lParam);\n\n        private class ModalWindowUtil\n        {\n            private const int GW_OWNER = 4;\n            private int _maxOwnershipLevel;\n            private IntPtr _maxOwnershipHandle;\n\n            private bool EnumChildren(IntPtr hwnd, IntPtr lParam)\n            {\n                int level = 1;\n                if (IsWindowVisible(hwnd) \u0026\u0026 IsOwned(lParam, hwnd, ref level))\n                {\n                    if (level \u003E _maxOwnershipLevel)\n                    {\n                        _maxOwnershipHandle = hwnd;\n                        _maxOwnershipLevel = level;\n                    }\n                }\n                return true;\n            }\n\n            private static bool IsOwned(IntPtr owner, IntPtr hwnd, ref int level)\n            {\n                IntPtr o = GetWindow(hwnd, GW_OWNER);\n                if (o == IntPtr.Zero)\n                    return false;\n\n                if (o == owner)\n                    return true;\n\n                level\u002B\u002B;\n                return IsOwned(owner, o, ref level);\n            }\n\n            public static void ActivateWindow(IntPtr hwnd)\n            {\n                if (hwnd != IntPtr.Zero)\n                {\n                    SetActiveWindow(hwnd);\n                }\n            }\n\n            public static IntPtr GetModalWindow(IntPtr owner)\n            {\n                ModalWindowUtil util = new ModalWindowUtil();\n                EnumThreadWindows(GetCurrentThreadId(), util.EnumChildren, owner);\n                return util._maxOwnershipHandle; // may be IntPtr.Zero\n            }\n        }\n\n        public static void ActivateWindow(IntPtr hwnd)\n        {\n            ModalWindowUtil.ActivateWindow(hwnd);\n        }\n\n        public static IntPtr GetModalWindow(IntPtr owner)\n        {\n            return ModalWindowUtil.GetModalWindow(owner);\n        }\n    }\n}\n\n    ","\nHere is an example that allows you to have a single instance of an application. When any new instances load, they pass their arguments to the main instance that is running.\n\npublic partial class App : Application\n{\n    private static Mutex SingleMutex;\n    public static uint MessageId;\n\n    private void Application_Startup(object sender, StartupEventArgs e)\n    {\n        IntPtr Result;\n        IntPtr SendOk;\n        Win32.COPYDATASTRUCT CopyData;\n        string[] Args;\n        IntPtr CopyDataMem;\n        bool AllowMultipleInstances = false;\n\n        Args = Environment.GetCommandLineArgs();\n\n        // TODO: Replace {00000000-0000-0000-0000-000000000000} with your application\u0027s GUID\n        MessageId   = Win32.RegisterWindowMessage(\u0022{00000000-0000-0000-0000-000000000000}\u0022);\n        SingleMutex = new Mutex(false, \u0022AppName\u0022);\n\n        if ((AllowMultipleInstances) || (!AllowMultipleInstances \u0026\u0026 SingleMutex.WaitOne(1, true)))\n        {\n            new Main();\n        }\n        else if (Args.Length \u003E 1)\n        {\n            foreach (Process Proc in Process.GetProcesses())\n            {\n                SendOk = Win32.SendMessageTimeout(Proc.MainWindowHandle, MessageId, IntPtr.Zero, IntPtr.Zero,\n                    Win32.SendMessageTimeoutFlags.SMTO_BLOCK | Win32.SendMessageTimeoutFlags.SMTO_ABORTIFHUNG,\n                    2000, out Result);\n\n                if (SendOk == IntPtr.Zero)\n                    continue;\n                if ((uint)Result != MessageId)\n                    continue;\n\n                CopyDataMem = Marshal.AllocHGlobal(Marshal.SizeOf(typeof(Win32.COPYDATASTRUCT)));\n\n                CopyData.dwData = IntPtr.Zero;\n                CopyData.cbData = Args[1].Length*2;\n                CopyData.lpData = Marshal.StringToHGlobalUni(Args[1]);\n\n                Marshal.StructureToPtr(CopyData, CopyDataMem, false);\n\n                Win32.SendMessageTimeout(Proc.MainWindowHandle, Win32.WM_COPYDATA, IntPtr.Zero, CopyDataMem,\n                    Win32.SendMessageTimeoutFlags.SMTO_BLOCK | Win32.SendMessageTimeoutFlags.SMTO_ABORTIFHUNG,\n                    5000, out Result);\n\n                Marshal.FreeHGlobal(CopyData.lpData);\n                Marshal.FreeHGlobal(CopyDataMem);\n            }\n\n            Shutdown(0);\n        }\n    }\n}\n\npublic partial class Main : Window\n{\n    private void Window_Loaded(object sender, RoutedEventArgs e)\n    {\n        HwndSource Source;\n\n        Source = HwndSource.FromHwnd(new WindowInteropHelper(this).Handle);\n        Source.AddHook(new HwndSourceHook(Window_Proc));\n    }\n\n    private IntPtr Window_Proc(IntPtr hWnd, int Msg, IntPtr wParam, IntPtr lParam, ref bool Handled)\n    {\n        Win32.COPYDATASTRUCT CopyData;\n        string Path;\n\n        if (Msg == Win32.WM_COPYDATA)\n        {\n            CopyData = (Win32.COPYDATASTRUCT)Marshal.PtrToStructure(lParam, typeof(Win32.COPYDATASTRUCT));\n            Path = Marshal.PtrToStringUni(CopyData.lpData, CopyData.cbData / 2);\n\n            if (WindowState == WindowState.Minimized)\n            {\n                // Restore window from tray\n            }\n\n            // Do whatever we want with information\n\n            Activate();\n            Focus();\n        }\n\n        if (Msg == App.MessageId)\n        {\n            Handled = true;\n            return new IntPtr(App.MessageId);\n        }\n\n        return IntPtr.Zero;\n    }\n}\n\npublic class Win32\n{\n    public const uint WM_COPYDATA = 0x004A;\n\n    public struct COPYDATASTRUCT\n    {\n        public IntPtr dwData;\n        public int    cbData;\n        public IntPtr lpData;\n    }\n\n    [Flags]\n    public enum SendMessageTimeoutFlags : uint\n    {\n        SMTO_NORMAL             = 0x0000,\n        SMTO_BLOCK              = 0x0001,\n        SMTO_ABORTIFHUNG        = 0x0002,\n        SMTO_NOTIMEOUTIFNOTHUNG = 0x0008\n    }\n\n    [DllImport(\u0022user32.dll\u0022, SetLastError=true, CharSet=CharSet.Auto)]\n    public static extern uint RegisterWindowMessage(string lpString);\n    [DllImport(\u0022user32.dll\u0022)]\n    public static extern IntPtr SendMessageTimeout(\n        IntPtr hWnd, uint Msg, IntPtr wParam, IntPtr lParam,\n        SendMessageTimeoutFlags fuFlags, uint uTimeout, out IntPtr lpdwResult);\n}\n\n    ","\nJust some thoughts:\nThere are cases when requiring that only one instance of an application is not \u0022lame\u0022 as some would have you believe. Database apps, etc. are an order of magnitude more difficult if one allows multiple instances of the app for a single user to access a database (you know, all that updating all the records that are open in multiple instances of the app on the users machine, etc.). \nFirst, for the \u0022name collision thing, don\u0027t use a human readable name - use a GUID instead or, even better a GUID \u002B the human readable name. Chances of name collision just dropped off the radar and the Mutex doesn\u0027t care. As someone pointed out, a DOS attack would suck, but if the malicious person has gone to the trouble of getting the mutex name and incorporating it into their app, you are pretty much a target anyway and will have to do MUCH more to protect yourself than just fiddle a mutex name.\nAlso, if one uses the variant of:\nnew Mutex(true, \u0022some GUID plus Name\u0022, out AIsFirstInstance), you already have your indicator as to whether or not the Mutex is the first instance.\n    ","\nSo many answers to such a seemingly simple question.  Just to shake things up a little bit here is my solution to this problem.\n\nCreating a Mutex can be troublesome because the JIT-er only sees you using it for a small portion of your code and wants to mark it as ready for garbage collection.  It pretty much wants to out-smart you thinking you are not going to be using that Mutex for that long.  In reality you want to hang onto this Mutex for as long as your application is running.  The best way to tell the garbage collector to leave you Mutex alone is to tell it to keep it alive though out the different generations of garage collection.  Example:\n\nvar m = new Mutex(...);\n...\nGC.KeepAlive(m);\n\n\nI lifted the idea from this page: http://www.ai.uga.edu/~mc/SingleInstance.html\n    ","\nIt looks like there is a really good way to handle this:\n\nWPF Single Instance Application\n\nThis provides a class you can add that manages all the mutex and messaging cruff to simplify the your implementation to the point where it\u0027s simply trivial.\n    ","\nThe following code is my WCF named pipes solution to register a single-instance application. It\u0027s nice because it also raises an event when another instance attempts to start, and receives the command line of the other instance.\n\nIt\u0027s geared toward WPF because it uses the System.Windows.StartupEventHandler class, but this could be easily modified.\n\nThis code requires a reference to PresentationFramework, and System.ServiceModel.\n\nUsage:\n\nclass Program\n{\n    static void Main()\n    {\n        var applicationId = new Guid(\u0022b54f7b0d-87f9-4df9-9686-4d8fd76066dc\u0022);\n\n        if (SingleInstanceManager.VerifySingleInstance(applicationId))\n        {\n            SingleInstanceManager.OtherInstanceStarted \u002B= OnOtherInstanceStarted;\n\n            // Start the application\n        }\n    }\n\n    static void OnOtherInstanceStarted(object sender, StartupEventArgs e)\n    {\n        // Do something in response to another instance starting up.\n    }\n}\n\n\nSource Code:\n\n/// \u003Csummary\u003E\n/// A class to use for single-instance applications.\n/// \u003C/summary\u003E\npublic static class SingleInstanceManager\n{\n  /// \u003Csummary\u003E\n  /// Raised when another instance attempts to start up.\n  /// \u003C/summary\u003E\n  public static event StartupEventHandler OtherInstanceStarted;\n\n  /// \u003Csummary\u003E\n  /// Checks to see if this instance is the first instance running on this machine.  If it is not, this method will\n  /// send the main instance this instance\u0027s startup information.\n  /// \u003C/summary\u003E\n  /// \u003Cparam name=\u0022guid\u0022\u003EThe application\u0027s unique identifier.\u003C/param\u003E\n  /// \u003Creturns\u003ETrue if this instance is the main instance.\u003C/returns\u003E\n  public static bool VerifySingleInstace(Guid guid)\n  {\n    if (!AttemptPublishService(guid))\n    {\n      NotifyMainInstance(guid);\n\n      return false;\n    }\n\n    return true;\n  }\n\n  /// \u003Csummary\u003E\n  /// Attempts to publish the service.\n  /// \u003C/summary\u003E\n  /// \u003Cparam name=\u0022guid\u0022\u003EThe application\u0027s unique identifier.\u003C/param\u003E\n  /// \u003Creturns\u003ETrue if the service was published successfully.\u003C/returns\u003E\n  private static bool AttemptPublishService(Guid guid)\n  {\n    try\n    {\n      ServiceHost serviceHost = new ServiceHost(typeof(SingleInstance));\n      NetNamedPipeBinding binding = new NetNamedPipeBinding(NetNamedPipeSecurityMode.None);\n      serviceHost.AddServiceEndpoint(typeof(ISingleInstance), binding, CreateAddress(guid));\n      serviceHost.Open();\n\n      return true;\n    }\n    catch\n    {\n      return false;\n    }\n  }\n\n  /// \u003Csummary\u003E\n  /// Notifies the main instance that this instance is attempting to start up.\n  /// \u003C/summary\u003E\n  /// \u003Cparam name=\u0022guid\u0022\u003EThe application\u0027s unique identifier.\u003C/param\u003E\n  private static void NotifyMainInstance(Guid guid)\n  {\n    NetNamedPipeBinding binding = new NetNamedPipeBinding(NetNamedPipeSecurityMode.None);\n    EndpointAddress remoteAddress = new EndpointAddress(CreateAddress(guid));\n    using (ChannelFactory\u003CISingleInstance\u003E factory = new ChannelFactory\u003CISingleInstance\u003E(binding, remoteAddress))\n    {\n      ISingleInstance singleInstance = factory.CreateChannel();\n      singleInstance.NotifyMainInstance(Environment.GetCommandLineArgs());\n    }\n  }\n\n  /// \u003Csummary\u003E\n  /// Creates an address to publish/contact the service at based on a globally unique identifier.\n  /// \u003C/summary\u003E\n  /// \u003Cparam name=\u0022guid\u0022\u003EThe identifier for the application.\u003C/param\u003E\n  /// \u003Creturns\u003EThe address to publish/contact the service.\u003C/returns\u003E\n  private static string CreateAddress(Guid guid)\n  {\n    return string.Format(CultureInfo.CurrentCulture, \u0022net.pipe://localhost/{0}\u0022, guid);\n  }\n\n  /// \u003Csummary\u003E\n  /// The interface that describes the single instance service.\n  /// \u003C/summary\u003E\n  [ServiceContract]\n  private interface ISingleInstance\n  {\n    /// \u003Csummary\u003E\n    /// Notifies the main instance that another instance of the application attempted to start.\n    /// \u003C/summary\u003E\n    /// \u003Cparam name=\u0022args\u0022\u003EThe other instance\u0027s command-line arguments.\u003C/param\u003E\n    [OperationContract]\n    void NotifyMainInstance(string[] args);\n  }\n\n  /// \u003Csummary\u003E\n  /// The implementation of the single instance service interface.\n  /// \u003C/summary\u003E\n  private class SingleInstance : ISingleInstance\n  {\n    /// \u003Csummary\u003E\n    /// Notifies the main instance that another instance of the application attempted to start.\n    /// \u003C/summary\u003E\n    /// \u003Cparam name=\u0022args\u0022\u003EThe other instance\u0027s command-line arguments.\u003C/param\u003E\n    public void NotifyMainInstance(string[] args)\n    {\n      if (OtherInstanceStarted != null)\n      {\n        Type type = typeof(StartupEventArgs);\n        ConstructorInfo constructor = type.GetConstructor(BindingFlags.Instance | BindingFlags.NonPublic, null, Type.EmptyTypes, null);\n        StartupEventArgs e = (StartupEventArgs)constructor.Invoke(null);\n        FieldInfo argsField = type.GetField(\u0022_args\u0022, BindingFlags.Instance | BindingFlags.NonPublic);\n        Debug.Assert(argsField != null);\n        argsField.SetValue(e, args);\n\n        OtherInstanceStarted(null, e);\n      }\n    }\n  }\n}\n\n    ","\nLook at the folllowing code. It is a great and simple solution to prevent multiple instances of a WPF application.\n\nprivate void Application_Startup(object sender, StartupEventArgs e)\n{\n    Process thisProc = Process.GetCurrentProcess();\n    if (Process.GetProcessesByName(thisProc.ProcessName).Length \u003E 1)\n    {\n        MessageBox.Show(\u0022Application running\u0022);\n        Application.Current.Shutdown();\n        return;\n    }\n\n    var wLogin = new LoginWindow();\n\n    if (wLogin.ShowDialog() == true)\n    {\n        var wMain = new Main();\n        wMain.WindowState = WindowState.Maximized;\n        wMain.Show();\n    }\n    else\n    {\n        Application.Current.Shutdown();\n    }\n}\n\n    ","\nHere is what I use. It combined process enumeration to perform switching and mutex to safeguard from \u0022active clickers\u0022:\n\npublic partial class App\n{\n    [DllImport(\u0022user32\u0022)]\n    private static extern int OpenIcon(IntPtr hWnd);\n\n    [DllImport(\u0022user32.dll\u0022)]\n    private static extern bool SetForegroundWindow(IntPtr hWnd);\n\n    protected override void OnStartup(StartupEventArgs e)\n    {\n        base.OnStartup(e);\n        var p = Process\n           .GetProcessesByName(Process.GetCurrentProcess().ProcessName);\n            foreach (var t in p.Where(t =\u003E t.MainWindowHandle != IntPtr.Zero))\n            {\n                OpenIcon(t.MainWindowHandle);\n                SetForegroundWindow(t.MainWindowHandle);\n                Current.Shutdown();\n                return;\n            }\n\n            // there is a chance the user tries to click on the icon repeatedly\n            // and the process cannot be discovered yet\n            bool createdNew;\n            var mutex = new Mutex(true, \u0022MyAwesomeApp\u0022, \n               out createdNew);  // must be a variable, though it is unused - \n            // we just need a bit of time until the process shows up\n            if (!createdNew)\n            {\n                Current.Shutdown();\n                return;\n            }\n\n            new Bootstrapper().Run();\n        }\n    }\n\n    ","\nI found the simpler solution, similar to Dale Ragan\u0027s, but slightly modified. It does practically everything you need and based on the standard Microsoft WindowsFormsApplicationBase class.\n\nFirstly, you create SingleInstanceController class, which you can use in all other single-instance applications, which use Windows Forms:\n\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Windows.Forms;\nusing Microsoft.VisualBasic.ApplicationServices;\n\n\nnamespace SingleInstanceController_NET\n{\n    public class SingleInstanceController\n    : WindowsFormsApplicationBase\n    {\n        public delegate Form CreateMainForm();\n        public delegate void StartNextInstanceDelegate(Form mainWindow);\n        CreateMainForm formCreation;\n        StartNextInstanceDelegate onStartNextInstance;\n        public SingleInstanceController(CreateMainForm formCreation, StartNextInstanceDelegate onStartNextInstance)\n        {\n            // Set whether the application is single instance\n            this.formCreation = formCreation;\n            this.onStartNextInstance = onStartNextInstance;\n            this.IsSingleInstance = true;\n\n            this.StartupNextInstance \u002B= new StartupNextInstanceEventHandler(this_StartupNextInstance);                      \n        }\n\n        void this_StartupNextInstance(object sender, StartupNextInstanceEventArgs e)\n        {\n            if (onStartNextInstance != null)\n            {\n                onStartNextInstance(this.MainForm); // This code will be executed when the user tries to start the running program again,\n                                                    // for example, by clicking on the exe file.\n            }                                       // This code can determine how to re-activate the existing main window of the running application.\n        }\n\n        protected override void OnCreateMainForm()\n        {\n            // Instantiate your main application form\n            this.MainForm = formCreation();\n        }\n\n        public void Run()\n        {\n            string[] commandLine = new string[0];\n            base.Run(commandLine);\n        }\n    }\n}\n\n\nThen you can use it in your program as follows:\n\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Windows.Forms;\nusing SingleInstanceController_NET;\n\nnamespace SingleInstance\n{\n    static class Program\n    {\n        /// \u003Csummary\u003E\n        /// The main entry point for the application.\n        /// \u003C/summary\u003E\n        static Form CreateForm()\n        {\n            return new Form1(); // Form1 is used for the main window.\n        }\n\n        static void OnStartNextInstance(Form mainWindow) // When the user tries to restart the application again,\n                                                         // the main window is activated again.\n        {\n            mainWindow.WindowState = FormWindowState.Maximized;\n        }\n        [STAThread]\n        static void Main()\n        {\n            Application.EnableVisualStyles();\n            Application.SetCompatibleTextRenderingDefault(false);            \n            SingleInstanceController controller = new SingleInstanceController(CreateForm, OnStartNextInstance);\n            controller.Run();         \n        }\n    }\n}\n\n\nBoth the program and the SingleInstanceController_NET solution should reference Microsoft.VisualBasic . If you just want to reactivate the running application as a normal window when the user tries to restart the running program, the second parameter in the SingleInstanceController can be null. In the given example, the window is maximized.\n    ","\nYou should never use a named mutex to implement a single-instance application (or at least not for production code). Malicious code can easily DoS (Denial of Service) your ass...\n    ","\nUpdate 2017-01-25. After trying few things, I decided to go with VisualBasic.dll it is easier and works better (at least for me). I let my previous answer just as reference...\n\nJust as reference, this is how I did without passing arguments (which I can\u0027t find any reason to do so... I mean a single app with arguments that as to be passed out from one instance to another one).\nIf file association is required, then an app should (per users standard expectation) be instanciated for each doc. If you have to pass args to existing app, I  think I would used vb dll.\n\nNot passing args (just single instance app), I prefer not registering a new Window message and not override the message loop as defined in Matt Davis Solution. Although it\u0027s not a big deal to add a VisualBasic dll, but I prefer not add a new reference just to do single instance app. Also, I do prefer instanciate a new class with Main instead of calling Shutdown from App.Startup override to ensure to exit as soon as possible.\n\nIn hope that anybody will like it... or will inspire a little bit :-) \n\nProject startup class should be set as \u0027SingleInstanceApp\u0027.\n\npublic class SingleInstanceApp\n{\n    [STAThread]\n    public static void Main(string[] args)\n    {\n        Mutex _mutexSingleInstance = new Mutex(true, \u0022MonitorMeSingleInstance\u0022);\n\n        if (_mutexSingleInstance.WaitOne(TimeSpan.Zero, true))\n        {\n            try\n            {\n                var app = new App();\n                app.InitializeComponent();\n                app.Run();\n\n            }\n            finally\n            {\n                _mutexSingleInstance.ReleaseMutex();\n                _mutexSingleInstance.Close();\n            }\n        }\n        else\n        {\n            MessageBox.Show(\u0022One instance is already running.\u0022);\n\n            var processes = Process.GetProcessesByName(Assembly.GetEntryAssembly().GetName().Name);\n            {\n                if (processes.Length \u003E 1)\n                {\n                    foreach (var process in processes)\n                    {\n                        if (process.Id != Process.GetCurrentProcess().Id)\n                        {\n                            WindowHelper.SetForegroundWindow(process.MainWindowHandle);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n\nWindowHelper:\n\nusing System;\nusing System.Runtime.InteropServices;\nusing System.Windows;\nusing System.Windows.Interop;\nusing System.Windows.Threading;\n\nnamespace HQ.Util.Unmanaged\n{\n    public class WindowHelper\n    {\n        [DllImport(\u0022user32.dll\u0022)]\n        [return: MarshalAs(UnmanagedType.Bool)]\n        public static extern bool SetForegroundWindow(IntPtr hWnd);\n\n    ","\nNot using Mutex though, simple answer:\n\nSystem.Diagnostics;    \n...\nstring thisprocessname = Process.GetCurrentProcess().ProcessName;\n\nif (Process.GetProcesses().Count(p =\u003E p.ProcessName == thisprocessname) \u003E 1)\n                return;\n\n\nPut it inside the Program.Main().\nExample:\n\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing System.Windows.Forms;\nusing System.Diagnostics;\n\nnamespace Sample\n{\n    static class Program\n    {\n        /// \u003Csummary\u003E\n        /// The main entry point for the application.\n        /// \u003C/summary\u003E\n        [STAThread]\n        static void Main()\n        {\n            //simple add Diagnostics namespace, and these 3 lines below \n            string thisprocessname = Process.GetCurrentProcess().ProcessName;\n            if (Process.GetProcesses().Count(p =\u003E p.ProcessName == thisprocessname) \u003E 1)\n                return;\n\n            Application.EnableVisualStyles();\n            Application.SetCompatibleTextRenderingDefault(false);\n            Application.Run(new Sample());\n        }\n    }\n}\n\n\nYou can add MessageBox.Show to the if-statement and put \u0022Application already running\u0022.\nThis might be helpful to someone.\n    ","\nI added a sendMessage Method to the NativeMethods Class.\n\nApparently the postmessage method dosent work, if the application is not show in the taskbar, however using the sendmessage method solves this.\n\nclass NativeMethods\n{\n    public const int HWND_BROADCAST = 0xffff;\n    public static readonly int WM_SHOWME = RegisterWindowMessage(\u0022WM_SHOWME\u0022);\n    [DllImport(\u0022user32\u0022)]\n    public static extern bool PostMessage(IntPtr hwnd, int msg, IntPtr wparam, IntPtr lparam);\n    [DllImport(\u0022user32.dll\u0022, CharSet = CharSet.Auto)]\n    public static extern IntPtr SendMessage(IntPtr hWnd, int Msg, IntPtr wParam, IntPtr lParam);\n    [DllImport(\u0022user32\u0022)]\n    public static extern int RegisterWindowMessage(string message);\n}\n\n    ","\nNamed-mutex-based approaches are not cross-platform because named mutexes are not global in Mono. Process-enumeration-based approaches don\u0027t have any synchronization and may result in incorrect behavior (e.g. multiple processes started at the same time may all self-terminate depending on timing). Windowing-system-based approaches are not desirable in a console application. This solution, built on top of Divin\u0027s answer, addresses all these issues:\n\nusing System;\nusing System.IO;\n\nnamespace TestCs\n{\n    public class Program\n    {\n        // The app id must be unique. Generate a new guid for your application. \n        public static string AppId = \u002201234567-89ab-cdef-0123-456789abcdef\u0022;\n\n        // The stream is stored globally to ensure that it won\u0027t be disposed before the application terminates.\n        public static FileStream UniqueInstanceStream;\n\n        public static int Main(string[] args)\n        {\n            EnsureUniqueInstance();\n\n            // Your code here.\n\n            return 0;\n        }\n\n        private static void EnsureUniqueInstance()\n        {\n            // Note: If you want the check to be per-user, use Environment.SpecialFolder.ApplicationData instead.\n            string lockDir = Path.Combine(\n                Environment.GetFolderPath(Environment.SpecialFolder.CommonApplicationData),\n                \u0022UniqueInstanceApps\u0022);\n            string lockPath = Path.Combine(lockDir, $\u0022{AppId}.unique\u0022);\n\n            Directory.CreateDirectory(lockDir);\n\n            try\n            {\n                // Create the file with exclusive write access. If this fails, then another process is executing.\n                UniqueInstanceStream = File.Open(lockPath, FileMode.Create, FileAccess.Write, FileShare.None);\n\n                // Although only the line above should be sufficient, when debugging with a vshost on Visual Studio\n                // (that acts as a proxy), the IO exception isn\u0027t passed to the application before a Write is executed.\n                UniqueInstanceStream.Write(new byte[] { 0 }, 0, 1);\n                UniqueInstanceStream.Flush();\n            }\n            catch\n            {\n                throw new Exception(\u0022Another instance of the application is already running.\u0022);\n            }\n        }\n    }\n}\n\n    ","\nI use Mutex in my solution for preventing multiple instances.\n\nstatic Mutex mutex = null;\n//A string that is the name of the mutex\nstring mutexName = @\u0022Global\\test\u0022;\n//Prevent Multiple Instances of Application\nbool onlyInstance = false;\nmutex = new Mutex(true, mutexName, out onlyInstance);\n\nif (!onlyInstance)\n{\n  MessageBox.Show(\u0022You are already running this application in your system.\u0022, \u0022Already Running..\u0022, MessageBoxButton.OK);\n  Application.Current.Shutdown();\n}\n\n    ","\nUse mutex solution:\n\nusing System;\nusing System.Windows.Forms;\nusing System.Threading;\n\nnamespace OneAndOnlyOne\n{\nstatic class Program\n{\n    static String _mutexID = \u0022 // generate guid\u0022\n    /// \u003Csummary\u003E\n    /// The main entry point for the application.\n    /// \u003C/summary\u003E\n    [STAThread]\n    static void Main()\n    {\n        Application.EnableVisualStyles();\n        Application.SetCompatibleTextRenderingDefault(false);\n\n        Boolean _isNotRunning;\n        using (Mutex _mutex = new Mutex(true, _mutexID, out _isNotRunning))\n        {\n            if (_isNotRunning)\n            {\n                Application.Run(new Form1());\n            }\n            else\n            {\n                MessageBox.Show(\u0022An instance is already running.\u0022);\n                return;\n            }\n        }\n    }\n}\n}\n\n    ","\nHere\u0027s a lightweight solution I use which allows the application to bring an already existing window to the foreground without resorting to custom windows messages or blindly searching process names.\n\n[DllImport(\u0022user32.dll\u0022)]\nstatic extern bool SetForegroundWindow(IntPtr hWnd);\n\nstatic readonly string guid = \u0022\u003CApplication Guid\u003E\u0022;\n\nstatic void Main()\n{\n    Mutex mutex = null;\n    if (!CreateMutex(out mutex))\n        return;\n\n    // Application startup code.\n\n    Environment.SetEnvironmentVariable(guid, null, EnvironmentVariableTarget.User);\n}\n\nstatic bool CreateMutex(out Mutex mutex)\n{\n    bool createdNew = false;\n    mutex = new Mutex(false, guid, out createdNew);\n\n    if (createdNew)\n    {\n        Process process = Process.GetCurrentProcess();\n        string value = process.Id.ToString();\n\n        Environment.SetEnvironmentVariable(guid, value, EnvironmentVariableTarget.User);\n    }\n    else\n    {\n        string value = Environment.GetEnvironmentVariable(guid, EnvironmentVariableTarget.User);\n        Process process = null;\n        int processId = -1;\n\n        if (int.TryParse(value, out processId))\n            process = Process.GetProcessById(processId);\n\n        if (process == null || !SetForegroundWindow(process.MainWindowHandle))\n            MessageBox.Show(\u0022Unable to start application. An instance of this application is already running.\u0022);\n    }\n\n    return createdNew;\n}\n\n\nEdit: You can also store and initialize mutex and createdNew statically, but you\u0027ll need to explicitly dispose/release the mutex once you\u0027re done with it. Personally, I prefer keeping the mutex local as it will be automatically disposed of even if the application closes without ever reaching the end of Main.\n    ","\nYou can also use the CodeFluent Runtime which is free set of tools. It provides a SingleInstance class to implement a single instance application.\n    ","\nHere\u0027s the same thing implemented via Event.\n\npublic enum ApplicationSingleInstanceMode\n{\n    CurrentUserSession,\n    AllSessionsOfCurrentUser,\n    Pc\n}\n\npublic class ApplicationSingleInstancePerUser: IDisposable\n{\n    private readonly EventWaitHandle _event;\n\n    /// \u003Csummary\u003E\n    /// Shows if the current instance of ghost is the first\n    /// \u003C/summary\u003E\n    public bool FirstInstance { get; private set; }\n\n    /// \u003Csummary\u003E\n    /// Initializes \n    /// \u003C/summary\u003E\n    /// \u003Cparam name=\u0022applicationName\u0022\u003EThe application name\u003C/param\u003E\n    /// \u003Cparam name=\u0022mode\u0022\u003EThe single mode\u003C/param\u003E\n    public ApplicationSingleInstancePerUser(string applicationName, ApplicationSingleInstanceMode mode = ApplicationSingleInstanceMode.CurrentUserSession)\n    {\n        string name;\n        if (mode == ApplicationSingleInstanceMode.CurrentUserSession)\n            name = $\u0022Local\\\\{applicationName}\u0022;\n        else if (mode == ApplicationSingleInstanceMode.AllSessionsOfCurrentUser)\n            name = $\u0022Global\\\\{applicationName}{Environment.UserDomainName}\u0022;\n        else\n            name = $\u0022Global\\\\{applicationName}\u0022;\n\n        try\n        {\n            bool created;\n            _event = new EventWaitHandle(false, EventResetMode.ManualReset, name, out created);\n            FirstInstance = created;\n        }\n        catch\n        {\n        }\n    }\n\n    public void Dispose()\n    {\n        _event.Dispose();\n    }\n}\n\n    ","\n[I have provided sample code for console and wpf applications below.]\n\nYou only have to check the value of the createdNew variable (example below!), after you create the named Mutex instance.\n\nThe boolean createdNew will return false:\n\n\n  if the Mutex instance named \u0022YourApplicationNameHere\u0022 was already\n  created on the system somewhere \n\n\nThe boolean createdNew will return true:\n\n\n  if this is the first Mutex named \u0022YourApplicationNameHere\u0022 on the\n  system.\n\n\n\nConsole application - Example:\n\nstatic Mutex m = null;\n\nstatic void Main(string[] args)\n{\n    const string mutexName = \u0022YourApplicationNameHere\u0022;\n    bool createdNew = false;\n\n    try\n    {\n        // Initializes a new instance of the Mutex class with a Boolean value that indicates \n        // whether the calling thread should have initial ownership of the mutex, a string that is the name of the mutex, \n        // and a Boolean value that, when the method returns, indicates whether the calling thread was granted initial ownership of the mutex.\n\n        using (m = new Mutex(true, mutexName, out createdNew))\n        {\n            if (!createdNew)\n            {\n                Console.WriteLine(\u0022instance is alreday running... shutting down !!!\u0022);\n                Console.Read();\n                return; // Exit the application\n            }\n\n            // Run your windows forms app here\n            Console.WriteLine(\u0022Single instance app is running!\u0022);\n            Console.ReadLine();\n        }\n\n\n    }\n    catch (Exception ex)\n    {\n\n        Console.WriteLine(ex.Message);\n        Console.ReadLine();\n    }\n}\n\n\nWPF-Example:\n\npublic partial class App : Application\n{\nstatic Mutex m = null;\n\nprotected override void OnStartup(StartupEventArgs e)\n{\n\n    const string mutexName = \u0022YourApplicationNameHere\u0022;\n    bool createdNew = false;\n\n    try\n    {\n        // Initializes a new instance of the Mutex class with a Boolean value that indicates \n        // whether the calling thread should have initial ownership of the mutex, a string that is the name of the mutex, \n        // and a Boolean value that, when the method returns, indicates whether the calling thread was granted initial ownership of the mutex.\n\n        m = new Mutex(true, mutexName, out createdNew);\n\n        if (!createdNew)\n        {\n            Current.Shutdown(); // Exit the application\n        }\n\n    }\n    catch (Exception)\n    {\n        throw;\n    }\n\n    base.OnStartup(e);\n}\n\n\nprotected override void OnExit(ExitEventArgs e)\n{\n    if (m != null)\n    {\n        m.Dispose();\n    }\n    base.OnExit(e);\n}\n}\n\n    ","\nA time saving solution for C# Winforms...\n\nProgram.cs:\n\nusing System;\nusing System.Windows.Forms;\n// needs reference to Microsoft.VisualBasic\nusing Microsoft.VisualBasic.ApplicationServices;  \n\nnamespace YourNamespace\n{\n    public class SingleInstanceController : WindowsFormsApplicationBase\n    {\n        public SingleInstanceController()\n        {\n            this.IsSingleInstance = true;\n        }\n\n        protected override void OnStartupNextInstance(StartupNextInstanceEventArgs e)\n        {\n            e.BringToForeground = true;\n            base.OnStartupNextInstance(e);\n        }\n\n        protected override void OnCreateMainForm()\n        {\n            this.MainForm = new Form1();\n        }\n    }\n\n    static class Program\n    {\n        [STAThread]\n        static void Main()\n        {\n            Application.EnableVisualStyles();\n            Application.SetCompatibleTextRenderingDefault(false);\n            string[] args = Environment.GetCommandLineArgs();\n            SingleInstanceController controller = new SingleInstanceController();\n            controller.Run(args);\n        }\n    }\n}\n\n    ","\nPlease check the proposed solution from here that uses a semaphore to determine if an existing instance is already running, works for a WPF application and can pass arguments from second instance to the first already running instance by using a TcpListener and a TcpClient:\n\nIt works also for .NET Core, not only for .NET Framework.\n    ","\nI can\u0027t find a short solution here so I hope someone will like this:\n\nUPDATED 2018-09-20\n\nPut this code in your Program.cs:\n\nusing System.Diagnostics;\n\nstatic void Main()\n{\n    Process thisProcess = Process.GetCurrentProcess();\n    Process[] allProcesses = Process.GetProcessesByName(thisProcess.ProcessName);\n    if (allProcesses.Length \u003E 1)\n    {\n        // Don\u0027t put a MessageBox in here because the user could spam this MessageBox.\n        return;\n    }\n\n    // Optional code. If you don\u0027t want that someone runs your \u0022.exe\u0022 with a different name:\n\n    string exeName = AppDomain.CurrentDomain.FriendlyName;\n    // in debug mode, don\u0027t forget that you don\u0027t use your normal .exe name.\n    // Debug uses the .vshost.exe.\n    if (exeName != \u0022the name of your executable.exe\u0022) \n    {\n        // You can add a MessageBox here if you want.\n        // To point out to users that the name got changed and maybe what the name should be or something like that^^ \n        MessageBox.Show(\u0022The executable name should be \\\u0022the name of your executable.exe\\\u0022\u0022, \n            \u0022Wrong executable name\u0022, MessageBoxButtons.OK, MessageBoxIcon.Error);\n        return;\n    }\n\n    // Following code is default code:\n    Application.EnableVisualStyles();\n    Application.SetCompatibleTextRenderingDefault(false);\n    Application.Run(new MainForm());\n}\n\n    ","\n                \n                On the basis that this answer uses less code and less libraries and provides the raise to top functionality, I\u0027m going to make this the new accepted answer. If anyone knows a more correct way to bring the form to the top using API\u0027s, feel free to add that.\n                \n\u2013\u00A0Nidonocu\n                Feb 9 \u002709 at 2:11\n            ","\n                \n                @BlueRaja, you start up the first app instance.  When you start up the second app instance, it detects that another instance is already running and prepares to shutdown.  Before doing so, it sends a \u0022SHOWME\u0022 native message to the first instance, which brings the first instance to the top.  Events in .NET don\u0027t allow cross-process communication, which is why the native message is used.\n                \n\u2013\u00A0Matt Davis\n                May 28 \u002710 at 21:01\n            ","\n                \n                Is there a way to pass the command lines from the other instance, maybe?\n                \n\u2013\u00A0gyurisc\n                Jun 1 \u002710 at 6:26\n            ","\n                \n                @Nam, the Mutex constructor simply requires a string, so you could supply any string name you want, e.g., \u0022This Is My Mutex\u0022.  Because a \u0027Mutex\u0027 is a system object that is available to other processes, you typically want the name to be unique so it doesn\u0027t clash with other \u0027Mutex\u0027 names on the same system.  In the article, the cryptic-looking string is a \u0027Guid\u0027.  You can generate this programmatically by calling System.Guid.NewGuid().  In the case of the article, the user probably generated it via Visual Studio as shown here:  msdn.microsoft.com/en-us/library/ms241442(VS.80).aspx\n                \n\u2013\u00A0Matt Davis\n                Oct 19 \u002710 at 14:51\n            ","\n                \n                Does the mutex approach assume that the same user is attempting to start the application again? Certainly bringing \u0022the existing instance of the application to the foreground\u0022 does not make sense after a \u0027switch user\u0027\n                \n\u2013\u00A0dumbledad\n                Aug 7 \u002712 at 14:46\n            ","\n                \n                I\u0027d stick with the mutex solution because it has nothing to do with forms.\n                \n\u2013\u00A0Steven Sudit\n                Jul 13 \u002709 at 5:26\n            ","\n                \n                I\u0027ve used this because I had issues with other approaches, but I\u0027m fairly sure it uses remoting under the hood. My app has had two related issues - some customers say it tries to phone home even though they\u0027ve told it not to. When they look more carefully, the connection is to localhost. Still, they don\u0027t initially know that. Also, I can\u0027t use remoting for a different purpose (I think?) because it\u0027s already being used for this. When I tried the mutex approach, I could then use remoting again.\n                \n\u2013\u00A0Richard Watson\n                Jan 13 \u002711 at 7:47\n            ","\n                \n                Forgive me, but unless I a missing something, you avoided writing 3 lines of code and instead you re-used framework just to write pretty heavy code to do it. So where are the savings?\n                \n\u2013\u00A0greenoldman\n                Aug 13 \u002711 at 15:31\n            ","\n                \n                it\u0027s possible do it in winforms?\n                \n\u2013\u00A0Jack\n                Jun 2 \u002712 at 4:01\n            ","\n                \n                If you don\u0027t call InitializeComponent() on the application instance, you won\u0027t be able to resolve resources...  _application = new SingleInstanceApplication(); _application.InitializeComponent(); _application.Run();\n                \n\u2013\u00A0Nick\n                Jul 25 \u002713 at 14:34\n                        \n                            \n                        \n            ","\n                \n                I\u0027ve got to say, I like this answer a lot more than the accepted one simply due to the fact that it isn\u0027t dependent on WinForms.  Personally most of my development has been moving to WPF and I don\u0027t want to have to pull in WinForm libraries for something like this.\n                \n\u2013\u00A0Switters\n                Oct 27 \u002708 at 18:51\n            ","\n                \n                Of course, to be a full answer, you have to also describe passing the arguments to the other instance :)\n                \n\u2013\u00A0Simon Buchan\n                Nov 28 \u002708 at 5:32\n            ","\n                \n                @Jason, good, thanks! But I prefer not passing any timeout. It is so much subjective and depends on so many variables. If you ever want to enable another app to start, just release your mutex quicker.. for example as soon as the user confirm close\n                \n\u2013\u00A0Eric Ouellet\n                Dec 5 \u002713 at 21:33\n            ","\n                \n                @EricOuellet: Just about every program that has tabs does this - Photoshop, Sublime Text, Chrome .... If you have a good reason to have a \u0022master\u0022 process (say you have a in-proc DB for settings) you might want to have it show UI as if it were a new process too.\n                \n\u2013\u00A0Simon Buchan\n                Dec 6 \u002713 at 12:09\n            ","\n                \n                @Simon, you are right. I just question myself about a very old thing... MDI vs SDI (Multi documentinterface vs Single document interface). When you talk about tabs, you refer to MDI. In 1998, a Microsoft book suggests to eliminate every MDI app. Microsoft switched Word, Excel... to SDI which I think it is simplier and better. I understand that Chrome and others (now IE) want back to MDI. I personnaly (based on nothing / personal feelings) that it is still better to open a new app when file assoc is selected. But I understand better the question asked now. Thanks !\n                \n\u2013\u00A0Eric Ouellet\n                Dec 6 \u002713 at 16:07\n                        \n                            \n                        \n            ","\n                \n                Thank you for including the \u0027take a look at this too\u0027 link.  That\u0027s exactly what I needed.  By the way, solution #3 in your link is the best one.\n                \n\u2013\u00A0Eternal21\n                Nov 16 \u002712 at 19:54\n            ","\n                \n                I am also an advocate of delegating to the framework and specially designed libraries where possible.\n                \n\u2013\u00A0Eniola\n                Jul 14 \u002716 at 8:42\n            ","\n                \n                Also, this won\u0027t work if there\u0027s any other program running on your computer with the same name. ProcessName returns the executable file name minus the exe. If you make an application called \u0022Notepad\u0022, and the windows notepad is running, it\u0027ll detect it as your application running.\n                \n\u2013\u00A0Jcl\n                Jan 26 \u002715 at 8:59\n            ","\n                \n                Thanks for this answer. I have found so many similar questions and the answers were always so elaborate and/or confusing I\u0027ve found them useless. This one (Method #1) is straightforward, clear and most of all it actually helped me make my code run.\n                \n\u2013\u00A0ElDoRado1239\n                May 30 \u002717 at 3:08\n                        \n                            \n                        \n            ","\n                \n                this one was pretty easy to get working. It would not close the second application until I changed Application.Exit(); to a simple return; but other than that its great. Although i admit I am going to look at the previous solution closer since it uses an interface. blogs.microsoft.co.il/blogs/arik/archive/2010/05/28/\u2026\n                \n\u2013\u00A0hal9000\n                Aug 12 \u002711 at 19:10\n                        \n                            \n                        \n            ","\n                \n                I use this with great success. If you incorporate NamedPipes with this, you can also pass command-line arguments to the original application. The class, \u0027SingleInstance.cs\u0027, was written by Microsoft. I have added another link to a more readable version of Arik Poznanski\u0027s blog on CodeProject.\n                \n\u2013\u00A0Riegardt Steyn\n                Feb 26 \u002714 at 12:08\n            ","\n                \n                Link is now broken.\n                \n\u2013\u00A0Mike Lowery\n                Jun 9 at 0:05\n            ","\n                \n                Try this one (same date, same author\u0027s first name, so presumably same article): codeproject.com/articles/84270/wpf-single-instance-application\n                \n\u2013\u00A0Daerst\n                Jun 24 at 8:00\n            ","\n                \n                This is a really nice example of what I what to do. Nathan, are all the args sent using this method? I have 7 or so in my app and i think that this code will work.\n                \n\u2013\u00A0kevp\n                May 30 \u002712 at 16:05\n            ","\n                \n                In my example, only the first argument is sent, but it can be changed so that all of them are sent.\n                \n\u2013\u00A0Nathan Moinvaziri\n                Jun 4 \u002712 at 5:35\n            ","\n                \n                Wouldn\u0027t it be easier to store a shared copy of it in the application class?\n                \n\u2013\u00A0rossisdead\n                May 26 \u002710 at 4:21\n            ","\n                \n                This didn\u0027t seem to bring the existing window to the foreground when I tried it.\n                \n\u2013\u00A0RandomEngy\n                Oct 29 \u002712 at 2:08\n            ","\n                \n                \u0022You should never use a named mutex\u0022 - never say never.  If malicious code is running on my machine, I\u0027m probably already hosed.\n                \n\u2013\u00A0Joe\n                Jul 17 \u002709 at 20:29\n            ","\n                \n                Actually it doesn\u0027t even have to be malicious code. It could just be a accidental name collision.\n                \n\u2013\u00A0Matt Davison\n                Jul 21 \u002709 at 17:52\n            ","\n                \n                Then what should you do?\n                \n\u2013\u00A0Kevin Berridge\n                Oct 23 \u002709 at 21:11\n            ","\n                \n                The better question is what possible reason would you want that behavior. Don\u0027t design your app as a single instance application=). I know that\u0027s a lame answer but from a design standpoint it is almost always the correct answer. Without knowing more about the app its hard to say much more.\n                \n\u2013\u00A0Matt Davison\n                Oct 24 \u002709 at 11:32\n            ","\n                \n                At least under Windows, Mutexes have access control, so one one can toy with your object. As to name collisions themselves, that\u0027s why UUID/GUID\u0027s where invented.\n                \n\u2013\u00A0NuSkooler\n                Oct 12 \u002710 at 16:59\n            ","\n                \n                If two processes start at the same time, they may both see two active processes and self-terminate.\n                \n\u2013\u00A0A.T.\n                Aug 19 \u002717 at 16:51\n            ","\n                \n                @A.T. Yes right, this can also be helpful to apps running as Administrator or else\n                \n\u2013\u00A0newbieguy\n                Aug 21 \u002717 at 22:05\n            ","\n                \n                If you make a copy of your application and rename it, you can run the original and the copy at the same time.\n                \n\u2013\u00A0Dominique Bijnens\n                Jan 25 at 10:23\n            ","\n                \n                This will introduce a race condition. Must use a mutex.\n                \n\u2013\u00A0georgiosd\n                Sep 17 \u002718 at 14:45\n            ","\n                \n                there\u0027s no guarantee that if you spin up two instances at the same time that this will work. Like updating a variable from two different threads. Tricky risky business. Use the force, Luke :)\n                \n\u2013\u00A0georgiosd\n                Sep 19 \u002718 at 18:12\n            ","\n                \n                @georgiosd ah I see what you mean. Like if someone start the .exe and changes the name. Yes this would be a way to start it more times, but normaly the .exe does not work, if the name got changed. I will update my answer^^ Thank you Luke :D for pointing that out :)\n                \n\u2013\u00A0Deniz\n                Sep 20 \u002718 at 6:43\n            ","\n                \n                Not just that @Deniz. If you start two processes really fast, there\u0027s a chance that the process list or the method fetching them will execute while there\u0027s still only one appearing. This may be an edge case that\u0027s irrelevant to you but this being a general question...\n                \n\u2013\u00A0georgiosd\n                Sep 26 \u002718 at 13:37\n            ","\n                \n                @georgiosd Can you prove that? Because Iv\u0027e tested it just for you hehe. But it was not possible for me, even really \u0022really fast\u0022 ! :P So I can\u0027t understand why you belive in something which is just not the case and even dislike this innocent code :D\n                \n\u2013\u00A0Deniz\n                Sep 28 \u002718 at 11:40\n            "]},{"Id":"4657a2dc-81b1-4388-89a5-eb9332c3926e","QuestionId":5057267,"Description":"What is the difference between a reference type and value type in c#?","Votes":100,"Views":89009,"Tags":["c#",".net","value-type","reference-type"],"Discussions":["\nYour examples are a little odd because while int, bool and float are specific types, interfaces and delegates are kinds of type - just like struct and enum are kinds of value types.\n\nI\u0027ve written an explanation of reference types and value types in this article. I\u0027d be happy to expand on any bits which you find confusing.\n\nThe \u0022TL;DR\u0022 version is to think of what the value of a variable/expression of a particular type is. For a value type, the value is the information itself. For a reference type, the value is a reference which may be null or may be a way of navigating to an object containing the information.\n\nFor example, think of a variable as like a piece of paper. It could have the value \u00225\u0022 or \u0022false\u0022 written on it, but it couldn\u0027t have my house... it would have to have directions to my house. Those directions are the equivalent of a reference. In particular, two people could have different pieces of paper containing the same directions to my house - and if one person followed those directions and painted my house red, then the second person would see that change too. If they both just had separate pictures of my house on the paper, then one person colouring their paper wouldn\u0027t change the other person\u0027s paper at all.\n    ","\nValue type:\n\nHolds some value not memory addresses\n\nExample:\n\nStruct\n\nStorage:\n\nTL;DR: A variable\u0027s value is stored wherever it is decleared. Local variables live on the stack for example, but when declared inside a class as a member it lives on the heap tightly coupled with the class it is declared in. \nLonger: Thus value types are stored wherever they are declared.\nE.g.: an int\u0027s value inside a function as a local variable would be stored on the stack, whilst an in int\u0027s value declared as member in a class would be stored on the heap with the class it is declared in.  A value type on a class has a lifetype that is exactly the same as the class it is declared in, requiring almost no work by the garbage collector. It\u0027s more complicated though, i\u0027d refer to @JonSkeet\u0027s book \u0022C# In Depth\u0022 or his article \u0022Memory in .NET\u0022 for a more concise explenation.\n\nAdvantages:\n\nA value type does not need extra garbage collection. It gets garbage collected together with the instance it lives in. Local variables in methods get cleaned up upon method leave.\n\nDrawbacks:\n\n\nWhen large set of values are passed to a method the receiving variable actually copies so there are two redundant values in memory.\nAs classes are missed out.it losses all the oop benifits\n\n\nReference type:\n\nHolds a memory address of a value not value\n\nExample:\n\nClass\n\nStorage:\n\nStored on heap\n\nAdvantages:\n\n\nWhen you pass a reference variable to a method and it changes it  indeed changes the original value whereas in value types a copy of the given variable is taken and that\u0027s value is changed.\nWhen the size of variable is bigger reference type is good  \nAs classes come as a reference type variables, they give reusability, thus benefitting Object-oriented programming\n\n\nDrawbacks:\n\nMore work referencing when allocating and dereferences when reading the value.extra overload for garbage collector\n    ","\nI found it easier to understand the difference of the two if you know how computer allocate stuffs in memory and know what a pointer is.\n\nReference is usually associated with a pointer.  Meaning the memory address where your variable reside is actually holding another memory address of the actual object in a different memory location.\n\nThe example I am about to give is grossly over simplified, so take it with a grain of salt.\n\nImagine computer memory is a bunch of PO boxes in a row (starting w/ PO Box 0001 to PO Box n) that can hold something inside it.  If PO boxes doesn\u0027t do it for you, try a hashtable or dictionary or an array or something similar. \n\nThus, when you do something like:\n\nvar a = \u0022Hello\u0022;\n\nthe computer will do the following:\n\n\nallocate memory (say starting at memory location 1000 for 5 bytes) and put H (at 1000), e (at 1001), l (at 1002), l (at 1003) and o (at 1004).  \nallocate somewhere in memory (say at location 0500) and assigned it as the variable a.\nSo it\u0027s kind of like an alias (0500 is a).\nassign the value at that memory location (0500) to 1000 (which is where the string Hello start in memory).  Thus the variable a is holding a reference to the actual starting memory location of the \u0022Hello\u0022 string.  \n\n\nValue type will hold the actual thing in its memory location.\n\nThus, when you do something like:\n\nvar a = 1;\n\nthe computer will do the following:\n\n\nallocate a memory location say at 0500 and assign it to variable a (the same alias thing)\nput the value 1 in it (at memory location 0500).\nNotice that we are not allocating extra memory to hold the actual value (1).\nThus a is actually holding the actual value and that\u0027s why it\u0027s called value type.\n\n    ","\nThis is from a post of mine from a different forum, about two years ago. While the language is vb.net (as opposed to C#), the Value Type vs. Reference type concepts are uniform throughout .net, and the examples still hold. \n\nIt is also important to remember that within .net, ALL types technically derive from the base type Object. The value types are designed to behave as such, but in the end they also inherit the functionality of base type Object.\n\nA. Value Types are just that- they represent a distinct area in memory where a discrete VALUE is stored. Value types are of fixed memory size and are stored in the stack, which is a collection of addresses of fixed size. \n\nWhen you make a statement like such:\n\nDim A as Integer\nDIm B as Integer\n\nA = 3\nB = A \n\n\nYou have done the following:\n\n\nCreated 2 spaces in memory sufficient to hold 32 bit integer values.\nPlaced a value of 3 in the memory allocation assigned to A\nPlaced a value of 3 in the memory allocation assigned to B by assigning it the same value as the held in A.\n\n\nThe Value of each variable exists discretely in each memory location. \n\nB. Reference Types can be of various sizes. Therefore, they can\u0027t be stored in the \u0022Stack\u0022 (remember, the stack is a collection of memory allocations of fixed size?). They are stored in the \u0022Managed Heap\u0022. Pointers (or \u0022references\u0022) to each item on the managed heap are maintained in the stack (Like an Address). Your code uses these pointers in the stack to access objects stored in the managed heap. So when your code uses a reference variable, it is actually using a pointer (or \u0022address\u0022 to an memory location in the managed heap). \n\nSay you have created a Class named clsPerson, with a string Property Person.Name\n\nIn this case, when you make a statement such as this:\n\nDim p1 As clsPerson\np1 = New clsPerson\np1.Name = \u0022Jim Morrison\u0022\n\nDim p2 As Person\n\np2 = p1\n\n\nIn the case above, the p1.Name Property will Return \u0022Jim Morrison\u0022, as you would expect. The p2.Name property will ALSO return \u0022Jim Morrison\u0022, as you would Iintuitively expect. I believe that both p1 and p2 represent distinct addresses on the Stack. However, now that you have assigned p2 the value of p1, both p1 and p2 point to the SAME LOCATION on the managed heap.\n\nNow COnsider THIS situation:\n\nDim p1 As clsPerson\nDim p2 As clsPerson\n\np1 = New clsPerson\np1.Name = \u0022Jim Morrison\u0022\n\np2 = p1\n\np2.Name = \u0022Janis Joplin\u0022\n\n\nIn this situation, You have created one new instance of the person Class on the Managed Heap with a pointer p1 on the Stack which references the object, and assigned the Name Property of the object instance a value of \u0022Jim Morrison\u0022 again. Next, you created another pointer p2 in the Stack, and pointed it at the same address on the managed heap as that referenced by p1 (when you made the assignement p2 = p1). \n\nHere comes the twist. When you the Assign the Name property of p2 the value \u0022Janis Joplin\u0022 you are changing the Name property for the object REFERENCED by Both p1 and p2, such that, if you ran the following code:\n\nMsgBox(P1.Name)\n\u0027Will return \u0022Janis Joplin\u0022\n\nMsgBox(p2.Name)\n\u0027will ALSO return \u0022Janis Joplin\u0022Because both variables (Pointers on the Stack) reference the SAME OBJECT in memory (an Address on the Managed Heap). \n\n\nDid that make sense?\n\nLast. If you do THIS:\n\nDIm p1 As New clsPerson\nDim p2 As New clsPerson\n\np1.Name = \u0022Jim Morrison\u0022\np2.Name = \u0022Janis Joplin\u0022\n\n\nYou now have two distinct Person Objects. However, the minute you do THIS again:\n\np2 = p1\n\n\nYou have now pointed both back to \u0022Jim Morrison\u0022. (I am not exactly sure what happened to the Object on the Heap referenced by p2 . . . I THINK it has now gone out of scope. This is one of those areas where hopefullly someone can set me straight . . .). -EDIT: I BELIEVE this is why you would Set p2 = Nothing OR p2 = New clsPerson before making the new assignment. \n\nOnce again, if you now do THIS:\n\np2.Name = \u0022Jimi Hendrix\u0022\n\nMsgBox(p1.Name)\nMsgBox(p2.Name)\n\n\nBoth msgBoxes will now return \u0022Jimi Hendrix\u0022\n\nThis can be pretty confusing for a bit, and I will say one last time, I may have some of the details wrong. \n\nGood Luck, and hopefully others who know better than me will come along to help clarify some of this . . . \n    ","\nvalue data type and reference data type\n\n1)     value( contain the data directly )\n    but\n       reference  ( refers to the data )\n\n2)     in value( every variable has its own copy)\n    but\n       in reference (more than variable can refer to some objects)\n\n3)     in value (operation variable can\u0060t effect on other variable ) \n    but \n       in reference (variable can affect other )\n\n4)    value types are(int, bool, float)\n    but \n      reference type are (array , class objects , string )\n    ","\nValue Type:                           \n\n\nFixed memory size.\nStored in Stack memory.\nHolds actual value.\n\nEx. int, char, bool, etc...\n\n\nReference Type:\n\n\nNot fixed memory.\nStored in Heap memory.\nHolds memory address of actual value.\n\nEx. string, array, class, etc...\n\n    ","\n\u0022Variables that are based on value types directly contain values. Assigning one value type variable to another copies the contained value. This differs from the assignment of reference type variables, which copies a reference to the object but not the object itself.\u0022 from Microsoft\u0027s library.\n\nYou can find a more complete answer here and here.\n    ","\nSometimes explanations won\u0027t help especially for the beginners. You can imagine value type as data file and reference type as a shortcut to a file.\n\nSo if you copy a reference variable you only copy the link/pointer to a real data somewhere in memory. If you copy a value type, you really clone the data in memory.\n    ","\nThis is probably wrong in esoterical ways, but, to make it simple:\n\nValue types are values that are passed normally \u0022by value\u0022 (so copying them). Reference types are passed \u0022by reference\u0022 (so giving a pointer to the original value). There isn\u0027t any guarantee by the .NET ECMA standard of where these \u0022things\u0022 are saved. You could build an implementation of .NET that is stackless, or one that is heapless (the second would be very complex, but you probably could, using fibers and many stacks)\n\nStructs are value type (int, bool... are structs, or at least are simulated as...), classes are reference type.\n\nValue types descend from System.ValueType. Reference type descend from System.Object.\n\nNow.. In the end you have Value Type, \u0022referenced objects\u0022 and references (in C\u002B\u002B they would be called pointers to objects. In .NET they are opaque. We don\u0027t know what they are. From our point of view they are \u0022handles\u0022 to the object). These lasts are similar to Value Types (they are passed by copy). So an object is composed by the object (a reference type) and zero or more references to it (that are similar to value types). When there are zero references the GC will probably collect it.\n\nIn general (in the \u0022default\u0022 implementation of .NET), Value type can go on the stack (if they are local fields) or on the heap (if they are fields of a class, if they are variables in an iterator function, if they are variables referenced by a closure, if they are variable in an async function (using the newer Async CTP)...). Referenced value can only go to the heap. References use the same rules as Value types.\n\nIn the cases of Value Type that go on the heap because they are in an iterator function, an async function, or are referenced by a closure, if you watch the compiled file you\u0027ll see that the compiler created a class to put these variables, and the class is built when you call the function.\n\nNow, I don\u0027t know how to write long things, and I have better things to do in my life. If you want a \u0022precise\u0022 \u0022academic\u0022 \u0022correct\u0022 version, read THIS:\n\nhttp://blogs.msdn.com/b/ericlippert/archive/2010/09/30/the-truth-about-value-types.aspx\n\nIt\u0027s 15 minutes I\u0027m looking for it! It\u0027s better than the msdn versions, because it\u0027s a condensed \u0022ready to use\u0022 article.\n    ","\nThe simplest way to think of reference types is to consider them as being \u0022object-IDs\u0022; the only things one can do with an object ID are create one, copy one, inquire or manipulate the type of one, or compare two for equality.  An attempt to do anything else with an object-ID will be regarded as shorthand for doing the indicated action with the object referred to by that id.\n\nSuppose I have two variables X and Y of type Car--a reference type.  Y happens to hold \u0022object ID #19531\u0022.  If I say \u0022X=Y\u0022, that will cause X to hold \u0022object ID #19531\u0022.  Note that neither X nor Y holds a car.  The car, otherwise known as \u0022object ID #19531\u0022, is stored elsewhere.  When I copied Y into X, all I did was copy the ID number.  Now suppose I say X.Color=Colors.Blue.  Such a statement will be regarded as an instruction to go find \u0022object ID#19531\u0022 and paint it blue.  Note that even though X and Y now refer to a blue car rather than a yellow one, the statement doesn\u0027t actually affect X or Y, because both still refer to \u0022object ID #19531\u0022, which is still the same car as it always has been.\n    ","\nVariable types and Reference Value are easy to apply and well applied to the domain model, facilitate the development process.\n\nTo remove any myth around the amount of \u0022value type\u0022, I will comment on how this is handled on the platform. NET, specifically in C # (CSharp) when called APIS and send parameters by value, by reference, in our methods, and functions and how to make the correct treatment of the passages of these values\u200B\u200B.\n\nRead this article Variable Type Value and Reference in C #\n    ","\nSuppose v is a value-type expression/variable, and r is a reference-type expression/variable    \n\n    x = v  \n    update(v)  //x will not change value. x stores the old value of v\n\n    x = r \n    update(r)  //x now refers to the updated r. x only stored a link to r, \n               //and r can change but the link to it doesn\u0027t .\n\n\nSo, a value-type variable stores the actual value (5, or \u0022h\u0022). A reference-type varaible only stores a link to a metaphorical box where the value is. \n    ","\nBefore explaining the different data types available in C#, it\u0027s important to mention that C# is a strongly-typed language. This means that each variable, constant, input parameter, return type and in general every expression that evaluates to a value, has a type.\n\nEach type contains information that will be embedded by the compiler into the executable file as metadata which will be used by the common language runtime (CLR) to guarantee type safety when it allocates and reclaims memory.\n\nIf you wanna know how much memory a specific type allocates, you can use the sizeof operator as follows:\n\nstatic void Main()\n{\n    var size = sizeof(int);\n    Console.WriteLine($\u0022int size:{size}\u0022);\n    size = sizeof(bool);\n    Console.WriteLine($\u0022bool size:{size}\u0022);\n    size = sizeof(double);\n    Console.WriteLine($\u0022double size:{size}\u0022);\n    size = sizeof(char);\n    Console.WriteLine($\u0022char size:{size}\u0022);\n}\n\n\nThe output will show the number of bytes allocated by each variable.\n\nint size:4\nbool size:1\ndouble size:8\nchar size:2\n\n\nThe information related to each type are:\n\n\nThe required storage space.\nThe maximum and minimum values. For example, the type Int32 accepts values between 2147483648 and 2147483647.\nThe base type it inherits from.\nThe location where the memory for variables will be allocated at run time.\nThe kinds of operations that are permitted.\nThe members (methods, fields, events, etc.) contained by the type. For example, if we check the definition of type int, we will find the following struct and members:\n\nnamespace System\n{\n    [ComVisible(true)]\n    public struct Int32 : IComparable, IFormattable, IConvertible, IComparable\u003CInt32\u003E, IEquatable\u003CInt32\u003E\n    {      \n        public const Int32 MaxValue = 2147483647;     \n        public const Int32 MinValue = -2147483648;\n        public static Int32 Parse(string s, NumberStyles style, IFormatProvider provider);    \n        ... \n    }  \n}\n\n\n\nMemory management\nWhen multiple processes are running on an operating system and the amount of RAM isn\u0027t enough to hold it all, the operating system maps parts of the hard disk with the RAM and starts storing data in the hard disk. The operating system will use than specific tables where virtual addresses are mapped to their correspondent physical addresses to perform the request. This capability to manage the memory is called virtual memory.\n\nIn each process, the virtual memory available is organized in the following 6 sections but for the relevance of this topic, we will focus only on the stack and the heap.\n\nStack\nThe stack is a LIFO (last in, first out) data structure, with a size-dependent on the operating system (by default, for ARM, x86 and x64 machines Windows\u0027s reserve 1MB, while Linux reserve from 2MB to 8MB depending on the version).\n\nThis section of memory is automatically managed by the CPU. Every time a function declares a new variable, the compiler allocates a new memory block as big as its size on the stack, and when the function is over, the memory block for the variable is deallocated.\n\nHeap\nThis region of memory isn\u0027t managed automatically by the CPU and its size is bigger than the stack. When the new keyword is invoked, the compiler starts looking for the first free memory block that fits the size of the request. and when it finds it, it is marked as reserved by using the built-in C function malloc() and a return the pointer to that location. It\u0027s also possible to deallocate a block of memory by using the built-in C function free(). This mechanism causes memory fragmentation and has to use pointers to access the right block of memory, it\u0027s slower than the stack to perform the read/write operations.\n\nCustom and Built-in types\nWhile C# provides a standard set of built-in types representing integers, boolean, text characters, and so on, You can use constructs like struct, class, interface, and enum to create your own types.\n\nAn example of custom type using the struct construct is:\n\nstruct Point\n{\n    public int X;\n    public int Y;\n};\n\n\nValue and reference types\nWe can categorize the C# type into the following categories:\n\n\nValue types\nReference types\n\n\nValue types\nValue types derive from the System.ValueType class and variables of this type contain their values within their memory allocation in the stack. The two categories of value types are struct and enum.\n\nThe following example shows the member of the type boolean. As you can see there is no explicit reference to System.ValueType class, this happens because this class is inherited by the struct.\n\nnamespace System\n{\n    [ComVisible(true)]\n    public struct Boolean : IComparable, IConvertible, IComparable\u003CBoolean\u003E, IEquatable\u003CBoolean\u003E\n    {\n        public static readonly string TrueString;\n        public static readonly string FalseString;\n        public static Boolean Parse(string value);\n        ...\n    }\n}\n\n\nReference types\nOn the other hand, the reference types do not contain the actual data stored in a variable, but the memory address of the heap where the value is stored. The categories of reference types are classes, delegates, arrays, and interfaces.\n\nAt run time, when a reference type variable is declared, it contains the value null until an object that has been created using the keywords new is assigned to it.\n\nThe following example shows the members of the generic type List.\n\nnamespace System.Collections.Generic\n{\n    [DebuggerDisplay(\u0022Count = {Count}\u0022)]\n    [DebuggerTypeProxy(typeof(Generic.Mscorlib_CollectionDebugView\u003C\u003E))]\n    [DefaultMember(\u0022Item\u0022)]\n    public class List\u003CT\u003E : IList\u003CT\u003E, ICollection\u003CT\u003E, IEnumerable\u003CT\u003E, IEnumerable, IList, ICollection, IReadOnlyList\u003CT\u003E, IReadOnlyCollection\u003CT\u003E\n    {\n        ...\n        public T this[int index] { get; set; }\n        public int Count { get; }\n        public int Capacity { get; set; }\n        public void Add(T item);\n        public void AddRange(IEnumerable\u003CT\u003E collection);\n        ...\n    }\n}\n\n\nIn case you wanna find out the memory address of a specific object, the class System.Runtime.InteropServices provides a way to access to managed objects from unmanaged memory. In the following example, we are gonna use the static method GCHandle.Alloc() to allocate a handle to a string and then the method AddrOfPinnedObject to retrieve its address.\n\nstring s1 = \u0022Hello World\u0022;\nGCHandle gch = GCHandle.Alloc(s1, GCHandleType.Pinned);\nIntPtr pObj = gch.AddrOfPinnedObject();\nConsole.WriteLine($\u0022Memory address:{pObj.ToString()}\u0022);\n\n\nThe output will be\n\nMemory address:39723832\n\n\nReferences\nOfficial documentation: https://docs.microsoft.com/en-us/cpp/build/reference/stack-stack-allocations?view=vs-2019\n    ","\nThere are many little details of the differences between value types and reference types that are stated explicitly by the standard and some of them are not easy to understand, especially for beginners.\n\nSee ECMA standard 33, Common Language Infrastructure (CLI). The CLI is also standardized by the ISO. I would provide a reference but for ECMA we must download a PDF and that link depends on the version number. ISO standards cost money.\n\nOne difference is that value types can be boxed but reference types generally cannot be. There are exceptions but they are quite technical.\n\nValue types cannot have parameter-less instance constructors or finalizers and they cannot refer to themselves. Referring to themselves means for example that if there is a value type Node then a member of Node cannot be a Node. I think there are other requirements/limitations in the specifications but if so then they are not gathered together in one place.\n    ","\n                \n                It\u0027s important to note that there are at three distinct primary types of semantics a thing can offer: immutable semantics, mutable value semantics, and mutable reference semantics.  Conceptually, the kind of semantics a thing implements is orthogonal to whether it\u0027s stored as a standalone heap object or a variable/field (struct).  In practice, while structs which do not expose their fields can implement any kind of semantics, the fact that .net allows promiscuous sharing of heap references means heap objects cannot implement mutable value semantics.\n                \n\u2013\u00A0supercat\n                Nov 29 \u002711 at 22:21\n            ","\n                \n                I didn\u0027t get this bit - while int, bool and float are specific types, interfaces and delegates are kinds of type - just like struct and enum are kinds of value types. What do you mean by int, bool being specific types? Everything in C# e.g. int, bool,float, class, interface, delegate is a type( data type to be precise). Data types are segregated as \u0027Reference Type\u0027 and \u0027Value Type\u0027 in C#. Then why are you saying int is a specific type but interface is a kind of type?\n                \n\u2013\u00A0RBT\n                Sep 15 \u002716 at 9:04\n            ","\n                \n                @RBT: Data types aren\u0027t just segregated into \u0022reference type\u0022 and \u0022value type\u0022. They\u0027re also segregated into \u0022class, struct, enum, delegate, interface\u0022. int is a struct, string is a class, Action is a delegate, etc. Your list of \u0022int, bool, float, class, interface, delegate\u0022 is a list containing difference kinds of things, in the same way that \u002210, int\u0022 is a list containing different kinds of things.\n                \n\u2013\u00A0Jon Skeet\n                Sep 15 \u002716 at 9:07\n            ","\n                \n                @JonSkeet Possibly the answer on this post is bit misleading then.\n                \n\u2013\u00A0RBT\n                Sep 15 \u002716 at 9:11\n                        \n                            \n                        \n            ","\n                \n                @RBT: I\u0027d say it\u0027s somewhat badly worded, but not awful.\n                \n\u2013\u00A0Jon Skeet\n                Sep 15 \u002716 at 9:15\n            ","\n                \n                It\u0027s not necessarily true that reference types get stored on the heap, and value types get stored on the stack. Read yoda.arachsys.com/csharp/memory.html if you want to learn more.\n                \n\u2013\u00A0Rhys\n                Jan 8 \u002717 at 14:21\n            ","\n                \n                There are a lot of misunderstandings in this answer. Please read Jeff Richters CLR via C#. Value Types are stored on the Thread Stack and are not subject to garbage collection (GC) - they have nothing to do with GC. Reference Types are stored on the managed heap and are therefore subject to GC. If a Ref Type has a root reference it cant be collected and is promoted up the generations, 0, 1 \u0026 2. If it doesn\u0027t have a root reference it can be Garbage Collected \u0026 it then goes through this process called Resurrection where it is killed and brought back to life and then finally collected.\n                \n\u2013\u00A0Jeremy Thompson\n                Jun 12 \u002718 at 0:36\n                        \n                            \n                        \n            ","\n                \n                You may be interested in blogs.msdn.com/b/ericlippert/archive/2009/02/17/\u2026\n                \n\u2013\u00A0Jon Skeet\n                Feb 21 \u002711 at 7:25\n            ","\n                \n                @Jon, Well, that sort of invalidate what I was saying, LOL. But like I said, it is grossly oversimplified to get some understanding between the two types which in my case I found helpful.  At least that\u0027s how I pictured it in my mind :).\n                \n\u2013\u00A0Jimmy Chandra\n                Feb 21 \u002711 at 9:30\n                        \n                            \n                        \n            ","\n                \n                @JonSkeet the link is dead, do you have a working one?\n                \n\u2013\u00A0FLonLon\n                Sep 21 at 10:58\n            ","\n                \n                @FLonLon: Yup, here\u0027s a new link: docs.microsoft.com/en-us/archive/blogs/ericlippert/\u2026\n                \n\u2013\u00A0Jon Skeet\n                Sep 21 at 11:06\n            ","\n                \n                I don\u0027t know why you didn\u0027t receive any up-votes. Good answer, helped me understand with clear, simple examples.\n                \n\u2013\u00A0Harry\n                Nov 27 \u002715 at 10:38\n            ","\n                \n                As for Value Type vs. Reference type concepts are uniform throughout .net,, they are actually defined in the Common Language Infrastructure (CLI) specification, Ecma standard 335 (also an ISO standard). That is the standard for the standard part of .Net. Ecma standard 334 (also an ISO standard) is the C# language and it states explicitly that C# implementations must either rely on the CLI or support an alternate way of getting at the minimum CLI features required by this C# standard. VB.Net however is not a standard, it is proprietary to Microsoft.\n                \n\u2013\u00A0user34660\n                May 17 \u002718 at 22:04\n            ","\n                \n                I don\u0027t like that explanation, because it sounds like assignment works different for reference types and value types. It doesn\u0027t. In both cases, it makes the value of the \u0022target\u0022 variable equal to the expression - the value is copied. The difference is in what that value is - for reference types, the value that gets copied is a reference. That\u0027s still the value of the variable though.\n                \n\u2013\u00A0Jon Skeet\n                Feb 20 \u002711 at 13:29\n            ","\n                \n                I agree with you and I\u0027ve already known that it could be different, as you can read in this article. But, I\u0027m just repassing the Microsoft\u0027s guide about the subject and also how you usually read in books. Please don\u0027t blame me! :)\n                \n\u2013\u00A0Lucas S.\n                Feb 20 \u002711 at 14:03\n            ","\n                \n                Oh sure... there are plenty of bits of MSDN documentation where there\u0027s fault to be found :)\n                \n\u2013\u00A0Jon Skeet\n                Feb 20 \u002711 at 14:16\n            ","\n                \n                It\u0027s wrong in more than esoteric ways. It\u0027s fundamentally wrong I\u0027d say - because reference type values are still passed by value as well; it\u0027s just that the value is a reference, not an object. See pobox.com/~skeet/csharp/parameters.html. Oh, and local variables can end up on the heap too, for example if they\u0027re captured or part of an iterator block.\n                \n\u2013\u00A0Jon Skeet\n                Feb 20 \u002711 at 13:31\n            ","\n                \n                Iterators blocks are converted to classes, so \u0022behind you\u0022 they are \u0022fields of a class\u0022. Same for closures. Yeah... I forgot to write the distinction between the \u0022pointer\u0022 (the reference) and the \u0022pointed\u0022\n                \n\u2013\u00A0xanatos\n                Feb 20 \u002711 at 13:43\n            ","\n                \n                @xanatos: Sure, they\u0027re fields of a class after compilation - but they\u0027re still local variables in the source code. I also wouldn\u0027t call the references themselves \u0022value types\u0022 - I think I know where you\u0027re coming from, but I don\u0027t think it\u0027s a good idea to muddy the waters in this way.\n                \n\u2013\u00A0Jon Skeet\n                Feb 20 \u002711 at 13:52\n            ","\n                \n                @jon Yeah... They are a third type, because pointers are \u0022opaque\u0022 in .net, and they don\u0027t derive from ValueType. But they are more similar to value types than to references. You can \u0022ref\u0022 and \u0022out\u0022 them. I had to mud the waters because \u0022someone\u0022 had to nitpick the working of iterators.\n                \n\u2013\u00A0xanatos\n                Feb 20 \u002711 at 14:00\n                        \n                            \n                        \n            ","\n                \n                Looking at the article I now point to, I\u0027ve found: \u0022There are three kinds of values: (1) instances of value types, (2) instances of reference types, and (3) references. (Code in C# cannot manipulate instances of reference types directly; it always does so via a reference. In unsafe code, pointer types are treated like value types for the purposes of determining the storage requirements of their values.)\u0022.\n                \n\u2013\u00A0xanatos\n                Feb 20 \u002711 at 14:02\n            ","\n                \n                This is an English-only Q\u0026A site, unfortunately =\\. Thanks for trying to answer, however. Please create full answers, with links as aids only (but not as the full sustained answer). Please take a look at how to answer.\n                \n\u2013\u00A0Jesse\n                Apr 24 \u002713 at 1:52\n            "]},{"Id":"69a64ad9-02f8-4c93-9b50-07af72306b01","QuestionId":249087,"Description":"How do I remove diacritics (accents) from a string in .NET?","Votes":452,"Views":213700,"Tags":[".net","string","diacritics"],"Discussions":["\nI\u0027ve not used this method, but Michael Kaplan describes a method for doing so in his blog post (with a confusing title) that talks about stripping diacritics: Stripping is an interesting job (aka\nOn the meaning of meaningless, aka All\nMn characters are non-spacing, but\nsome are more non-spacing than\nothers)\n\nstatic string RemoveDiacritics(string text) \n{\n    var normalizedString = text.Normalize(NormalizationForm.FormD);\n    var stringBuilder = new StringBuilder();\n\n    foreach (var c in normalizedString)\n    {\n        var unicodeCategory = CharUnicodeInfo.GetUnicodeCategory(c);\n        if (unicodeCategory != UnicodeCategory.NonSpacingMark)\n        {\n            stringBuilder.Append(c);\n        }\n    }\n\n    return stringBuilder.ToString().Normalize(NormalizationForm.FormC);\n}\n\n\nNote that this is a followup to his earlier post: Stripping diacritics.... \n\nThe approach uses String.Normalize to split the input string into constituent glyphs (basically separating the \u0022base\u0022 characters from the diacritics) and then scans the result and retains only the base characters. It\u0027s just a little complicated, but really you\u0027re looking at a complicated problem.\n\nOf course, if you\u0027re limiting yourself to French, you could probably get away with the simple table-based approach in How to remove accents and tilde in a C\u002B\u002B std::string, as recommended by @David Dibben.\n    ","\nthis did the trick for me...\nstring accentedStr;\nbyte[] tempBytes;\ntempBytes = System.Text.Encoding.GetEncoding(\u0022ISO-8859-8\u0022).GetBytes(accentedStr);\nstring asciiStr = System.Text.Encoding.UTF8.GetString(tempBytes);\n\nquick\u0026short!\n    ","\nIn case someone is interested, I was looking for something similar and ended writing the following:\n\npublic static string NormalizeStringForUrl(string name)\n{\n    String normalizedString = name.Normalize(NormalizationForm.FormD);\n    StringBuilder stringBuilder = new StringBuilder();\n\n    foreach (char c in normalizedString)\n    {\n        switch (CharUnicodeInfo.GetUnicodeCategory(c))\n        {\n            case UnicodeCategory.LowercaseLetter:\n            case UnicodeCategory.UppercaseLetter:\n            case UnicodeCategory.DecimalDigitNumber:\n                stringBuilder.Append(c);\n                break;\n            case UnicodeCategory.SpaceSeparator:\n            case UnicodeCategory.ConnectorPunctuation:\n            case UnicodeCategory.DashPunctuation:\n                stringBuilder.Append(\u0027_\u0027);\n                break;\n        }\n    }\n    string result = stringBuilder.ToString();\n    return String.Join(\u0022_\u0022, result.Split(new char[] { \u0027_\u0027 }\n        , StringSplitOptions.RemoveEmptyEntries)); // remove duplicate underscores\n}\n\n    ","\nI needed something that converts all major unicode characters and the voted answer leaved a few out so I\u0027ve created a version of CodeIgniter\u0027s convert_accented_characters($str) into C# that is easily customisable:\n\nusing System;\nusing System.Text;\nusing System.Collections.Generic;\n\npublic static class Strings\n{\n    static Dictionary\u003Cstring, string\u003E foreign_characters = new Dictionary\u003Cstring, string\u003E\n    {\n        { \u0022\u00E4\u00E6\u01FD\u0022, \u0022ae\u0022 },\n        { \u0022\u00F6\u0153\u0022, \u0022oe\u0022 },\n        { \u0022\u00FC\u0022, \u0022ue\u0022 },\n        { \u0022\u00C4\u0022, \u0022Ae\u0022 },\n        { \u0022\u00DC\u0022, \u0022Ue\u0022 },\n        { \u0022\u00D6\u0022, \u0022Oe\u0022 },\n        { \u0022\u00C0\u00C1\u00C2\u00C3\u00C4\u00C5\u01FA\u0100\u0102\u0104\u01CD\u0391\u0386\u1EA2\u1EA0\u1EA6\u1EAA\u1EA8\u1EAC\u1EB0\u1EAE\u1EB4\u1EB2\u1EB6\u0410\u0022, \u0022A\u0022 },\n        { \u0022\u00E0\u00E1\u00E2\u00E3\u00E5\u01FB\u0101\u0103\u0105\u01CE\u00AA\u03B1\u03AC\u1EA3\u1EA1\u1EA7\u1EA5\u1EAB\u1EA9\u1EAD\u1EB1\u1EAF\u1EB5\u1EB3\u1EB7\u0430\u0022, \u0022a\u0022 },\n        { \u0022\u0411\u0022, \u0022B\u0022 },\n        { \u0022\u0431\u0022, \u0022b\u0022 },\n        { \u0022\u00C7\u0106\u0108\u010A\u010C\u0022, \u0022C\u0022 },\n        { \u0022\u00E7\u0107\u0109\u010B\u010D\u0022, \u0022c\u0022 },\n        { \u0022\u0414\u0022, \u0022D\u0022 },\n        { \u0022\u0434\u0022, \u0022d\u0022 },\n        { \u0022\u00D0\u010E\u0110\u0394\u0022, \u0022Dj\u0022 },\n        { \u0022\u00F0\u010F\u0111\u03B4\u0022, \u0022dj\u0022 },\n        { \u0022\u00C8\u00C9\u00CA\u00CB\u0112\u0114\u0116\u0118\u011A\u0395\u0388\u1EBC\u1EBA\u1EB8\u1EC0\u1EBE\u1EC4\u1EC2\u1EC6\u0415\u042D\u0022, \u0022E\u0022 },\n        { \u0022\u00E8\u00E9\u00EA\u00EB\u0113\u0115\u0117\u0119\u011B\u03AD\u03B5\u1EBD\u1EBB\u1EB9\u1EC1\u1EBF\u1EC5\u1EC3\u1EC7\u0435\u044D\u0022, \u0022e\u0022 },\n        { \u0022\u0424\u0022, \u0022F\u0022 },\n        { \u0022\u0444\u0022, \u0022f\u0022 },\n        { \u0022\u011C\u011E\u0120\u0122\u0393\u0413\u0490\u0022, \u0022G\u0022 },\n        { \u0022\u011D\u011F\u0121\u0123\u03B3\u0433\u0491\u0022, \u0022g\u0022 },\n        { \u0022\u0124\u0126\u0022, \u0022H\u0022 },\n        { \u0022\u0125\u0127\u0022, \u0022h\u0022 },\n        { \u0022\u00CC\u00CD\u00CE\u00CF\u0128\u012A\u012C\u01CF\u012E\u0130\u0397\u0389\u038A\u0399\u03AA\u1EC8\u1ECA\u0418\u042B\u0022, \u0022I\u0022 },\n        { \u0022\u00EC\u00ED\u00EE\u00EF\u0129\u012B\u012D\u01D0\u012F\u0131\u03B7\u03AE\u03AF\u03B9\u03CA\u1EC9\u1ECB\u0438\u044B\u0457\u0022, \u0022i\u0022 },\n        { \u0022\u0134\u0022, \u0022J\u0022 },\n        { \u0022\u0135\u0022, \u0022j\u0022 },\n        { \u0022\u0136\u039A\u041A\u0022, \u0022K\u0022 },\n        { \u0022\u0137\u03BA\u043A\u0022, \u0022k\u0022 },\n        { \u0022\u0139\u013B\u013D\u013F\u0141\u039B\u041B\u0022, \u0022L\u0022 },\n        { \u0022\u013A\u013C\u013E\u0140\u0142\u03BB\u043B\u0022, \u0022l\u0022 },\n        { \u0022\u041C\u0022, \u0022M\u0022 },\n        { \u0022\u043C\u0022, \u0022m\u0022 },\n        { \u0022\u00D1\u0143\u0145\u0147\u039D\u041D\u0022, \u0022N\u0022 },\n        { \u0022\u00F1\u0144\u0146\u0148\u0149\u03BD\u043D\u0022, \u0022n\u0022 },\n        { \u0022\u00D2\u00D3\u00D4\u00D5\u014C\u014E\u01D1\u0150\u01A0\u00D8\u01FE\u039F\u038C\u03A9\u038F\u1ECE\u1ECC\u1ED2\u1ED0\u1ED6\u1ED4\u1ED8\u1EDC\u1EDA\u1EE0\u1EDE\u1EE2\u041E\u0022, \u0022O\u0022 },\n        { \u0022\u00F2\u00F3\u00F4\u00F5\u014D\u014F\u01D2\u0151\u01A1\u00F8\u01FF\u00BA\u03BF\u03CC\u03C9\u03CE\u1ECF\u1ECD\u1ED3\u1ED1\u1ED7\u1ED5\u1ED9\u1EDD\u1EDB\u1EE1\u1EDF\u1EE3\u043E\u0022, \u0022o\u0022 },\n        { \u0022\u041F\u0022, \u0022P\u0022 },\n        { \u0022\u043F\u0022, \u0022p\u0022 },\n        { \u0022\u0154\u0156\u0158\u03A1\u0420\u0022, \u0022R\u0022 },\n        { \u0022\u0155\u0157\u0159\u03C1\u0440\u0022, \u0022r\u0022 },\n        { \u0022\u015A\u015C\u015E\u0218\u0160\u03A3\u0421\u0022, \u0022S\u0022 },\n        { \u0022\u015B\u015D\u015F\u0219\u0161\u017F\u03C3\u03C2\u0441\u0022, \u0022s\u0022 },\n        { \u0022\u021A\u0162\u0164\u0166\u03C4\u0422\u0022, \u0022T\u0022 },\n        { \u0022\u021B\u0163\u0165\u0167\u0442\u0022, \u0022t\u0022 },\n        { \u0022\u00D9\u00DA\u00DB\u0168\u016A\u016C\u016E\u0170\u0172\u01AF\u01D3\u01D5\u01D7\u01D9\u01DB\u0168\u1EE6\u1EE4\u1EEA\u1EE8\u1EEE\u1EEC\u1EF0\u0423\u0022, \u0022U\u0022 },\n        { \u0022\u00F9\u00FA\u00FB\u0169\u016B\u016D\u016F\u0171\u0173\u01B0\u01D4\u01D6\u01D8\u01DA\u01DC\u03C5\u03CD\u03CB\u1EE7\u1EE5\u1EEB\u1EE9\u1EEF\u1EED\u1EF1\u0443\u0022, \u0022u\u0022 },\n        { \u0022\u00DD\u0178\u0176\u03A5\u038E\u03AB\u1EF2\u1EF8\u1EF6\u1EF4\u0419\u0022, \u0022Y\u0022 },\n        { \u0022\u00FD\u00FF\u0177\u1EF3\u1EF9\u1EF7\u1EF5\u0439\u0022, \u0022y\u0022 },\n        { \u0022\u0412\u0022, \u0022V\u0022 },\n        { \u0022\u0432\u0022, \u0022v\u0022 },\n        { \u0022\u0174\u0022, \u0022W\u0022 },\n        { \u0022\u0175\u0022, \u0022w\u0022 },\n        { \u0022\u0179\u017B\u017D\u0396\u0417\u0022, \u0022Z\u0022 },\n        { \u0022\u017A\u017C\u017E\u03B6\u0437\u0022, \u0022z\u0022 },\n        { \u0022\u00C6\u01FC\u0022, \u0022AE\u0022 },\n        { \u0022\u00DF\u0022, \u0022ss\u0022 },\n        { \u0022\u0132\u0022, \u0022IJ\u0022 },\n        { \u0022\u0133\u0022, \u0022ij\u0022 },\n        { \u0022\u0152\u0022, \u0022OE\u0022 },\n        { \u0022\u0192\u0022, \u0022f\u0022 },\n        { \u0022\u03BE\u0022, \u0022ks\u0022 },\n        { \u0022\u03C0\u0022, \u0022p\u0022 },\n        { \u0022\u03B2\u0022, \u0022v\u0022 },\n        { \u0022\u03BC\u0022, \u0022m\u0022 },\n        { \u0022\u03C8\u0022, \u0022ps\u0022 },\n        { \u0022\u0401\u0022, \u0022Yo\u0022 },\n        { \u0022\u0451\u0022, \u0022yo\u0022 },\n        { \u0022\u0404\u0022, \u0022Ye\u0022 },\n        { \u0022\u0454\u0022, \u0022ye\u0022 },\n        { \u0022\u0407\u0022, \u0022Yi\u0022 },\n        { \u0022\u0416\u0022, \u0022Zh\u0022 },\n        { \u0022\u0436\u0022, \u0022zh\u0022 },\n        { \u0022\u0425\u0022, \u0022Kh\u0022 },\n        { \u0022\u0445\u0022, \u0022kh\u0022 },\n        { \u0022\u0426\u0022, \u0022Ts\u0022 },\n        { \u0022\u0446\u0022, \u0022ts\u0022 },\n        { \u0022\u0427\u0022, \u0022Ch\u0022 },\n        { \u0022\u0447\u0022, \u0022ch\u0022 },\n        { \u0022\u0428\u0022, \u0022Sh\u0022 },\n        { \u0022\u0448\u0022, \u0022sh\u0022 },\n        { \u0022\u0429\u0022, \u0022Shch\u0022 },\n        { \u0022\u0449\u0022, \u0022shch\u0022 },\n        { \u0022\u042A\u044A\u042C\u044C\u0022, \u0022\u0022 },\n        { \u0022\u042E\u0022, \u0022Yu\u0022 },\n        { \u0022\u044E\u0022, \u0022yu\u0022 },\n        { \u0022\u042F\u0022, \u0022Ya\u0022 },\n        { \u0022\u044F\u0022, \u0022ya\u0022 },\n    };\n\n    public static char RemoveDiacritics(this char c){\n        foreach(KeyValuePair\u003Cstring, string\u003E entry in foreign_characters)\n        {\n            if(entry.Key.IndexOf (c) != -1)\n            {\n                return entry.Value[0];\n            }\n        }\n        return c;\n    }\n\n    public static string RemoveDiacritics(this string s) \n    {\n        //StringBuilder sb = new StringBuilder ();\n        string text = \u0022\u0022;\n\n\n        foreach (char c in s)\n        {\n            int len = text.Length;\n\n            foreach(KeyValuePair\u003Cstring, string\u003E entry in foreign_characters)\n            {\n                if(entry.Key.IndexOf (c) != -1)\n                {\n                    text \u002B= entry.Value;\n                    break;\n                }\n            }\n\n            if (len == text.Length) {\n                text \u002B= c;  \n            }\n        }\n        return text;\n    }\n}\n\n\nUsage\n\n// for strings\n\u0022cr\u00E8me br\u00FBl\u00E9e\u0022.RemoveDiacritics (); // creme brulee\n\n// for chars\n\u0022\u00C3\u0022[0].RemoveDiacritics (); // A\n\n    ","\nI often use an extenstion method based on another version I found here\n(see Replacing characters in C# (ascii))\nA quick explanation:\n\n\nNormalizing to form D splits charactes like \u00E8 to an e and a nonspacing \u0060\nFrom this, the nospacing characters are removed\nThe result is normalized back to form C (I\u0027m not sure if this is neccesary)\n\n\nCode:\n\nusing System.Linq;\nusing System.Text;\nusing System.Globalization;\n\n// namespace here\npublic static class Utility\n{\n    public static string RemoveDiacritics(this string str)\n    {\n        if (null == str) return null;\n        var chars =\n            from c in str.Normalize(NormalizationForm.FormD).ToCharArray()\n            let uc = CharUnicodeInfo.GetUnicodeCategory(c)\n            where uc != UnicodeCategory.NonSpacingMark\n            select c;\n\n        var cleanStr = new string(chars.ToArray()).Normalize(NormalizationForm.FormC);\n\n        return cleanStr;\n    }\n\n    // or, alternatively\n    public static string RemoveDiacritics2(this string str)\n    {\n        if (null == str) return null;\n        var chars = str\n            .Normalize(NormalizationForm.FormD)\n            .ToCharArray()\n            .Where(c=\u003E CharUnicodeInfo.GetUnicodeCategory(c) != UnicodeCategory.NonSpacingMark)\n            .ToArray();\n\n        return new string(chars).Normalize(NormalizationForm.FormC);\n    }\n}\n\n    ","\nIn case anyone\u0027s interested, here is the java equivalent:\n\nimport java.text.Normalizer;\n\npublic class MyClass\n{\n    public static String removeDiacritics(String input)\n    {\n        String nrml = Normalizer.normalize(input, Normalizer.Form.NFD);\n        StringBuilder stripped = new StringBuilder();\n        for (int i=0;i\u003Cnrml.length();\u002B\u002Bi)\n        {\n            if (Character.getType(nrml.charAt(i)) != Character.NON_SPACING_MARK)\n            {\n                stripped.append(nrml.charAt(i));\n            }\n        }\n        return stripped.toString();\n    }\n}\n\n    ","\nThe CodePage of Greek (ISO) can do it\n\nThe information about this codepage is into System.Text.Encoding.GetEncodings(). Learn about in: https://msdn.microsoft.com/pt-br/library/system.text.encodinginfo.getencoding(v=vs.110).aspx\n\nGreek (ISO) has codepage 28597 and name iso-8859-7.\n\nGo to the code... \\o/\n\nstring text = \u0022Voc\u00EA est\u00E1 numa situa\u00E7\u00E3o lament\u00E1vel\u0022;\n\nstring textEncode = System.Web.HttpUtility.UrlEncode(text, Encoding.GetEncoding(\u0022iso-8859-7\u0022));\n//result: \u0022Voce\u002Besta\u002Bnuma\u002Bsituacao\u002Blamentavel\u0022\n\nstring textDecode = System.Web.HttpUtility.UrlDecode(textEncode);\n//result: \u0022Voce esta numa situacao lamentavel\u0022\n\n\nSo, write this function...\n\npublic string RemoveAcentuation(string text)\n{\n    return\n        System.Web.HttpUtility.UrlDecode(\n            System.Web.HttpUtility.UrlEncode(\n                text, Encoding.GetEncoding(\u0022iso-8859-7\u0022)));\n}\n\n\nNote that... Encoding.GetEncoding(\u0022iso-8859-7\u0022) is equivalent to Encoding.GetEncoding(28597) because first is the name, and second the codepage of Encoding.\n    ","\nIt\u0027s funny such a question can get so many answers, and yet none fit my requirements :) There are so many languages around, a full language agnostic solution is AFAIK not really possible, as others has mentionned that the FormC or FormD are giving issues.\n\nSince the original question was related to French, the simplest working answer is indeed \n\n    public static string ConvertWesternEuropeanToASCII(this string str)\n    {\n        return Encoding.ASCII.GetString(Encoding.GetEncoding(1251).GetBytes(str));\n    }\n\n\n1251 should be replaced by the encoding code of the input language.\n\nThis however replace only one character by one character. Since I am also working with German as input, I did a manual convert\n\n    public static string LatinizeGermanCharacters(this string str)\n    {\n        StringBuilder sb = new StringBuilder(str.Length);\n        foreach (char c in str)\n        {\n            switch (c)\n            {\n                case \u0027\u00E4\u0027:\n                    sb.Append(\u0022ae\u0022);\n                    break;\n                case \u0027\u00F6\u0027:\n                    sb.Append(\u0022oe\u0022);\n                    break;\n                case \u0027\u00FC\u0027:\n                    sb.Append(\u0022ue\u0022);\n                    break;\n                case \u0027\u00C4\u0027:\n                    sb.Append(\u0022Ae\u0022);\n                    break;\n                case \u0027\u00D6\u0027:\n                    sb.Append(\u0022Oe\u0022);\n                    break;\n                case \u0027\u00DC\u0027:\n                    sb.Append(\u0022Ue\u0022);\n                    break;\n                case \u0027\u00DF\u0027:\n                    sb.Append(\u0022ss\u0022);\n                    break;\n                default:\n                    sb.Append(c);\n                    break;\n            }\n        }\n        return sb.ToString();\n    }\n\n\nIt might not deliver the best performance, but at least it is very easy to read and extend.\nRegex is a NO GO, much slower than any char/string stuff.\n\nI also have a very simple method to remove space:\n\n    public static string RemoveSpace(this string str)\n    {\n        return str.Replace(\u0022 \u0022, string.Empty);\n    }\n\n\nEventually, I am using a combination of all 3 above extensions:\n\n    public static string LatinizeAndConvertToASCII(this string str, bool keepSpace = false)\n    {\n        str = str.LatinizeGermanCharacters().ConvertWesternEuropeanToASCII();            \n        return keepSpace ? str : str.RemoveSpace();\n    }\n\n\nAnd a small unit test to that (not exhaustive) which pass successfully.\n\n    [TestMethod()]\n    public void LatinizeAndConvertToASCIITest()\n    {\n        string europeanStr = \u0022Bonjour \u00E7a va? C\u0027est l\u0027\u00E9t\u00E9! Ich m\u00F6chte \u00E4 \u00C4 \u00E1 \u00E0 \u00E2 \u00EA \u00E9 \u00E8 \u00EB \u00CB \u00C9 \u00EF \u00CF \u00EE \u00ED \u00EC \u00F3 \u00F2 \u00F4 \u00F6 \u00D6 \u00DC \u00FC \u00F9 \u00FA \u00FB \u00DB \u00FD \u00DD \u00E7 \u00C7 \u00F1 \u00D1\u0022;\n        string expected = \u0022Bonjourcava?C\u0027estl\u0027ete!IchmoechteaeAeaaaeeeeEEiIiiiooooeOeUeueuuuUyYcCnN\u0022;\n        string actual = europeanStr.LatinizeAndConvertToASCII();\n        Assert.AreEqual(expected, actual);\n    }\n\n    ","\nTL;DR - C# string extension method\n\nI think the best solution to preserve the meaning of the string is to convert the characters instead of stripping them, which is well illustrated in the example cr\u00E8me br\u00FBl\u00E9e to crme brle vs. creme brulee.\n\nI checked out Alexander\u0027s comment above and saw the Lucene.Net code is Apache 2.0 licensed, so I\u0027ve modified the class into a simple string extension method. You can use it like this:\n\nvar originalString = \u0022cr\u00E8me br\u00FBl\u00E9e\u0022;\nvar maxLength = originalString.Length; // limit output length as necessary\nvar foldedString = originalString.FoldToASCII(maxLength); \n// \u0022creme brulee\u0022\n\n\nThe function is too long to post in a StackOverflow answer (~139k characters of 30k allowed lol) so I made a gist and attributed the authors: \n\n/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \u0022License\u0022); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \u0022AS IS\u0022 BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/// \u003Csummary\u003E\n/// This class converts alphabetic, numeric, and symbolic Unicode characters\n/// which are not in the first 127 ASCII characters (the \u0022Basic Latin\u0022 Unicode\n/// block) into their ASCII equivalents, if one exists.\n/// \u003Cpara/\u003E\n/// Characters from the following Unicode blocks are converted; however, only\n/// those characters with reasonable ASCII alternatives are converted:\n/// \n/// \u003Cul\u003E\n///   \u003Citem\u003E\u003Cdescription\u003EC1 Controls and Latin-1 Supplement: \u003Ca href=\u0022http://www.unicode.org/charts/PDF/U0080.pdf\u0022\u003Ehttp://www.unicode.org/charts/PDF/U0080.pdf\u003C/a\u003E\u003C/description\u003E\u003C/item\u003E\n///   \u003Citem\u003E\u003Cdescription\u003ELatin Extended-A: \u003Ca href=\u0022http://www.unicode.org/charts/PDF/U0100.pdf\u0022\u003Ehttp://www.unicode.org/charts/PDF/U0100.pdf\u003C/a\u003E\u003C/description\u003E\u003C/item\u003E\n///   \u003Citem\u003E\u003Cdescription\u003ELatin Extended-B: \u003Ca href=\u0022http://www.unicode.org/charts/PDF/U0180.pdf\u0022\u003Ehttp://www.unicode.org/charts/PDF/U0180.pdf\u003C/a\u003E\u003C/description\u003E\u003C/item\u003E\n///   \u003Citem\u003E\u003Cdescription\u003ELatin Extended Additional: \u003Ca href=\u0022http://www.unicode.org/charts/PDF/U1E00.pdf\u0022\u003Ehttp://www.unicode.org/charts/PDF/U1E00.pdf\u003C/a\u003E\u003C/description\u003E\u003C/item\u003E\n///   \u003Citem\u003E\u003Cdescription\u003ELatin Extended-C: \u003Ca href=\u0022http://www.unicode.org/charts/PDF/U2C60.pdf\u0022\u003Ehttp://www.unicode.org/charts/PDF/U2C60.pdf\u003C/a\u003E\u003C/description\u003E\u003C/item\u003E\n///   \u003Citem\u003E\u003Cdescription\u003ELatin Extended-D: \u003Ca href=\u0022http://www.unicode.org/charts/PDF/UA720.pdf\u0022\u003Ehttp://www.unicode.org/charts/PDF/UA720.pdf\u003C/a\u003E\u003C/description\u003E\u003C/item\u003E\n///   \u003Citem\u003E\u003Cdescription\u003EIPA Extensions: \u003Ca href=\u0022http://www.unicode.org/charts/PDF/U0250.pdf\u0022\u003Ehttp://www.unicode.org/charts/PDF/U0250.pdf\u003C/a\u003E\u003C/description\u003E\u003C/item\u003E\n///   \u003Citem\u003E\u003Cdescription\u003EPhonetic Extensions: \u003Ca href=\u0022http://www.unicode.org/charts/PDF/U1D00.pdf\u0022\u003Ehttp://www.unicode.org/charts/PDF/U1D00.pdf\u003C/a\u003E\u003C/description\u003E\u003C/item\u003E\n///   \u003Citem\u003E\u003Cdescription\u003EPhonetic Extensions Supplement: \u003Ca href=\u0022http://www.unicode.org/charts/PDF/U1D80.pdf\u0022\u003Ehttp://www.unicode.org/charts/PDF/U1D80.pdf\u003C/a\u003E\u003C/description\u003E\u003C/item\u003E\n///   \u003Citem\u003E\u003Cdescription\u003EGeneral Punctuation: \u003Ca href=\u0022http://www.unicode.org/charts/PDF/U2000.pdf\u0022\u003Ehttp://www.unicode.org/charts/PDF/U2000.pdf\u003C/a\u003E\u003C/description\u003E\u003C/item\u003E\n///   \u003Citem\u003E\u003Cdescription\u003ESuperscripts and Subscripts: \u003Ca href=\u0022http://www.unicode.org/charts/PDF/U2070.pdf\u0022\u003Ehttp://www.unicode.org/charts/PDF/U2070.pdf\u003C/a\u003E\u003C/description\u003E\u003C/item\u003E\n///   \u003Citem\u003E\u003Cdescription\u003EEnclosed Alphanumerics: \u003Ca href=\u0022http://www.unicode.org/charts/PDF/U2460.pdf\u0022\u003Ehttp://www.unicode.org/charts/PDF/U2460.pdf\u003C/a\u003E\u003C/description\u003E\u003C/item\u003E\n///   \u003Citem\u003E\u003Cdescription\u003EDingbats: \u003Ca href=\u0022http://www.unicode.org/charts/PDF/U2700.pdf\u0022\u003Ehttp://www.unicode.org/charts/PDF/U2700.pdf\u003C/a\u003E\u003C/description\u003E\u003C/item\u003E\n///   \u003Citem\u003E\u003Cdescription\u003ESupplemental Punctuation: \u003Ca href=\u0022http://www.unicode.org/charts/PDF/U2E00.pdf\u0022\u003Ehttp://www.unicode.org/charts/PDF/U2E00.pdf\u003C/a\u003E\u003C/description\u003E\u003C/item\u003E\n///   \u003Citem\u003E\u003Cdescription\u003EAlphabetic Presentation Forms: \u003Ca href=\u0022http://www.unicode.org/charts/PDF/UFB00.pdf\u0022\u003Ehttp://www.unicode.org/charts/PDF/UFB00.pdf\u003C/a\u003E\u003C/description\u003E\u003C/item\u003E\n///   \u003Citem\u003E\u003Cdescription\u003EHalfwidth and Fullwidth Forms: \u003Ca href=\u0022http://www.unicode.org/charts/PDF/UFF00.pdf\u0022\u003Ehttp://www.unicode.org/charts/PDF/UFF00.pdf\u003C/a\u003E\u003C/description\u003E\u003C/item\u003E\n/// \u003C/ul\u003E\n/// \u003Cpara/\u003E\n/// See: \u003Ca href=\u0022http://en.wikipedia.org/wiki/Latin_characters_in_Unicode\u0022\u003Ehttp://en.wikipedia.org/wiki/Latin_characters_in_Unicode\u003C/a\u003E\n/// \u003Cpara/\u003E\n/// For example, \u0027\u0026amp;agrave;\u0027 will be replaced by \u0027a\u0027.\n/// \u003C/summary\u003E\npublic static partial class StringExtensions\n{\n    /// \u003Csummary\u003E\n    /// Converts characters above ASCII to their ASCII equivalents.  For example,\n    /// accents are removed from accented characters. \n    /// \u003C/summary\u003E\n    /// \u003Cparam name=\u0022input\u0022\u003E     The string of characters to fold \u003C/param\u003E\n    /// \u003Cparam name=\u0022length\u0022\u003E    The length of the folded return string \u003C/param\u003E\n    /// \u003Creturns\u003E length of output \u003C/returns\u003E\n    public static string FoldToASCII(this string input, int? length = null)\n    {\n        // See https://gist.github.com/andyraddatz/e6a396fb91856174d4e3f1bf2e10951c\n    }\n}\n\n\nHope that helps someone else, this is the most robust solution I\u0027ve found!\n    ","\nThis works fine in java. \n\nIt basically converts all accented characters into their deAccented counterparts followed by their combining diacritics. Now you can use a regex to strip off the diacritics.\n\nimport java.text.Normalizer;\nimport java.util.regex.Pattern;\n\npublic String deAccent(String str) {\n    String nfdNormalizedString = Normalizer.normalize(str, Normalizer.Form.NFD); \n    Pattern pattern = Pattern.compile(\u0022\\\\p{InCombiningDiacriticalMarks}\u002B\u0022);\n    return pattern.matcher(nfdNormalizedString).replaceAll(\u0022\u0022);\n}\n\n    ","\nTHIS IS THE VB VERSION (Works with GREEK) :\n\nImports System.Text\n\nImports System.Globalization\n\nPublic Function RemoveDiacritics(ByVal s As String)\n    Dim normalizedString As String\n    Dim stringBuilder As New StringBuilder\n    normalizedString = s.Normalize(NormalizationForm.FormD)\n    Dim i As Integer\n    Dim c As Char\n    For i = 0 To normalizedString.Length - 1\n        c = normalizedString(i)\n        If CharUnicodeInfo.GetUnicodeCategory(c) \u003C\u003E UnicodeCategory.NonSpacingMark Then\n            stringBuilder.Append(c)\n        End If\n    Next\n    Return stringBuilder.ToString()\nEnd Function\n\n    ","\nThis is how i replace diacritic characters to non-diacritic ones in all my .NET program\n\nC#:\n\n//Transforms the culture of a letter to its equivalent representation in the 0-127 ascii table, such as the letter \u0027\u00E9\u0027 is substituted by an \u0027e\u0027\npublic string RemoveDiacritics(string s)\n{\n    string normalizedString = null;\n    StringBuilder stringBuilder = new StringBuilder();\n    normalizedString = s.Normalize(NormalizationForm.FormD);\n    int i = 0;\n    char c = \u0027\\0\u0027;\n\n    for (i = 0; i \u003C= normalizedString.Length - 1; i\u002B\u002B)\n    {\n        c = normalizedString[i];\n        if (CharUnicodeInfo.GetUnicodeCategory(c) != UnicodeCategory.NonSpacingMark)\n        {\n            stringBuilder.Append(c);\n        }\n    }\n\n    return stringBuilder.ToString().ToLower();\n}\n\n\nVB .NET:\n\n\u0027Transforms the culture of a letter to its equivalent representation in the 0-127 ascii table, such as the letter \u0022\u00E9\u0022 is substituted by an \u0022e\u0022\u0027\nPublic Function RemoveDiacritics(ByVal s As String) As String\n    Dim normalizedString As String\n    Dim stringBuilder As New StringBuilder\n    normalizedString = s.Normalize(NormalizationForm.FormD)\n    Dim i As Integer\n    Dim c As Char\n\n    For i = 0 To normalizedString.Length - 1\n        c = normalizedString(i)\n        If CharUnicodeInfo.GetUnicodeCategory(c) \u003C\u003E UnicodeCategory.NonSpacingMark Then\n            stringBuilder.Append(c)\n        End If\n    Next\n    Return stringBuilder.ToString().ToLower()\nEnd Function\n\n    ","\nPopping this Library here if you haven\u0027t already considered it. Looks like there are a full range of unit tests with it. \n\nhttps://github.com/thomasgalliker/Diacritics.NET\n    ","\nTry HelperSharp package.\n\nThere is a method RemoveAccents:\n\n public static string RemoveAccents(this string source)\n {\n     //8 bit characters \n     byte[] b = Encoding.GetEncoding(1251).GetBytes(source);\n\n     // 7 bit characters\n     string t = Encoding.ASCII.GetString(b);\n     Regex re = new Regex(\u0022[^a-zA-Z0-9]=-_/\u0022);\n     string c = re.Replace(t, \u0022 \u0022);\n     return c;\n }\n\n    ","\nyou can use string extension from MMLib.Extensions nuget package:\n\nusing MMLib.RapidPrototyping.Generators;\npublic void ExtensionsExample()\n{\n  string target = \u0022a\u00E1c\u010De\u00E9i\u00ED\u0022;\n  Assert.AreEqual(\u0022aacceeii\u0022, target.RemoveDiacritics());\n} \n\n\n\n\nNuget page: https://www.nuget.org/packages/MMLib.Extensions/\nCodeplex project site https://mmlib.codeplex.com/\n    ","\nImports System.Text\nImports System.Globalization\n\n Public Function DECODE(ByVal x As String) As String\n        Dim sb As New StringBuilder\n        For Each c As Char In x.Normalize(NormalizationForm.FormD).Where(Function(a) CharUnicodeInfo.GetUnicodeCategory(a) \u003C\u003E UnicodeCategory.NonSpacingMark)  \n            sb.Append(c)\n        Next\n        Return sb.ToString()\n    End Function\n\n    ","\nWhat this person said:\n\nEncoding.ASCII.GetString(Encoding.GetEncoding(1251).GetBytes(text));\n\nIt actually splits the likes of \u00E5 which is one character (which is character code 00E5, not 0061 plus the modifier 030A which would look the same) into a plus some kind of modifier, and then the ASCII conversion removes the modifier, leaving the only a.\n    ","\nI really like the concise and functional code provided by azrafe7.\nSo, I have changed it a little bit to convert it to an extension method:\n\npublic static class StringExtensions\n{\n    public static string RemoveDiacritics(this string text)\n    {\n        const string SINGLEBYTE_LATIN_ASCII_ENCODING = \u0022ISO-8859-8\u0022;\n\n        if (string.IsNullOrEmpty(text))\n        {\n            return string.Empty;\n        }\n\n        return Encoding.ASCII.GetString(\n            Encoding.GetEncoding(SINGLEBYTE_LATIN_ASCII_ENCODING).GetBytes(text));\n    }\n}\n\n    ","\nThis code worked for me:\nvar updatedText = text.Normalize(NormalizationForm.FormD)\n     .Where(c =\u003E CharUnicodeInfo.GetUnicodeCategory(c) != UnicodeCategory.NonSpacingMark)\n     .ToArray();\n\nHowever, please don\u0027t do this with names. It\u0027s not only an insult to people with umlauts/accents in their name, it can also be dangerously wrong in certain situations (see below). There are alternative writings instead of just removing the accent.\nFurthermore, it\u0027s simply wrong and dangerous, e.g. if the user has to provide his name exactly how it occurs on the passport.\nFor example my name is written Zuberb\u00FChler and in the machine readable part of my passport you will find Zuberbuehler. By removing the umlaut, the name will not match with either part. This can lead to issues for the users.\nYou should rather disallow umlauts/accent in an input form for names so the user can write his name correctly without its umlaut or accent.\nPractical example, if the web service to apply for ESTA (https://www.application-esta.co.uk/special-characters-and) would use above code instead of transforming umlauts correctly, the ESTA application would either be refused or the traveller will have problems with the American Border Control when entering the States.\nAnother example would be flight tickets. Assuming you have a flight ticket booking web application, the user provides his name with an accent and your implementation is just removing the accents and then using the airline\u0027s web service to book the ticket! Your customer may not be allowed to board since the name does not match to any part of his/her passport.\n    ","\nNot having enough reputations, apparently I can not comment on Alexander\u0027s excellent link. - Lucene appears to be the only solution working in reasonably generic cases. \n\nFor those wanting a simple copy-paste solution, here it is, leveraging code in Lucene:\n\nstring testbed = \u0022\u00C1\u00C2\u00C4\u00C5\u00C7\u00C9\u00CD\u00CE\u00D3\u00D6\u00D8\u00DA\u00DC\u00DE\u00E0\u00E1\u00E2\u00E3\u00E4\u00E5\u00E6\u00E7\u00E8\u00E9\u00EA\u00EB\u00EC\u00ED\u00EE\u00EF\u00F0\u00F1\u00F3\u00F4\u00F6\u00F8\u00FA\u00FC\u0101\u0103\u010D\u0110\u0119\u011F\u0131\u0141\u0142\u0144\u014C\u014D\u0159\u015E\u015F\u0161\u017A\u017E\u0219\u021B\u1EC7\u1EE7\u0022;\n\nConsole.WriteLine(Lucene.latinizeLucene(testbed));\n\n\n  \n    AAAACEIIOOOUUTHaaaaaaaeceeeeiiiidnoooouuaacDegiLlnOorSsszzsteu\n  \n\n\n//////////\n\npublic static class Lucene\n{\n    // source: https://raw.githubusercontent.com/apache/lucenenet/master/src/Lucene.Net.Analysis.Common/Analysis/Miscellaneous/ASCIIFoldingFilter.cs\n    // idea: https://stackoverflow.com/questions/249087/how-do-i-remove-diacritics-accents-from-a-string-in-net (scroll down, search for lucene by Alexander)\n    public static string latinizeLucene(string arg)\n    {\n        char[] argChar = arg.ToCharArray();\n\n        // latinizeLuceneImpl can expand one char up to four chars - e.g. \u00DE to TH, or \u00E6 to ae, or in fact \u247D to (10)\n        char[] resultChar = new String(\u0027 \u0027, arg.Length * 4).ToCharArray();\n\n        int outputPos = Lucene.latinizeLuceneImpl(argChar, 0, ref resultChar, 0, arg.Length);\n\n        string ret = new string(resultChar);\n        ret = ret.Substring(0, outputPos);\n\n        return ret;\n    }\n\n    /// \u003Csummary\u003E\n    /// Converts characters above ASCII to their ASCII equivalents.  For example,\n    /// accents are removed from accented characters. \n    /// \u003Cpara/\u003E\n    /// @lucene.internal\n    /// \u003C/summary\u003E\n    /// \u003Cparam name=\u0022input\u0022\u003E     The characters to fold \u003C/param\u003E\n    /// \u003Cparam name=\u0022inputPos\u0022\u003E  Index of the first character to fold \u003C/param\u003E\n    /// \u003Cparam name=\u0022output\u0022\u003E    The result of the folding. Should be of size \u003E= \u003Cc\u003Elength * 4\u003C/c\u003E. \u003C/param\u003E\n    /// \u003Cparam name=\u0022outputPos\u0022\u003E Index of output where to put the result of the folding \u003C/param\u003E\n    /// \u003Cparam name=\u0022length\u0022\u003E    The number of characters to fold \u003C/param\u003E\n    /// \u003Creturns\u003E length of output \u003C/returns\u003E\n    private static int latinizeLuceneImpl(char[] input, int inputPos, ref char[] output, int outputPos, int length)\n    {\n        int end = inputPos \u002B length;\n        for (int pos = inputPos; pos \u003C end; \u002B\u002Bpos)\n        {\n            char c = input[pos];\n\n            // Quick test: if it\u0027s not in range then just keep current character\n            if (c \u003C \u0027\\u0080\u0027)\n            {\n                output[outputPos\u002B\u002B] = c;\n            }\n            else\n            {\n                switch (c)\n                {\n                    case \u0027\\u00C0\u0027: // \u00C0  [LATIN CAPITAL LETTER A WITH GRAVE]\n                    case \u0027\\u00C1\u0027: // \u00C1  [LATIN CAPITAL LETTER A WITH ACUTE]\n                    case \u0027\\u00C2\u0027: // \u00C2  [LATIN CAPITAL LETTER A WITH CIRCUMFLEX]\n                    case \u0027\\u00C3\u0027: // \u00C3  [LATIN CAPITAL LETTER A WITH TILDE]\n                    case \u0027\\u00C4\u0027: // \u00C4  [LATIN CAPITAL LETTER A WITH DIAERESIS]\n                    case \u0027\\u00C5\u0027: // \u00C5  [LATIN CAPITAL LETTER A WITH RING ABOVE]\n                    case \u0027\\u0100\u0027: // \u0100  [LATIN CAPITAL LETTER A WITH MACRON]\n                    case \u0027\\u0102\u0027: // \u0102  [LATIN CAPITAL LETTER A WITH BREVE]\n                    case \u0027\\u0104\u0027: // \u0104  [LATIN CAPITAL LETTER A WITH OGONEK]\n                    case \u0027\\u018F\u0027: // \u018F  http://en.wikipedia.org/wiki/Schwa  [LATIN CAPITAL LETTER SCHWA]\n                    case \u0027\\u01CD\u0027: // \u01CD  [LATIN CAPITAL LETTER A WITH CARON]\n                    case \u0027\\u01DE\u0027: // \u01DE  [LATIN CAPITAL LETTER A WITH DIAERESIS AND MACRON]\n                    case \u0027\\u01E0\u0027: // \u01E0  [LATIN CAPITAL LETTER A WITH DOT ABOVE AND MACRON]\n                    case \u0027\\u01FA\u0027: // \u01FA  [LATIN CAPITAL LETTER A WITH RING ABOVE AND ACUTE]\n                    case \u0027\\u0200\u0027: // \u0200  [LATIN CAPITAL LETTER A WITH DOUBLE GRAVE]\n                    case \u0027\\u0202\u0027: // \u0202  [LATIN CAPITAL LETTER A WITH INVERTED BREVE]\n                    case \u0027\\u0226\u0027: // \u0226  [LATIN CAPITAL LETTER A WITH DOT ABOVE]\n                    case \u0027\\u023A\u0027: // \u023A  [LATIN CAPITAL LETTER A WITH STROKE]\n                    case \u0027\\u1D00\u0027: // \u1D00  [LATIN LETTER SMALL CAPITAL A]\n                    case \u0027\\u1E00\u0027: // \u1E00  [LATIN CAPITAL LETTER A WITH RING BELOW]\n                    case \u0027\\u1EA0\u0027: // \u1EA0  [LATIN CAPITAL LETTER A WITH DOT BELOW]\n                    case \u0027\\u1EA2\u0027: // \u1EA2  [LATIN CAPITAL LETTER A WITH HOOK ABOVE]\n                    case \u0027\\u1EA4\u0027: // \u1EA4  [LATIN CAPITAL LETTER A WITH CIRCUMFLEX AND ACUTE]\n                    case \u0027\\u1EA6\u0027: // \u1EA6  [LATIN CAPITAL LETTER A WITH CIRCUMFLEX AND GRAVE]\n                    case \u0027\\u1EA8\u0027: // \u1EA8  [LATIN CAPITAL LETTER A WITH CIRCUMFLEX AND HOOK ABOVE]\n                    case \u0027\\u1EAA\u0027: // \u1EAA  [LATIN CAPITAL LETTER A WITH CIRCUMFLEX AND TILDE]\n                    case \u0027\\u1EAC\u0027: // \u1EAC  [LATIN CAPITAL LETTER A WITH CIRCUMFLEX AND DOT BELOW]\n                    case \u0027\\u1EAE\u0027: // \u1EAE  [LATIN CAPITAL LETTER A WITH BREVE AND ACUTE]\n                    case \u0027\\u1EB0\u0027: // \u1EB0  [LATIN CAPITAL LETTER A WITH BREVE AND GRAVE]\n                    case \u0027\\u1EB2\u0027: // \u1EB2  [LATIN CAPITAL LETTER A WITH BREVE AND HOOK ABOVE]\n                    case \u0027\\u1EB4\u0027: // \u1EB4  [LATIN CAPITAL LETTER A WITH BREVE AND TILDE]\n                    case \u0027\\u1EB6\u0027: // \u1EB6  [LATIN CAPITAL LETTER A WITH BREVE AND DOT BELOW]\n                    case \u0027\\u24B6\u0027: // \u24B6  [CIRCLED LATIN CAPITAL LETTER A]\n                    case \u0027\\uFF21\u0027: // \uFF21  [FULLWIDTH LATIN CAPITAL LETTER A]\n                        output[outputPos\u002B\u002B] = \u0027A\u0027;\n                        break;\n                    case \u0027\\u00E0\u0027: // \u00E0  [LATIN SMALL LETTER A WITH GRAVE]\n                    case \u0027\\u00E1\u0027: // \u00E1  [LATIN SMALL LETTER A WITH ACUTE]\n                    case \u0027\\u00E2\u0027: // \u00E2  [LATIN SMALL LETTER A WITH CIRCUMFLEX]\n                    case \u0027\\u00E3\u0027: // \u00E3  [LATIN SMALL LETTER A WITH TILDE]\n                    case \u0027\\u00E4\u0027: // \u00E4  [LATIN SMALL LETTER A WITH DIAERESIS]\n                    case \u0027\\u00E5\u0027: // \u00E5  [LATIN SMALL LETTER A WITH RING ABOVE]\n                    case \u0027\\u0101\u0027: // \u0101  [LATIN SMALL LETTER A WITH MACRON]\n                    case \u0027\\u0103\u0027: // \u0103  [LATIN SMALL LETTER A WITH BREVE]\n                    case \u0027\\u0105\u0027: // \u0105  [LATIN SMALL LETTER A WITH OGONEK]\n                    case \u0027\\u01CE\u0027: // \u01CE  [LATIN SMALL LETTER A WITH CARON]\n                    case \u0027\\u01DF\u0027: // \u01DF  [LATIN SMALL LETTER A WITH DIAERESIS AND MACRON]\n                    case \u0027\\u01E1\u0027: // \u01E1  [LATIN SMALL LETTER A WITH DOT ABOVE AND MACRON]\n                    case \u0027\\u01FB\u0027: // \u01FB  [LATIN SMALL LETTER A WITH RING ABOVE AND ACUTE]\n                    case \u0027\\u0201\u0027: // \u0201  [LATIN SMALL LETTER A WITH DOUBLE GRAVE]\n                    case \u0027\\u0203\u0027: // \u0203  [LATIN SMALL LETTER A WITH INVERTED BREVE]\n                    case \u0027\\u0227\u0027: // \u0227  [LATIN SMALL LETTER A WITH DOT ABOVE]\n                    case \u0027\\u0250\u0027: // \u0250  [LATIN SMALL LETTER TURNED A]\n                    case \u0027\\u0259\u0027: // \u0259  [LATIN SMALL LETTER SCHWA]\n                    case \u0027\\u025A\u0027: // \u025A  [LATIN SMALL LETTER SCHWA WITH HOOK]\n                    case \u0027\\u1D8F\u0027: // \u1D8F  [LATIN SMALL LETTER A WITH RETROFLEX HOOK]\n                    case \u0027\\u1D95\u0027: // \u1D95  [LATIN SMALL LETTER SCHWA WITH RETROFLEX HOOK]\n                    case \u0027\\u1E01\u0027: // \u1EA1  [LATIN SMALL LETTER A WITH RING BELOW]\n                    case \u0027\\u1E9A\u0027: // \u1EA3  [LATIN SMALL LETTER A WITH RIGHT HALF RING]\n                    case \u0027\\u1EA1\u0027: // \u1EA1  [LATIN SMALL LETTER A WITH DOT BELOW]\n                    case \u0027\\u1EA3\u0027: // \u1EA3  [LATIN SMALL LETTER A WITH HOOK ABOVE]\n                    case \u0027\\u1EA5\u0027: // \u1EA5  [LATIN SMALL LETTER A WITH CIRCUMFLEX AND ACUTE]\n                    case \u0027\\u1EA7\u0027: // \u1EA7  [LATIN SMALL LETTER A WITH CIRCUMFLEX AND GRAVE]\n                    case \u0027\\u1EA9\u0027: // \u1EA9  [LATIN SMALL LETTER A WITH CIRCUMFLEX AND HOOK ABOVE]\n                    case \u0027\\u1EAB\u0027: // \u1EAB  [LATIN SMALL LETTER A WITH CIRCUMFLEX AND TILDE]\n                    case \u0027\\u1EAD\u0027: // \u1EAD  [LATIN SMALL LETTER A WITH CIRCUMFLEX AND DOT BELOW]\n                    case \u0027\\u1EAF\u0027: // \u1EAF  [LATIN SMALL LETTER A WITH BREVE AND ACUTE]\n                    case \u0027\\u1EB1\u0027: // \u1EB1  [LATIN SMALL LETTER A WITH BREVE AND GRAVE]\n                    case \u0027\\u1EB3\u0027: // \u1EB3  [LATIN SMALL LETTER A WITH BREVE AND HOOK ABOVE]\n                    case \u0027\\u1EB5\u0027: // \u1EB5  [LATIN SMALL LETTER A WITH BREVE AND TILDE]\n                    case \u0027\\u1EB7\u0027: // \u1EB7  [LATIN SMALL LETTER A WITH BREVE AND DOT BELOW]\n                    case \u0027\\u2090\u0027: // \u2090  [LATIN SUBSCRIPT SMALL LETTER A]\n                    case \u0027\\u2094\u0027: // \u2094  [LATIN SUBSCRIPT SMALL LETTER SCHWA]\n                    case \u0027\\u24D0\u0027: // \u24D0  [CIRCLED LATIN SMALL LETTER A]\n                    case \u0027\\u2C65\u0027: // \u2C65  [LATIN SMALL LETTER A WITH STROKE]\n                    case \u0027\\u2C6F\u0027: // \u2C6F  [LATIN CAPITAL LETTER TURNED A]\n                    case \u0027\\uFF41\u0027: // \uFF41  [FULLWIDTH LATIN SMALL LETTER A]\n                        output[outputPos\u002B\u002B] = \u0027a\u0027;\n                        break;\n                    case \u0027\\uA732\u0027: // \uA732  [LATIN CAPITAL LETTER AA]\n                        output[outputPos\u002B\u002B] = \u0027A\u0027;\n                        output[outputPos\u002B\u002B] = \u0027A\u0027;\n                        break;\n                    case \u0027\\u00C6\u0027: // \u00C6  [LATIN CAPITAL LETTER AE]\n                    case \u0027\\u01E2\u0027: // \u01E2  [LATIN CAPITAL LETTER AE WITH MACRON]\n                    case \u0027\\u01FC\u0027: // \u01FC  [LATIN CAPITAL LETTER AE WITH ACUTE]\n                    case \u0027\\u1D01\u0027: // \u1D01  [LATIN LETTER SMALL CAPITAL AE]\n                        output[outputPos\u002B\u002B] = \u0027A\u0027;\n                        output[outputPos\u002B\u002B] = \u0027E\u0027;\n                        break;\n                    case \u0027\\uA734\u0027: // \uA734  [LATIN CAPITAL LETTER AO]\n                        output[outputPos\u002B\u002B] = \u0027A\u0027;\n                        output[outputPos\u002B\u002B] = \u0027O\u0027;\n                        break;\n                    case \u0027\\uA736\u0027: // \uA736  [LATIN CAPITAL LETTER AU]\n                        output[outputPos\u002B\u002B] = \u0027A\u0027;\n                        output[outputPos\u002B\u002B] = \u0027U\u0027;\n                        break;\n\n        // etc. etc. etc.\n        // see link above for complete source code\n        // \n        // unfortunately, postings are limited, as in\n        // \u0022Body is limited to 30000 characters; you entered 136098.\u0022\n\n                    [...]\n\n                    case \u0027\\u2053\u0027: // \u2053  [SWUNG DASH]\n                    case \u0027\\uFF5E\u0027: // \uFF5E  [FULLWIDTH TILDE]\n                        output[outputPos\u002B\u002B] = \u0027~\u0027;\n                        break;\n                    default:\n                        output[outputPos\u002B\u002B] = c;\n                        break;\n                }\n            }\n        }\n        return outputPos;\n    }\n}\n\n    ","\n                \n                This is wrong. German characters \u00E4 and \u00F6 and \u00FC get latinized as ae ue and oe, and not as a, o u ...\n                \n\u2013\u00A0Stefan Steiger\n                Nov 20 \u002712 at 13:41\n                        \n                            \n                        \n            ","\n                \n                Also, Polish letter \u0142 is ignored.\n                \n\u2013\u00A0Chris W\n                Dec 12 \u002712 at 9:05\n            ","\n                \n                Also Norse \u00F8 is ignored\n                \n\u2013\u00A0Richard de Wit\n                Mar 25 \u002714 at 8:09\n            ","\n                \n                @StefanSteiger You know, in Czech there are letters like \u00E1\u010D\u011B\u016F, which we usually \u0022latinize\u0022 to aceu, even though it sounds different and may cause confusion in words like \u0022hr\u00E1b\u011B\u0022 /hra:bje/, \u0022hrab\u011B\u0022 /hrabje/, and \u0022hrabe\u0022 /hrabe/. To me, it seems that the deletion of diacritics is a purely graphical matter, indepentent on the phonetics or history of the letter. Letters like \u00E4 \u00F6 \u00FC got created by adding a superscript \u0022e\u0022 to the base letters, thus the \u0022ae\u0022 decomposition makes sense historically. It depends on the goal - to remove the graphical marks, or to decompose the letter to ASCII characters.\n                \n\u2013\u00A0IllidanS4 supports Monica\n                Nov 11 \u002715 at 20:25\n            ","\n                \n                This function is language-agnostic. It doesn\u0027t know whether the string is in German or in some other language. If we take into account that it\u0027s okay to replace \u00F6 with oe in a German text, but it doesn\u0027t make any sense to do it with Turkish, then we\u0027ll see that without detecting the language this problem isn\u0027t really solvable.\n                \n\u2013\u00A0thorn\u0308\n                Aug 4 \u002716 at 12:02\n                        \n                            \n                        \n            ","\n                \n                This is as far the best method I\u0027ve seen.\n                \n\u2013\u00A0Cleiton\n                Jan 31 \u002714 at 3:27\n            ","\n                \n                I do like this solution and it works well for Windows Store Apps. However, it doesn\u0027t work for Windows Phone Apps as encoding ISO-8859-8 doesn\u0027t seem to be available. Is there another encoding that can be used instead?\n                \n\u2013\u00A0Philip Colmer\n                Jul 28 \u002714 at 6:58\n            ","\n                \n                This will work for most common characters, but many special characters like \u00AB \u00BB and \u2026 (as a single character) will get altered in the process which ain\u0027t the case with the accepted solution.\n                \n\u2013\u00A0The_Black_Smurf\n                Mar 24 \u002717 at 19:23\n                        \n                            \n                        \n            ","\n                \n                Note that this doesn\u0027t work on .NET Core on Linux: System.ArgumentException: \u0027ISO-8859-8\u0027 is not a supported encoding name.\n                \n\u2013\u00A0EM0\n                Feb 22 \u002718 at 10:30\n            ","\n                \n                If you\u0027re on .NET Core, install System.Text.Encoding.CodePages from nuget, then call this to register the provider: Encoding.RegisterProvider(CodePagesEncodingProvider.Instance); - once you\u0027ve done this, you can make use of ISO-8859-8\n                \n\u2013\u00A0SpaceBison\n                Jan 23 at 15:34\n            ","\n                \n                You should preallocate the StringBuilder buffer to the name.Length to minimize memory allocation overhead.  That last Split/Join call to remove sequential duplicate _ is interesting. Perhaps we should just avoid adding them in the loop. Set a flag for the previous character being an _ and not emit one if  true.\n                \n\u2013\u00A0IDisposable\n                Sep 1 \u002709 at 21:18\n            ","\n                \n                2 really good points, I\u0027ll rewrite it if I ever get the time to go back to this portion of code :)\n                \n\u2013\u00A0Luk\n                Sep 8 \u002709 at 9:14\n            ","\n                \n                Nice. In addition to IDisposables comment, we should probably check for c \u003C 128, to ensure that we don\u0027t pickup any UTF chars, see here.\n                \n\u2013\u00A0Christian Gollhardt\n                Jan 5 \u002718 at 17:48\n                        \n                            \n                        \n            ","\n                \n                Or probably more efficiently c \u003C 123. see ASCI\n                \n\u2013\u00A0Christian Gollhardt\n                Jan 5 \u002718 at 17:56\n            ","\n                \n                Your implementation does the job, but should be improved before being used in production code.\n                \n\u2013\u00A0Pierre Arnaud\n                Apr 26 \u002716 at 4:05\n            ","\n                \n                github.com/apache/lucenenet/blob/master/src/\u2026\n                \n\u2013\u00A0Alexander\n                Apr 18 \u002718 at 20:31\n            ","\n                \n                why not simply replace this if (entry.Key.IndexOf(c) != -1) into if (entry.Key.Contains(c))\n                \n\u2013\u00A0Pawel Cioch\n                Apr 15 \u002719 at 18:12\n            ","\n                \n                I used @Alexander\u0027s link to make an answer below: stackoverflow.com/a/56797567/479701\n                \n\u2013\u00A0Andy Raddatz\n                Jun 27 \u002719 at 19:51\n            ","\n                \n                I don\u0027t understand why there\u0027s so much hoop jumping to use { \u0022\u00E4\u00E6\u01FD\u0022, \u0022ae\u0022 } instead of { \u0022\u00E4\u0022, \u0022ae\u0022 }, { \u0022\u00E6\u0022, \u0022ae\u0022 }, { \u0022\u01FD\u0022, \u0022ae\u0022 } and just calling if (foreign_characters.TryGetValue(...)) .... You\u0027ve completely defeated the purpose of the index that the dictionary already has.\n                \n\u2013\u00A0Bacon Bits\n                Aug 28 \u002719 at 12:39\n                        \n                            \n                        \n            ","\n                \n                instead of  stripped \u002B= nrml.charAt(i) use a StringBuilder. you have O(n\u00B2) runtime hidden here.\n                \n\u2013\u00A0Andreas Petersson\n                Sep 9 \u002709 at 8:50\n            ","\n                \n                This and other Java answers here are just a messing this thread. Question is about c# (.NET) not Java!\n                \n\u2013\u00A0suchoss\n                Nov 14 \u002719 at 10:28\n            ","\n                \n                That\u0027s brilliant! Short and efficient!\n                \n\u2013\u00A0krlzlx\n                Sep 2 \u002716 at 12:14\n            ","\n                \n                Great stuff.  Almost any characters I tested passed. (\u00E4\u00E1\u010D\u010F\u011B\u00E9\u00ED\u013E\u013E\u0148\u00F4\u00F3\u0159\u0155\u0161\u0165\u00FA\u016F\u00FD\u017E \u00C4\u00C1\u010C\u010E\u011A\u00C9\u00CD\u013D\u013D\u0147\u00D4\u00D3\u0158\u0154\u0160\u0164\u00DA\u016E\u00DD\u017D \u00D6\u00DC\u00CB \u0142\u0141\u0111\u0110 \u0163\u0162\u015F\u015E\u00E7\u00C7 \u00F8\u0131). The problems were found only with \u00DF\u0259, which are converted to ?, but such exceptions can always be handled in separate way. Before putting this into production, the test should be better made against all Unicode areas containing letters with diacritics.\n                \n\u2013\u00A0miroxlav\n                Dec 3 \u002716 at 14:18\n            ","\n                \n                Caveats: 1) Tthe concept is locale-dependent. For example, \u0022\u00E4\u0022 could be \u0022a\u0022 or \u0022aa\u0022. 2) Misnamed/misdescribed: The result is not necessarily only from the C0 Controls and Basic Latin block. It only converts Latin letters and some symbol variants to \u0022equivalents\u0022. (Of course, one could take another pass to replace or remove non-C0 Controls and Basic Latin block characters afterward.) But this will do what it does well.\n                \n\u2013\u00A0Tom Blodget\n                Jun 27 \u002719 at 21:50\n                        \n                            \n                        \n            ","\n                \n                Thanks for putting this out there.  I believe you have a trailing } bracket at the end of the file.\n                \n\u2013\u00A0Superman.Lopez\n                Sep 25 at 8:00\n            ","\n                \n                Or in Java 7, \u0022\\\\p{Block=CombiningDiacriticalMarks}\u0022\n                \n\u2013\u00A0Brent Faust\n                May 19 \u002715 at 20:18\n            ","\n                \n                Why would you post a Java solution when the question specifically asks for .NET?\n                \n\u2013\u00A0David\n                Apr 17 \u002717 at 15:42\n            ","\n                \n                @David This question is the top-hit on Google for \u0022java drop accents\u0022. Not saying it belongs here, but it\u0027s useful here.\n                \n\u2013\u00A0blubb\n                Mar 23 \u002718 at 11:42\n                        \n                            \n                        \n            ","\n                \n                Might be an old answer, but why are you using separate lines for variable declaration and first assignment?\n                \n\u2013\u00A0NiKiZe\n                Mar 12 \u002718 at 12:51\n            ","\n                \n                Using NFD instead of NFC would cause changes far beyond those requested.\n                \n\u2013\u00A0Jon Hanna\n                Jun 22 \u002715 at 14:04\n            ","\n                \n                This is the only method that works with all polish diacritics. Accepted answer doesn\u0027t work with \u0141 and \u0142 characters.\n                \n\u2013\u00A0yarecky\n                May 2 at 8:17\n            "]},{"Id":"cfcf9b9b-77bc-4e7f-a007-892cd843aaa7","QuestionId":21692193,"Description":"Why not inherit from List\u003CT\u003E?","Votes":1459,"Views":192694,"Tags":["c#",".net","list","oop","inheritance"],"Discussions":["\nThere are some good answers here. I would add to them the following points.\n\n\n  What is the correct C# way of representing a data structure, which, \u0022logically\u0022 (that is to say, \u0022to the human mind\u0022) is just a list of things with a few bells and whistles?\n\n\nAsk any ten non-computer-programmer people who are familiar with the existence of football to fill in the blank:\n\n\n  A football team is a particular kind of _____\n\n\nDid anyone say \u0022list of football players with a few bells and whistles\u0022, or did they all say \u0022sports team\u0022 or \u0022club\u0022 or \u0022organization\u0022?  Your notion that a football team is a particular kind of list of players is in your human mind and your human mind alone. \n\nList\u003CT\u003E is a mechanism.  Football team is a business object -- that is, an object that represents some concept that is in the business domain of the program. Don\u0027t mix those! A football team is a kind of team; it has a roster, a roster is a list of players. A roster is not a particular kind of list of players. A roster is a list of players. So make a property called Roster that is a List\u003CPlayer\u003E. And make it ReadOnlyList\u003CPlayer\u003E while you\u0027re at it, unless you believe that everyone who knows about a football team gets to delete players from the roster.\n\n\n  Is inheriting from List\u003CT\u003E always unacceptable? \n\n\nUnacceptable to who? Me? No.\n\n\n  When is it acceptable? \n\n\nWhen you\u0027re building a mechanism that extends the List\u003CT\u003E mechanism.\n\n\n  What must a programmer consider, when deciding whether to inherit from List\u003CT\u003E or not?\n\n\nAm I building a mechanism or a business object? \n\n\n  But that\u0027s a lot of code! What do I get for all that work?\n\n\nYou spent more time typing up your question that it would have taken you to write forwarding methods for the relevant members of List\u003CT\u003E fifty times over. You\u0027re clearly not afraid of verbosity, and we are talking about a very small amount of code here; this is a few minutes work.\n\nUPDATE\n\nI gave it some more thought and there is another reason to not model a football team as a list of players. In fact it might be a bad idea to model a football team as having a list of players too. The problem with a team as/having a list of players is that what you\u0027ve got is a snapshot of the team at a moment in time. I don\u0027t know what your business case is for this class, but if I had a class that represented a football team I would want to ask it questions like \u0022how many Seahawks players missed games due to injury between 2003 and 2013?\u0022 or \u0022What Denver player who previously played for another team had the largest year-over-year increase in yards ran?\u0022 or \u0022Did the Piggers go all the way this year?\u0022 \n\nThat is, a football team seems to me to be well modeled as a collection of historical facts such as when a player was recruited, injured, retired, etc. Obviously the current player roster is an important fact that should probably be front-and-center, but there may be other interesting things you want to do with this object that require a more historical perspective.\n    ","\nWow, your post has an entire slew of questions and points. Most of the reasoning you get from Microsoft is exactly on point. Let\u0027s start with everything about List\u003CT\u003E\n\nList\u003CT\u003E is highly optimized. Its main usage is to be used as a private member of an object.\nMicrosoft did not seal it because sometimes you might want to create a class that has a friendlier name: class MyList\u003CT, TX\u003E : List\u003CCustomObject\u003CT, Something\u003CTX\u003E\u003E { ... }. Now it\u0027s as easy as doing var list = new MyList\u003Cint, string\u003E();.\nCA1002: Do not expose generic lists: Basically, even if you plan to use this app as the sole developer, it\u0027s worthwhile to develop with good coding practices, so they become instilled into you and second nature. You are still allowed to expose the list as an IList\u003CT\u003E if you need any consumer to have an indexed list. This lets you change the implementation within a class later on.\nMicrosoft made Collection\u003CT\u003E very generic because it is a generic concept... the name says it all; it is just a collection. There are more precise versions such as SortedCollection\u003CT\u003E, ObservableCollection\u003CT\u003E, ReadOnlyCollection\u003CT\u003E, etc. each of which implement IList\u003CT\u003E but not List\u003CT\u003E.\nCollection\u003CT\u003E allows for members (i.e. Add, Remove, etc.) to be overridden because they are virtual. List\u003CT\u003E does not.\nThe last part of your question is spot on. A Football team is more than just a list of players, so it should be a class that contains that list of players. Think Composition vs Inheritance. A Football team has a list of players (a roster), it isn\u0027t a list of players.\n\n\nIf I were writing this code, the class would probably look something like so:\npublic class FootballTeam\n{\n    // Football team rosters are generally 53 total players.\n    private readonly List\u003CT\u003E _roster = new List\u003CT\u003E(53);\n\n    public IList\u003CT\u003E Roster\n    {\n        get { return _roster; }\n    }\n\n    // Yes. I used LINQ here. This is so I don\u0027t have to worry about\n    // _roster.Length vs _roster.Count vs anything else.\n    public int PlayerCount\n    {\n        get { return _roster.Count(); }\n    }\n\n    // Any additional members you want to expose/wrap.\n}\n\n    ","\nclass FootballTeam : List\u003CFootballPlayer\u003E \n{ \n    public string TeamName; \n    public int RunningTotal;\n}\n\n\nPrevious code means: a bunch of guys from the street playing football, and they happen to have a name. Something like:\n\n\n\nAnyway, this code (from m-y\u0027s answer) \n\npublic class FootballTeam\n{\n    // A team\u0027s name\n    public string TeamName; \n\n    // Football team rosters are generally 53 total players.\n    private readonly List\u003CT\u003E _roster = new List\u003CT\u003E(53);\n\n    public IList\u003CT\u003E Roster\n    {\n        get { return _roster; }\n    }\n\n    public int PlayerCount\n    {\n        get { return _roster.Count(); }\n    }\n\n    // Any additional members you want to expose/wrap.\n}\n\n\nMeans: this is a football team which has management, players, admins, etc. Something like:\n\n\n\nThis is how is your logic presented in pictures\u2026\n    ","\nThis is a classic example of composition vs inheritance.\n\nIn this specific case:\n\nIs the team a list of players with added behavior\n\nor\n\nIs the team an object of its own that happens to contain a list of players.\n\nBy extending List you are limiting yourself in a number of ways:\n\n\nYou cannot restrict access (for example, stopping people changing the roster). You get all the List methods whether you need/want them all or not.\nWhat happens if you want to have lists of other things as well. For example, teams have coaches, managers, fans, equipment, etc. Some of those might well be lists in their own right.\nYou limit your options for inheritance. For example you might want to create a generic Team object, and then have BaseballTeam, FootballTeam, etc. that inherit from that. To inherit from List you need to do the inheritance from Team, but that then means that all the various types of team are forced to have the same implementation of that roster.\n\n\nComposition - including an object giving the behavior you want inside your object.\n\nInheritance - your object becomes an instance of the object that has the behavior you want.\n\nBoth have their uses, but this is a clear case where composition is preferable.\n    ","\nAs everyone has pointed out, a team of players is not a list of players. This mistake is made by many people everywhere, perhaps at various levels of expertise. Often the problem is subtle and occasionally very gross, as in this case. Such designs are bad because these violate the  Liskov Substitution Principle. The internet has many good articles explaining this concept e.g., http://en.wikipedia.org/wiki/Liskov_substitution_principle \n\nIn summary, there are two rules to be preserved in a Parent/Child relationship among classes:\n\n\na Child should require no characteristic less than what completely defines the Parent.\na Parent should require no characteristic in addition to what completely defines the Child.\n\n\nIn other words, a Parent is a necessary definition of a child, and a child is a sufficient definition of a Parent.\n\nHere is a way to think through ones solution and apply the above principle that should help one avoid such a mistake. One should test ones hypothesis by verifying if all the operations of a parent class are valid for the derived class both structurally and semantically.\n\n\nIs a football team a list of football players? ( Do all properties of a list apply to a team in the same meaning)\n\n\nIs a team a collection of homogenous entities? Yes, team is a collection of Players\nIs the order of inclusion of players descriptive of the state of the team and does the team ensure that the sequence is preserved unless explicitly changed? No, and No\nAre players expected to be included/dropped based on their sequencial position in the team? No\n\n\n\nAs you see, only the first characteristic of a list is applicable to a team. Hence a team is not a list. A list would be a implementation detail of how you manage your team, so it should only be used to store the player objects and be manipulated with methods of Team class.\n\nAt this point I\u0027d like to remark that a Team class should, in my opinion, not even be implemented using a List; it should be implemented using a Set data structure (HashSet, for example) in most cases.\n    ","\nWhat if the FootballTeam has a reserves team along with the main team?\n\nclass FootballTeam\n{\n    List\u003CFootballPlayer\u003E Players { get; set; }\n    List\u003CFootballPlayer\u003E ReservePlayers { get; set; }\n}\n\n\nHow would you model that with? \n\nclass FootballTeam : List\u003CFootballPlayer\u003E \n{ \n    public string TeamName; \n    public int RunningTotal \n}\n\n\nThe relationship is clearly has a and not is a.\n\nor RetiredPlayers?\n\nclass FootballTeam\n{\n    List\u003CFootballPlayer\u003E Players { get; set; }\n    List\u003CFootballPlayer\u003E ReservePlayers { get; set; }\n    List\u003CFootballPlayer\u003E RetiredPlayers { get; set; }\n}\n\n\nAs a rule of thumb, if you ever want to inherit from a collection, name the class SomethingCollection. \n\nDoes your SomethingCollection semantically make sense? Only do this if your type is a collection of Something.\n\nIn the case of FootballTeam it doesn\u0027t sound right. A Team is more than a Collection. A Team can have coaches, trainers, etc as the other answers have pointed out.\n\nFootballCollection sounds like a collection of footballs or maybe a collection of football paraphernalia. TeamCollection, a collection of teams. \n\nFootballPlayerCollection sounds like a collection of players which would be a valid name for a class that inherits from List\u003CFootballPlayer\u003E if you really wanted to do that. \n\nReally List\u003CFootballPlayer\u003E is a perfectly good type to deal with. Maybe IList\u003CFootballPlayer\u003E if you are returning it from a method.\n\nIn summary\n\nAsk yourself\n\n\nIs X a Y? or Has X a Y?\nDo my class names mean what they are?\n\n    ","\nDesign \u003E Implementation\n\nWhat methods and properties you expose is a design decision. What base class you inherit from is an implementation detail. I feel it\u0027s worth taking a step back to the former.\n\nAn object is a collection of data and behaviour.\n\nSo your first questions should be:\n\n\nWhat data does this object comprise in the model I\u0027m creating?\nWhat behaviour does this object exhibit in that model?\nHow might this change in future?\n\n\nBear in mind that inheritance implies an \u0022isa\u0022 (is a) relationship, whereas composition implies a \u0022has a\u0022 (hasa) relationship. Choose the right one for your situation in your view, bearing in mind where things might go as your application evolves.\n\nConsider thinking in interfaces before you think in concrete types, as some people find it easier to put their brain in \u0022design mode\u0022 that way.\n\nThis isn\u0027t something everyone does consciously at this level in day to day coding. But if you\u0027re mulling this sort of topic, you\u0027re treading in design waters. Being aware of it can be liberating.\n\nConsider Design Specifics\n\nTake a look at List\u003CT\u003E and IList\u003CT\u003E on MSDN or Visual Studio. See what methods and properties they expose. Do these methods all look like something someone would want to do to a FootballTeam in your view?\n\nDoes footballTeam.Reverse() make sense to you? Does footballTeam.ConvertAll\u003CTOutput\u003E() look like something you want? \n\nThis isn\u0027t a trick question; the answer might genuinely be \u0022yes\u0022. If you implement/inherit List\u003CPlayer\u003E or IList\u003CPlayer\u003E, you\u0027re stuck with them; if that\u0027s ideal for your model, do it.\n\nIf you decide yes, that makes sense, and you want your object to be treatable as a collection/list of players (behaviour), and you therefore want to implement ICollection or IList, by all means do so. Notionally:\n\nclass FootballTeam : ... ICollection\u003CPlayer\u003E\n{\n    ...\n}\n\n\nIf you want your object to contain a collection/list of players (data), and you therefore want the collection or list to be a property or member, by all means do so. Notionally:\n\nclass FootballTeam ...\n{\n    public ICollection\u003CPlayer\u003E Players { get { ... } }\n}\n\n\nYou might feel that you want people to be able to only enumerate the set of players, rather than count them, add to them or remove them. IEnumerable\u003CPlayer\u003E is a perfectly valid option to consider.\n\nYou might feel that none of these interfaces are useful in your model at all. This is less likely (IEnumerable\u003CT\u003E is useful in many situations) but it\u0027s still possible.\n\nAnyone who attempts to tell you that one of these it is categorically and definitively wrong in every case is misguided. Anyone who attempts to tell you it is categorically and definitively right in every case is misguided.\n\nMove on to Implementation\n\nOnce you\u0027ve decided on data and behaviour, you can make a decision about implementation. This includes which concrete classes you depend on via inheritance or composition.\n\nThis may not be a big step, and people often conflate design and implementation since it\u0027s quite possible to run through it all in your head in a second or two and start typing away.\n\nA Thought Experiment\n\nAn artificial example: as others have mentioned, a team is not always \u0022just\u0022 a collection of players. Do you maintain a collection of match scores for the team? Is the team interchangable with the club, in your model? If so, and if your team isa collection of players, perhaps it also isa collection of staff and/or a collection of scores. Then you end up with:\n\nclass FootballTeam : ... ICollection\u003CPlayer\u003E, \n                         ICollection\u003CStaffMember\u003E,\n                         ICollection\u003CScore\u003E\n{\n    ....\n}\n\n\nDesign notwithstanding, at this point in C# you won\u0027t be able to implement all of these by inheriting from List\u003CT\u003E anyway, since C# \u0022only\u0022 supports single inheritance. (If you\u0027ve tried this malarky in C\u002B\u002B, you may consider this a Good Thing.) Implementing one collection via inheritance and one via composition is likely to feel dirty. And properties such as Count become confusing to users unless you implement ILIst\u003CPlayer\u003E.Count and IList\u003CStaffMember\u003E.Count etc. explicitly, and then they\u0027re just painful rather than confusing. You can see where this is going; gut feeling whilst thinking down this avenue may well tell you it feels wrong to head in this direction (and rightly or wrongly, your colleagues might also if you implemented it this way!)\n\nThe Short Answer (Too Late)\n\nThe guideline about not inheriting from collection classes isn\u0027t C# specific, you\u0027ll find it in many programming languages. It is received wisdom not a law. One reason is that in practice composition is considered to often win out over inheritance in terms of comprehensibility, implementability and maintainability. It\u0027s more common with real world / domain objects to find useful and consistent \u0022hasa\u0022 relationships than useful and consistent \u0022isa\u0022 relationships unless you\u0027re deep in the abstract, most especially as time passes and the precise data and behaviour of objects in code changes. This shouldn\u0027t cause you to always rule out inheriting from collection classes; but it may be suggestive.\n    ","\nFirst of all, it has to do with usability. If you use inheritance, the Team class will expose behavior (methods) that are designed purely for object manipulation. For example, AsReadOnly() or CopyTo(obj) methods make no sense for the team object. Instead of the AddRange(items) method you would probably want a more descriptive AddPlayers(players) method.\n\nIf you want to use LINQ, implementing a generic interface such as ICollection\u003CT\u003E or IEnumerable\u003CT\u003E would make more sense.\n\nAs mentioned, composition is the right way to go about it. Just implement a list of players as a private variable.\n    ","\nA football team is not a list of football players. A football team is composed of a list of football players! \n\nThis is logically wrong:\n\nclass FootballTeam : List\u003CFootballPlayer\u003E \n{ \n    public string TeamName; \n    public int RunningTotal \n}\n\n\nand this is correct:\n\nclass FootballTeam \n{ \n    public List\u003CFootballPlayer\u003E players\n    public string TeamName; \n    public int RunningTotal \n}\n\n    ","\nLet me rewrite your question. so you might see the subject from a different perspective.\n\nWhen I need to represent a football team, I understand that it is basically a name. Like: \u0022The Eagles\u0022\n\nstring team = new string();\n\n\nThen later I realized teams also have players.\n\nWhy can\u0027t I just extend the string type so that it also holds a list of players?\n\nYour point of entry into the problem is arbitrary. Try to think what does a team have (properties), not what it is.\n\nAfter you do that, you could see if it shares properties with other classes. And think about inheritance.\n    ","\nIt depends on the context\n\nWhen you consider your team as a list of players, you are projecting the \u0022idea\u0022 of a foot ball team down to one aspect: You reduce the \u0022team\u0022 to the people you see on the field. This projection is only correct in a certain context. In a different context, this might be completely wrong. Imagine you want to become a sponsor of the team. So you have to talk to the managers of the team. In this context the team is projected to the list of its managers. And these two lists usually don\u0027t overlap very much. Other contexts are the current versus the former players, etc.\n\nUnclear semantics\n\nSo the problem with considering a team as a list of its players is that its semantic depends on the context and that it cannot be extended when the context changes. Additionally it is hard to express, which context you are using.\n\nClasses are extensible\n\nWhen you using a class with only one member (e.g. IList activePlayers), you can use the name of the member (and additionally its comment) to make the context clear. When there are additional contexts, you just add an additional member.\n\nClasses are more complex\n\nIn some cases it might be overkill to create an extra class. Each class definition must be loaded through the classloader and will be cached by the virtual machine. This costs you runtime performance and memory. When you have a very specific context it might be OK to consider a football team as a list of players. But in this case, you should really just use a  IList , not a class derived from it.\n\nConclusion / Considerations\n\nWhen you have a very specific context, it is OK to consider a team as a list of players. For example inside a method it is completely OK to write:\n\nIList\u003CPlayer\u003E footballTeam = ...\n\n\nWhen using F#, it can even be OK to create a type abbreviation:\n\ntype FootballTeam = IList\u003CPlayer\u003E\n\n\nBut when the context is broader or even unclear, you should not do this. This is especially the case when you create a new class whose context in which it may be used in the future is not clear. A warning sign is when you start to add additional attributes to your class (name of the team, coach, etc.). This is a clear sign that the context where the class will be used is not fixed and will change in the future. In this case you cannot consider the team as a list of players, but you should model the list of the (currently active, not injured, etc.) players as an attribute of the team.\n    ","\nJust because I think the other answers pretty much go off on a tangent of whether a football team \u0022is-a\u0022 List\u003CFootballPlayer\u003E or \u0022has-a\u0022 List\u003CFootballPlayer\u003E, which really doesn\u0027t answer this question as written.\n\nThe OP chiefly asks for clarification on guidelines for inheriting from List\u003CT\u003E:\n\n\n  A guideline says that you shouldn\u0027t inherit from List\u003CT\u003E. Why not?\n\n\nBecause List\u003CT\u003E has no virtual methods. This is less of a problem in your own code, since you can usually switch out the implementation with relatively little pain - but can be a much bigger deal in a public API.\n\n\n  What is a public API and why should I care?\n\n\nA public API is an interface you expose to 3rd party programmers. Think framework code. And recall that the guidelines being referenced are the \u0022.NET Framework Design Guidelines\u0022 and not the \u0022.NET Application Design Guidelines\u0022. There is a difference, and - generally speaking - public API design is a lot more strict.\n\n\n  If my current project does not and is not likely to ever have this public API, can I safely ignore this guideline? If I do inherit from List and it turns out I need a public API, what difficulties will I have?\n\n\nPretty much, yeah. You may want to consider the rationale behind it to see if it applies to your situation anyway, but if you\u0027re not building a public API then you don\u0027t particularly need to worry about API concerns like versioning (of which, this is a subset).\n\nIf you add a public API in the future, you will either need to abstract out your API from your implementation (by not exposing your List\u003CT\u003E directly) or violate the guidelines with the possible future pain that entails.\n\n\n  Why does it even matter? A list is a list. What could possibly change? What could I possibly want to change?\n\n\nDepends on the context, but since we\u0027re using FootballTeam as an example - imagine that you can\u0027t add a FootballPlayer if it would cause the team to go over the salary cap. A possible way of adding that would be something like:\n\n class FootballTeam : List\u003CFootballPlayer\u003E {\n     override void Add(FootballPlayer player) {\n        if (this.Sum(p =\u003E p.Salary) \u002B player.Salary \u003E SALARY_CAP)) {\n          throw new InvalidOperationException(\u0022Would exceed salary cap!\u0022);\n        }\n     }\n }\n\n\nAh...but you can\u0027t override Add because it\u0027s not virtual (for performance reasons). \n\nIf you\u0027re in an application (which, basically, means that you and all of your callers are compiled together) then you can now change to using IList\u003CT\u003E and fix up any compile errors:\n\n class FootballTeam : IList\u003CFootballPlayer\u003E {\n     private List\u003CFootballPlayer\u003E Players { get; set; }\n\n     override void Add(FootballPlayer player) {\n        if (this.Players.Sum(p =\u003E p.Salary) \u002B player.Salary \u003E SALARY_CAP)) {\n          throw new InvalidOperationException(\u0022Would exceed salary cap!\u0022);\n        }\n     }\n     /* boiler plate for rest of IList */\n }\n\n\nbut, if you\u0027ve publically exposed to a 3rd party you just made a breaking change that will cause compile and/or runtime errors.\n\nTL;DR - the guidelines are for public APIs. For private APIs, do what you want.\n    ","\nDoes allowing people to say\n\nmyTeam.subList(3, 5);\n\n\nmake any sense at all? If not then it shouldn\u0027t be a List.\n    ","\nIt depends on the behaviour of your \u0022team\u0022 object.  If it behaves just like a collection, it might be OK to represent it first with a plain List.  Then you might start to notice that you keep duplicating code that iterates on the list; at this point you have the option of creating a FootballTeam object that wraps the list of players.  The FootballTeam class becomes the home for all the code that iterates on the list of players.\n\n\n  It makes my code needlessly verbose. I must now call my_team.Players.Count instead of just my_team.Count. Thankfully, with C# I can define indexers to make indexing transparent, and forward all the methods of the internal List... But that\u0027s a lot of code! What do I get for all that work?\n\n\nEncapsulation.  Your clients need not know what goes on inside of FootballTeam.  For all your clients know, it might be implemented by looking the list of players up in a database.  They don\u0027t need to know, and this improves your design.\n\n\n  It just plain doesn\u0027t make any sense. A football team doesn\u0027t \u0022have\u0022 a list of players. It is the list of players. You don\u0027t say \u0022John McFootballer has joined SomeTeam\u0027s players\u0022. You say \u0022John has joined SomeTeam\u0022. You don\u0027t add a letter to \u0022a string\u0027s characters\u0022, you add a letter to a string. You don\u0027t add a book to a library\u0027s books, you add a book to a library.\n\n\nExactly :) you will say footballTeam.Add(john), not footballTeam.List.Add(john).  The internal list will not be visible.\n    ","\nThere are a lot excellent answers here, but I want to touch on something I didn\u0027t see mentioned: Object oriented design is about empowering objects.\n\nYou want to encapsulate all your rules, additional work and internal details inside an appropriate object. In this way other objects interacting with this one don\u0027t have to worry about it all. In fact, you want to go a step further and actively prevent other objects from bypassing these internals.\n\nWhen you inherit from List, all other objects can see you as a List. They have direct access to the methods for adding and removing players. And you\u0027ll have lost your control; for example:\n\nSuppose you want to differentiate when a player leaves by knowing whether they retired, resigned or were fired. You could implement a RemovePlayer method that takes an appropriate input enum. However, by inheriting from List, you would be unable to prevent direct access to Remove, RemoveAll and even Clear. As a result, you\u0027ve actually disempowered your FootballTeam class.\n\n\n\nAdditional thoughts on encapsulation... You raised the following concern:\n\n\n  It makes my code needlessly verbose. I must now call my_team.Players.Count instead of just my_team.Count.\n\n\nYou\u0027re correct, that would be needlessly verbose for all clients to use you team. However, that problem is very small in comparison to the fact that you\u0027ve exposed List Players to all and sundry so they can fiddle with your team without your consent.\n\nYou go on to say:\n\n\n  It just plain doesn\u0027t make any sense. A football team doesn\u0027t \u0022have\u0022 a list of players. It is the list of players. You don\u0027t say \u0022John McFootballer has joined SomeTeam\u0027s players\u0022. You say \u0022John has joined SomeTeam\u0022.\n\n\nYou\u0027re wrong about the first bit: Drop the word \u0027list\u0027, and it\u0027s actually obvious that a team does have players.\nHowever, you hit the nail on the head with the second. You don\u0027t want clients calling ateam.Players.Add(...). You do want them calling ateam.AddPlayer(...). And your implemention would (possibly amongst other things) call Players.Add(...) internally.\n\n\n\nHopefully you can see how important encapsulation is to the objective of empowering your objects. You want to allow each class to do its job well without fear of interference from other objects.\n    ","\n\n  What is the correct C# way of representing a data structure...\n\n\nRemeber, \u0022All models are wrong, but some are useful.\u0022 -George E. P. Box\n\nThere is no a \u0022correct way\u0022, only a useful one.\n\nChoose one that is useful to you and/your users. That\u0027s it. Develop economically, don\u0027t over-engineer. The less code you write, the less code you will need to debug. (read the following editions).\n\n-- Edited\n\nMy best answer would be... it depends. Inheriting from a List would expose the clients of this class to methods that may be should not be exposed, primarily because FootballTeam looks like a business entity. \n\n-- Edition 2\n\nI sincerely don\u0027t remember to what I was referring on the \u201Cdon\u0027t over-engineer\u201D comment. While I believe the KISS mindset is a good guide, I want to emphasize that inheriting a business class from List would create more problems than it resolves, due abstraction leakage.\n\nOn the other hand, I believe there are a limited number of cases where simply to inherit from List is useful. As I wrote in the previous edition, it depends. The answer to each case is heavily influenced by both knowledge, experience and personal preferences.\n\nThanks to @kai for helping me to think more precisely about the answer.\n    ","\nThis reminds me of the \u0022Is a\u0022 versus \u0022has a\u0022 tradeoff.  Sometimes it is easier and makesmore sense to inherit directly from a super class.  Other times it makes more sense to create a standalone class and include the class you would have inherited from as a member variable.  You can still access the functionality of the class but are not bound to the interface or any other constraints that might come from inheriting from the class.\n\nWhich do you do?  As with a lot of things...it depends on the context.  The guide I would use is that in order to inherit from another class there truly should be an \u0022is a\u0022 relationship.  So if you a writing a class called BMW, it could inherit from Car because a BMW truly is a car.  A Horse class can inherit from the Mammal class because a horse actually is a mammal in real life and any Mammal functionality should be relevant to Horse.  But can you say that a team is a list?  From what I can tell, it does not seem like a Team really \u0022is a\u0022 List.  So in this case, I would have a List as a member variable.\n    ","\nMy dirty secret: I don\u0027t care what people say, and I do it. .NET Framework is spread with \u0022XxxxCollection\u0022 (UIElementCollection for top of my head example).\n\nSo what stops me saying:\n\nteam.Players.ByName(\u0022Nicolas\u0022)\n\n\nWhen I find it better than\n\nteam.ByName(\u0022Nicolas\u0022)\n\n\nMoreover, my PlayerCollection might be used by other class, like \u0022Club\u0022 without any code duplication.\n\nclub.Players.ByName(\u0022Nicolas\u0022)\n\n\nBest practices of yesterday, might not be the one of tomorrow. There is no reason behind most best practices, most are only wide agreement among the community. Instead of asking the community if it will blame you when you do that ask yourself, what is more readable and maintainable?\n\nteam.Players.ByName(\u0022Nicolas\u0022) \n\n\nor\n\nteam.ByName(\u0022Nicolas\u0022)\n\n\nReally. Do you have any doubt? Now maybe you need to play with other technical constraints that prevent you to use List\u003CT\u003E in your real use case. But don\u0027t add a constraint that should not exist. If Microsoft did not document the why, then it is surely a \u0022best practice\u0022 coming from nowhere.\n    ","\nWhat the guidelines say is that the public API should not reveal the internal design decision of whether you are using a list, a set, a dictionary, a tree or whatever. A \u0022team\u0022 is not necessarily a list. You may implement it as a list but users of your public API should use you class on a need to know basis. This allows you to change your decision and use a different data structure without affecting the public interface.\n    ","\nWhen they say List\u003CT\u003E is \u0022optimized\u0022 I think they want to mean that it doesn\u0027t have features like virtual methods which are bit more expensive. So the problem is that once you expose List\u003CT\u003E in your public API, you loose ability to enforce business rules or customize its functionality later. But if you are using this inherited class as internal within your project (as opposed to potentially exposed to thousands of your customers/partners/other teams as API) then it may be OK if it saves your time and it is the functionality you want to duplicate. The advantage of inheriting from List\u003CT\u003E is that you eliminate lot of dumb wrapper code that is just never going to be customized in foreseeable future. Also if you want your class to explicitly have exact same semantics as List\u003CT\u003E for the life of your APIs then also it may be OK.\n\nI often see lot of people doing tons of extra work just because of FxCop rule says so or someone\u0027s blog says it\u0027s a \u0022bad\u0022 practice. Many times, this turns code in to design pattern palooza weirdness. As with lot of guideline, treat it as guideline that can have exceptions.\n    ","\nWhile I don\u0027t have a complex comparison as most of these answers do, I would like to share my method for handling this situation. By extending IEnumerable\u003CT\u003E, you can allow your Team class to support Linq query extensions, without publicly exposing all the methods and properties of List\u003CT\u003E.\n\nclass Team : IEnumerable\u003CPlayer\u003E\n{\n    private readonly List\u003CPlayer\u003E playerList;\n\n    public Team()\n    {\n        playerList = new List\u003CPlayer\u003E();\n    }\n\n    public Enumerator GetEnumerator()\n    {\n        return playerList.GetEnumerator();\n    }\n\n    ...\n}\n\nclass Player\n{\n    ...\n}\n\n    ","\nIf your class users need all the methods and properties** List has, you should derive your class from it. If they don\u0027t need them, enclose the List and make wrappers for methods your class users actually need. \n\nThis is a strict rule, if you write a public API, or any other code that will be used by many people. You may ignore this rule if you have a tiny app and no more than 2 developers. This will save you some time. \n\nFor tiny apps, you may also consider choosing another, less strict language. Ruby, JavaScript - anything that allows you to write less code.\n    ","\nI just wanted to add that Bertrand Meyer, the inventor of Eiffel and design by contract, would have Team inherit from List\u003CPlayer\u003E without so much as batting an eyelid.\n\nIn his book, Object-Oriented Software Construction, he discusses the implementation of a GUI system where rectangular windows can have child windows. He simply has Window inherit from both Rectangle and Tree\u003CWindow\u003E to reuse the implementation.\n\nHowever, C# is not Eiffel. The latter supports multiple inheritance and renaming of features. In C#, when you subclass, you inherit both the interface and the implemenation. You can override the implementation, but the calling conventions are copied directly from the superclass. In Eiffel, however, you can modify the names of the public methods, so you can rename Add and Remove to Hire and Fire in your Team. If an instance of Team is upcast back to List\u003CPlayer\u003E, the caller will use Add and Remove to modify it, but your virtual methods Hire and Fire will be called.\n    ","\nProblems with serializing\n\nOne aspect is missing. Classes that inherit from List\u003C\u003E can\u0027t be serialized correctly using XmlSerializer. In that case DataContractSerializer must be used instead, or an own serializing implementation is needed.\n\npublic class DemoList : List\u003CDemo\u003E\n{\n    // using XmlSerializer this properties won\u0027t be seralized:\n    string AnyPropertyInDerivedFromList { get; set; }     \n}\n\npublic class Demo\n{\n    // this properties will be seralized\n    string AnyPropetyInDemo { get; set; }  \n}\n\n\nFurther reading: When a class is inherited from List\u003C\u003E, XmlSerializer doesn\u0027t serialize other attributes\n    ","\nI think I don\u0027t agree with your generalization.  A team isn\u0027t just a collection of players.  A team has so much more information about it - name, emblem, collection of management/admin staff, collection of coaching crew, then collection of players. So properly, your FootballTeam class should have 3 collections and not itself be a collection; if it is to properly model the real world.\n\nYou could consider a PlayerCollection class which like the Specialized StringCollection offers some other facilities - like validation and checks before objects are added to or removed from the internal store.\n\nPerhaps, the notion of a PlayerCollection betters suits your preferred approach?\n\npublic class PlayerCollection : Collection\u003CPlayer\u003E \n{ \n}\n\n\nAnd then the FootballTeam can look like this:\n\npublic class FootballTeam \n{ \n    public string Name { get; set; }\n    public string Location { get; set; }\n\n    public ManagementCollection Management { get; protected set; } = new ManagementCollection();\n\n    public CoachingCollection CoachingCrew { get; protected set; } = new CoachingCollection();\n\n    public PlayerCollection Players { get; protected set; } = new PlayerCollection();\n}\n\n    ","\nPrefer Interfaces over Classes\n\nClasses should avoid deriving from classes and instead implement the minimal interfaces necessary. \n\nInheritance breaks Encapsulation\n\nDeriving from classes breaks encapsulation: \n\n\nexposes internal details about how your collection is implemented\ndeclares an interface (set of public functions and properties) that may not be appropriate\n\n\nAmong other things this makes it harder to refactor your code. \n\nClasses are an Implementation Detail\n\nClasses are an implementation detail that should be hidden from other parts of your code. \nIn short a System.List is a specific implementation of an abstract data type, that may or may not be appropriate now and in the future. \n\nConceptually the fact that the System.List data type is called \u0022list\u0022 is a bit of a red-herring. A System.List\u003CT\u003E is a mutable ordered collection that supports amortized O(1) operations for adding, inserting, and removing elements, and O(1) operations for retrieving the number of elements or getting and setting element by index.\n\nThe Smaller the Interface the more Flexible the Code\n\nWhen designing a data structure, the simpler the interface is, the more flexible the code is. Just look at how powerful LINQ is for a demonstration of this.\n\nHow to Choose Interfaces\n\nWhen you think \u0022list\u0022 you should start by saying to yourself, \u0022I need to represent a collection of baseball players\u0022. So let\u0027s say you decide to model this with a class. What you should do first is decide what the minimal amount of interfaces that this class will need to expose. \n\nSome questions that can help guide this process:\n\n\nDo I need to have the count? If not consider implementing IEnumerable\u003CT\u003E\nIs this collection going to change after it has been initialized? If not consider IReadonlyList\u003CT\u003E. \nIs it important that I can access items by index? Consider ICollection\u003CT\u003E\nIs the order in which I add items to the collection important? Maybe it is an ISet\u003CT\u003E?\nIf you indeed want these thing then go ahead and implement IList\u003CT\u003E. \n\n\nThis way you will not be coupling other parts of the code to implementation details of your baseball players collection and will be free to change how it is implemented as long as you respect the interface.\n\nBy taking this approach you will find that code becomes easier to read, refactor, and reuse. \n\nNotes about Avoiding Boilerplate\n\nImplementing interfaces in a modern IDE should be easy. Right click and choose \u0022Implement Interface\u0022. Then forward all of the implementations to a member class if you need to. \n\nThat said, if you find you are writing lots of boilerplate, it is potentially because you are exposing more functions than you should be. It is the same reason you shouldn\u0027t inherit from a class.\n\nYou can also design smaller interfaces that make sense for your application, and maybe just a couple of helper extension functions to map those interfaces to any others that you need. This is the approach I took in my own IArray interface for the LinqArray library.\n    ","\n\n  When is it acceptable?\n\n\nTo quote Eric Lippert:\n\n\n  When you\u0027re building a mechanism that extends the List\u003CT\u003E mechanism.\n\n\nFor example, you are tired of the absence of the AddRange method in IList\u003CT\u003E:\n\npublic interface IMoreConvenientListInterface\u003CT\u003E : IList\u003CT\u003E\n{\n    void AddRange(IEnumerable\u003CT\u003E collection);\n}\n\npublic class MoreConvenientList\u003CT\u003E : List\u003CT\u003E, IMoreConvenientListInterface\u003CT\u003E { }\n\n    ","\n                \n                Although the other answers have been very helpful, I think this one addresses my concerns most directly. As for exaggerating the amount of code, you are right that it isn\u0027t that much work in the end, but I do get confused very easily when I include some code in my program without understanding why I am including it.\n                \n\u2013\u00A0Superbest\n                Feb 11 \u002714 at 6:19\n            ","\n                \n                @Superbest: Glad I could help! You are right to listen to those doubts; if you don\u0027t understand why you\u0027re writing some code, either figure it out, or write different code that you do understand.\n                \n\u2013\u00A0Eric Lippert\n                Feb 11 \u002714 at 6:25\n            ","\n                \n                @Mehrdad But you seem to forget the golden rules of optimization: 1) don\u0027t do it, 2) don\u0027t do it yet, and 3) don\u0027t do it without first doing performance profiles to show what needs optimizing.\n                \n\u2013\u00A0AJMansfield\n                Feb 11 \u002714 at 12:58\n            ","\n                \n                @Mehrdad: Honestly, if your application requires that you care about the performance burden of, say, virtual methods, then any modern language (C#, Java, etc) is not the language for you. I have a laptop right here that could run a simulation of every arcade game I played as a child simultaneously. This allows me to not worry about a level of indirection here and there.\n                \n\u2013\u00A0Eric Lippert\n                Feb 11 \u002714 at 14:37\n            ","\n                \n                @Superbest: Now we are definitely at the \u0022composition not inheritance\u0022 end of the spectrum. A rocket is composed of rocket parts. A rocket is not \u0022a special kind of parts list\u0022! I would suggest to you that you trim it down further; why a list, as opposed to an IEnumerable\u003CT\u003E -- a sequence?\n                \n\u2013\u00A0Eric Lippert\n                Feb 11 \u002714 at 18:15\n            ","\n                \n                @Brian: Except that you can\u0027t create a generic using alias, all types must be concrete. In my example, List\u003CT\u003E is extended as a private inner class which uses generics to simplify the usage and declaration of List\u003CT\u003E. If the extension was merely class FootballRoster : List\u003CFootballPlayer\u003E { }, then yes I could have used an alias instead. I guess it\u0027s worth noting that you could add additional members/functionality, but it is limited since you cannot override important members of List\u003CT\u003E.\n                \n\u2013\u00A0myermian\n                Feb 11 \u002714 at 16:33\n                        \n                            \n                        \n            ","\n                \n                If this were Programmers.SE, I\u0027d agree with the current range of answer votes, but, as it is an SO post, this answer at least attempts to answer the C# (.NET) specific issues, even though there are definite general design issues.\n                \n\u2013\u00A0Mark Hurd\n                Feb 12 \u002714 at 2:10\n            ","\n                \n                Collection\u003CT\u003E allows for members (i.e. Add, Remove, etc.) to be overridden Now that is a good reason not to inherit from List. The others answers have way too much philosophy.\n                \n\u2013\u00A0Navin\n                Feb 12 \u002714 at 3:54\n            ","\n                \n                If you call List\u003CT\u003E.GetEnumerator(), you get a struct named Enumerator. If you call IList\u003CT\u003E.GetEnumerator(), you get a variable of type IEnumerable\u003CT\u003E that happens to contain the boxed version of said struct. In the former case, foreach will call the methods directly. In the latter, all calls have to be virtually dispatched via the interface, making each call slower. (Roughly twice as slow on my machine.)\n                \n\u2013\u00A0Jonathan Allen\n                Apr 20 \u002716 at 19:58\n                        \n                            \n                        \n            ","\n                \n                You are missing the point entirely. foreach doesn\u0027t care whether or not Enumerator implements the IEnumerable\u003CT\u003E interface. If it can find the methods it needs on Enumerator, then it won\u0027t use IEnumerable\u003CT\u003E. If you actually decompile the code, you can see how foreach avoids using virtual dispatch calls when iterating over List\u003CT\u003E, but will with IList\u003CT\u003E.\n                \n\u2013\u00A0Jonathan Allen\n                Apr 20 \u002716 at 23:39\n            ","\n                \n                I would expect that your second example is a Football Club, not a football team.   A football club has managers and admin etc.  From this source:  \u0022A football team is the collective name given to a group of players ... Such teams could be selected to play in a match against an opposing team, to represent a football club ...\u0022.  So it is my opinion that a team is a list of players (or perhaps more accurately a collection of players).\n                \n\u2013\u00A0Ben\n                Apr 13 \u002715 at 17:13\n            ","\n                \n                More optimised private readonly List\u003CT\u003E _roster = new List\u003CT\u003E(44);\n                \n\u2013\u00A0SiD\n                Jul 20 \u002716 at 12:24\n            ","\n                \n                It\u0027s necessary to import System.Linq namespace.\n                \n\u2013\u00A0Davide Cannizzo\n                Dec 12 \u002717 at 15:18\n            ","\n                \n                @Ben In my opinion Nean Der Thal answer is correct. A football team contains management (trainer, assistant, etc.), players (and an important note: \u0022players selected for a match\u0022 because not all players in a team will be selected for eg. a champions league match), admins, etc. A football club is something like people at the office, the stadium, the fans, board of the club and last but not least: Multiple teams (such as the first team, the women\u0027s team, the youth teams etc.) Don\u0027t believe everything Wikipedia says ;)\n                \n\u2013\u00A0E. Verdi\n                Oct 21 at 6:25\n            ","\n                \n                @E.Verdi I think the second picture has a stadium in the background and, as you have suggested, it makes it look like it represents a club rather than just a team.  At the end of the day the definitions of these terms are just semantics (what I might call a team others might call a roster etc).  I think the point is that how you model your data depends on what it is going to get used for.  This is a good point and I think the pictures help to show this :)\n                \n\u2013\u00A0Ben\n                Nov 12 at 16:04\n                        \n                            \n                        \n            ","\n                \n                Expanding on #2, it doesn\u0027t make sense for a List to have-a List.\n                \n\u2013\u00A0Cruncher\n                Feb 12 \u002714 at 13:47\n            ","\n                \n                First, the question has nothing to do with composition vs inheritance. The answer is OP doesn\u0027t want to implement a more specific kind of list, so he should not extend List\u003C\u003E. I\u0027m twisted cause you have very high scores on stackoverflow and should know this clearly and people trust what you say, so by now a min of 55 people who upvoted and whose idea are confused believe either a way or the other is ok to build a system but clearly it\u0027s not! #no-rage\n                \n\u2013\u00A0Mauro Sampietro\n                Aug 9 \u002716 at 13:16\n            ","\n                \n                @sam He wants the behaviour of the list. He has two choices, he can extend list (inheritance) or he can include a list inside his object (composition). Perhaps you have misunderstood part of either the question or the answer rather than 55 people being wrong and you right? :)\n                \n\u2013\u00A0Tim B\n                Aug 9 \u002716 at 14:24\n            ","\n                \n                Yes. It\u0027s a degenerate case with only one super and sub but I\u0027m giving the more general explanation for his specific question. He may only have one team and that may always have one list but the choice is still to inherit the list or include it as an internal object. Once you start including multiple types of team (football.  Cricket. Etc) and they start being more than just a list of players you see how you have the full composition vs inheritance question. Looking at the big picture is important in cases like this to avoid wrong choices early that then mean a lot of refactoring later.\n                \n\u2013\u00A0Tim B\n                Aug 10 \u002716 at 8:55\n            ","\n                \n                The OP did not ask for Composition, but the use case is a clear-cut example of X:Y problem of which one of the 4 object oriented programming principles is broken, misused, or not fully understood. The more clear answer is either write a specialized collection like a Stack or Queue (which does not appear to fit the use case) or to understand composition. A Football team is NOT a List of Football players. Whether the OP asked for it explicitly or not is irrelevant, without understanding Abstraction, Encapsulation, Inheritance, and Polymorphism they will not understand the answer, ergo, X:Y amok\n                \n\u2013\u00A0Julia McGuigan\n                Feb 1 \u002718 at 17:42\n            ","\n                \n                Nice catch on the List versus Set. That seems to be an error only too commonly made. When there can only be one instance of an element in a collection, some sort of set, or dictionary should be a preferred candidate for the implementation. It is ok to have a team with two players with the same name. It is not ok to have the one player included twice at the same time.\n                \n\u2013\u00A0Fred Mitchell\n                Feb 11 \u002714 at 21:26\n            ","\n                \n                \u002B1 for some good points, though it\u0027s more important to ask \u0022can a data structure reasonably support everything useful (ideally short and long term)\u0022, rather than \u0022does the data structure do more than is useful\u0022.\n                \n\u2013\u00A0Tony Delroy\n                Feb 17 \u002714 at 10:26\n            ","\n                \n                @TonyD Well, the points I am raising is not that one should check \u0022 if the data structure does more than what is useful\u0022. It is to check \u0022If the Parent data structure does something that is irrelevant, meaningless or counter-intuitive to the behavior what the Child class might imply\u0022.\n                \n\u2013\u00A0Satyan Raina\n                Feb 17 \u002714 at 11:07\n            ","\n                \n                @TonyD There is actually a problem with having irrelevant characteristics derived from a Parent as it would fail the negative tests in many cases. A programmer could extend Human{ eat(); run(); write();} from a Gorilla{ eat(); run(); swing();} thinking there is nothing wrong with a human with an extra feature of being able to swing. And then in a game world your human suddenly starts to bypass all supposed land hurdles by just swinging over the trees. Unless explicitly specified, a practical Human should not be able to swing. Such a design leaves the api very open to abuse and confusing\n                \n\u2013\u00A0Satyan Raina\n                Feb 17 \u002714 at 14:51\n            ","\n                \n                @TonyD I am not suggesting that the Player class should be derived from HashSet either. I am suggesting the Player class should \u0027in most cases\u0027 be implemented using a HashSet via Composition and that is totally an implementation level detail, not a design level one (that is why I mentioned it as a sidenote to my answer). It could very well be implemented using a list if there is a valid justification for such an implementation. So to answer your question, Is it necessary to have O(1) lookup by key? No. Therefore one should NOT extend a Player from a HashSet also.\n                \n\u2013\u00A0Satyan Raina\n                Feb 18 \u002714 at 10:07\n            ","\n                \n                If the type of every player would classify it as belonging to either DefensivePlayers, OffensivePlayers, or OtherPlayers, it might be legitimately useful to have a type which could be used by code which expects a List\u003CPlayer\u003E but also included members DefensivePlayers, OffsensivePlayers, or SpecialPlayers of type IList\u003CDefensivePlayer\u003E, IList\u003COffensivePlayer\u003E, and IList\u003CPlayer\u003E.  One could use a separate object to cache the separate lists, but encapsulating them within the same object as the main list would seem cleaner [use the invalidation of a list enumerator...\n                \n\u2013\u00A0supercat\n                Sep 11 \u002714 at 20:48\n            ","\n                \n                ...as a cue for the fact that the main list has changed and the sub-lists will need to be regenerated when they\u0027re next accessed].\n                \n\u2013\u00A0supercat\n                Sep 11 \u002714 at 20:48\n            ","\n                \n                While I agree with the point made, it really tears my soul apart to see someone give design advice and suggest exposing a concrete List\u003CT\u003E with a public getter and setter in a business object :(\n                \n\u2013\u00A0sara\n                Feb 1 \u002716 at 9:56\n            ","\n                \n                This doesn\u0027t explain why.  The OP knows that most other programmers feel this way, he just doesn\u0027t understand why it\u0027s important.  This is only really providing information already in the question.\n                \n\u2013\u00A0Servy\n                Feb 11 \u002714 at 16:48\n            ","\n                \n                This is the first thing I thought of too, how his data was just modeled incorrectly. So the reason why is, your data model is incorrect.\n                \n\u2013\u00A0rball\n                Feb 11 \u002714 at 17:11\n            ","\n                \n                Why not inherit from list? Because he does not want a more specific kind of list.\n                \n\u2013\u00A0Mauro Sampietro\n                Feb 13 \u002714 at 13:36\n            ","\n                \n                I don\u0027t think the second example is correct. You are exposing state and are thus breaking encapsulation. State should be hidden/internal to the object and the way to mutate this state should be via public methods. Exactly which methods is something to be determined from the business requirements, but it should be on a \u0022need this right now\u0022-basis, not \u0022might be handy some time I dunno\u0022-basis. Keep your api tight and you\u0027ll save yourself time and effort.\n                \n\u2013\u00A0sara\n                Sep 15 \u002715 at 15:28\n            ","\n                \n                Encapsulation is not the point of the question. I focus on not extending a type if you don\u0027t want that type to behave in a more specific way. Those fields should be autoproperties in c# and get/set methods in other languages but here in this context that is totally superfluous\n                \n\u2013\u00A0Mauro Sampietro\n                Sep 16 \u002715 at 7:46\n            ","\n                \n                That\u0027s a good point - one could think of the team as just a name. However, if my application aims to work with the actions of the players, then that thinking is a bit less obvious. Anyway, it seems that the issue comes down to composition vs. inheritance in the end.\n                \n\u2013\u00A0Superbest\n                Feb 16 \u002714 at 20:34\n            ","\n                \n                That is one meritorious way to look at it.as a side note please consider this: A man of wealth owns several football teams, he gives one to a friend as a gift, the friend changes the name of the team, fires the coach, and replaces all the players. The friends team meets the men\u0027s team on the green and as the men\u0027s team is losing he says \u0022I can\u0027t believe you are beating me with the team I gave you!\u0022 is the man correct? how would you check this?\n                \n\u2013\u00A0user1852503\n                Feb 17 \u002714 at 5:59\n                        \n                            \n                        \n            ","\n                \n                It might if you called it myTeam.subTeam(3, 5);\n                \n\u2013\u00A0Sam Leach\n                Feb 14 \u002714 at 21:01\n            ","\n                \n                @SamLeach Assuming that\u0027s true, then you will still need composition not inheritance. As subList won\u0027t even return a Team anymore.\n                \n\u2013\u00A0Cruncher\n                Feb 18 \u002714 at 15:52\n            ","\n                \n                OP wants to understand how to MODEL REALITY but then defines a football team as a list of football players (which is wrong conceptually). This is the problem. Any other argument is misleding to him in my opinion.\n                \n\u2013\u00A0Mauro Sampietro\n                Dec 22 \u002714 at 8:32\n            ","\n                \n                I disagree that the list of players is wrong conceptually.  Not necessarily.  As someone else wrote in this page, \u0022All models are wrong, but some are useful\u0022\n                \n\u2013\u00A0xpmatteo\n                Dec 23 \u002714 at 12:20\n                        \n                            \n                        \n            ","\n                \n                Right models are hard to get, once done they are the ones useful. If a model can be misused it is wrong conceptually. stackoverflow.com/a/21706411/711061\n                \n\u2013\u00A0Mauro Sampietro\n                Dec 23 \u002714 at 12:49\n            ","\n                \n                My best answer would be... it depends. Inheriting from a List would expose the clients of this class to methods that may be should not be exposed, primarily because FootballTeam looks like a business entity. I don\u0027t know if I should edit this answer or post another, any idea?\n                \n\u2013\u00A0ArturoTena\n                Feb 11 \u002714 at 18:23\n                        \n                            \n                        \n            ","\n                \n                The bit about \u0022inheriting from a List would expose the clients of this class to methods that may be should not be exposed\u0022 is precisely what makes inheriting from List an absolute no-no. Once exposed, they gradually get abused and mis-used over time. Saving time now by \u0022developing economically\u0022 can easily lead to tenfold the savings lost in future: debugging the abuses and eventually refactoring to fix the inheritance. The YAGNI principle can also be thought of as meaning: You Ain\u0027t Gonna Need all those methods from List, so don\u0027t expose them.\n                \n\u2013\u00A0Disillusioned\n                Feb 15 \u002714 at 18:59\n            ","\n                \n                \u0022don\u0027t over-engineer. The less code you write, the less code you will need to debug.\u0022 \u003C-- I think this is misleading. Encapsulation and composition over inheritance is NOT over-engineering and it does not cause more need for debugging. By encapsulating you are LIMITING the number of ways clients can use (and abuse) your class and thus you have fewer entry points that need testing and input validation. Inheriting from List because it\u0027s quick and easy and thus would lead to fewer bugs is plain wrong, it\u0027s just bad design and bad design leads to a lot more bugs than \u0022over engineering\u0022.\n                \n\u2013\u00A0sara\n                Sep 15 \u002715 at 15:40\n            ","\n                \n                @kai I agree with you in every point. I sincerely don\u0027t remember to what I was referring on the \u201Cdon\u0027t over-engineer\u201D comment. OTOH, I believe there are a limited number of cases where simply to inherit from List is useful. As I wrote in the later edition, it depends. The answer to each case is heavily influenced by both knowledge, experience and personal preferences. Like everything in life. ;-)\n                \n\u2013\u00A0ArturoTena\n                Sep 15 \u002715 at 22:20\n            ","\n                \n                While it is important to have the courage and initiative to challenge the accepted wisdom when appropriate, I think that it is wise to first understand why the accepted wisdom has come to be accepted in the first place, before embarking to challenge it. -1 because \u0022Ignore that guideline!\u0022 is not a good answer to \u0022Why does this guideline exist?\u0022 Incidentally, the community did not just \u0022blame me\u0022 in this case, but provided a satisfactory explanation that succeeded in persuading me.\n                \n\u2013\u00A0Superbest\n                Feb 12 \u002714 at 13:59\n                        \n                            \n                        \n            ","\n                \n                It is actually, when no explanation is made, your only way is pushing the boundary and testing not being afraid of infraction. Now. Ask yourself, even if List\u003CT\u003E was not a good idea. How much a pain would it be to change inheritance from List\u003CT\u003E to Collection\u003CT\u003E ? A guess : Less time than posting on the forum, whatever the length of your code with refactoring tools. Now it is a good question, but not a practical one.\n                \n\u2013\u00A0Nicolas Dorier\n                Feb 12 \u002714 at 14:02\n                        \n                            \n                        \n            ","\n                \n                To clarify: I\u0027m certainly not waiting on SO\u0027s blessing to inherit from whatever I want however I want it, but the point of my question was to understand the considerations that should go into this decision, and why so many experienced programmers seem to have decided the opposite of what I did. Collection\u003CT\u003E is not the same as List\u003CT\u003E so it may require quite a bit of work to verify in a large-ish project.\n                \n\u2013\u00A0Superbest\n                Feb 12 \u002714 at 14:31\n            ","\n                \n                team.ByName(\u0022Nicolas\u0022) means \u0022Nicolas\u0022 is the name of the team.\n                \n\u2013\u00A0Sam Leach\n                Feb 14 \u002714 at 20:54\n                        \n                            \n                        \n            ","\n                \n                \u0022don\u0027t add a constraint that should not exist\u0022 Au contraire, don\u0027t expose anything you don\u0027t have a good reason to expose. This is not purism or blind zealotry, nor is it the latest design fashion trend. It is basic object oriented design 101, beginner level. It\u0027s not a secret why this \u0022rule\u0022 exists, it is the result of several decades of experience.\n                \n\u2013\u00A0sara\n                Sep 15 \u002715 at 15:45\n            ","\n                \n                In retrospect, after the explanation of @EricLippert and others, you\u0027ve actually given a great answer for the API part of my question - in addition to what you said, if I do class FootballTeam : List\u003CFootballPlayers\u003E, users of my class will be able to tell I\u0027ve inherited from List\u003CT\u003E by using reflection, seeing the List\u003CT\u003E methods that don\u0027t make sense for a football team, and being able to use FootballTeam into List\u003CT\u003E, so I would be revealing implementation details to the client (unnecessarily).\n                \n\u2013\u00A0Superbest\n                Feb 18 \u002714 at 17:19\n                        \n                            \n                        \n            ","\n                \n                Here the problem is not multiple inheritance, mixins (etc..) or how to deal with their absence. In any language, even in human language a team is not a list of people but composed of a list of people. This is an abstract concept. If Bertrand Meyer or anyone manages a team by subclassing List is doing wrong. You should subclass a List if you want a more specific kind of list. Hope you agree.\n                \n\u2013\u00A0Mauro Sampietro\n                Jul 7 \u002715 at 13:57\n            ","\n                \n                That depends on what inheritance is to you. By itself, it is an abstract operation, it doesn\u0027t mean two classes are in an \u0022is a special kind of\u0022 relationship, even though it is the mainstream interpretation. However, inheritance can be treated as a mechanism for implementation reuse if the language design supports it, even though composition is the pereferred alternative nowadays.\n                \n\u2013\u00A0Alexey\n                Jul 7 \u002715 at 19:12\n            ","\n                \n                Creating an interface will prevent you from deriving from \u0022wrong\u0022 classes in the first place, because you then exactly see what behaviour you are looking for. That was my first thought tbh.\n                \n\u2013\u00A0cmxl\n                Aug 9 at 8:15\n            "]}]